<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.gusibi.site</id>
    <title>顾斯比</title>
    <updated>2020-08-16T15:30:46.166Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.gusibi.site"/>
    <link rel="self" href="http://blog.gusibi.site/atom.xml"/>
    <subtitle>这个人很懒
&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?eb5ce2e96866802764816b111f5a3ffb&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;</subtitle>
    <logo>http://blog.gusibi.site/images/avatar.png</logo>
    <icon>http://blog.gusibi.site/favicon.ico</icon>
    <rights>All rights reserved 2020, 顾斯比</rights>
    <entry>
        <title type="html"><![CDATA[【译】golang 可变参数函数终极指南]]></title>
        <id>http://blog.gusibi.site/post/Ultimate-Guide-to-Go-Variadic-Functions/</id>
        <link href="http://blog.gusibi.site/post/Ultimate-Guide-to-Go-Variadic-Functions/">
        </link>
        <updated>2020-08-16T15:02:05.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://blog.gusibi.site/post-images/1597590154875.png" alt="" loading="lazy"></figure>
<blockquote>
<p>使用常用模式学习关于go语言可变参数函数的一切</p>
</blockquote>
<p><a href="https://blog.learngoprogramming.com/golang-variadic-funcs-how-to-patterns-369408f19085">Ultimate Guide to Go Variadic Functions 原文地址</a></p>
<h1 id="什么是可变参数函数">什么是可变参数函数？</h1>
<p>可变参数函数是指传入参数是可变数量（0到更多）的函数。在输入的变量类型前面的省略号(三点)前缀即构成一个有效的变量。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/-kn_OQyfZYXrKDs4rz2CYh3wtwEQUaEa5gjqqcZd1Db8S-Bm1UtlS3R5Pg_7wT-j" alt="2" loading="lazy"></figure>
<blockquote>
<p>声明一个可变参数名为“ names”，类型为string 的可变参数函数</p>
</blockquote>
<h2 id="一个简单的可变参数函数">一个简单的可变参数函数</h2>
<p>这个 func 以字符串的形式返回传递的参数，字符串之间用空格分隔。</p>
<pre><code class="language-golang">
func toFullname(names ...string) string {
  return strings.Join(names, &quot; &quot;)
}
</code></pre>
<p><img src="https://miro.medium.com/max/10000/1*_rdOI_SbL9m07QBcKMqz5Q.png" alt="Image for post" loading="lazy"> You can pass zero or more params</p>
<h2 id="你可以传入零个或多个参数">你可以传入零个或多个参数</h2>
<pre><code class="language-go">toFullname(&quot;carl&quot;, &quot;sagan&quot;)// output: &quot;carl sagan&quot;
toFullname(&quot;carl&quot;)// output: &quot;carl&quot;
toFullname()// output: &quot;&quot;
</code></pre>
<h2 id="什么时候使用可变参数函数">什么时候使用可变参数函数？</h2>
<ul>
<li><em>省略创建仅作为函数参数创建临时 slice 变量</em></li>
<li><em>当输入参数的长度未知时</em></li>
<li><em>表达你增加可读性的意图</em></li>
</ul>
<h2 id="例子">例子:</h2>
<p>看看 <code>Go Stdlib</code> 的 <code>fmt. Println</code> 函数，就会明白它是如何使自己变得易于使用的。</p>
<p>它使用可变参数函数接受可选的输入参数数目。</p>
<pre><code class="language-go">func Println(a ...interface{})
</code></pre>
<p>如果它不是一个可变参数函数，它看起来会是这样的:</p>
<pre><code class="language-go">func Println(params []interface{})
</code></pre>
<p>你需要传递一个 slice 才能使用它ーー verbose，是的! :</p>
<pre><code class="language-go">fmt.Println([]interface{}{&quot;hello&quot;, &quot;world&quot;})
</code></pre>
<p>相比而言，在可变参数函数形式中，它的使用是简单的:</p>
<pre><code class="language-go">fmt.Println(&quot;hello&quot;, &quot;world&quot;)
fmt.Println(&quot;hello&quot;)
fmt.Println()
</code></pre>
<blockquote>
<p>在这之后的部分，将会介绍一些关于 可变参数函数 的细节和常用模式的例子。</p>
</blockquote>
<h1 id="切片与可变参数函数">切片与可变参数函数</h1>
<p>可变参数在函数中会被转换为“新的”切片。可变参数实际上是 slice 类型的参数的语法糖。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/ELkTXYrLqO41gRC0fl7rz971NPHdCcS0yExDtNqgFCNMjNigJGgDik0XI-tXw3wi" alt="3" loading="lazy"></figure>
<h2 id="不传入参数">不传入参数</h2>
<p>如果不向其传递任何值，就相当于向可变参数函数传递了 nil 切片。</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/9RBDcXhqLuLBy4oZOANH_3w6Bez2l5vTYpZounxZna8HaWhiaPXtg9o2g_3dYpgC" alt="4" loading="lazy"></figure>
<p>所有非空切片都有内建数组，而 nil 片则没有。</p>
<pre><code class="language-go">func toFullname(names ...string) []string {
  return names
}

// names 内建数组为: nil
</code></pre>
<p>但是，当你向可变参数函数添加参数时，它将创建一个与你传入参数相关联的数组，而不再是一个空切片。</p>
<p>go语言内置函数<code>append</code> 将参数追加到现有的slice，并返回。<code>append</code> 也是一个可变参数函数。</p>
<pre><code class="language-go">func toFullname(names ...string) []string {
  return append(names, &quot;hey&quot;, &quot;what's up?&quot;)
}

toFullname()

// output: [hey what's up?]
</code></pre>
<h2 id="如何传递一个切片">如何传递一个切片？</h2>
<p>通过将可变参数运算符<code>...</code> 加在现有切片后，可以将其传递给可变参数运算符。</p>
<pre><code class="language-go">names := []string{&quot;carl&quot;, &quot;sagan&quot;)}

toFullname(names...)// output: &quot;carl sagan&quot;
</code></pre>
<p>这等同于以下调用:</p>
<pre><code class="language-go">toFullname(&quot;carl&quot;, &quot;sagan&quot;)
</code></pre>
<p><strong>但是，有一点不同：</strong> ，在函数中将直接使用传入的切片而不是创建新的切片。关于这一点，请参阅以下内容。</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/I78AMp2oauglKBaN-v2vInPqqOddUZSAnsOLwqI-nOQUu1tUZq5E6H2kb_ksQems" alt="5" loading="lazy"></figure>
<p>像下面这样，你也可以将数组作为可变参数函数的参数:</p>
<pre><code class="language-go">names := [2]string{&quot;carl&quot;, &quot;sagan&quot;}
toFullname(names[:]...)
</code></pre>
<h2 id="passed-slices-spooky-action-at-a-distance">Passed slice’s spooky action at a distance</h2>
<blockquote>
<p>标题不知道怎么翻译...</p>
</blockquote>
<p>假设你将一个 slice 作为参数传给一个可变参数函数:</p>
<pre><code class="language-go">dennis := []string{&quot;dennis&quot;, &quot;ritchie&quot;}
toFullname(dennis...)
</code></pre>
<p>再假设你修改了函数中变量参数的第一项:</p>
<pre><code class="language-go">func toFullname(names ...string) string {
  names[0] = &quot;guy&quot;
  return strings.Join(names, &quot; &quot;)
}
</code></pre>
<p>修改它也会影响原始的切片。“ dennis”切片现在变成了:</p>
<pre><code class="language-go">[]string{&quot;guy&quot;, &quot;ritchie&quot;}
</code></pre>
<p>而不是原始值:</p>
<pre><code class="language-go">[]string{&quot;dennis&quot;, &quot;ritchie&quot;}
</code></pre>
<p>因为传入的 slice 与 func 内部的 slice 共享相同的底层数组，所以在 func 内部改变 slice 的值也会影响传入的 slice:</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/AbFuGA5LzxztjxBQ_D7oWHdkh-AZifMm4m1_E-iGRbezqRmO3ZeT-siWIfoYBnWc" alt="6" loading="lazy"></figure>
<p>如果你直接传递参数(不使用切片) ，就不会发生这种情况。</p>
<h2 id="动态传递多个切片">动态传递多个切片</h2>
<p>假设你想在 slice 传递给 func 之前，在 slice 前面添加“ mr. ”。</p>
<pre><code class="language-go">names := []string{&quot;carl&quot;, &quot;sagan&quot;}
</code></pre>
<p>首先<code>append</code> 函数会创建一个新的切片，然后将names展开， 然后将值依次添加到新创建的切片上，然后再将展开的结果传给 <code>toFullname</code> 函数:</p>
<pre><code class="language-go">toFullname(append([]string{&quot;mr.&quot;}, names...)...)

// output: &quot;mr. carl sagan&quot;
</code></pre>
<p>这和下面的代码一样:</p>
<pre><code class="language-go">names = append([]string{&quot;mr.&quot;}, &quot;carl&quot;, &quot;sagan&quot;)
toFullname(names...)

// or with this:
toFullname([]string{&quot;mr.&quot;, &quot;carl&quot;, &quot;sagan&quot;}...)

// or with this—except passing an existing slice:
toFullname(&quot;mr.&quot;, &quot;carl&quot;, &quot;sagan&quot;)
</code></pre>
<h2 id="返回传入的切片">返回传入的切片</h2>
<p>不能使用可变参数作为返回结果类型，但是可以将其作为片返回。</p>
<pre><code class="language-go">func f(nums ...int) []int {
  nums[1] = 10
  return nums
}
</code></pre>
<p>当你将一个 slice 作为参数传入 f 时，它将返回一个相同的新 slice。传入和返回的切片是相关联的。两个中任意一个改变都会影响到另一个。</p>
<pre><code class="language-go">nums  := []int{23, 45, 67}
nums2 := f(nums...)
</code></pre>
<p>这里，nums 和 nums2有相同的元素，因为它们都指向相同的底层数组。</p>
<pre><code class="language-go">nums  = []int{10, 45, 67}
nums2 = []int{10, 45, 67}
</code></pre>
<p>👉 <a href="https://play.golang.org/p/Jun14DYWvq">这段代码</a> 包含关于 slice 基础数组的详细说明</p>
<h2 id="扩展操作符反模式">扩展操作符反模式</h2>
<p>如果你有一个 funcs，它们唯一的用途就是接受可变数量的参数，那么最好使用可变参数函数代替使用 slice。</p>
<pre><code class="language-go">// Don't do this
toFullname([]string{&quot;rob&quot;, &quot;pike&quot;}...)

// Do this
toFullname(&quot;rob&quot;, &quot;pike&quot;)
</code></pre>
<p><a href="https://play.golang.org/p/oKQjwotLC_">运行代码</a></p>
<h2 id="使用可变参数的长度">使用可变参数的长度</h2>
<p>你可以使用可变参数的长度来改变函数的行为。</p>
<pre><code class="language-go">func ToIP(parts ...byte) string {
  parts = append(parts, make([]byte, 4-len(parts))...)  
  
  return fmt.Sprintf(&quot;%d.%d.%d.%d&quot;, 
    parts[0], parts[1], parts[2], parts[3])
}
</code></pre>
<p>ToIP func 将“ parts”作为可变参数，并使用 parts param 的长度返回默认值为0的字符串形式的 IP 地址。</p>
<pre><code class="language-go">ToIP(255)   // 255.0.0.0
ToIP(10, 1) // 10.1.0.0
ToIP(127, 0, 0, 1) // 127.0.0.1
</code></pre>
<p><a href="https://play.golang.org/p/j9RcLvbs3K">运行代码</a></p>
<h1 id="变量函数的签名">✪ 变量函数的签名</h1>
<p>尽管可变参数函数是一种语法糖，但它的签名<a href="https://golang.org/ref/spec#Type_identity">类型标识</a>与接受切片的函数是不同的。</p>
<p>举个例子看一下字符串切片和 ...字符串的区别是什么？</p>
<p><em><strong>一个可变参数函数的签名:</strong></em></p>
<pre><code class="language-go">func PrintVariadic(msgs ...string)// signature: func(msgs ...string)
</code></pre>
<p><em><strong>非可变参数函数的签名:</strong></em></p>
<pre><code class="language-go">func PrintSlice(msgs []string)// signature: func([]string)
</code></pre>
<p><em>它们的类型标识不一样，我们把它们赋值给变量:</em></p>
<pre><code class="language-go">variadic := PrintVariadic   // variadic is a func(...string)
slicey := PrintSlice       // slice is a func([]string)
</code></pre>
<p>因此，其中一个不能替代另一个:</p>
<pre><code class="language-go">slicey = variadic// error: type mismatch
</code></pre>
<p><a href="https://play.golang.org/p/fsZYGgTyvF">运行代码</a></p>
<h1 id="混合变量和非可变参数">混合变量和非可变参数</h1>
<p>你可以通过把非可变参数放在可变参数之前，将非可变参数与可变参数混合。</p>
<pre><code class="language-go">func toFullname(id int, names ...string) string {
  return fmt.Sprintf(&quot;#%02d: %s&quot;, id, strings.Join(names, &quot; &quot;))
}

toFullname(1, &quot;carl&quot;, &quot;sagan&quot;)// output: &quot;#01: carl sagan&quot;
</code></pre>
<p>但是，你不能将非可变参数放到可变参数之后:</p>
<pre><code class="language-go">func toFullname(id int, names ...string, age int) string {}// error
</code></pre>
<p><a href="https://play.golang.org/p/TlbDYapOCD">运行代码</a></p>
<h2 id="接受变量类型的参数">接受变量类型的参数</h2>
<p>例如，<a href="https://golang.org/src/fmt/print.go#L189"><em>Go Stdlib 的 Printf</em></a> 函数，使用空接口类型接受任何类型的输入参数。你还可以使用空接口接受任意类型和任意数量的参数。</p>
<pre><code class="language-go">func Printf(format string, a ...interface{}) (n int, err error) {
    /* this is a pass-through with a... */  
    return Fprintf(os.Stdout, format, a...)
}

fmt.Printf(&quot;%d %s %f&quot;, 1, &quot;string&quot;, 3.14)    // output: &quot;1 string 3.14&quot;
</code></pre>
<h2 id="为什么-printf-只接受一个变量参数">为什么 Printf 只接受一个变量参数？</h2>
<p>查看 Printf 的签名时，会发现它接受一个名为 format 的字符串和一个可变参数。</p>
<pre><code class="language-go">func Printf(format string, a ...interface{})
</code></pre>
<p>这是因为format是必需的参数。Printf 强制您提供它，否则代码将无法编译。</p>
<p>如果它通过一个可变参数接收所有参数，那么调用方可能没有提供必要的格式化程序参数，或者从可读性角度来看，它不会像这个参数那么明确。<em>它清楚地标明了 Printf 需要什么</em>。</p>
<p>此外，调用时不传人变量参数“a”，它将防止 <em>Printf</em> 在 函数中创建一个不必要的切片，一个值为 nil 切片。<em>This may not be a clear win for Printf but it can be for you in your own code</em>。</p>
<p>你也可以在自己的代码中使用相同的模式。</p>
<h2 id="注意空接口类型">注意空接口类型</h2>
<p><code>interface{}</code>类型也称为空接口类型，这意味着它绕过了自身的 Go 静态类型语义检查。不必要地使用它会给你带来弊大于利的后果。</p>
<p>例如，它可能强制你使用<a href="https://blog.golang.org/laws-of-reflection"><em>reflection</em></a>，这是一个运行时特性(<em>instead of fast and safe — compile-time)</em>。你可能需要自己查找类型错误，而不是依赖于编译器帮你找到它们。</p>
<blockquote>
<p>在使用空接口之前要仔细考虑，依靠显式类型和接口来实现所需的行为。</p>
</blockquote>
<h2 id="将切片传递给具有空接口的可变参数">将切片传递给具有空接口的可变参数</h2>
<p>你不能将一个普通的切片传递给一个具有空接口类型的可变参数。具体原因<a href="https://golang.org/doc/faq#convert_slice_of_interface">请阅读这里</a>。</p>
<pre><code class="language-go">hellos := []string{&quot;hi&quot;, &quot;hello&quot;, &quot;merhaba&quot;}
</code></pre>
<p><em>You expect this to work, but it doesn’t:</em></p>
<p>你可能期望这能生效，但事实并非如此:</p>
<pre><code class="language-go">fmt.Println(hellos...)
</code></pre>
<p>因为，hello 是一个字符串，而不是一个空接口切片。可变参数或切片只能属于一种类型。</p>
<p>首先需要将 <em>hellos</em> slice 转换为一个空接口 slice:</p>
<pre><code class="language-go">var ihellos []interface{} = make([]interface{}, len(hello))for i, hello := range hellos {
  ihellos[i] = hello
}
</code></pre>
<p><em>Now, the expansion operator will work:</em></p>
<p>现在，扩展运算符将开始生效:</p>
<pre><code class="language-go">fmt.Println(ihellos...)
// output: [hi hello merhaba]
</code></pre>
<p><a href="https://play.golang.org/p/8uRHsHFKSx">运行代码</a></p>
<h1 id="函数式编程方面">函数式编程方面</h1>
<p>你还可以使用可变参数函数接受可变数目的函数。让我们声明一个新的 formatter func 类型。格式化程序 func 获取并返回一个字符串:</p>
<pre><code class="language-go">type formatter func(s string) string
</code></pre>
<p>让我们声明一个可变参数函数，它接受一个字符串和数量可选的可格式化的类型，以便使用一些pipeline来格式化字符串。</p>
<pre><code class="language-go">func format(s string, fmtrs ...formatter) string {
  for _, fmtr := range fmtrs {
    s = fmtr(s)
  }  return s
}

format(&quot; alan turing &quot;, trim, last, strings.ToUpper)// output: TURING
</code></pre>
<p><a href="https://play.golang.org/p/kCOP6_5h-t">运行代码</a></p>
<p>您还可以使用channels、structs等来代替这种链式模式的函数。看* <a href="https://golang.org/pkg/io/#MultiReader"><em>这里</em></a> <em>或者</em> <a href="https://golang.org/src/text/template/parse/parse.go?s=1642:1753#L41"><em>这里</em></a> <em>查看示例.</em></p>
<h2 id="使用结果为slice的函数作为可变参数">使用结果为slice的函数作为可变参数</h2>
<p>让我们重复使用上面的“format func”来创建一个可重用的格式化管道构建器:</p>
<pre><code class="language-go">func build(f string) []formatter {
  switch f {
    case &quot;lastUpper&quot;:
      return []formatter{trim, last, strings.ToUpper}
    case &quot;trimUpper&quot;:
      return []formatter{trim, strings.ToUpper}
    // ...etc
    default:
      return identityFormatter
  }
}
</code></pre>
<p>然后使用 expand 运算符运行它，最后将结果提供给格式 func:</p>
<pre><code class="language-go">format(&quot; alan turing &quot;, build(&quot;lastUpper&quot;)...)// output: TURING
</code></pre>
<h2 id="可变参数选项模式">可变参数选项模式</h2>
<p><em>You may have already been familiar with this pattern from other OOP langs and this has been re-popularized again in Go by Rob Pike</em> <a href="https://commandcenter.blogspot.com.tr/2014/01/self-referential-functions-and-design.html"><em>here</em></a> <em>back in 2014. It’s like the</em> <a href="https://en.wikipedia.org/wiki/Visitor_pattern"><em>visitor pattern</em></a><em>.</em></p>
<p>你可能已经熟悉这种来自其他 OOP 语言的模式，这种<a href="https://commandcenter.blogspot.com.tr/2014/01/self-referential-functions-and-design.html">模式</a>在2014年 Rob Pike 的 Go 中再次流行起来。这就像是<a href="https://en.wikipedia.org/wiki/Visitor_pattern">访客模式</a>。</p>
<p>这个例子对你来说可能有点难。如果有不理解的请及时提问&lt;作者不在，查看原文链接提问吧😂&gt;。</p>
<p>让我们创建一个 Logger，可以使用可选模式在运行时更改详细程度和前缀:</p>
<pre><code class="language-go">type Logger struct {
  verbosity
  prefix string
}
</code></pre>
<p>使用一个可变的选项参数来改变logger的行为:</p>
<pre><code class="language-go">func (lo *Logger) SetOptions(opts ...option) {
  for _, applyOptTo := range opts {
    applyOptTo(lo)
  }
}
</code></pre>
<p>我们创建一些返回配置方法的函数，它们在一个闭包中改变 Logger 的操作行为：</p>
<pre><code class="language-go">func HighVerbosity() option {
  return func(lo *Logger) {
    lo.verbosity = High
  }
}

func Prefix(s string) option {
  return func(lo *Logger) {
    lo.prefix = s
  }
}
</code></pre>
<p>现在，让我们用默认选项创建一个新的 Logger:</p>
<pre><code class="language-go">logger := &amp;Logger{}
</code></pre>
<p>然后通过变量参数向记录器提供选项:</p>
<pre><code class="language-go">logger.SetOptions(
  HighVerbosity(), 
  Prefix(&quot;ZOMBIE CONTROL&quot;),
)
</code></pre>
<p>现在让我们检查一下输出:</p>
<pre><code class="language-go">logger.Critical(&quot;zombie outbreak!&quot;)
// [ZOMBIE CONTROL] CRITICAL: zombie outbreak!

logger.Info(&quot;1 second passed&quot;)
// [ZOMBIE CONTROL] INFO: 1 second passed
</code></pre>
<p><a href="https://play.golang.org/p/X2XHSdYgdq">运行代码</a></p>
<h1 id="无穷无尽的精神食粮">✪ 无穷无尽的精神食粮！</h1>
<ul>
<li>在 Go 2中，有一些可变函数的行为的计划*<a href="https://github.com/golang/go/issues/15209"><em>这里</em></a><em>,</em> <a href="https://github.com/golang/go/issues/18605"><em>here 这里</em></a><em>,及</em><a href="https://github.com/golang/go/issues/19218"><em>这里</em></a><em>.</em></li>
<li><em>你可以在 Go 语言标准文档里找到更正式的可变参数函数指南,</em><a href="https://golang.org/ref/spec#Passing_arguments_to_..._parameters"><em>这里</em></a><em>,</em> <a href="https://golang.org/ref/spec#Appending_and_copying_slices"><em>这里</em></a><em>,</em> <a href="https://golang.org/ref/spec#Appending_and_copying_slices"><em>这里</em></a> <em>及</em><a href="https://golang.org/ref/spec#Type_identity"><em>这里</em></a><em>.</em></li>
<li><a href="https://sunzenshen.github.io/tutorials/2015/05/09/cgotchas-intro.html"><em>使用来自 c 的可变函数</em></a><em>.</em></li>
<li><em>你可以找到很多语言的可变参数函数声明</em><a href="https://rosettacode.org/wiki/Variadic_function"><em>这里</em></a><em>.自由探索吧</em></li>
</ul>
<p>好了，就到这了。谢谢你们的阅读。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[鱼香肉丝]]></title>
        <id>http://blog.gusibi.site/post/yu-xiang-rou-si/</id>
        <link href="http://blog.gusibi.site/post/yu-xiang-rou-si/">
        </link>
        <updated>2020-07-05T14:13:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>周末尝试做了鱼香肉丝，口味还不错</p>
</blockquote>
<h2 id="材料">材料</h2>
<p>猪肉（瘦肉）200g、青笋50g、干黑木耳10个、胡萝卜半根（50g）、<br>
葱一段（10cm）、姜10g、蒜半头、朝天椒3根、<br>
豆瓣酱、料酒、生抽、盐、糖、淀粉</p>
<ol>
<li>木耳用温水泡开（现在可以先处理肉）</li>
<li>瘦肉清水洗净切丝、加入生抽3勺（10g）、料酒2勺（10g）、盐一小勺（3g）、鸡精3g，蛋清（也可以是鸡蛋）一个 朝一个方向搅拌一分钟，然后加入淀粉一勺，腌制10分钟以上</li>
<li>蒜切成沫，姜切成沫、葱切沫</li>
<li>胡萝卜、青笋切丝</li>
<li>泡开的木耳切成小块</li>
<li>取小碗加入糖10g（喜欢甜可多加）、醋10g、生抽5g、料酒5g、盐3g（豆瓣酱比较咸也可以不加盐）、淀粉10g 勾兑成酱料备用（也可以加少量水，这样更容易搅拌）</li>
<li>大火热锅加油，放入腌制好的肉丝（因为肉丝有淀粉，建议用不粘锅，也可以多加油，小火），将肉丝炒成白色的肉条盛出备用</li>
<li>放入胡萝卜丝翻炒，加入一勺豆瓣酱（咸不要太多），加入木耳笋丝继续翻炒</li>
<li>半分钟后加入刚炒一半的肉丝，翻炒2分钟（时间可自己控制，注意控制火候</li>
<li>加入勾兑好的酱料，继续翻炒3分钟，然后收汁</li>
</ol>
<blockquote>
<p>在炒的过程中注意试一下咸淡，可适量调整<br>
猪肉换成茄子就是鱼香茄子🤡</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《微服务设计》读书笔记]]></title>
        <id>http://blog.gusibi.site/post/microservices_design/</id>
        <link href="http://blog.gusibi.site/post/microservices_design/">
        </link>
        <updated>2020-06-26T01:23:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="阅读的目的">📖阅读的目的</h3>
<p>微服务是一种分布式系统解决方案，最近几年工作中使用的是微服务架构来部署服务，但自己接触到的主要是业务开发相关的工作，对微服务的了解主要偏实战方面，而对于构建、集成、分解、测试、部署、监控、架构演进等相关内容没有系统性的了解过，此书内容比较全面，包含了微服务设计的各种主题，读这本书主要希望可以系统性的了解一下微服务的方方面面。</p>
<h3 id="️本书的整体框架">⚓️本书的整体框架</h3>
<p>这本书主要基于主题来组织内容，主要包含以下主题：</p>
<ol>
<li>微服务基本概念的介绍，</li>
<li>如何构建微服务，</li>
<li>什么样的服务集成技术对微服务最有帮助，</li>
<li>如何把一个大的单块系统分解成微服务，</li>
<li>如何部署微服务，</li>
<li>如何测试微服务以确保软件质量，</li>
<li>对于复杂的分布式系统如何监控，</li>
<li>如何安全的使用微服务，</li>
<li>使用康威定律解释开发人员组织结构和系统设计的相互租用，</li>
<li>介绍规模化后微服务面临的问题以及符合应对问题。</li>
</ol>
<p>这篇文章只是选取书中部分观点拿来讨论，不是总结和概括。</p>
<h3 id="本书的目录">本书的目录</h3>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/B2JeYMCE2L_M5LZb_lJIODgQWBBKZluLNgop3BeRuQ0wD5xs07hdDYAdtYxcCfI3" alt="微服务设计.png" loading="lazy"></figure>
<h3 id="微服务定义">微服务定义</h3>
<p>对于微服务，作者定义为一些协同工作的小而自治的服务，“小而自治”可以使用单一职责原则来解释：把因相同原因而变化的东西聚合在一起，而把因不同原因而变化的东西分离开。这个原则也可以用来指导单个服务的微服务拆分。</p>
<p><strong>多小算小</strong>：</p>
<p>澳大利亚RealEstate.com.au的Jon Eaves认为，一个微服务应该可以在两周内完全重写。服务是否够小，作者认为需要考虑以下因素：</p>
<ol>
<li>服务越小，微服务架构的优点和缺点也就越明显</li>
<li>微服务越小，独立性带来的好处就越多，但也就越复杂</li>
<li>如果开发者不再觉得代码库过大，那就可以认为足够小了。</li>
</ol>
<p><strong>自治：</strong></p>
<p>一个微服务是一个独立的实体，独立部署，服务之间通过网络调用进行通信，从而加强服务之间的隔离性，避免耦合。</p>
<p><strong>微服务的优点：</strong></p>
<ol>
<li>技术异构性：因为单个微服务力度足够小，在由多个微服务组成的系统中，可以在不同的微服务中使用不同的技术，比如使用不同的语言、框架、不同的数据库等。</li>
<li>弹性：微服务可以部署在多个机器上来降低功能完全不可用的概率，这样当一个服务不可用时也可以避免级联故障的产生。</li>
<li>扩展：可以对特定的模块进行扩展或缩容，比如性能要求高的部署在性能好的机器上，性能要求低的部署在性能稍差的机器上</li>
<li>简化部署：部署时只需要部署修改的部分而不是把整个大的服务。</li>
<li>与组织架构相匹配：不同模块由不同的人员维护开发</li>
<li>可替代性：对于大的服务，重构替代比较难，但是微服务就相对简单，可能只需要几天就能完成。</li>
</ol>
<p>微服务虽然好处很多，但是微服务并不是没有缺点，更不是银弹，使用微服务之前需要考虑清除。</p>
<h3 id="架构师">架构师</h3>
<p>架构师的一个重要职责是确保团队有共同的技术愿景，以帮助我们向客户交付他们想要的系统。</p>
<p>作者有一个观点特别有意思，他认为架构师是参考其它行业比如建筑师来命名的，但是“架构师”并不需要像“建筑师”那样需要对设计保证足够的精确，且对产物负有不可推卸的责任，但是软件“架构师”却需要保证软件有足够的灵活性和适应性，并且能够根据用户的需求进行演化。这么看来，软件设计师更像是城市规划师，只需要保证大方向上的正确，对于模块内的具体设计可以随机应变。</p>
<h3 id="指导原则">指导原则</h3>
<p>软件设计的关键是取舍，而哪些取哪些舍就需要满足一些原则，而原则本身也需要取舍，最好不要超过10条，否则当原则太多可能会产生冲突也不便记忆，可以参考【1】 https://www.12factor.net/zh_cn/ 的12项原则:</p>
<h4 id="i-基准代码"><a href="https://www.12factor.net/zh_cn/codebase">I. 基准代码</a></h4>
<p>一份基准代码，多份部署</p>
<h4 id="ii-依赖"><a href="https://www.12factor.net/zh_cn/dependencies">II. 依赖</a></h4>
<p>显式声明依赖关系</p>
<h4 id="iii-配置"><a href="https://www.12factor.net/zh_cn/config">III. 配置</a></h4>
<p>在环境中存储配置</p>
<h4 id="iv-后端服务"><a href="https://www.12factor.net/zh_cn/backing-services">IV. 后端服务</a></h4>
<p>把后端服务当作附加资源</p>
<h4 id="v-构建发布运行"><a href="https://www.12factor.net/zh_cn/build-release-run">V. 构建，发布，运行</a></h4>
<p>严格分离构建和运行</p>
<h4 id="vi-进程"><a href="https://www.12factor.net/zh_cn/processes">VI. 进程</a></h4>
<p>以一个或多个无状态进程运行应用</p>
<h4 id="vii-端口绑定"><a href="https://www.12factor.net/zh_cn/port-binding">VII. 端口绑定</a></h4>
<p>通过端口绑定提供服务</p>
<h4 id="viii-并发"><a href="https://www.12factor.net/zh_cn/concurrency">VIII. 并发</a></h4>
<p>通过进程模型进行扩展</p>
<h4 id="ix-易处理"><a href="https://www.12factor.net/zh_cn/disposability">IX. 易处理</a></h4>
<p>快速启动和优雅终止可最大化健壮性</p>
<h4 id="x-开发环境与线上环境等价"><a href="https://www.12factor.net/zh_cn/dev-prod-parity">X. 开发环境与线上环境等价</a></h4>
<p>尽可能的保持开发，预发布，线上环境相同</p>
<h4 id="xi-日志"><a href="https://www.12factor.net/zh_cn/logs">XI. 日志</a></h4>
<p>把日志当作事件流</p>
<h4 id="xii-管理进程"><a href="https://www.12factor.net/zh_cn/admin-processes">XII. 管理进程</a></h4>
<p>后台管理任务当作一次性进程运行</p>
<p>列原则简单，但要和实践相结合才好。</p>
<h3 id="什么样的服务是好服务">什么样的服务是好服务</h3>
<p>作者给出的两个概念是：1、松耦合；2、高内聚。这两个概念也不仅仅是微服务的设计理念，而是所有系统设计的基本要求。</p>
<p>做到松耦合，在修改一个服务的时候就不需要修改另一个服务，这样就能够做到独立部署一个服务而不需要修改系统的其它部分。</p>
<p>做到高内聚，也就能在需要修改一个功能时只需要修改一个服务就能实现需求。</p>
<p>可见，松耦合和高内聚本质上可以达到相同的目标。</p>
<h3 id="不要过早划分服务">不要过早划分服务</h3>
<p>在服务有明确的边界之前，最好不要划分服务。毕竟拆分服务比把服务合并起来更容易一些。当一个服务业务边界逐渐明确时，再根据业务边界逐步拆分服务。</p>
<p>对于单个大服务的分解，也建议从分解数据库开始，将杂乱的依赖理清。</p>
<h3 id="服务的集成">服务的集成</h3>
<p>多个服务的集成有多种方式，比如共享数据库、REST调用、远程过程调用。同时服务间调用也有同步调用和异步调用两种方式。这两种方式各有各的好处，不同场景可能需要选择不同的调用方式。</p>
<p>如果使用同步服务，发起一个调用后调用方会阻塞自己并等待整个操作的完成；如果使用异步通信，调用方不需要等待操作完成后就可以返回，甚至可能不需要关心这个操作是否完成。采用异步的方式就需要保证异步调用的可靠性（比如失败了怎么处理，异步任务需要保证幂等）。</p>
<h3 id="服务部署">服务部署</h3>
<p>服务拆分后，服务的数量可能会是原来的几倍、几十倍，可能一个需求的改动会设计几个或者更多的服务部署，这时服务的部署就会变成一个无法避免的问题。一个比较好的做法是将持续集成映射到服务，在代码修改后通过配置自动部署。这里有一个需要注意的点就是可能需要对不同的服务定制化不同的镜像，docker是一个很好的选择。</p>
<h3 id="测试">测试</h3>
<p>《敏捷软件测试》一书曾把测试分为以下四个象限。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/F3T-K3q0Y0Ncv10AZyODaMFBHaGj1F4DHL84CMGX4stcm_2p0VB-Y2y4iE-X5zNe" alt="测试的象限.jpeg" loading="lazy"></figure>
<p>处于象限底部的是面向技术的测试，即那些首先能够帮助开发人员构建系统的测试。这个象限中的测试通常是可以自动化的，比如性能测试和单元测试（关于单元测试可以参考这篇文章《学习单元测试，告别祈祷式编程》【2】https://mp.weixin.qq.com/s/oD96OEv92oX0ypAYLbYFyA）。</p>
<p>处于象限上方的测试则是帮助非技术背景的相关人群，了解系统是如何工作的。这种测试包括象限左上角的大范围、端到端的验收测试，还有象限右上角的由用户来进行的在UAT系统上进行手工验证的探索性测试。</p>
<p>测试是微服务系统的一个关键步骤，如果在微服务系统中还有大量的手工测试，可能让系统稳定运行会变成一个挑战。</p>
<p>《Scrum敏捷软件开发》中提到了测试金字塔的概念，测试金字塔如下所示</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/48bhFMXZNQ3CGiz3p6lK7SUKBMj-WBgSx1owQG7ccJ7oCyR53hz1yxy7g6Hwkt9_" alt="测试的范围.jpeg" loading="lazy"></figure>
<p>主要由单元测试、服务测试和用户界面测试三层。这张图和上一张象限图有异曲同工的作用，都是将测试分为多个层。</p>
<h3 id="监控">监控</h3>
<p>有过bug修复经验的人都知道，在只有一个服务的时候，监控是相对简单的，遇到问题只需要到服务所在容器或者机器查看错误即可。但如果系统是微服务架构，特别是调用链有多个节点时，定位错误就变成了一个不可能完成的任务。此时，监控工具就变得尤为重要。</p>
<p>日志、全链路追踪工具是一个好的选择。</p>
<h3 id="安全">安全</h3>
<p>对于微服务的安全，完全同意作者的观点</p>
<ol>
<li><strong>不要实现自己的加密算法。不要发明自己的安全协议。</strong></li>
<li><strong>不要实现自己的加密算法。不要发明自己的安全协议。</strong></li>
<li><strong>不要实现自己的加密算法。不要发明自己的安全协议。</strong></li>
</ol>
<p>重要的事情说三遍。</p>
<h3 id="康威定律">康威定律</h3>
<p>梅尔 ·康威于1968年4月在Datamation杂志上发表了一篇名为“How Do Committees Invent”的论文，文中指出：</p>
<p><strong>任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。</strong></p>
<p>这句话被称为康威定律。可以用埃里克 · S．雷蒙德在《新黑客字典》中定义总结：“如果你有四个小组开发一个编译器，那你会得到一个四步编译器。”</p>
<p>比如，如果一个组织的耦合度非常低，其创建的系统的模块化就越好，耦合也越低；组织的耦合度越高，其创建的系统的模块化也越差。</p>
<p>康威定律主要强调系统设计和组织结构不匹配可能会导致危险，这引导组织将服务所有权与团队相匹配。</p>
<h3 id="规模化">规模化</h3>
<p>一旦规模化之后，服务就会不可避免的出现问题，现在没有任何一个服务敢保证自己的服务100%可用， 99.999%可用性 已经是一个了不起的数据（但即使这样当服务超过10w时，也总有一台机器是不可用的）。所以，规模化后，即使你买最好的工具，最昂贵的硬件，也无法避免它们会发生故障的事实。</p>
<p>与其把时间放到如何避免服务出错还不如把时间放到如何快速修复系统上。</p>
<h3 id="cap定理">CAP定理</h3>
<p>分布式系统中有三方面需要彼此权衡：一致性（consistency）、可用性（availability）和分区容忍性（partition tolerance）。具体地说，这个定理告诉我们最多只能保证三个中的两个。</p>
<p>具体参考：阮一峰《CAP 定理的含义》【3】https://ruanyifeng.com/blog/2018/07/cap.html</p>
<h3 id="其它有意思的事情">其它有意思的事情</h3>
<p>“两个披萨团队”（没有一个团队应该大到两个比萨不够吃）。</p>
<p>如果不知道怎么拆分微服务，就先构建单个服务吧。</p>
<h3 id="总结">总结</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/ClNFWVAh-uvMAYNfA-KHgoqvQW0ati71dUxJTcT8uocm4Sm9vglmSPYxXgPGv5cT" alt="微服务的原则.jpeg" loading="lazy"></figure>
<p>不要实现自己的加密算法库。也不应该实现自己的分布式协调系统。使用已有的可工作的选择是非常明智的。</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li>【1】https://www.12factor.net/zh_cn/</li>
<li>【2】《学习单元测试，告别祈祷式编程》【https://mp.weixin.qq.com/s/oD96OEv92oX0ypAYLbYFyA</li>
<li>【3】《CAP 定理的含义》https://ruanyifeng.com/blog/2018/07/cap.html</li>
</ul>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/WDz3v4cU4LQq1oyKX-fYK1LxIThzZ1hK931ZaPRC8CdcB0t2oTYJciMDuAws70FY" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 简明教程：从零创建一个flutter 项目]]></title>
        <id>http://blog.gusibi.site/post/flutter-01-first-demo/</id>
        <link href="http://blog.gusibi.site/post/flutter-01-first-demo/">
        </link>
        <updated>2020-06-21T01:07:20.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一篇介绍了Flutter 安装配置 相关内容，接下来这一篇先新来一个示例介绍一下Flutter项目的基本结构。</p>
</blockquote>
<h3 id="新建项目">新建项目</h3>
<ol>
<li>打开编辑器（这里以IntelliJ IDEA为例，Android Studio基本一致）</li>
<li>File&gt;New&gt;Project，选择Flutter 项目</li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/dGPyk4Ns6SXdcofOPiVnCFFQVB_5KDhmH2Sve9aJVqSKMM4L4wKYNMrA9WEqryKr" alt="截屏2020-06-21 上午9.27.06.png" loading="lazy"></figure>
<p>Next 填写项目相关内容，Organization 这里通常建议是域倒写.</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/i_IjC0yQntSYtqBN_T3IZrIVHJvdrE270FBIQv4efgVrKydlwabV-mVYhlDBorzg" alt="截屏2020-06-21 上午9.29.01.png" loading="lazy"></figure>
<p>填写完毕点击FINISH，将会自动生成一个示例项目。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/A5sMHWavEsRD58OpTp1Wm4St-nhW4Llfq3f0wny9HjRu6sep9NHIj0iyWs50hOYY" alt="截屏2020-06-21 上午9.29.24.png" loading="lazy"></figure>
<ol>
<li>打开模拟器：点击上方菜单栏，选择模拟器（这里选择iOS 模拟器）</li>
</ol>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/jxTB2M2NfYI4Xv7RjUYbDcbFa-CSb_1RV7b-0Aw-6_ZwIlWqIei1uA54ZLIg9zPE" alt="截屏2020-06-21 上午9.30.00.png" loading="lazy"></figure>
<p>点击后，iOS模拟器会启动，但是还需要再选择设备</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/IBuKm-DNtEapZpYbnGRu2JKD0kuXm3jHqyMOB1OGom5H_c84U9wmQdadz0ZC47MS" alt="截屏2020-06-21 上午9.33.37.png" loading="lazy"></figure>
<p>启动后界面如下：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/pkkAFSa4UBv7xqRPgs2Yp4-o0whml1MKlbl53C0msalQGPoRQb2ublKnVH8tM0xZ" alt="截屏2020-06-21 上午9.33.50.png" loading="lazy"></figure>
<p>现在可以点击菜单栏上方运行项目，输出结果如下</p>
<pre><code class="language-shell">Launching lib/main.dart on iPhone 11 in debug mode...
Running Xcode build...
Xcode build done.                                           46.6s
Debug service listening on ws://127.0.0.1:61858/TQG1yn-Cjq0=/ws
Syncing files to device iPhone 11...
</code></pre>
<p>现在一个简单的项目就启动完毕。</p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/UXwr5FZ8T9BH1ZyT4rqcGb6F3uJrSf0_5MVjL4Pm_OpxhB9N4BxvIfxuVmm0a-Yh" alt="Simulator Screen Shot - iPhone 11 - 2020-06-21 at 09.35.48.png" loading="lazy"></figure>
<p>第一次真机运行的时候可能会需要更多的等待时间，但是接下来你就可以使用热重载（hot reload）功能，热重载可以在运行时更新预览。</p>
<h3 id="项目目录">项目目录</h3>
<pre><code class="language-shell">├── README.md
├── android
├── build
├── hello_world.iml
├── ios
├── lib
├── pubspec.lock
├── pubspec.yaml
└── test
</code></pre>
<p>主要关注以下几个文件/目录：</p>
<table>
<thead>
<tr>
<th><strong>文件/目录</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>android</td>
<td>android 平台相关代码</td>
</tr>
<tr>
<td>ios</td>
<td>iOS平台相关代码</td>
</tr>
<tr>
<td>lib</td>
<td>flutter 应用代码，编写的代码在此目录</td>
</tr>
<tr>
<td>test</td>
<td>测试相关代码</td>
</tr>
<tr>
<td>pubspec.yaml</td>
<td>管理 Flutter 应用程序的 assets（资源，如图片、package等）</td>
</tr>
</tbody>
</table>
<h3 id="代码介绍">代码介绍</h3>
<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

// MyApp 不需要做状态管处理，此组件继承StatelessWidget 即可
class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() =&gt; _MyHomePageState(); // 重写
}

// 状态类必须继承自 State类
class _MyHomePageState extends State&lt;MyHomePage&gt; {
  int _counter = 0; // 定义一个变量 _counter 作为计数器变量，调用 setState 方法来控制这个变量的值变化

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: &lt;Widget&gt;[
            Text(
              'You have clicked the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
</code></pre>
<ul>
<li>代码第一行引入了 material.dart 包，使用此包，模板代码创建了一个具有 Material Design 风格的应用（ <a href="https://material-io.cn/guidelines">Material</a> 是一种移动端和网页端通用的视觉设计语言， Flutter 提供了丰富的 Material 风格的 widgets。</li>
<li><code>void main() =&gt; runApp(MyApp());</code> 主函数（main）使用了 (<code>=&gt;</code>) 符号，这是 Dart 中单行函数或方法的简写，等同于下属代码</li>
</ul>
<pre><code class="language-dart">void main() {
  runApp(MyApp());
}
</code></pre>
<p>flutter 项目都需要在开始的时候执行main 函数，使用runApp() 函数可以讲给定的根组件填满整个屏幕。（如果不调用runApp() 函数，项目也可以正常运行，但是屏幕上什么都不会显示。</p>
<h4 id="状态管理">状态管理</h4>
<ul>
<li>
<p>该应用程序继承了 <code>StatelessWidget</code>，这将会使应用本身也成为一个 widget。在 Flutter 中，几乎所有都是 widget，包括对齐 (alignment)、填充 (padding) 和布局 (layout)。</p>
</li>
<li>
<p><strong>State</strong>*<strong>less*</strong> <strong>widgets 是不可变的，这意味着它们的属性不能改变 —— 所有的值都是 final。</strong></p>
</li>
<li>
<p><strong>State</strong>*<strong>ful*</strong> <strong>widgets 持有的状态可能在 widget 生命周期中发生变化，实现一个 stateful widget 至少需要两个类：</strong></p>
</li>
<li>
<ul>
<li>1）一个 StatefulWidget 类，本身是不可变的</li>
<li>2）一个 State 类，但是 State 类在 widget 生命周期中始终存在。</li>
</ul>
</li>
<li>
<p>MyHomePage 类是一个Stateful widgets（有状态的 widget）</p>
</li>
<li>
<ul>
<li>必须继承自<strong>StatefulWidget</strong></li>
<li>它创建自己的状态类 —— _MyHomePageState，并将 MyHomePage 内嵌到已有的无状态的 <code>MyApp</code> widget。</li>
<li>需要重写createState 方法，代码如下：</li>
</ul>
</li>
</ul>
<pre><code class="language-dart">@override
_MyHomePageState createState() =&gt; _MyHomePageState();
</code></pre>
<ul>
<li>
<p><code>Scaffold</code> 是 Material 库中提供的一个 widget，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。</p>
</li>
<li>
<ul>
<li>现在在Scaffold 中添加 backgroundColor: Colors.amber</li>
</ul>
</li>
</ul>
<pre><code class="language-dart">Widget build(BuildContext context) {
    return Scaffold(
      ...
      backgroundColor: Colors.amber,
      ...
    );
  }
</code></pre>
<p>保存代码后，页面应该会自动刷新，结果如下：</p>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/a5RewdDN10105G5S_vJ0Kc1W9UdEp2MIBit_ALAK6ldckaBix7SlOj3wpR6n1FZz" alt="Simulator Screen Shot - iPhone 11 - 2020-06-21 at 17.41.29.png" loading="lazy"></figure>
<p>如果自动保存后页面没有自动重载，可以点击下图红圈中按钮查看更新后结果。</p>
<figure data-type="image" tabindex="9"><img src="http://media.gusibi.mobi/NdtaTSTSLDhz4bjlRtATlliCBSKOeBgmFH_1bDKu2lSKYqBQ9FDTMSSpgZhcTdSO" alt="截屏2020-06-21 上午9.36.57.png" loading="lazy"></figure>
<ul>
<li>一个 widget 的主要工作是提供一个 <code>build()</code> 方法来描述如何根据其他较低级别的 widgets 来显示自己。</li>
<li>本示例中的 body 的 widget 树中包含了一个 <code>Center</code> widget， Center widget 又包含一个 <code>Text</code> 子 widget， Center widget 可以将其子 widget 树对齐到屏幕中心。</li>
</ul>
<h3 id="使用第三方包">使用第三方包</h3>
<p>现在这个模板代码比较简单，接下来我们扩展一下，在pubspec.yaml 中，将 english_words（3.1.5 或更高版本）添加到依赖项列表，如下所示：</p>
<p>在 编辑器视图中查看 <code>pubspec.yaml</code> 文件时，点击 <strong>Pub get</strong> 会将依赖包安装到你的项目。你应该会在控制台中看到以下内容：</p>
<pre><code class="language-shell">Running &quot;flutter pub get&quot; in hello_world...                         0.6s
Process finished with exit code 0
</code></pre>
<p>在执行 <code>Pub get</code> 命令时会自动生成一个名为 <code>pubspec.lock</code> 文件，这里包含了你依赖 packages 的名称和版本。</p>
<p>然后在lib/main.dart 代码第二行加入 import 'package:english_words/english_words.dart';</p>
<p>如果你尝试热重载，则可能会看到一条警告，考虑重新启动当前应用：</p>
<pre><code class="language-shell">Reloading…
Some program elements were changed during reload but did not run when the view was reassembled; 
you might need to restart the app (by pressing “R”) for the changes to have an effect.
</code></pre>
<p>因为重启应用之后就可以生效，故这可能是误报。现在只需点击build 按钮重新build。</p>
<p>修改后的代码如下：</p>
<pre><code class="language-dart">class _MyHomePageState extends State&lt;MyHomePage&gt; {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    final wordPair = WordPair.random();
    return Scaffold(
      ...
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: &lt;Widget&gt;[
            Text(
              'You have clicked the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
            Text(
              'Words Pair:' + wordPair.asPascalCase,
            ),
          ],
        ),
      ),
      ...
  }
}
</code></pre>
<h3 id=""><img src="http://media.gusibi.mobi/NvWnrQJRvVTBmWz1S76ZyzyJ9Ey0ANcubkNjw6S9Pmh9bUeQbEb4HvZiL36dnMaU" alt="Simulator Screen Shot - iPhone 11 - 2020-06-21 at 18.23.27.png" loading="lazy"></h3>
<p>此时点击右下角的按钮，数字会增加，单词对也会更新。</p>
<h3 id="参考链接">参考链接</h3>
<ol>
<li>https://flutter.cn/docs/cookbook/design/themes</li>
<li>https://flutter.cn/docs/get-started/codelab</li>
</ol>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="10"><img src="http://media.gusibi.mobi/WDz3v4cU4LQq1oyKX-fYK1LxIThzZ1hK931ZaPRC8CdcB0t2oTYJciMDuAws70FY" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="11"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用VuePress 搭建个人博客]]></title>
        <id>http://blog.gusibi.site/post/vuepress-build-blog-to-github/</id>
        <link href="http://blog.gusibi.site/post/vuepress-build-blog-to-github/">
        </link>
        <updated>2020-06-13T23:48:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="介绍">介绍</h3>
<p>VuePress 是一个静态网站生成器，包含由Vue驱动的主题系统和插件API，同时还包含一个为书写技术文档而优化的默认主题。此篇文章只介绍如何使用VuePress 搭建个人博客的部分。</p>
<h3 id="安装">安装</h3>
<blockquote>
<p>前置条件：VuePress 需要 Node.js &gt;= 8.6</p>
</blockquote>
<h5 id="安装-vuepress">安装 vuepress</h5>
<p>VuePress 安装毕竟简单，可以使用以下命令直接安装：</p>
<pre><code class="language-shell">yarn add -D vuepress # npm install -D vuepress
</code></pre>
<h4 id="验证安装">验证安装</h4>
<p>为了验证VuePress 的效果，首先创建一篇文档</p>
<pre><code class="language-shell">mkdir docs &amp;&amp; echo '# Hello VuePress' &gt; README.md
</code></pre>
<p>在当前目录下创建 <code>package.json</code> 文件，添加以下内容：</p>
<pre><code class="language-json">{
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vuepress dev docs&quot;,
    &quot;build&quot;: &quot;vuepress build docs&quot;
  }
}
</code></pre>
<p>在本地启动服务器</p>
<pre><code class="language-shell">vuepress dev .
</code></pre>
<p>VuePress 会在 <a href="http://localhost:8080/">http://localhost:8080</a> 启动一个热重载的开发服务器。</p>
<p>如果没有报错，可在浏览器打开<a href="http://localhost:8080/">http://localhost:8080</a>，默认加载内容为 README.md 中内容。</p>
<h3 id="vuepress-目录结构">VuePress 目录结构</h3>
<p>VuePress 遵循 <strong>“约定优于配置”</strong> 的原则，推荐的目录结构如下：</p>
<pre><code class="language-shell">.
├── blog
│   ├── .vuepress (可选的)
│   │   ├── components (可选的)
│   │   ├── theme (可选的)
│   │   │   └── Layout.vue
│   │   ├── public (可选的)
│   │   ├── styles (可选的)
│   │   │   ├── index.styl
│   │   │   └── palette.styl
│   │   ├── templates (可选的, 谨慎配置)
│   │   │   ├── dev.html
│   │   │   └── ssr.html
│   │   ├── config.js (可选的)
│   │   └── enhanceApp.js (可选的)
│   │ 
│   ├── README.md
│   └──_post
│       ├── about.md
│       └── README.md 
│ 
└── package.json
</code></pre>
<p>这里<code>blog</code>目录被称作 <code>targetDir</code> ，目录下的文件都是相对于 <code>blog</code> 目录的。比如此目录下文件的路由地址如下：</p>
<table>
<thead>
<tr>
<th>文件相对路径</th>
<th>页面路由地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>/README.md</td>
<td>/</td>
</tr>
<tr>
<td>/_post/README.md</td>
<td>/_post/</td>
</tr>
<tr>
<td>/_post/about.md</td>
<td>/_post/about.html</td>
</tr>
</tbody>
</table>
<h3 id="基本配置">基本配置</h3>
<p>现在 VuePress 已经可以运行，现在添加一些基本的配置。首先在当前目录下创建 <code>.vuepress</code> 目录（所有 VuePress 相关的文件都放在此目录下），然后在 <code>.vuepress</code> 目录下创建 <code>config.js</code> 文件（也可以使用YAML (<code>.vuepress/config.yml</code>) 或是 TOML (<code>.vuepress/config.toml</code>) 格式的配置文件）。</p>
<p>添加以下配置到config.js：</p>
<pre><code class="language-javascript">module.exports = {
  title: '顾斯比',  // 网站的标题，它将会被用作所有页面标题的前缀。
  description: '顾斯比的博客', // 网站的描述，它将会以 &lt;meta&gt; 标签渲染到当前页面的 HTML 中。
}
</code></pre>
<h4 id=""></h4>
<p>其它详细配置参考官方文档：https://vuepress.vuejs.org/zh/config/</p>
<h3 id="主题">主题</h3>
<p>因为是使用 <code>VuePress</code> 作为静态博客使用，需要替换掉默认的主题。这里使用官方主题： <code>@vuepress/theme-blog</code> 。</p>
<h4 id="安装-2">安装</h4>
<pre><code class="language-shell">yarn add @vuepress/theme-blog -D
# OR npm install @vuepress/theme-blog -D
</code></pre>
<h4 id="使用配置">使用&amp;配置</h4>
<p>在config.js 中添加主题相关配置：</p>
<pre><code class="language-javascript"> // .vuepress/config.js
module.exports = {
  title: '顾斯比',
  description: '顾斯比的博客 gusibi goodspeed',
  theme: '@vuepress/blog',
  themeConfig: {
     nav: [     // 导航条相关配置
            { text: '首页', link: '/' },
            { text: '标签', link: '/tag/'},
            { text: '关于 ', link: '/about/' },
            { text: 'github ', link: 'https://github.com/gusibi/', target:'_blank' },
        ],
        /**
       * Ref: https://vuepress-theme-blog.ulivz.com/config/#globalpagination
       */
        globalPagination: {
          lengthPerPage: 10,
        },

        /**
         * Ref: https://vuepress-theme-blog.ulivz.com/config/#sitemap
         */
        sitemap: {
            hostname: 'http://blog.gusibi.mobi/'
        },
  }
}
</code></pre>
<h4 id="目录">目录</h4>
<p>默认情況下，所有内容都必须放在 <code>_posts</code> 目录內，文件名为<code>标题.md</code>，例如<code>about.md</code>。</p>
<pre><code class="language-shell">└── _posts
    ├── ...
    └── about.md
</code></pre>
<h4 id="博客内容设置">博客内容设置</h4>
<p>Front matter 是用于指定博客文件的变量，必须放在博客文件的最上方。并且必须采用在三点划线之间书写的有效的 YAML。 这是一个基本的例子：</p>
<pre><code class="language-yaml">---
title: Blogging Like a Hacker # 博客标题
date: 2020-06-14              # 博客发布日期
tags:                         # 文章标签
    - 前端
  - dart
  - flutter
  - vue
summary: 这里是文章的摘要
---
</code></pre>
<h4 id="-2"></h4>
<p>其它变量：https://vuepress.vuejs.org/zh/guide/frontmatter.html</p>
<h5 id="url">URL</h5>
<p>默认情况下，path 路径则为文件目录的相对路径，比如：</p>
<pre><code class="language-shell">├── package.json
└── source
    ├── _post
    │   └── intro-vuepress.md
    ├── index.md
    └── tags.md
</code></pre>
<p>那么你就会获得以下的可用页面：</p>
<pre><code class="language-shell">/source/
/source/tags.html
/source/_post/intro-vuepress.html
</code></pre>
<p>推荐使用 <code>permalink</code> 指定文章的永久链接，可以使用全局配置来向所有页面应用永久链接：</p>
<pre><code class="language-JavaScript">// .vuepress/config.js
module.exports = {
  permalink: &quot;/:year/:month/:day/:slug&quot;
};
</code></pre>
<p>另外，你也可以只为单独一个页面去设置永久链接。这种方式比全局配置拥有更高的优先级。</p>
<p>📝 <strong>hello.md</strong>:</p>
<pre><code class="language-yaml">---
title: Hello World
permalink: /hello-world
---
Hello!
</code></pre>
<h5 id="内容">内容</h5>
<p>博客内容格式为 markdown，markdown 语法参考：https://www.markdownguide.org/</p>
<h3 id="插件">插件</h3>
<h4 id="搜索">搜索</h4>
<p><code>VuePress</code> 内置搜索，可以通过设置 <code>themeConfig.search: false</code> 来禁用默认的搜索框，或是通过 <code>themeConfig.searchMaxSuggestions</code> 来调整默认搜索框显示的搜索结果数量：</p>
<pre><code>module.exports = {
  themeConfig: {
    search: false,
    searchMaxSuggestions: 10
  }
}
</code></pre>
<p>你可以通过<a href="https://vuepress.vuejs.org/zh/guide/frontmatter.html#search">在页面的 frontmatter 中设置 <code>search</code></a> 来对单独的页面禁用内置的搜索框：</p>
<pre><code>---
search: false
---
</code></pre>
<p><strong>⚠️提示</strong></p>
<p><strong>内置搜索只会为页面的标题、****<code>h2</code></strong> <strong>、</strong> <strong><code>h3</code></strong> <strong>以及</strong> <strong><code>tags</code></strong> <strong>构建搜索索引。 如果你需要全文搜索，你可以使用</strong> <a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html#algolia-%E6%90%9C%E7%B4%A2"><strong>Algolia 搜索</strong></a><strong>。</strong></p>
<h4 id="google-analytics">google-analytics</h4>
<p>google-analytics是著名互联网公司Google为网站提供的数据统计服务。可以对目标网站进行访问数据统计和分析，并提供多种参数供网站拥有者使用。这里推荐安装：</p>
<h5 id="安装-3">安装</h5>
<p>使用以下命令安装</p>
<pre><code>yarn add -D @vuepress/plugin-google-analytics
# OR npm install -D @vuepress/plugin-google-analytics
</code></pre>
<h5 id="使用">使用</h5>
<p>将ga 配置添加到配置文件</p>
<pre><code class="language-JavaScript">module.exports = {
  plugins: [
    [
      '@vuepress/google-analytics',
      {
        'ga': '' // UA-00000000-0
      }
    ]
  ]
}
</code></pre>
<p>更多配置参考文档：https://vuepress.vuejs.org/zh/theme/default-theme-config.html</p>
<h4 id="rss">RSS</h4>
<p><code>vuepress</code> 包含rss 插件，可以直接在配置中添加以下内容启用：</p>
<pre><code class="language-JavaScript">module.exports = {
    ...
    themeConfig: {
      ...
      feed: {
         canonical_base: 'http://blog.gusibi.mobi/',
      },
    },
  };
</code></pre>
<h3 id="部署到github">部署到Github</h3>
<ol>
<li>在 docs/.vuepress/config.js 中设置正确的 base。</li>
</ol>
<blockquote>
<p>如果你打算发布到 https://.github.io/，则可以省略这一步，因为 base 默认即是 &quot;/&quot;。</p>
</blockquote>
<ol>
<li>在你的项目中，创建一个如下的 <code>deploy.sh</code> 文件:</li>
</ol>
<pre><code>#!/usr/bin/env sh

# 确保脚本抛出遇到的错误
set -e

# 生成静态文件
vuepress build --dest ./public

# 进入生成的文件夹
cd public

# 如果是发布到自定义域名
# echo 'blog.gusibi.mobi' &gt; CNAME

git add -A
git commit -m 'deploy'

# 发布到 https://&lt;USERNAME&gt;.github.io
git push -f git@github.com:gusibi/gusibi.github.io.git master

# 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;
# git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages

cd -
</code></pre>
<blockquote>
<p>也以使用github ci 在每次提交代码的时候自动部署到github.io，具体步骤可以自行搜索配置</p>
</blockquote>
<h3 id="-3"></h3>
<h3 id="参考链接">参考链接</h3>
<ol>
<li>Intro to VuePress 1.x： https://ulivz.com/2019/06/09/intro-to-vuepress-1-x/</li>
<li>默认主题配置： https://vuepress.vuejs.org/zh/theme/default-theme-config.html</li>
<li>https://www.markdownguide.org/</li>
<li>VuePress front matter 配置： https://vuepress.vuejs.org/zh/guide/frontmatter.html</li>
<li>VuePress 配置： https://vuepress.vuejs.org/zh/config/</li>
</ol>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/WDz3v4cU4LQq1oyKX-fYK1LxIThzZ1hK931ZaPRC8CdcB0t2oTYJciMDuAws70FY" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 安装配置]]></title>
        <id>http://blog.gusibi.site/post/flutter-00-install-and-setting/</id>
        <link href="http://blog.gusibi.site/post/flutter-00-install-and-setting/">
        </link>
        <updated>2020-06-06T01:07:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<ol>
<li>
<p>下载SDK：</p>
</li>
<li>
<ol>
<li>Windows SDK：<a href="https://storage.flutter-io.cn/flutter_infra/releases/stable/windows/flutter_windows_1.17.3-stable.zip">Stable 1.17.3</a></li>
<li>macOS SDK：<a href="https://storage.flutter-io.cn/flutter_infra/releases/stable/macos/flutter_macos_1.17.3-stable.zip">Stable 1.17.3</a></li>
<li>Linux SDK：<a href="https://storage.flutter-io.cn/flutter_infra/releases/stable/linux/flutter_linux_1.17.3-stable.tar.xz">Stable 1.17.3</a></li>
<li>其它版本列表：<a href="https://flutter.cn/docs/development/tools/sdk/archive">SDK 版本列表</a>[2]</li>
</ol>
</li>
<li>
<p>将文件解压到目标路径, 比如:</p>
</li>
</ol>
<pre><code class="language-shell">cd ~/flutter
unzip ~/Downloads/flutter_macos_1.17.3-stable.zip
</code></pre>
<p>也可以从Github上获取源代码：</p>
<pre><code class="language-shell">git clone https://github.com/flutter/flutter.git
</code></pre>
<ol>
<li>配置 <code>flutter</code> 的 PATH 环境变量：</li>
</ol>
<pre><code class="language-shell">export PATH=&quot;$PATH:~/flutter/flutter/bin&quot;
</code></pre>
<p><strong><code>~/flutter/flutter/bin 需要替换成你设置的目录。</code></strong></p>
<p>如果bash 使用的是 zsh，需要把这行代码写入到 <code>~/.zsh_rc</code> 文件，如果是bash，则需要写入 <code>~/.bash_profile</code> ，文件更新后需要执行</p>
<pre><code>source ~/.zsh_rc
</code></pre>
<ol>
<li><code>flutter</code> 命令行工具会下载不同平台的开发二进制文件，如果需要一个封闭式的构建环境，或在网络可用性不稳定的情况下使用等情况，你可能需要通过下面这个命令预先下载 iOS 和 Android 的开发二进制文件：</li>
</ol>
<pre><code class="language-shell">flutter precache
</code></pre>
<ol>
<li>flutter doctor 命令</li>
</ol>
<p>运行flutter doctor命令可以查看当前环境是否需要安装其他的依赖，输出结果如下：</p>
<pre><code class="language-shell">➜  ~ flutter doctor

Doctor summary (to see all details, run flutter doctor -v):
[✓] Flutter (Channel stable, v1.17.1, on Mac OS X 10.15.5 19F96, locale zh-Hans-CN)

[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.3)
[✓] Xcode - develop for iOS and macOS (Xcode 11.4.1)
[✓] Android Studio (version 4.0)
[!] IntelliJ IDEA Ultimate Edition (version 2020.1.1)
    ✗ Flutter plugin not installed; this adds Flutter specific functionality.
    ✗ Dart plugin not installed; this adds Dart specific functionality.
[✓] VS Code (version 1.45.1)
[✓] Connected device (1 available)

! Doctor found issues in 1 category.
</code></pre>
<p>从上述结果可以看出，IntelliJ IDEA Ultimate Edition 没有安装flutter plugin 和 dart plugin 没有安装。</p>
<ol>
<li>配置编辑器</li>
</ol>
<h3 id="设置-ios-开发环境">设置 iOS 开发环境</h3>
<ol>
<li>安装Xocde</li>
<li>配置 Xcode command-line tools:</li>
</ol>
<pre><code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
sudo xcodebuild -runFirstLaunch
</code></pre>
<ol>
<li>运行一次 Xcode 或者通过输入命令 <code>sudo xcodebuild -license</code> 来确保已经同意 Xcode 的许可协议</li>
</ol>
<p>安装了 Xcode 之后，你就可以在 iOS 真机或者模拟器上运行 Flutter 应用了。</p>
<h4 id="配置ios-模拟器">配置iOS 模拟器</h4>
<p>输入命令运行模拟器</p>
<pre><code>open -a Simulator
</code></pre>
<p>如果你想把 Flutter 应用部署到 iOS 的真机上，你还需要一个 Apple 开发者账号。另外，你还需要在 Xcode 上针对你的机器做一些设置。</p>
<ol>
<li>安装和设置 CocoaPods</li>
</ol>
<pre><code class="language-shell">sudo gem install cocoapods
pod setup
</code></pre>
<ol>
<li>
<p>按照下面 Xcode 签名流程来配置你的项目：</p>
</li>
<li>
<ol>
<li>通过在命令行中于你当前 Flutter 项目目录下运行 <code>open ios/Runner.xcworkspace</code> 命令来打开默认的 Xcode 工程。</li>
<li>在运行按钮的下拉列表里选择你想要部署到的设备；</li>
<li>在左侧的导航面板中选择 <code>Runner</code> 项目；</li>
<li>在 <code>Runner</code> 项目的设置页面，请确保勾选你的开发团队。在不同的 Xcode 版本里，这一部分的操作界面不同：</li>
</ol>
</li>
<li>
<ol>
<li>
<ol>
<li>在 Xcode 10 版本中，请在这里设置：General &gt; Signing &gt; Team</li>
<li>在 Xcode 11 版本以后，请在这里设置 Signing &amp; Capabilities &gt; Team</li>
</ol>
</li>
</ol>
</li>
<li>
<ol>
<li>在 Runner 项目的设置页面中，确保 General &gt; Signing &gt; Team 选项下的 Development Team 选中状态。</li>
</ol>
</li>
<li>
<ol>
<li>
<ol>
<li>在开始你的第一个 iOS 项目开发之前，你需要先在 Xcode 中登陆你的 Apple 开发者账号</li>
<li>任何 Apple ID 都可以进行开发和测试。如果想将应用上架 App Store，你需要加入 Apple Developer Program，你可以在 <a href="https://developer.apple.com/support/compare-memberships">Choosing a Membership</a> 页面中查看详细的说明。</li>
</ol>
</li>
</ol>
</li>
<li>
<ol>
<li>当你第一次将设备连接到开发机用于开发时，你需要分别在 Mac 和开发机上进行信任设备的操作。当你第一次连接时，会有个弹窗，点击 <code>Trust</code> 即可。</li>
</ol>
</li>
<li>
<ol>
<li>
<ol>
<li>然后在 iOS 开发机上进入 Settings 应用，选择 <strong>General &gt; Device Management</strong> 然后信任相应的证书</li>
</ol>
</li>
</ol>
</li>
<li>
<ol>
<li>如果 Xcode 的自动签名失败了，你可以检查以下项目中 <strong>General &gt; Identity &gt; Bundle Identifier</strong> 里的值是否是唯一的。</li>
</ol>
</li>
<li>
<p>执行 <code>flutter run</code> 命令来运行你的应用。</p>
</li>
</ol>
<h3 id="设置android-开发环境">设置Android 开发环境</h3>
<p>android 开发建议使用 Android Studio，也可以使用其它编辑器。</p>
<ol>
<li>下载 Android Studio</li>
<li>运行Android Studio，安装android SDK， Android SDK Platform-Tools 以及 Android SDK Build-Tools。</li>
</ol>
<h4 id="配置-android-设备">配置 Android 设备</h4>
<p>在 Android 设备上运行或测试 Flutter 应用之前，你需要一个运行 Android 4.1（API 版本 16）或者更高的设备。</p>
<ol>
<li>在设备上打开 <strong>Developer options</strong> 和 <strong>USB debugging</strong> 选项，你可以在 <a href="https://developer.android.google.cn/studio/debug/dev-options">Android documentation</a> 上查看更详细的方法介绍。</li>
<li>如果是在 Windows 平台上使用，需要安装 <a href="https://developer.android.google.cn/studio/run/win-usb">Google USB Driver</a></li>
<li>通过 USB 接口连接手机和电脑，如果在设备上弹出需要授权弹窗，允许授权以便让电脑能够访问你的开发设备。</li>
<li>在命令行中，使用 <code>flutter devices</code> 命令来确保 Flutter 能够识别出你所连接的 Android 设备。</li>
</ol>
<p>默认情况下，Flutter 会使用当前版本 <code>adb</code> 工具所依赖的 Android SDK 版本，如果你想让 Flutter 使用别的 Android SDK，你可以通过设置 <code>ANDROID_HOME</code> 环境变量来达到这个目的。</p>
<h4 id=""></h4>
<h4 id="配置-android-模拟器">配置 Android 模拟器</h4>
<p>根据以下步骤来将 Flutter 应用运行或测试于你的 Android 模拟器上：</p>
<ol>
<li>激活机器上的 <a href="https://developer.android.google.cn/studio/run/emulator-acceleration">VM acceleration</a> 选项。</li>
<li>启动 <strong>Android Studio &gt; Tools &gt; Android &gt; AVD Manager</strong>，然后选择 <strong>Create Virtual Device</strong> 选项。（只有在 Android 项目中才会显示 <strong>Android</strong> 子选项。）</li>
<li>选择相应的设备并选择 <strong>Next</strong> 选项。</li>
<li>选择一个或多个你想要模拟的 Android 版本的系统镜像，然后选择 <strong>Next</strong> 选项。推荐选择 <strong>x86</strong> 或者 <strong>x86_64</strong> 镜像。</li>
<li>在 Emulated Performance 下选择 <strong>Hardware - GLES 2.0</strong> 选项来开启 <a href="https://developer.android.google.cn/studio/run/emulator-acceleration">硬件加速</a>。</li>
<li>确保 AVD 选项配置正确，并选择 <strong>Finish</strong> 选项。<br>
想要查看上述步骤的更多详细信息，请查看 <a href="https://developer.android.google.cn/studio/run/managing-avds">Managing AVDs</a> 页面。</li>
<li>在 Android Virtual Device Manager 中，点击工具栏中的 <strong>Run</strong> 选项，模拟器会启动并为你所选择的系统版本和设备显示出相应的界面。</li>
</ol>
<h2 id="常见问题">常见问题</h2>
<h4 id="waiting-for-another-flutter-command-to-release-the-startup-lock">Waiting for another flutter command to release the startup lock</h4>
<p>打开AndroidStudio的时候顶部的模拟器一直是loading状态，运行flutter doctor 提示：</p>
<pre><code>Waiting for another flutter command to release the startup lock
</code></pre>
<p>解决方法，如下：</p>
<ol>
<li>打开flutter的安装目录/bin/cache/</li>
<li>删除lockfile文件</li>
<li>重启AndroidStudio</li>
</ol>
<h4 id="flutter-卡在-package-get-的解决办法"><strong>Flutter 卡在 package get 的解决办法</strong></h4>
<p>运行 flutter run 或者新建flutter 项目时卡在：</p>
<pre><code>Running &quot;flutter packages get&quot; in project_name...
</code></pre>
<p>大概率是遇到了防火墙，解决方案毕竟简单，添加两个环境变量即可，环境变量如下：</p>
<pre><code># linux mac 添加代理到 　.zsh_rc 或 .bash_profile
export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn
</code></pre>
<p>官方解决方案文档：<a href="https://links.jianshu.com/go?to=https://github.com/flutter/flutter/wiki/Using-Flutter-in-China">Using Flutter in China</a> https://flutter.dev/community/china[3]</p>
<h3 id="参考链接">参考链接</h3>
<ol>
<li><a href="https://flutter.cn/docs/get-started/install">安装和环境配置 https://flutter.cn/docs/get-started/install</a></li>
<li><a href="https://flutter.cn/docs/development/tools/sdk/archive">SDK 版本列表 https://flutter.cn/docs/development/tools/sdk/archive</a></li>
<li><a href="https://links.jianshu.com/go?to=https://github.com/flutter/flutter/wiki/Using-Flutter-in-China">Using Flutter in China</a> https://flutter.dev/community/china</li>
</ol>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/WDz3v4cU4LQq1oyKX-fYK1LxIThzZ1hK931ZaPRC8CdcB0t2oTYJciMDuAws70FY" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Facilitating Technical Writing Courses]]></title>
        <id>http://blog.gusibi.site/post/google-TFacilitating-Technical-Writing-Courses/</id>
        <link href="http://blog.gusibi.site/post/google-TFacilitating-Technical-Writing-Courses/">
        </link>
        <updated>2020-03-01T04:47:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Google 技术写作课程搬运，原文地址：<a href="https://developers.google.com/tech-writing/overview?hl=zh-cn">https://developers.google.com/tech-writing/overview?hl=zh-cn</a></p>
</blockquote>
<h2 id="facilitating-technical-writing-courses">Facilitating Technical Writing Courses</h2>
<p>This section provides resources for anyone facilitating or considering facilitating technical writing courses. The following table contains links to all relevant material for facilitators:</p>
<table>
<thead>
<tr>
<th></th>
<th>for facilitators</th>
<th>for students</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Course</td>
<td>Facilitator's Guide</td>
<td>slide deck</td>
<td>log</td>
<td>pre-class</td>
<td>in-class</td>
</tr>
<tr>
<td>Technical Writing One</td>
<td>Facilitator's Guide[1]</td>
<td>slide deck[2]</td>
<td>log[3]</td>
<td>pre-class[4]</td>
<td>in-class[5]</td>
</tr>
<tr>
<td>Technical Writing Two</td>
<td>Facilitator's Guide[6]</td>
<td>slide deck[7]</td>
<td>log[8]</td>
<td>pre-class[9]</td>
<td>in-class[10]</td>
</tr>
</tbody>
</table>
<p>If you'd like to facilitate a particular course, please start by reading the course's Facilitator's Guide.</p>
<p>To access slide decks, please read Gaining access to the slide deck[11].</p>
<h2 id="technical-writing-one-facilitators-guide">Technical Writing One: facilitator's guide</h2>
<p>This facilitator's guide helps prepare you to lead Technical Writing One.</p>
<h3 id="who-can-facilitate-this-course">Who can facilitate this course?</h3>
<p>Any good facilitator can lead this course; you don't need to be an expert in technical writing to lead this course. We designed this course to have students teach each other. Granted, facilitators with experience in technical writing can provide additional insights during the class.</p>
<h3 id="gaining-access-to-the-slide-deck">Gaining access to the slide deck</h3>
<p>To gain access to the slide deck, you must first become a member of the <code>technical-writing-instructors@googlegroups.com</code> group. Joining this group enrolls you in a world-wide <strong>community</strong> of technical writing facilitators. To build that community, use the list to do the following:</p>
<p>•Share training insights with your peers.•Answer questions respectfully, supportively, and generously.•Advertise any upcoming public technical writing courses.</p>
<p>Never do the following:</p>
<p>•Harm, bully, stalk, slander, or belittle anyone on this list.•Send messages not pertaining to technical writing training. Do not spam the list.</p>
<p>In short, treat others as you wish to be treated. If you treat others poorly, we will remove you from this list.</p>
<p>Finally, only humans may join this list. Machine learning is remarkable, but it doesn't belong on this list.</p>
<p><strong>Note:</strong> We reserve the right to change these guidelines.</p>
<p>Take the following steps to become a member:</p>
<p>1.Visit the technical-writing-instructors@googlegroups.com group page[12].2.Click <strong>Apply for membership.</strong></p>
<h3 id="course-contents">Course contents</h3>
<p>The course consists of the sections shown in Table 1.</p>
<p><strong>Table 1. Course Sections</strong></p>
<table>
<thead>
<tr>
<th>Section</th>
<th>Length (in hours)</th>
<th>What students do</th>
<th>What facilitators do</th>
</tr>
</thead>
<tbody>
<tr>
<td>pre-class exercises[13]</td>
<td>2 - 3</td>
<td>Read short lessons and work through quick exercises.</td>
<td>Assign pre-class material to your students.</td>
</tr>
<tr>
<td>In-class slide deck[14] and in-class exercises[15]</td>
<td>2.0 - 2.5</td>
<td>Work through six writing exercises. Participate in peer reviews and class discussions.</td>
<td>Facilitate the peer reviews and class discussions.</td>
</tr>
</tbody>
</table>
<h3 id="preparing-to-facilitate">Preparing to facilitate</h3>
<p>To prepare to facilitate this class, please do the following:</p>
<p>•Review the student pre-class work[16].•Review the slide deck[17].•Review the in-class exercises[18].</p>
<p>As with any class, we recommend the following:</p>
<p>•Practice the material prior to leading a live class.•If you have teaching assistants, decide what each of you will do during class.</p>
<h3 id="why-split-pre-class-work-from-in-class-work">Why split pre-class work from in-class work?</h3>
<p>The pre-class exercises build <strong>foundational skills</strong>. The in-class exercises help students <strong>integrate</strong> those foundational skills.</p>
<p>The pre-class exercises provide explicit instructions on discrete foundational topics. For example, one pre-class exercise teaches students to convert passive voice sentences to active voice. Another exercise teaches students to reduce the number of words in a sentence or to convert lengthy sentences into a list.</p>
<p>The instructions for in-class exercises are less specific than the pre-class exercises. For example, two of the in-class exercises simply tell students to &quot;improve these sentences.&quot; Students must integrate lessons learned in pre-class exercises to determine what to do.</p>
<p>Much of the pre-class and in-class material attempts to unite engineering process and theory with technical writing process and theory. We encourage facilitators to draw parallels between the two worlds whenever possible. (The speaker notes can help you draw those parallels.)</p>
<p>We've heard people refer to the pre-class content as &quot;design patterns for technical writing,&quot; which is a reasonable description. We've aimed to keep these patterns relatively simple to remember and easy to implement. As you facilitate this class, some students will object to a few of these patterns, noting that real-world writing is more nuanced and complex. You can reply that these design patterns are guidelines rather than hard-and-fast rules. You can additionally note that professional technical writers often rely on these patterns.</p>
<p>If a facilitator is not available (and students can't experience the in-class material), the pre-class material is still valuable.</p>
<h3 id="partner-discussions">Partner discussions</h3>
<p>Consider the following proverb:</p>
<blockquote>
<p>To learn, read a book. To learn better, take a course. To learn best, teach the course.</p>
</blockquote>
<p>How do you get 20 students to each teach the material simultaneously? If students are accustomed to reviewing their peers' work, then the class will quickly fill with animated conversation as students teach each other the material. However, those students unaccustomed to peer review may feel shy or awkward about defending their answers or offering useful suggestions. Be prepared to assure your students that their feedback helps their partner. For a very shy class, consider role-playing how to give appropriate feedback.</p>
<p>Encourage students to change their solutions based on feedback.</p>
<h3 id="class-discussions">Class discussions</h3>
<p>Each unit ends with a slide that asks some conversation-provoking questions. Your job is to incite discussion and then to extinguish that discussion when you are ready to move on. Generally, students will provide ideas, but be prepared with conversation starters should your class get a little shy. We've added a few conversation starter suggestions in the speaker notes.</p>
<p>The following list contains a few general tips about leading discussions:</p>
<p>•Be positive. Encourage students whenever possible. &quot;That's an excellent answer. Can anyone build on that answer?&quot;•Build a class where students feel comfortable giving answers. To break the ice in a shy class, ask questions that have no right or wrong answers.•Seek opinions. When there are several possible answers to exercises or questions, ask students which answer they prefer and why.</p>
<h3 id="pace">Pace</h3>
<p>We usually schedule the class for 2.0 or 2.5 hours. If a large percentage of students speak English as a second or third language, then schedule the class for 2.5 hours. Regardless of the overall class length, try to keep a fairly brisk pace.</p>
<p>Each class has a different personality and pace, so don't expect your class to match Table 2 exactly.</p>
<p><strong>Table 2. High-level timing for a 2.0 hour course</strong></p>
<table>
<thead>
<tr>
<th>Time from start</th>
<th>What you'll cover</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 - 30</td>
<td>Exercise 1 and Exercise 2</td>
</tr>
<tr>
<td>30 - 55</td>
<td>Exercise 3 and Intermezzo</td>
</tr>
<tr>
<td>55 - 95</td>
<td>Exercise 4 and Exercise 5</td>
</tr>
<tr>
<td>95 - 120</td>
<td>Exercise 6 and end-of-class slides</td>
</tr>
</tbody>
</table>
<p>For a 2.5 hour class, try to follow the schedule in Table 2, but don't be too concerned if some units take longer than shown.</p>
<p>Each exercise ends with one or more discussion slides, so make sure you factor those slides into your pacing.</p>
<h3 id="ideal-course-size">Ideal course size</h3>
<p>An ideal class has somewhere between 12 and 20 students. With too few students, it can sometimes be difficult to get good class discussions going. With too many students, class discussions can become awkward.</p>
<p>For large classes, we recommend having one teaching assistant for every 20 students (beyond the first 20 students). For example, for a class of 60 students, we recommend one facilitator and two teaching assistants.</p>
<h3 id="classroom-setup">Classroom setup</h3>
<p>You need a way to project the slides in a Google Slides deck. Therefore, you need the following equipment:</p>
<p>•A laptop that has a network connection and can display Google Slides. Verify that you can project the slides before the class begins.•A projector or screen that can display the images on your laptop clearly to the entire class.•Access to power sockets so that students can charge their laptops. (If power sockets aren't available, email students before class and tell them to charge their laptops before attending.)</p>
<p>Arrange the tables or desks in the classroom so that students can see the projected slides. Ensure that chairs are arranged so that students can easily talk to and trade laptops with their partners.</p>
<p>For large classrooms and to help those with hearing issues, we also recommend the following audio equipment:</p>
<p>•a microphone, preferably wireless so that the facilitator can walk around•speakers, especially for large classes•a hearing loop[19] (also called an audio induction loop)</p>
<p>When students don't have access to their own laptops, consider also bringing the following to class:</p>
<p>•paper•pens or pencils</p>
<p>Though not a requirement, some facilitators bring toothpaste tubes and toothbrushes so that students can act out Exercise 3.</p>
<h3 id="course-stability">Course stability</h3>
<p>We will fix bugs in the course and we might make a few additional small changes, but we don't anticipate making any big changes. We'll chronicle all significant changes to the course in the log[20].</p>
<h3 id="facilitation-tips">Facilitation tips</h3>
<p>Here are a few tips:</p>
<p>•When you assign an exercise, be absolutely clear on what students should do. Give students time to ask questions.•Read the room, trying to find the right balance between hurrying students along and giving them just enough time to complete (or nearly complete) the exercises.•Unstick any stuck students.</p>
<h2 id="technical-writing-two-facilitators-guide">Technical Writing Two: facilitator's guide</h2>
<p>This facilitator's guide helps prepare you to lead Technical Writing Two.</p>
<h3 id="who-can-facilitate-this-course-2">Who can facilitate this course?</h3>
<p>Any good facilitator can lead this course; you don't need to be an expert in technical writing to lead this course. We designed this course to have students teach each other. Granted, facilitators with experience in technical writing can provide additional insights during the class.</p>
<h3 id="gaining-access-to-the-slide-deck-2">Gaining access to the slide deck</h3>
<p>To gain access to the slide deck, you must first become a member of the <code>technical-writing-instructors@googlegroups.com</code> group. Joining this group enrolls you in a world-wide <strong>community</strong> of technical writing facilitators. To build that community, use the list to do the following:</p>
<p>•Share training insights with your peers.•Answer questions respectfully, supportively, and generously.•Advertise any upcoming public technical writing courses.</p>
<p>Never do the following:</p>
<p>•Harm, bully, stalk, slander, or belittle anyone on this list.•Send messages not pertaining to technical writing training. Do not spam the list.</p>
<p>In short, treat others as you wish to be treated. If you treat others poorly, we will remove you from this list.</p>
<p>Finally, only humans may join this list. Machine learning is remarkable, but it doesn't belong on this list.</p>
<p><strong>Note:</strong> We reserve the right to change these guidelines.</p>
<p>Take the following steps to become a member:</p>
<p>1.Visit the technical-writing-instructors@googlegroups.com group page[21].2.Click <strong>Apply for membership.</strong></p>
<h3 id="course-contents-2">Course contents</h3>
<p>The course consists of the sections shown in Table 1.</p>
<p><strong>Table 1. Course Sections</strong></p>
<table>
<thead>
<tr>
<th>Section</th>
<th>Length (in hours)</th>
<th>What students do</th>
<th>What facilitators do</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pre-class exercises[22]</td>
<td>1.0</td>
<td>Work through short exercises.</td>
<td>Assign pre-class work to your students.</td>
</tr>
<tr>
<td>In-class slide deck[23] and exercises[24]</td>
<td>2.0 - 2.5</td>
<td>Do four writing exercises. Participate in partner discussions. Participate in class discussions.</td>
<td>Facilitate the partner discussions and the class discussions.</td>
</tr>
</tbody>
</table>
<h3 id="preparing-to-facilitate-2">Preparing to facilitate</h3>
<p>To prepare to facilitate this class, please do the following:</p>
<p>•Review the pre-class exercises[25].•Review the slide deck[26].•Review the in-class exercises[27].</p>
<p>As with any class, we recommend the following:</p>
<p>•Practice the material prior to leading a live class.•If you have teaching assistants, decide what each of you will do during class.</p>
<h3 id="why-split-pre-class-work-from-in-class-work-2">Why split pre-class work from in-class work?</h3>
<p>The material in this class falls into two categories:</p>
<p>•Complex material that requires a fair amount of time, so the lesson is split across pre-class and in-class.•More straightforward material that we cover either in pre-class or in-class, but not both.</p>
<p>The in-class lessons lend themselves to student interaction; the pre-class lessons are good &quot;solo&quot; tasks. The pre-class lessons also serve as effective post-class refreshers.</p>
<p>If a facilitator is not available (and students can't experience the in-class material), the pre-class material is still valuable.</p>
<h3 id="partner-discussions-2">Partner discussions</h3>
<p>Consider the following proverb:</p>
<blockquote>
<p>To learn, read a book. To learn better, take a course. To learn best, teach the course.</p>
</blockquote>
<p>How do you get 20 students to each teach the material simultaneously? If students are accustomed to reviewing their peers' work, then the class will quickly fill with animated conversation as students teach each other the material. However, those students unaccustomed to peer review may feel shy or awkward about defending their answers or offering useful suggestions. Be prepared to assure your students that their feedback helps their partner. For a very shy class, consider role-playing how to give appropriate feedback.</p>
<p>Encourage students to change their solutions based on feedback.</p>
<h3 id="class-discussions-2">Class discussions</h3>
<p>Each unit ends with a slide that asks some conversation-provoking questions. Your job is to incite discussion and then to extinguish that discussion when you are ready to move on. Generally, students will provide ideas, but be prepared with conversation starters should your class get a little shy. We've added a few conversation starter suggestions in the speaker notes.</p>
<p>The following list contains a few general tips about leading discussions:</p>
<p>•Be positive. Encourage students whenever possible. &quot;That's an excellent answer. Can anyone build on that answer?&quot;•Build a class where students feel comfortable giving answers. To break the ice in a shy class, ask questions that have no right or wrong answers.•Seek opinions. When there are several possible answers to exercises or questions, ask students which answer they prefer and why.</p>
<h3 id="pace-2">Pace</h3>
<p>We usually schedule the class for 2.0 or 2.5 hours. If a large percentage of students speak English as a second or third language, then schedule the class for 2.5 hours. Regardless of the overall class length, try to keep a fairly brisk pace.</p>
<p><strong>Table 2. High-level timing for a 2.0 hour course</strong></p>
<table>
<thead>
<tr>
<th>Time from start</th>
<th>What you'll cover</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 - 30</td>
<td>Writing is rewriting</td>
</tr>
<tr>
<td>30 - 55</td>
<td>Illustrations</td>
</tr>
<tr>
<td>55 - 60</td>
<td>Intermezzo: Doc types</td>
</tr>
<tr>
<td>60 - 85</td>
<td>Descriptions</td>
</tr>
<tr>
<td>85 - 90</td>
<td>Intermezzo 2: How do you write a first draft?</td>
</tr>
<tr>
<td>90 - 117</td>
<td>Tutorials</td>
</tr>
<tr>
<td>117 - 120</td>
<td>Last few slides</td>
</tr>
</tbody>
</table>
<p>For a 2.5 hour class, try to follow the schedule in Table 2, but don't be too concerned if some units take longer than shown.</p>
<p>Each exercise ends with one or more discussion slides, so make sure you factor those slides into your pacing.</p>
<h3 id="ideal-course-size-2">Ideal course size</h3>
<p>An ideal class has somewhere between 12 and 20 students. With too few students, it can sometimes be difficult to get good class discussions going. With too many students, class discussions can become awkward.</p>
<p>For large classes, we recommend having one teaching assistant for every 20 students (beyond the first 20 students). For example, for a class of 60 students, we recommend one facilitator and two teaching assistants.</p>
<h3 id="classroom-setup-2">Classroom setup</h3>
<p>You need a way to project the slides in a Google Slides deck. Therefore, you need the following equipment:</p>
<p>•A laptop that has a network connection and can display Google Slides. Verify that you can project the slides before the class begins.•A projector or screen that can display the images on your laptop clearly to the entire class.•Access to power sockets so that students can charge their laptops. (If power sockets aren't available, email students before class and tell them to charge their laptops before attending.)</p>
<p>Arrange the tables or desks in the classroom so that students can see the projected slides. Ensure that chairs are arranged so that students can easily talk to and trade laptops with their partners.</p>
<p>For large classrooms and to help those with hearing issues, we also recommend the following audio equipment:</p>
<p>•a microphone, preferably wireless so that the facilitator can walk around•speakers, especially for large classes•a hearing loop[28] (also called an audio induction loop)</p>
<p>When students don't have access to their own laptops, consider also bringing the following to class:</p>
<p>•paper•pens or pencils</p>
<p>Although this is a laptop course, some students prefer to do the Illustrations exercise on paper.</p>
<h3 id="course-stability-2">Course stability</h3>
<p>We will fix bugs in the course and we might make a few additional small changes, but we don't anticipate making any big changes. We'll chronicle all significant changes to the course in the log[29].</p>
<h3 id="facilitation-tips-2">Facilitation tips</h3>
<p>Here are a few tips:</p>
<p>•When you assign an exercise, be absolutely clear on what students should do. Give students time to ask questions.•Read the room, trying to find the right balance between hurrying students along and giving them just enough time to complete (or nearly complete) the exercises.•Unstick any stuck students.</p>
<h3 id="references">References</h3>
<p><code>[1]</code> Facilitator's Guide: <em>https://developers.google.com/tech-writing/for-instructors/one/instructors-guide?hl=zh-cn</em><br>
<code>[2]</code> slide deck: <em>https://docs.google.com/presentation/d/1Q7mpI2KNuh1kALXYbG-PqA9sRV9M-1IoKxy_PFB2J0E?hl=zh-cn</em><br>
<code>[3]</code> log: <em>https://developers.google.com/tech-writing/for-instructors/release-notes?hl=zh-cn#One</em><br>
<code>[4]</code> pre-class: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[5]</code> in-class: <em>https://developers.google.com/tech-writing/onel?hl=zh-cn</em><br>
<code>[6]</code> Facilitator's Guide: <em>https://developers.google.com/tech-writing/for-instructors/two/instructors-guide?hl=zh-cn</em><br>
<code>[7]</code> slide deck: <em>https://docs.google.com/presentation/d/1hsusV5rt34HP4IXOFfdyJGryFJfeuPkee3XoFKp5qgA?hl=zh-cn</em><br>
<code>[8]</code> log: <em>https://developers.google.com/tech-writing/for-instructors/release-notes?hl=zh-cn#Two</em><br>
<code>[9]</code> pre-class: <em>https://developers.google.com/tech-writing/two?hl=zh-cn</em><br>
<code>[10]</code> in-class: <em>https://developers.google.com/tech-writing/twol?hl=zh-cn</em><br>
<code>[11]</code> Gaining access to the slide deck: <em>https://developers.google.com/tech-writing/for-instructors/one/instructors-guide?hl=zh-cn#gaining-access-to-the-slide-deck</em><br>
<code>[12]</code> technical-writing-instructors@googlegroups.com group page: <em>https://groups.google.com/d/forum/technical-writing-instructors?hl=zh-cn</em><br>
<code>[13]</code> pre-class exercises: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[14]</code> In-class slide deck: <em>https://docs.google.com/presentation/d/1Q7mpI2KNuh1kALXYbG-PqA9sRV9M-1IoKxy_PFB2J0E?hl=zh-cn</em><br>
<code>[15]</code> in-class exercises: <em>https://developers.google.com/tech-writing/onel?hl=zh-cn</em><br>
<code>[16]</code> pre-class work: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[17]</code> slide deck: <em>https://docs.google.com/presentation/d/1Q7mpI2KNuh1kALXYbG-PqA9sRV9M-1IoKxy_PFB2J0E?hl=zh-cn</em><br>
<code>[18]</code> in-class exercises: <em>https://developers.google.com/tech-writing/onel?hl=zh-cn</em><br>
<code>[19]</code> hearing loop: <em>https://www.hearinglink.org/living/loops-equipment/hearing-loops/what-is-a-hearing-loop/</em><br>
<code>[20]</code> log: <em>https://developers.google.com/tech-writing/for-instructors/release-notes?hl=zh-cn</em><br>
<code>[21]</code> technical-writing-instructors@googlegroups.com group page: <em>https://groups.google.com/d/forum/technical-writing-instructors?hl=zh-cn</em><br>
<code>[22]</code> exercises: <em>https://developers.google.com/tech-writing/two?hl=zh-cn</em><br>
<code>[23]</code> slide deck: <em>https://docs.google.com/presentation/d/1hsusV5rt34HP4IXOFfdyJGryFJfeuPkee3XoFKp5qgA?hl=zh-cn</em><br>
<code>[24]</code> exercises: <em>https://developers.google.com/tech-writing/twol?hl=zh-cn</em><br>
<code>[25]</code> pre-class exercises: <em>https://developers.google.com/tech-writing/two?hl=zh-cn</em><br>
<code>[26]</code> slide deck: <em>https://docs.google.com/presentation/d/1hsusV5rt34HP4IXOFfdyJGryFJfeuPkee3XoFKp5qgA?hl=zh-cn</em><br>
<code>[27]</code> in-class exercises: <em>https://developers.google.com/tech-writing/twol?hl=zh-cn</em><br>
<code>[28]</code> hearing loop: <em>https://www.hearinglink.org/living/loops-equipment/hearing-loops/what-is-a-hearing-loop/</em><br>
<code>[29]</code> log: <em>https://developers.google.com/tech-writing/for-instructors/release-notes?hl=zh-cn</em></p>
<hr>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Technical Writing Courses]]></title>
        <id>http://blog.gusibi.site/post/google-Technical-Writing-Courses/</id>
        <link href="http://blog.gusibi.site/post/google-Technical-Writing-Courses/">
        </link>
        <updated>2020-03-01T04:46:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Google 技术写作课程搬运，原文地址：<a href="https://developers.google.com/tech-writing/overview?hl=zh-cn">https://developers.google.com/tech-writing/overview?hl=zh-cn</a></p>
</blockquote>
<h1 id="technical-writing-courses">Technical Writing Courses</h1>
<p>Every engineer is also a writer.</p>
<p>This collection of courses and learning resources aims to improve your technical documentation. Learn how to plan and author technical documents. You can also learn about the role of technical writers at Google.</p>
<h1 id="overview-of-technical-writing-courses">Overview of technical writing courses</h1>
<p>The following table summarizes the technical writing courses:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Take this course...</th>
<th style="text-align:left">Title</th>
<th style="text-align:left">Focus</th>
<th style="text-align:left">Pre-Class</th>
<th style="text-align:left">In-Class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">first</td>
<td style="text-align:left"><a href="http://blog.gusibi.site/post/google-technical-writing-courses/#technical-writing-one">Technical Writing One</a></td>
<td style="text-align:left">the critical basics of technical writing</td>
<td style="text-align:left">2 hours</td>
<td style="text-align:left">2 to 2.5 hours</td>
</tr>
<tr>
<td style="text-align:left">second</td>
<td style="text-align:left"><a href="http://blog.gusibi.site/post/google-technical-writing-courses/#technical-writing-two">Technical Writing Two</a></td>
<td style="text-align:left">intermediate topics in technical writing</td>
<td style="text-align:left">1 hour</td>
<td style="text-align:left">2 to 2.5 hours</td>
</tr>
</tbody>
</table>
<p>The pre-class components introduce topics; the in-class components help students integrate those topics. That said, the pre-class lessons on their own still provide a valuable educational experience.</p>
<p>We've aimed <em>Technical Writing One</em> and <em>Technical Writing Two</em> at the following audiences:</p>
<ul>
<li>software engineers</li>
<li>software engineering students</li>
</ul>
<p>Additionally, many people in engineering-adjacent roles (such as product managers) have also benefited from these courses.</p>
<h1 id="technical-writing-one">Technical Writing One</h1>
<h2 id="technical-writing-one-introduction">Technical Writing One introduction</h2>
<p>Technical Writing One teaches you how to write clearer technical documentation.</p>
<h4 id="target-audience">Target audience</h4>
<p>You need at least a little writing proficiency in English, but you don't need to be a strong writer to take this course.</p>
<p>If you've never taken any technical writing training, this course is perfect for you. If you've taken technical writing training, this class provides an efficient refresher.</p>
<h4 id="learning-objectives">Learning objectives</h4>
<p>This course teaches you the fundamentals of technical writing. After completing this class, you will know how to do the following:</p>
<ul>
<li>Use terminology—including abbreviations and acronyms—consistently.</li>
<li>Recognize and disambiguate pesky pronouns.</li>
<li>Distinguish active voice from passive voice.</li>
<li>Convert passive voice sentences to active voice.</li>
<li>Identify three ways in which active voice is superior to passive voice.</li>
<li>Develop at least three strategies to make sentences clearer and more engaging.</li>
<li>Develop at least four strategies to shorten sentences.</li>
<li>Understand the difference between bulleted lists and numbered lists.</li>
<li>Create helpful lists.</li>
<li>Create effective lead sentences for paragraphs.</li>
<li>Focus each paragraph on a single topic.</li>
<li>State key points at the start of each document.</li>
<li>Identify your target audience.</li>
<li>Determine what your target audience already knows and what your target audience needs to learn.</li>
<li>Understand the curse of knowledge.</li>
<li>Identify and revise idioms.</li>
<li>State your document's scope (goals) and audience.</li>
<li>Break long topics into appropriate sections.</li>
<li>Use commas, parentheses, colons, em-dashes, and semicolons properly.</li>
<li>Develop beginner competency in Markdown.</li>
</ul>
<p>It takes years of focused practice to become a great engineer or a great technical writer. This course will improve your technical writing but will not instantly transform you into a great technical writer.</p>
<h4 id="pre-class-and-in-class-components">Pre-class and in-class components</h4>
<p>The course consists of the following two components:</p>
<ul>
<li>pre-class</li>
<li>in-class</li>
</ul>
<p>You are currently viewing the start of the pre-class component.</p>
<p>The in-class component enhances the lessons taught in the pre-class components. That said, the pre-class lessons on their own still provide a valuable educational experience.</p>
<h4 id="hardware-and-network-requirements">Hardware and network requirements</h4>
<p>Although this course is optimized for a laptop or desktop, you may take the course on a tablet or phone. If you are taking the in-class component, please note that you'll type a lot.</p>
<p>You need an internet connection to take the course. You cannot download the course. The course is not available on tangible media.</p>
<p>The course contains a few short videos, all of which are optional viewing. If you want to skip the videos, then you can take the course on a low-bandwidth internet connection.</p>
<h4 id="optional-units">Optional units</h4>
<p>We've marked a few units as <strong>optional</strong>. This material isn't essential, though you'll probably find the material useful.</p>
<h2 id="just-enough-grammar-optional">Just enough grammar (optional)</h2>
<p>This unit provides just enough grammar to understand the remainder of the course. If you already know some grammar, move on to <a href="https://developers.google.com/tech-writing/one/words?hl=zh-cn">Words</a>. Otherwise, read on.</p>
<p>For simplicity's sake, this unit takes a few shortcuts; grammatical topics are actually wildly more complicated than this unit suggests.</p>
<p>Grammarians don't all agree on the number or types of parts of speech. The following table focuses on the parts of speech relevant to this course:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Part of Speech</th>
<th style="text-align:left">Definition</th>
<th style="text-align:left">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Noun</td>
<td style="text-align:left">a person, place, concept, or thing</td>
<td style="text-align:left"><strong>Sam</strong> runs <strong>races</strong>.</td>
</tr>
<tr>
<td style="text-align:left">Pronoun</td>
<td style="text-align:left">a noun that substitutes for another noun</td>
<td style="text-align:left">Sam runs races. <strong>He</strong> likes to compete.</td>
</tr>
<tr>
<td style="text-align:left">Adjective</td>
<td style="text-align:left">a word or phrase that modifies a noun</td>
<td style="text-align:left">Sam wears <strong>blue</strong> shoes.</td>
</tr>
<tr>
<td style="text-align:left">Verb</td>
<td style="text-align:left">an action word or phrase</td>
<td style="text-align:left">Sam <strong>runs</strong> races.</td>
</tr>
<tr>
<td style="text-align:left">Adverb</td>
<td style="text-align:left">a word or phrase that modifies a verb, an adjective, or another adverb</td>
<td style="text-align:left">Sam runs <strong>slowly</strong>.</td>
</tr>
<tr>
<td style="text-align:left">Preposition</td>
<td style="text-align:left">a word or phrase specifying the positional relationship of two nouns</td>
<td style="text-align:left">Sam's sneakers are seldom <strong>on</strong> his shelf.</td>
</tr>
<tr>
<td style="text-align:left">Conjunction</td>
<td style="text-align:left">a word that connects two nouns or phrases</td>
<td style="text-align:left">Sam's trophies <strong>and</strong> ribbons live only in his imagination.</td>
</tr>
<tr>
<td style="text-align:left">Transition</td>
<td style="text-align:left">a word or phrase that connects two sentences</td>
<td style="text-align:left">Sam runs races weekly. <strong>However</strong>, he finishes races weakly.</td>
</tr>
</tbody>
</table>
<h3 id="nouns">Nouns</h3>
<p>Nouns represent people, places, or things. <strong>Judy</strong>, <strong>Antarctica</strong>, and <strong>hammers</strong> are all nouns, but so are intangible concepts like <strong>robustness</strong> and <strong>perfection</strong>. For example, we've highlighted the nouns in the following passage:</p>
<blockquote>
<p>In the <strong>framework</strong>, an <strong>object</strong> must copy any underlying <strong>values</strong> that the <strong>object</strong> wants to change. The <strong>protos</strong> in the <strong>codebase</strong> are huge, so copying the <strong>protos</strong> is unacceptably expensive.</p>
</blockquote>
<p>In programming, you might think of classes and variables as your program's nouns.</p>
<h4 id="exercise">Exercise</h4>
<p>Identify the six nouns in the following passage:</p>
<blockquote>
<p>C enables programmers to control pointers and memory. Great power brings great responsibility.</p>
</blockquote>
<h5 id="answer">Answer</h5>
<p>You can find the nouns in boldface:</p>
<blockquote>
<p><strong>C</strong> enables <strong>programmers</strong> to control <strong>pointers</strong> and <strong>memory</strong>. Great <strong>power</strong> brings great <strong>responsibility</strong>.</p>
</blockquote>
<p>Now suppose the second sentence was the following:</p>
<blockquote>
<p>Great control brings great responsibility.</p>
</blockquote>
<p>Is &quot;control&quot; a verb or is it a noun?</p>
<p>In this context, &quot;control&quot; is a noun, even though &quot;to control&quot; in the first sentence is a verb. Many words in English serve as a noun in some contexts and a verb in others.</p>
<h3 id="pronouns">Pronouns</h3>
<p>Pronouns are an indirection layer—pointers to or substitutions for other nouns or sentences. For example, consider the following two sentences:</p>
<blockquote>
<p>Janet writes great code. <strong>She</strong> is a senior staff engineer.</p>
</blockquote>
<p>In the preceding example, the first sentence establishes <strong>Janet</strong> as a noun. The second sentence substitutes the pronoun <strong>She</strong> for the noun <strong>Janet</strong>.</p>
<p>In the following example, the pronoun <strong>This</strong> substitutes for the entire sentence that preceded it:</p>
<blockquote>
<p>Most applications aren't sufficiently tested. <strong>This</strong> is poor engineering.</p>
</blockquote>
<h4 id="exercise-2">Exercise</h4>
<p>Identify the three pronouns in the following passage:</p>
<blockquote>
<p>The cafeteria featured peashew butter and pluot jam on pumperye toast. Employees found it awesome and wished they could eat this every day.</p>
</blockquote>
<h5 id="answer-2">Answer</h5>
<blockquote>
<p>The cafeteria featured peashew butter and pluot jam on pumperye toast. Employees found <strong>it</strong> awesome and wished <strong>they</strong> could eat <strong>this</strong> every day.</p>
</blockquote>
<h3 id="verbs">Verbs</h3>
<p>A verb is an action word or phrase. When you want to represent the relationship between two nouns (an actor and a target), the verb does the work. A verb identifies what the actor does to the target.</p>
<p>Each sentence must contain at least one verb. For example, each of the following sentences contain a single verb:</p>
<ul>
<li>Sakai <strong>prefers</strong> pasta.</li>
<li>Rick <strong>likes</strong> the ocean.</li>
<li>Smurfs <strong>are</strong> blue.</li>
<li>Jess <strong>suffers</strong> from allergies.</li>
</ul>
<p>Some sentences, such as the following, contain multiple verbs:</p>
<ul>
<li>Nala <strong>suffers</strong> from allergies and <strong>sneezes</strong> constantly.</li>
<li>Chung <strong>likes</strong> snacks <strong>to eat</strong> while <strong>riding</strong> the train.</li>
</ul>
<p>Depending on the tense and the conjugation, a verb could consist of one word or multiple words. For example:</p>
<ul>
<li>Tina <strong>was eating</strong> breakfast a few hours ago.</li>
<li>Tina <strong>is eating</strong> lunch right now.</li>
<li>Tina <strong>will eat</strong> dinner tonight at 7:00.</li>
</ul>
<h4 id="exercise-3">Exercise</h4>
<p>Identify the verbs in the following passage:</p>
<blockquote>
<p>Samantha is coding Operation Bullwinkle in C++. This project currently consumes over 80,000 lines of code. She previously used Python, but recently gravitated to C++. Samantha leads a team of four software engineers, which will grow to six software engineers next quarter.</p>
</blockquote>
<h5 id="answer-3">Answer</h5>
<blockquote>
<p>Samantha <strong>is coding</strong> Operation Bullwinkle in C++. This project currently <strong>consumes</strong> over 80,000 lines of code. She previously <strong>used</strong> Python, but recently <strong>gravitated</strong> to C++. Samantha <strong>leads</strong> a team of four software engineers, which <strong>will grow</strong> to six software engineers next quarter.</p>
</blockquote>
<h3 id="adjectives-and-adverbs">Adjectives and adverbs</h3>
<p>Adjectives modify nouns. For example, in the following passage, notice how the adjectives modify the subsequent noun:</p>
<ul>
<li>Tom likes <strong>red</strong> balloons. He prepares <strong>delicious</strong> food. He fixed <strong>eight</strong> bugs at work.</li>
</ul>
<p>Most adverbs modify verbs. For example, notice how the adverb (<strong>efficiently</strong>) in the following sentence modifies the verb (<strong>fixes</strong>):</p>
<ul>
<li>Jane <strong>efficiently</strong> fixes bugs.</li>
</ul>
<p>Adverbs are not necessarily right next to their verb. For example, in the following sentence, the adverb (<strong>efficiently</strong>) is two words away from the verb (<strong>fixes</strong>):</p>
<ul>
<li>Jane fixes bugs <strong>efficiently</strong>.</li>
</ul>
<p>Adverbs can also modify adjectives or other adverbs.</p>
<h4 id="exercise-4">Exercise</h4>
<p>Identify the four adjectives in the following passage:</p>
<blockquote>
<p>Engineering is a great career for brilliant minds. I know five engineers who could excel at any intellectual task.</p>
</blockquote>
<h5 id="answer-4">Answer</h5>
<blockquote>
<p>Engineering is a <strong>great</strong> career for <strong>brilliant</strong> minds. I know <strong>five</strong> engineers who could excel at any <strong>intellectual</strong> task.</p>
</blockquote>
<h3 id="conjunctions-and-transitions">Conjunctions and transitions</h3>
<p>Conjunctions connect phrases or nouns <em>within</em> a sentence; transitions connect sentences themselves.</p>
<p>The most important conjunctions are as follows:</p>
<ul>
<li>and</li>
<li>but</li>
<li>or</li>
</ul>
<p>For example, in the following sentence, <strong>and</strong> connects &quot;code&quot; with &quot;documentation,&quot; while <strong>but</strong> connects the first half of the sentence with the second.</p>
<blockquote>
<p>Natasha writes great internal code <strong>and</strong> documentation <strong>but</strong> seldom works on open-source projects.</p>
</blockquote>
<p>The most important transitions in technical writing are as follows:</p>
<ul>
<li>however</li>
<li>therefore</li>
<li>for example</li>
</ul>
<p>For example, in the following passage, notice how the transitions connect and contextualize the sentences:</p>
<blockquote>
<p>Juan is a wonderful coder. <strong>However</strong>, he rarely writes sufficient tests. <strong>For example</strong>, Juan coded a 5,000 line FFT package that contained only a single 10-line unit test.</p>
</blockquote>
<h4 id="exercise-5">Exercise</h4>
<p>Fill in the most appropriate transition:</p>
<blockquote>
<p>Barbara typically studies problems for a long time before writing the first line of code. _____________, she spontaneously coded a method the other day when she was suddenly inspired.</p>
</blockquote>
<h5 id="answer-5">Answer</h5>
<p>The best transition for this situation is as follows:</p>
<blockquote>
<p>However</p>
</blockquote>
<h2 id="words">Words</h2>
<p>We researched documentation extensively, and it turns out that the best sentences in the world consist primarily of words.</p>
<h3 id="define-new-or-unfamiliar-terms">Define new or unfamiliar terms</h3>
<p>When writing or editing, learn to recognize terms that might be unfamiliar to some or all of your target audience. When you spot such a term, take one of the following two tactics:</p>
<ul>
<li>If the term already exists, link to a good existing explanation. (Don't reinvent the wheel.)</li>
<li>If your document is introducing the term, define the term. If your document is introducing many terms, collect the definitions into a glossary.</li>
</ul>
<p>Use terms consistently</p>
<p>If you change the name of a variable midway through a method, your code won’t compile. Similarly, if you rename a term in the middle of a document, your ideas won’t compile (in your users’ heads).</p>
<p>The moral: apply the same unambiguous word or term consistently throughout your document. Once you've named a component <strong>thingy</strong>, don't rename it <strong>thingamabob</strong>. For example, the following paragraph mistakenly renames <strong>Protocol Buffers</strong> to <strong>protobufs</strong>:</p>
<blockquote>
<p>Protocol Buffers provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs.</p>
</blockquote>
<p>Yes, technical writing is cruel and restrictive, but at least technical writing provides an excellent workaround. Namely, when introducing a long-winded concept name or product name, you may also specify a shortened version of that name. Then, you may use that shortened name throughout the document. For example, the following paragraph is fine:</p>
<blockquote>
<p><strong>Protocol Buffers</strong> (or <strong>protobufs</strong> for short) provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs.</p>
</blockquote>
<h3 id="use-acronyms-properly">Use acronyms properly</h3>
<p>On the initial use of an unfamiliar acronym within a document or a section, spell out the full term, and then put the acronym in parentheses. Put both the spelled-out version and the acronym in boldface. For example:</p>
<blockquote>
<p>This document is for engineers who are new to the <strong>Telekinetic Tactile Network</strong> (<strong>TTN</strong>) or need to understand how to order TTN replacement parts through finger motions.</p>
</blockquote>
<p>You may then use the acronym going forward, as in the following example:</p>
<blockquote>
<p>If no cache entry exists, the Mixer calls the <strong>OttoGroup Server</strong> (<strong>OGS</strong>) to fetch Ottos for the request. The OGS is a repository that holds all servable Ottos. The OGS is organized in a logical tree structure, with a root node and two levels of leaf nodes. The OGS root forwards the request to the leaves and collects the responses.</p>
</blockquote>
<p>Do not cycle back-and-forth between the acronym and the expanded version in the same document.</p>
<h4 id="use-the-acronym-or-the-full-term">Use the acronym or the full term?</h4>
<p>Sure, you can introduce and use acronyms properly, but <em>should</em> you use acronyms? Well, acronyms do reduce sentence size. For example, <em>TTN</em> is two words shorter than <em>Telekinetic Tactile Network</em>. However, acronyms are really just a layer of abstraction; readers must mentally expand recently learned acronyms to the full term. For example, readers convert <em>TTN</em> to <em>Telekinetic Tactile Network</em> in their heads, so the &quot;shorter&quot; acronym actually takes a little longer to process than the full term.</p>
<p>Heavily used acronyms develop their own identity. After a number of occurrences, readers generally stop expanding acronyms into the full term. Many Web developers, for example, have forgotten what <em>HTML</em> expands to.</p>
<p>Here are the guidelines for acronyms:</p>
<ul>
<li>Don't define acronyms that would only be used a few times.</li>
<li>Do define acronyms that meet both of the following criteria:
<ul>
<li>The acronym is significantly shorter than the full term.</li>
<li>The acronym appears many times in the document.</li>
</ul>
</li>
</ul>
<h4 id="exercise-6">Exercise</h4>
<p>Fix the following passage. Assume that this passage is the initial instance of the term <strong>MapReduce</strong> in the document and that <strong>MR</strong> is the best abbreviation:</p>
<blockquote>
<p>Jeff Dean invented MapReduce in 1693, implementing the algorithm on a silicon-based computer fabricated from beach sand, wax-paper, a quill pen, and a toaster oven. His version of MR held several world performance records until 2014.</p>
</blockquote>
<h5 id="answer-6">Answer</h5>
<p>You could take a few different approaches here. One approach is to associate the acronym <em>MR</em> with the full term and then use that acronym:</p>
<blockquote>
<p>Jeff Dean invented <strong>MapReduce</strong> (<strong>MR</strong>) in... This version of MR held several...</p>
</blockquote>
<p>Alternatively, you could decide that defining an acronym for such a short passage puts too much burden on readers, so you'll simply use the full term <em>MapReduce</em> every time:</p>
<blockquote>
<p>Jeff Dean invented <strong>MapReduce</strong> in... This version of MapReduce held several...</p>
</blockquote>
<p>Incidentally, a more thorough technical writer would also convert &quot;beach sand, wax-paper, a quill pen, and a toaster oven&quot; into a bulleted list. However, that's another story for another lesson.</p>
<hr>
<h3 id="disambiguate-pronouns">Disambiguate pronouns</h3>
<p>Many pronouns point to a previously introduced noun. Such pronouns are analogous to pointers in programming. Like pointers in programming, pronouns tend to introduce errors. Improperly using pronouns causes the cognitive equivalent of a <code>nullptr</code> error in your readers’ heads. In many cases, you should simply avoid the pronoun and just reuse the noun. However, the utility of a pronoun sometimes outweighs its risk (as in this sentence).</p>
<p>Consider the following pronoun guidelines:</p>
<ul>
<li>Only use a pronoun <em>after</em> you've introduced the noun; never use the pronoun before you've introduced the noun.</li>
<li>Place the pronoun as close as possible to the referring noun. As a rule of thumb, if more than five words separate your noun from your pronoun, consider repeating the noun instead of using the pronoun.</li>
<li>If you introduce a second noun between your noun and your pronoun, reuse your noun instead of using a pronoun.</li>
</ul>
<h4 id="it-and-they">It and they</h4>
<p>The following pronouns cause the most confusion in technical documentation:</p>
<ul>
<li>it</li>
<li>they, them, and their</li>
</ul>
<p>For example, in the following sentence, does <strong>It</strong> refer to Python or to C++?</p>
<blockquote>
<p>Python is interpreted, while C++ is compiled. <strong>It</strong> has an almost cult-like following.</p>
</blockquote>
<p>As another example, what does <strong>their</strong> refer to in the following sentence?</p>
<blockquote>
<p>Be careful when using Frambus or Carambola with HoobyScooby or BoiseFram because a bug in <strong>their</strong> core may cause accidental mass unfriending.</p>
</blockquote>
<h4 id="this-and-that">This and that</h4>
<p>Consider two additional problem pronouns:</p>
<ul>
<li>this</li>
<li>that</li>
</ul>
<p>For example, in this following ambiguous sentence, <strong>This</strong> could refer to Frambus, to Foo, or to both:</p>
<blockquote>
<p>You may use either Frambus or Foo to calculate derivatives. <strong>This</strong> is not optimal.</p>
</blockquote>
<p>Use either of the following tactics to disambiguate <strong>this</strong> and <strong>that</strong>:</p>
<ul>
<li>Replace <strong>this</strong> or <strong>that</strong> with the appropriate noun.</li>
<li>Place a noun immediately after <strong>this</strong> or <strong>that</strong>.</li>
</ul>
<p>For example, either of the following sentences disambiguate the previous example:</p>
<blockquote>
<p><strong>Overlapping functionality</strong> is not optimal.</p>
<p><strong>This overlapping functionality</strong> is not optimal.</p>
</blockquote>
<h4 id="exercise-7">Exercise</h4>
<p>Identify all possible meanings for the ambiguous pronouns in each of the following passages:</p>
<ol>
<li>Aparna and Phil share responsibilities with Maysam and Karan and they are the next ones on call.</li>
<li>You may import Carambola data via your configuration file or dynamically at run time. This may be a security risk.</li>
</ol>
<h5 id="answer-7">Answer</h5>
<ol>
<li>The pronoun <strong>they</strong> could refer to any of the following:
<ul>
<li>Aparna and Phil</li>
<li>Maysam and Karan</li>
<li>Aparna, Phil, Maysam, and Karan</li>
</ul>
</li>
<li>The pronoun <strong>this</strong> could refer to any of the following:
<ul>
<li>importing via the configuration file</li>
<li>importing dynamically at run time</li>
<li>both</li>
</ul>
</li>
</ol>
<hr>
<h2 id="active-voice-vs-passive-voice">Active voice vs. passive voice</h2>
<p>The vast majority of sentences in technical writing should be in active voice. This unit teaches you how to do the following:</p>
<ul>
<li>Distinguish passive voice from active voice.</li>
<li>Convert passive voice to active voice because active voice is usually clearer.</li>
</ul>
<p>First, watch this video, just to get the ball rolling<a href="https://developers.google.com/tech-writing/one/active-voice?hl=zh-cn#Footnote1">1</a>:</p>
<p>https://youtu.be/nG6DhoFt938</p>
<h3 id="distinguish-active-voice-from-passive-voice-in-simple-sentences">Distinguish active voice from passive voice in simple sentences</h3>
<p>In an active voice sentence, an actor acts on a target. That is, an active voice sentence follows this formula:</p>
<blockquote>
<p>Active Voice Sentence = actor + verb + target</p>
</blockquote>
<p>A passive voice sentence reverses the formula. That is, a passive voice sentence typically follows the following formula:</p>
<blockquote>
<p>Passive Voice Sentence = target + verb + actor</p>
</blockquote>
<h4 id="active-voice-example">Active voice example</h4>
<p>For example, here’s a short, active voice sentence:</p>
<blockquote>
<p>The cat sat on the mat.</p>
</blockquote>
<ul>
<li>actor: The cat</li>
<li>verb: sat</li>
<li>target: the mat</li>
</ul>
<h4 id="passive-voice-examples">Passive voice examples</h4>
<p>By contrast, here's that same sentence in passive voice:</p>
<blockquote>
<p>The mat was sat on by the cat.</p>
</blockquote>
<ul>
<li>target: The mat</li>
<li>passive verb: was sat</li>
<li>actor: the cat</li>
</ul>
<p>Some passive voice sentences omit an actor. For example:</p>
<blockquote>
<p>The mat was sat on.</p>
</blockquote>
<ul>
<li>actor: <em>unknown</em></li>
<li>passive verb: was sat</li>
<li>target: the mat</li>
</ul>
<p>Who or what sat on the mat? A cat? A dog? A T-Rex? Readers can only guess. Good sentences in technical documentation identify who is doing what to whom.</p>
<h3 id="recognize-passive-verbs">Recognize passive verbs</h3>
<p>Passive verbs typically have the following formula:</p>
<pre><code>passive verb = form of be + past participle verb
</code></pre>
<p>Although the preceding formula looks daunting, it is actually pretty simple:</p>
<ul>
<li>A <strong>form of *be*</strong> in a passive verb is typically one of the following words:
<ul>
<li>is/are</li>
<li>was/were</li>
</ul>
</li>
<li>A <strong>past participle verb</strong> is typically a plain verb plus the suffix <em>ed</em>. For example, the following are past participle verbs:
<ul>
<li>interpreted</li>
<li>generated</li>
<li>formed</li>
</ul>
</li>
</ul>
<p>Unfortunately, some past participle verbs are irregular; that is, the past participle form does not end with the suffix <em>ed</em>. For example:</p>
<ul>
<li>sat</li>
<li>known</li>
<li>frozen</li>
</ul>
<p>Putting the form of <em>be</em> and the past participle together yields passive verbs, such as the following:</p>
<ul>
<li>was interpreted</li>
<li>is generated</li>
<li>was formed</li>
<li>is frozen</li>
</ul>
<p>If the phrase contains an actor, a preposition ordinarily follows the passive verb. (That preposition is often a key clue to help you spot passive voice.) The following examples combine the passive verb and the preposition:</p>
<ul>
<li>was interpreted as</li>
<li>is generated by</li>
<li>was formed by</li>
<li>is frozen by</li>
</ul>
<h4 id="imperative-verbs-are-typically-active">Imperative verbs are typically active</h4>
<p>It is easy to mistakenly classify sentences starting with an imperative verb as passive. An <strong>imperative verb</strong> is a command. Many items in numbered lists start with imperative verbs. For example, <em>Open</em> and <em>Set</em> in the following list are both imperative verbs:</p>
<ol>
<li>Open the configuration file.</li>
<li>Set the <code>Frombus</code> variable to <code>False</code>.</li>
</ol>
<p>Sentences that start with an imperative verb are typically in active voice, even though they do not explicitly mention an actor. Instead, sentences that start with an imperative verb <em>imply</em> an actor. The implied actor is <strong>you</strong>.</p>
<h4 id="exercise-8">Exercise</h4>
<p>Mark each of the following sentences as either <strong>Passive</strong> or <strong>Active</strong>:</p>
<ol>
<li><code>MutableInput</code> provides read-only access.</li>
<li>Read-only access is provided by <code>MutableInput</code>.</li>
<li>Performance was measured.</li>
<li>Python was invented by Guido van Rossum in the twentieth century.</li>
<li>David Korn discovered the KornShell quite by accident.</li>
<li>This information is used by the policy enforcement team.</li>
<li>Click the Submit button.</li>
<li>The orbit was calculated by Katherine Johnson.</li>
</ol>
<h5 id="answer-8">Answer</h5>
<ol>
<li><strong>Active</strong>. MutableInput provides read-only access.</li>
<li><strong>Passive</strong>. Read-only access is provided by MutableInput.</li>
<li><strong>Passive</strong>. Performance was measured.</li>
<li><strong>Passive</strong>. Python was invented by Guido van Rossum in the twentieth century.</li>
<li><strong>Active</strong>. David Korn discovered the KornShell quite by accident.</li>
<li><strong>Passive</strong>. This information is used by the policy enforcement team.</li>
<li><strong>Active</strong>. Click the Submit button. (<em>Click</em> is an imperative verb.)</li>
<li><strong>Passive</strong>. The orbit was calculated by Katherine Johnson.</li>
</ol>
<hr>
<h3 id="distinguish-active-voice-from-passive-voice-in-more-complex-sentences">Distinguish active voice from passive voice in more complex sentences</h3>
<p>Many sentences contain multiple verbs, some of which are active and some of which are passive. For example, the following sentence contains two verbs, both of which are in passive voice:</p>
<figure data-type="image" tabindex="1"><img src="https://developers.google.com/tech-writing/one/images/passive-passive.svg?hl=zh-cn" alt="A diagram of the following sentence: Code is interpreted by           Python, but code is compiled by C++.  The first half of the sentence           (Code is interpreted by Python) is in active voice, where a target           (Code) is acted on (is interpreted) by the actor (Python).           The second half of the sentence (code is compiled by C++) is also in           passive voice, where the target (code) is acted on (is compiled)           by the actor (C++)." loading="lazy"></figure>
<p>Here is that same sentence, partially converted to active voice:</p>
<figure data-type="image" tabindex="2"><img src="https://developers.google.com/tech-writing/one/images/active-passive.svg?hl=zh-cn" alt="A diagram of the following sentence: Python interprets code,           but code is compiled by C++.  The first half of the sentence           (Python interprets code) is in active voice, where an actor           (Python) acts on (interprets) a target (code). The second half           of the sentence (code is compiled by C++) is in passive voice,           where the target (code) is acted on (is compiled) by the           actor (C++)." loading="lazy"></figure>
<p>And here is that same sentence, now fully converted to active voice:</p>
<figure data-type="image" tabindex="3"><img src="https://developers.google.com/tech-writing/one/images/all-active.svg?hl=zh-cn" alt="A diagram of the following sentence: Python interprets code,           but C++ compiles code.  The first half of the sentence           (Python interprets code) is in active voice, where an actor           (Python) acts on (interprets) a target (code). The second half           of the sentence (C++ compiles code) is also in active voice,           where the actor (C++) acts on (compiles) the target (code)." loading="lazy"></figure>
<h4 id="exercise-9">Exercise</h4>
<p>Each of the following sentences contains two verbs. Categorize each of the verbs in the following sentences as either active or passive. For example, if the first verb is active and the second is passive, write <strong>Active, Passive</strong>.</p>
<ol>
<li>The QA team loves ice cream, but their managers prefer sorbet.</li>
<li>Performance metrics are required by the team, though I prefer wild guesses.</li>
<li>When software engineers attempt something new and innovative, a reward should be given.</li>
</ol>
<h5 id="answer-9">Answer.</h5>
<ol>
<li><strong>Active, Active.</strong> The QA team loves ice cream, but their managers prefer sorbet.</li>
<li><strong>Passive, Active.</strong> Performance metrics are required by the team, though I prefer wild guesses.</li>
<li><strong>Active, Passive.</strong> When software engineers attempt something new and innovative, a reward should be given.</li>
</ol>
<h3 id="prefer-active-voice-to-passive-voice">Prefer active voice to passive voice</h3>
<p>Use the active voice most of the time. Use the passive voice sparingly. Active voice provides the following advantages:</p>
<ul>
<li>Most readers mentally convert passive voice to active voice. Why subject your readers to extra processing time? By sticking to active voice, readers can skip the preprocessor stage and go straight to compilation.</li>
<li>Passive voice obfuscates your ideas, turning sentences on their head. Passive voice reports action indirectly.</li>
<li>Some passive voice sentences omit an actor altogether, which forces the reader to guess the actor's identity.</li>
<li>Active voice is generally shorter than passive voice.</li>
</ul>
<p>Be bold—be active.</p>
<h4 id="scientific-research-reports-optional-material">Scientific research reports (optional material)</h4>
<p>The writing in research reports tends to be understated. Here, for example, is one of the most famous passages in twentieth century science writing, from Crick and Watson's 1953 paper in <em>Nature</em> entitled, <em>Molecular Structure of Nucleic Acids: A Structure for Deoxyribose Nucleic Acid</em>:</p>
<blockquote>
<p>It has not escaped our notice that the specific pairing we have postulated immediately suggests a possible copying mechanism for the genetic material.</p>
</blockquote>
<p>The authors are so excited about their discovery that they're whispering it from the rooftops.</p>
<p>Passive voice thrives in a tentative landscape. In research reports, experimenters and their equipment often disappear, leading to passive sentences that start off as follows:</p>
<ul>
<li>It has been suggested that...</li>
<li>Data was taken...</li>
<li>Statistics were calculated...</li>
<li>Results were evaluated.</li>
</ul>
<p>Do we know who is doing what to whom? No. Does the passive voice somehow make the information more objective? No.</p>
<p>Many scientific journals have embraced active voice. We encourage the remainder to join the quest for clarity.</p>
<h4 id="exercise-10">Exercise</h4>
<p>Rewrite the following passive voice sentences as active voice. Only part of certain sentences are in passive voice; ensure that all parts end up as active voice:</p>
<ol>
<li>The flags were not parsed by the Mungifier.</li>
<li>A wrapper is generated by the Op registration process.</li>
<li>Only one experiment per layer is selected by the Frombus system.</li>
<li>Quality metrics are identified by asterisks; ampersands identify bad metrics.</li>
</ol>
<h5 id="answer-10">Answer.</h5>
<ol>
<li>The Mungifier did not parse the flags.</li>
<li>The Op registration process generates a wrapper.</li>
<li>The Frombus system selects only one experiment per layer.</li>
<li>Asterisks identify quality metrics; ampersands identify bad metrics.</li>
</ol>
<h2 id="clear-sentences">Clear sentences</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>Comedy writers seek the funniest results, horror writers strive for the scariest, and technical writers aim for the clearest. In technical writing, clarity takes precedence over all other rules. This unit suggests a few ways to make your sentences beautifully clear.</p>
<h3 id="choose-strong-verbs">Choose strong verbs</h3>
<p>Many technical writers believe that the verb is the most important part of a sentence. Pick the right verb and the rest of the sentence will take care of itself. Unfortunately, some writers reuse only a small set of mild verbs, which is like serving your guests stale crackers and soggy lettuce every day. Picking the right verb takes a little more time but produces more satisfying results.</p>
<p>To engage and educate readers, choose precise, strong, specific verbs. Reduce imprecise, weak, or generic verbs, such as the following:</p>
<ul>
<li>forms of <em>be</em>: is, are, am, was, were, etc.</li>
<li>occur</li>
<li>happen</li>
</ul>
<p>For example, consider how strengthening the weak verb in the following sentences ignites a more engaging sentence:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Weak Verb</th>
<th style="text-align:left">Strong Verb</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">The error <strong>occurs</strong> when clicking the Submit button.</td>
<td style="text-align:left">Clicking the Submit button <strong>triggers</strong> the error.</td>
</tr>
<tr>
<td style="text-align:left">This error message <strong>happens</strong> when...</td>
<td style="text-align:left">The system <strong>generates</strong> this error message when...</td>
</tr>
<tr>
<td style="text-align:left">We <strong>are</strong> very careful to ensure...</td>
<td style="text-align:left">We carefully <strong>ensure</strong>...</td>
</tr>
</tbody>
</table>
<p>Many writers rely on forms of <em>be</em> as if they were the only spices on the rack. Sprinkle in different verbs and watch your prose become more appetizing. That said, a form of <em>be</em> is sometimes the best choice of verb, so don't feel that you have to eliminate every form of <em>be</em> from your writing.</p>
<p>Note that generic verbs often signal other ailments, such as:</p>
<ul>
<li>an imprecise or missing actor in a sentence</li>
<li>a passive voice sentence</li>
</ul>
<h4 id="exercise-11">Exercise</h4>
<p>Clarify the following sentences by picking more specific verbs. Along the way, feel free to rearrange the sentences and to add, modify, or delete words:</p>
<ol>
<li>When a variable declaration doesn't have a datatype, a compiler error happens.</li>
<li>Compiler errors occur when you leave off a semicolon at the end of a statement.</li>
</ol>
<h5 id="answer-11">Answer.</h5>
<ol>
<li>A few possible answers:
<ul>
<li>When a variable declaration doesn't <strong>specify</strong> a datatype, the compiler <strong>generates</strong> an error message.</li>
<li>If you <strong>declare</strong> a variable but don't <strong>specify</strong> a datatype, the compiler <strong>generates</strong> an error message.</li>
</ul>
</li>
<li>A few possible answers:
<ul>
<li>Compilers <strong>issue</strong> errors when you <strong>omit</strong> a semicolon at the end of a statement.</li>
<li>A missing semicolon at the end of a statement <strong>triggers</strong> compiler errors.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="reduce-there-isthere-are">Reduce there is/there are</h3>
<p>Sentences that start with <strong>There is</strong> or <strong>There are</strong> marry a generic noun to a generic verb. Generic weddings bore readers. Show true love for your readers by providing a real subject and a real verb.</p>
<p>In the best case scenario, you may simply delete <strong>There is</strong> or <strong>There are</strong> (and possibly another word or two later in the sentence). For example, consider the following sentence:</p>
<blockquote>
<p>There is a variable called <code>met_trick</code> that stores the current accuracy.</p>
</blockquote>
<p>Removing <strong>There is</strong> replaces the generic subject with a better subject. For example, either of the following sentences is clearer than the original:</p>
<blockquote>
<p>A variable named <code>met_trick</code> stores the current accuracy. The <code>met_trick</code> variable stores the current accuracy.</p>
</blockquote>
<p>You can sometimes repair a <strong>There is</strong> or <strong>There are</strong> sentence by moving the true subject and true verb from the end of the sentence to the beginning. For example, notice that the pronoun <strong>you</strong> appears towards the end of the following sentence:</p>
<blockquote>
<p>There are two disturbing facts about Perl you should know.</p>
</blockquote>
<p>Replacing <strong>There are</strong> with <strong>You</strong> strengthens the sentence:</p>
<blockquote>
<p>You should know two disturbing facts about Perl.</p>
</blockquote>
<p>In still other situations, writers start sentences with <strong>There is</strong> or <strong>There are</strong> to avoid the hassle of creating true subjects or verbs. If no subject exists, consider creating one. For example, the following <strong>There is</strong> sentence does not identify the receiving entity:</p>
<blockquote>
<p>There is no guarantee that the updates will be received in sequential order.</p>
</blockquote>
<p>Replacing &quot;There is&quot; with a meaningful subject (such as <strong>clients</strong>) creates a clearer experience for the reader:</p>
<blockquote>
<p>Clients might not receive the updates in sequential order.</p>
</blockquote>
<h4 id="exercise-12">Exercise</h4>
<p>Clarify the following sentences by removing <strong>There is</strong>, and possibly rearranging, adding, modifying, or deleting other words:</p>
<ol>
<li>There is a lot of overlap between X and Y.</li>
<li>There is no creator stack for the main thread.</li>
<li>There is a low-level, TensorFlow, Python interface to load a saved model.</li>
<li>There is a sharding function named <code>distribute</code> that assigns keys.</li>
</ol>
<h5 id="answer-12">Answer.</h5>
<ol>
<li>X and Y overlap a lot.</li>
<li>The main thread does not provide a creator stack.</li>
<li>TensorFlow provides a low-level Python interface to load a saved model.</li>
<li>The <code>distribute</code> sharding function assigns keys.</li>
</ol>
<hr>
<h3 id="minimize-certain-adjectives-and-adverbs-optional">Minimize certain adjectives and adverbs (optional)</h3>
<p>Adjectives and adverbs perform amazingly well in fiction and poetry. Thanks to adjectives, plain old grass becomes <strong>prodigal</strong> and <strong>verdant</strong>, while lifeless hair transforms into something <strong>silky</strong> and <strong>flowing</strong>. Adverbs push horses to run <strong>madly</strong> and <strong>freely</strong> and dogs to bark <strong>loudly</strong> and <strong>ferociously</strong>. Unfortunately, adjectives and adverbs sometimes make technical readers bark loudly and ferociously. That's because adjectives and adverbs tend to be too loosely defined and subjective for technical readers. Worse, adjectives and adverbs can make technical documentation sound dangerously like marketing material. For example, consider the following passage from a technical document:</p>
<blockquote>
<p>Setting this flag makes the application run screamingly fast.</p>
</blockquote>
<p>Granted, <strong>screamingly fast</strong> gets readers attention but not necessarily in a good way. Feed your technical readers factual data instead of marketing speak. Refactor amorphous adverbs and adjectives into objective numerical information. For example:</p>
<blockquote>
<p>Setting this flag makes the application run 225-250% faster.</p>
</blockquote>
<p>Does the preceding change strip the sentence of some of its charm? Yes, a little, but the revamped sentence gains accuracy and believability.</p>
<p><strong>Note:</strong> Don't confuse educating your readers (technical writing) with publicizing or selling a product (marketing writing). When your readers expect education, provide education; don't intersperse publicity or sales material inside educational material.</p>
<h2 id="short-sentences">Short sentences</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 20 minutes</p>
</blockquote>
<p>Software engineers generally try to minimize the number of lines of code in an implementation for the following reasons:</p>
<ul>
<li>Shorter code is typically easier for others to read.</li>
<li>Shorter code is typically easier to maintain than longer code.</li>
<li>Extra lines of code introduce additional points of failure.</li>
</ul>
<p>In fact, the same rules apply to technical writing:</p>
<ul>
<li>Shorter documentation reads faster than longer documentation.</li>
<li>Shorter documentation is typically easier to maintain than longer documentation.</li>
<li>Extra lines of documentation introduce additional points of failure.</li>
</ul>
<p>Finding the shortest documentation implementation takes time but is ultimately worthwhile. Short sentences communicate more powerfully than long sentences, and short sentences are usually easier to understand than long sentences.</p>
<h3 id="focus-each-sentence-on-a-single-idea">Focus each sentence on a single idea</h3>
<p>Focus each sentence on a single idea, thought, or concept. Just as statements in a program execute a single task, sentences should execute a single idea. For example, the following very long sentence contains multiple thoughts:</p>
<blockquote>
<p>The late 1950s was a key era for programming languages because IBM introduced FORTRAN in 1957 and John McCarthy introduced Lisp the following year, which gave programmers both an iterative way of solving problems and a recursive way.</p>
</blockquote>
<p>Breaking the long sentence into a succession of single-idea sentences yields the following result:</p>
<blockquote>
<p>The late 1950s was a key era for programming languages. IBM introduced FORTRAN in 1957. John McCarthy invented Lisp the following year. Consequently, by the late 1950s, programmers could solve problems iteratively or recursively.</p>
</blockquote>
<h4 id="exercise-13">Exercise</h4>
<p>Convert the following overly long sentence to a series of shorter sentences. Don't revise too much; just end up with a few sentences instead of only one.</p>
<blockquote>
<p>In bash, use the if, then, and fi statements to implement a simple conditional branching block in which the if statement evaluates an expression, the then statement introduces a block of statements to run when the if expression is true, and the fi statement marks the end of the conditional branching block.</p>
</blockquote>
<h5 id="answer-13">Answer.</h5>
<p>In bash, use an <code>if</code>, <code>then</code>, and <code>fi</code> statement to implement a simple conditional branching block. The <code>if</code> statement evaluates an expression. The <code>then</code> statement introduces a block of statements to run when the <code>if</code> expression is true. The <code>fi</code> statement marks the end of the conditional branching block. (The resulting paragraph remains unclear but is still much easier to read than the original sentence.)</p>
<hr>
<h3 id="convert-some-long-sentences-to-lists">Convert some long sentences to lists</h3>
<p>Inside many long technical sentences is a list yearning to break free. For example, consider the following sentence:</p>
<blockquote>
<p>To alter the usual flow of a loop, you may use either a <strong>break</strong> statement (which hops you out of the current loop) or a <strong>continue</strong> statement (which skips past the remainder of the current iteration of the current loop).</p>
</blockquote>
<p>When you see the conjunction <strong>or</strong> in a long sentence, consider refactoring that sentence into a bulleted list. When you see an embedded list of items or tasks within a long sentence, consider refactoring that sentence into a bulleted or numbered list. For example, the preceding example contains the conjunction <strong>or</strong>, so let's convert that long sentence to the following bulleted list:</p>
<hr>
<p>To alter the usual flow of a loop, call one of the following statements:</p>
<ul>
<li>
<p><code>break</code>, which hops you out of the current loop.</p>
</li>
<li>
<p><code>continue</code>, which skips past the remainder of the current iteration of the current loop.</p>
</li>
</ul>
<hr>
<h4 id="exercise-14">Exercise</h4>
<p>Refactor the following sentences into something shorter and clearer. Make sure that your answer contains a list:</p>
<ol>
<li>To get started with the Frambus app, you must first find the app at a suitable store, pay for it using a valid credit or debit card, download it, configure it by assigning a value for the <code>Foo</code> variable in the <code>/etc/Frambus</code> file, and then run it by saying the magic word twice.</li>
<li>KornShell was invented by David Korn in 1983, then a computer scientist at Bell Labs, as a superset of features, enhancements, and improvements over the Bourne Shell (which it was backwards compatible with), which was invented by Stephen Bourne in 1977 who was also a computer scientist at Bell Labs.</li>
</ol>
<h5 id="answer-14">Answer.</h5>
<p>Take the following steps to get started with the Frambus app:</p>
<ol>
<li>Find the app at a suitable store.</li>
<li>Pay for the app using a valid credit or debit card.</li>
<li>Download the app.</li>
<li>Configure the app by assigning a value for the Foo variable in the <code>/etc/Frambus</code> file.</li>
<li>Run the app by saying the magic word twice.</li>
</ol>
<p>The following two Bell Labs computer scientists invented popular shells:</p>
<ul>
<li>Stephen Bourne invented the Bourne Shell in 1977.</li>
<li>David Korn invented the KornShell in 1983.</li>
</ul>
<p>The KornShell's features are a backwards-compatible superset of the Bourne Shell's.</p>
<hr>
<h3 id="eliminate-or-reduce-extraneous-words">Eliminate or reduce extraneous words</h3>
<p>Many sentences contain filler—textual junk food that consumes space without nourishing the reader. For example, see if you can spot the unnecessary words in the following sentence:</p>
<blockquote>
<p>An input value greater than 100 causes the triggering of logging.</p>
</blockquote>
<p>Replacing <strong>causes the triggering of</strong> with the much shorter verb <strong>triggers</strong> yields a shorter sentence:</p>
<blockquote>
<p>An input value greater than 100 triggers logging.</p>
</blockquote>
<p>With practice, you'll spot the extraneous words and take inordinate glee in removing or reducing them. For example, consider the following sentence:</p>
<blockquote>
<p>This design document provides a detailed description of Project Frambus.</p>
</blockquote>
<p>The phrase <strong>provides a detailed description of</strong> reduces to the verb <strong>details</strong>, so the resulting sentence becomes:</p>
<blockquote>
<p>This design document details Project Frambus.</p>
</blockquote>
<p>The following table suggests replacements for a few common bloated phrases:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Wordy</th>
<th style="text-align:left">Concise</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">at this point in time</td>
<td style="text-align:left">now</td>
</tr>
<tr>
<td style="text-align:left">determine the location of</td>
<td style="text-align:left">find</td>
</tr>
<tr>
<td style="text-align:left">is able to</td>
<td style="text-align:left">can</td>
</tr>
</tbody>
</table>
<h4 id="exercise-15">Exercise</h4>
<p>Shorten the following sentences without changing their meaning:</p>
<ol>
<li>In spite of the fact that Arnold writes buggy code, he writes error-free documentation.</li>
<li>Changing the sentence from passive voice to active voice enhances the clarification of the key points.</li>
<li>Determine whether Rikona is able to write code in COBOL.</li>
<li>Frambus causes the production of bugs, which will be chronicled in logs by the LogGenerator method.</li>
</ol>
<h5 id="answer-15">Answer.</h5>
<p>Here are some possible solutions:</p>
<ol>
<li>Although Arnold writes buggy code, he writes error-free documentation.<br>
<strong>Alternative answer:</strong> Arnold writes buggy code. However, he writes error-free documentation.</li>
<li>Changing the sentence from passive voice to active voice clarifies the key points.</li>
<li>Determine whether Rikona can code in COBOL.</li>
<li>Frambus produces bugs, which the LogGenerator method logs.</li>
</ol>
<hr>
<h3 id="reduce-subordinate-clauses-optional">Reduce subordinate clauses (optional)</h3>
<p>A <strong>clause</strong> is an independent logical fragment of a sentence, which contains an actor and an action. Every sentence contains the following:</p>
<ul>
<li>a main clause</li>
<li>zero or more subordinate clauses</li>
</ul>
<p>Subordinate clauses modify the idea in the main clause. As the name implies, subordinate clauses are less important than the main clause. For example, consider the following sentence:</p>
<blockquote>
<p>Python is an interpreted programming language, which was invented in 1991.</p>
<ul>
<li>main clause: Python is an interpreted programming language</li>
<li>subordinate clause: which was invented in 1991</li>
</ul>
</blockquote>
<p>You can usually identify subordinate clauses by the words that introduce them. The following list (by no means complete) shows common words that introduce subordinate clauses:</p>
<ul>
<li>which</li>
<li>that</li>
<li>because</li>
<li>whose</li>
<li>until</li>
<li>unless</li>
<li>since</li>
</ul>
<p>Some subordinate clauses begin with a comma and some don't. The highlighted subordinate clause in the following sentence, for example, begins with the word <strong>because</strong> and does not contain a comma:</p>
<blockquote>
<p>I prefer to code in C++ because I like strong data typing.</p>
</blockquote>
<p>When editing, scrutinize subordinate clauses. Keep the <code>one sentence = one idea</code> formula in mind. Do the subordinate clauses in a sentence <em>extend</em> the single idea or do they <em>branch off</em> into a separate idea? If the latter, consider dividing the offending subordinate clause(s) into separate sentences.</p>
<h4 id="exercise-16">Exercise</h4>
<p>Determine which of the sentences contain subordinate clauses that should be branched off into separate sentences. (Don't rewrite the sentences, just identify the sentences that should be rewritten.)</p>
<ol>
<li>Python is an interpreted language, which means that the language can execute source code directly.</li>
<li>Bash is a modern shell scripting language that takes many of its features from KornShell 88, which was developed at Bell Labs.</li>
<li>Lisp is a programming language that relies on Polish prefix notation, which is one of the systems invented by the Polish logician Jan Łukasiewicz.</li>
<li>I don't want to say that FORTRAN is old, but only radiocarbon dating can determine its true age.</li>
</ol>
<h5 id="answer-16">Answer.</h5>
<p>We've shaded the subordinate clauses.</p>
<ol>
<li>Python is an interpreted language, which means that the language can execute source code directly. <strong>The subordinate clause in this sentence extends the main idea, so this sentence is fine as is.</strong></li>
<li>Bash is a modern shell scripting language that takes many of its features from KornShell 88, which was developed at Bell Labs. <strong>The first subordinate clause extends the main idea, but the second subordinate clause goes in another direction. Divide this sentence in two.</strong></li>
<li>Lisp is a programming language that relies on Polish prefix notation, which is one of the systems invented by the Polish logician Jan Łukasiewicz. <strong>The first subordinate clause is clearly critical to the sentence, but the second subordinate clause takes the reader too far away from the main clause. Divide this sentence in two.</strong></li>
<li>I don't want to say that Fortran is old, but only radiocarbon dating can determine its true age. <strong>The subordinate clause is critical to the sentence, so this sentence is fine as is.</strong></li>
</ol>
<hr>
<h3 id="distinguish-that-from-which">Distinguish that from which</h3>
<p><strong>That</strong> and <strong>which</strong> both introduce subordinate clauses. What's the difference between them? Well, in some countries, the two words are pretty much interchangeable. Inevitably though, alert American readers will angrily announce that you confused the two words again.</p>
<p>In America, reserve <strong>which</strong> for subordinate clauses that are nonessential parts of the sentence, and use <strong>that</strong> for an essential phrase that the sentence can't live without. For example:</p>
<blockquote>
<p>Python is an interpreted language, <strong>which</strong> means the processor runs the program directly.</p>
<p>FORTRAN is perfect for mathematical calculations <strong>that</strong> don't involve linear algebra.</p>
</blockquote>
<p>Was that explanation useful? Probably not. Try this instead: if you read a sentence aloud and hear a pause just before the subordinate clause, then use <strong>which</strong>. If you don't hear a pause, use <strong>that</strong>. Go back and read the two example sentences. Did you hear the pause in the first sentence?</p>
<p>Place a comma before <strong>which</strong>; do not place a comma before <strong>that</strong>.</p>
<h2 id="lists-and-tables">Lists and tables</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 15 minutes</p>
</blockquote>
<p>Good lists can transform technical chaos into something orderly. Technical readers generally love lists. Therefore, when writing, seek opportunities to convert prose into lists.</p>
<h3 id="choose-the-correct-type-of-list">Choose the correct type of list</h3>
<p>The following types of lists dominate technical writing:</p>
<ul>
<li>bulleted lists</li>
<li>numbered lists</li>
<li>embedded lists</li>
</ul>
<p>Use a <strong>bulleted list</strong> for <em>unordered</em> items; use a <strong>numbered list</strong> for <em>ordered</em> items. In other words:</p>
<ul>
<li>If you rearrange the items in a <em>bulleted</em> list, the list's meaning does not change.</li>
<li>If you rearrange the items in a <em>numbered</em> list, the list's meaning <em>changes</em>.</li>
</ul>
<p>For example, we've made the following a bulleted list because rearranging its items does not change the list's meaning:</p>
<blockquote>
<p>Bash provides the following string manipulation mechanisms:</p>
<ul>
<li>deleting a substring from the start of a string</li>
<li>reading an entire file into one string variable</li>
</ul>
</blockquote>
<p>The following list, by contrast, must be a numbered list because rearranging its items would change the list's meaning:</p>
<blockquote>
<p>Take the following steps to reconfigure the server:</p>
<ol>
<li>Stop the server.</li>
<li>Edit the configuration file.</li>
<li>Restart the server.</li>
</ol>
</blockquote>
<p>An <strong>embedded list</strong> (sometimes called a <strong>run-in</strong> list) contains items stuffed within a sentence. For example, the following sentence contains an embedded list with four items.</p>
<blockquote>
<p>The llamacatcher API enables callers to create and query llamas, analyze alpacas, delete vicugnas, and track dromedaries.</p>
</blockquote>
<p>Generally speaking, embedded lists are a poor way to present technical information. Try to transform embedded lists into either bulleted lists or numbered lists. For example, you should convert the sentence containing the embedded list into the following passage:</p>
<blockquote>
<p>The llamacatcher API enables callers to do the following:</p>
<ul>
<li>Create and query llamas.</li>
<li>Analyze alpacas.</li>
<li>Delete vicugnas.</li>
<li>Track dromedaries.</li>
</ul>
</blockquote>
<h4 id="exercise-17">Exercise</h4>
<p>Convert the following paragraph into one or more lists:</p>
<blockquote>
<p>Today at work, I have to code three unit tests, write a design document, and review Janet's latest document. After work, I have to wash my car without using any water and then dry it without using any towels.</p>
</blockquote>
<p>Don't forget to introduce your list(s).</p>
<h5 id="answer-17">Answer.</h5>
<p>Here's one possible answer:</p>
<blockquote>
<p>I must do the following at work today:</p>
<ul>
<li>Code three unit tests.</li>
<li>Write a design document.</li>
<li>Review Janet's latest document.</li>
</ul>
<p>After work, I must do the following:</p>
<ol>
<li>Wash my car without using any water.</li>
<li>Dry my car without using any towels.</li>
</ol>
</blockquote>
<p>The following is an alternative answer:</p>
<blockquote>
<p>I must do the following tasks today:</p>
<ul>
<li>At work:
<ul>
<li>Code three unit tests.</li>
<li>Write a design document.</li>
<li>Review Janet's latest document.</li>
</ul>
</li>
<li>After work:
<ol>
<li>Wash my car without using any water.</li>
<li>Dry my car without using any towels.</li>
</ol>
</li>
</ul>
</blockquote>
<hr>
<h3 id="keep-list-items-parallel">Keep list items parallel</h3>
<p>What separates effective lists from defective lists? Effective lists are parallel; defective lists tend to be nonparallel. All items in a <strong>parallel</strong> list look like they &quot;belong&quot; together. That is, all items in a parallel list match along the following parameters:</p>
<ul>
<li>grammar</li>
<li>logical category</li>
<li>capitalization</li>
<li>punctuation</li>
</ul>
<p>Conversely, at least one item in a <strong>nonparallel</strong> list fails at least one of the preceding consistency checks.</p>
<p>For example, the following list is parallel because all the items are plural nouns (grammar), edible (logical category), lower case (capitalization), and without periods or commas (punctuation).</p>
<ul>
<li>carrots</li>
<li>potatoes</li>
<li>cabbages</li>
</ul>
<p>By contrast, the following list is painfully nonparallel along all four parameters:</p>
<ul>
<li>carrots</li>
<li>potatoes</li>
<li>The summer light obscures all memories of winter.</li>
</ul>
<p>The following list is parallel because all the items are complete sentences with complete sentence capitalization and punctuation:</p>
<ul>
<li>Carrots contain lots of Vitamin A.</li>
<li>Potatoes taste delicious.</li>
<li>Cabbages provide oodles of Vitamin K.</li>
</ul>
<p>The first item in a list establishes a pattern that readers expect to see repeated in subsequent items.</p>
<h4 id="exercise-18">Exercise</h4>
<p>Is the following list parallel or nonparallel?</p>
<ul>
<li>Broccoli inspires feelings of love or hate.</li>
<li>Potatoes taste delicious.</li>
<li>Cabbages.</li>
</ul>
<h5 id="answer-18">Answer.</h5>
<p>The list is nonparallel. The first two items are complete sentences, but the third item is not a sentence. (Don't be fooled by the capitalization and punctuation of the third item.)</p>
<hr>
<h4 id="exercise-19">Exercise</h4>
<p>Is the following list parallel or nonparallel?</p>
<ul>
<li>The red dots represent sick trees.</li>
<li>Immature trees are represented by the blue dots.</li>
<li>The green dots represent healthy trees.</li>
</ul>
<h5 id="answer-19">Answer.</h5>
<p>This is a nonparallel list. The first and third items are in active voice, but the second item is in passive voice.</p>
<hr>
<h3 id="start-numbered-list-items-with-imperative-verbs">Start numbered list items with imperative verbs</h3>
<p>Consider starting all items in a numbered list with an imperative verb. An <strong>imperative verb</strong> is a command, such as <strong>open</strong> or <strong>start</strong>. For example, notice how all of the items in the following parallel numbered list begin with an imperative verb:</p>
<ol>
<li>Download the Frambus app from Google Play or iTunes.</li>
<li>Configure the Frambus app's settings.</li>
<li>Start the Frambus app.</li>
</ol>
<p>The following numbered list is nonparallel because two of the sentences start with an imperative verb, but the third item does not:</p>
<ol>
<li>Instantiate the Froobus class.</li>
<li>Invoke the Froobus.Salmonella() method.</li>
<li>The process stalls.</li>
</ol>
<h4 id="exercise-20">Exercise</h4>
<p>Make the following list parallel. Ensure that each element in the result list begins with an imperative verb:</p>
<ol>
<li>Stop Früvous</li>
<li>The key configuration file is <code>/moxy/fruvous</code>. Open this file with an ASCII text editor.</li>
<li>In this file, you will see a parameter named Carambola, which is currently set to the default value (32). Change this value to 64.</li>
<li>When you are finished setting this parameter, save and close the configuration file</li>
<li>now, start Früvous again.</li>
</ol>
<h5 id="answer-20">Answer.</h5>
<p>The following is one possible answer:</p>
<ol>
<li>Stop Früvous.</li>
<li>Open the key configuration file, <code>/moxy/fruvous</code>, with an ASCII text editor.</li>
<li>Change the Carambola parameter from its default value (32) to 64.</li>
<li>Save and close the configuration file.</li>
<li>Restart Früvous.</li>
</ol>
<hr>
<p>Punctuate items appropriately</p>
<p>If the list item is a sentence, use sentence capitalization and punctuation. Otherwise, do not use sentence capitalization and punctuation. For example, the following list item is a sentence, so we capitalized the <strong>M</strong> in <strong>Most</strong>and put a period at the end of the sentence:</p>
<ul>
<li>Most carambolas have five ridges.</li>
</ul>
<p>However, the following list item is not a sentence, so we left the <strong>t</strong> in <strong>the</strong> in lowercase and omitted a period:</p>
<ul>
<li>the color of lemons</li>
</ul>
<p>###Create useful tables</p>
<p>Analytic minds tend to love tables. Given a page containing multiple paragraphs and a single table, engineers' eyes zoom towards the table.</p>
<p>Consider the following guidelines when creating tables:</p>
<ul>
<li>Label each column with a meaningful header. Don't make readers guess what each column holds.</li>
<li>Avoid putting too much text into a table cell. If a table cell holds more than two sentences, ask yourself whether that information belongs in some other format.</li>
<li>Although different columns can hold different types of data, strive for parallelism <em>within</em> individual columns. For instance, the cells within a particular table column should not be a mixture of numerical data and famous circus elephants.</li>
</ul>
<p><strong>Note:</strong> Some tables don't render well across all form factors. For example, a table that looks great on your laptop may look awful on your phone.</p>
<h3 id="introduce-each-list-and-table">Introduce each list and table</h3>
<p>We recommend introducing each list and table with a sentence that tells readers what the list or table represents. In other words, give the list or table context. Terminate the introductory sentence with a colon rather than a period.</p>
<p>Although not a requirement, we recommend putting the word <strong>following</strong> into the introductory sentence. For example, consider the following introductory sentences:</p>
<blockquote>
<p>The following list identifies key performance parameters:</p>
<p>Take the following steps to install the Frambus package:</p>
<p>The following table summarizes our product's features against our key competitors' features:</p>
</blockquote>
<h4 id="exercise-21">Exercise</h4>
<p>Write an introductory sentence for the following table:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Languages</th>
<th style="text-align:left">Inventor</th>
<th style="text-align:left">Year Introduced</th>
<th style="text-align:left">Key Feature</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Lisp</td>
<td style="text-align:left">John McCarthy</td>
<td style="text-align:left">1958</td>
<td style="text-align:left">recursion</td>
</tr>
<tr>
<td style="text-align:left">C++</td>
<td style="text-align:left">Bjarne Stroustrup</td>
<td style="text-align:left">1979</td>
<td style="text-align:left">OOP</td>
</tr>
<tr>
<td style="text-align:left">Python</td>
<td style="text-align:left">Guido van Rossum</td>
<td style="text-align:left">1994</td>
<td style="text-align:left">simplicity</td>
</tr>
</tbody>
</table>
<h5 id="answer-21">Answer.</h5>
<p>Here are a couple of possible introductory sentences for the table:</p>
<blockquote>
<p>The following table contains a few key facts about some popular programming languages:</p>
</blockquote>
<blockquote>
<p>The following table identifies the inventor, year of invention, and key feature of three popular programming languages:</p>
</blockquote>
<hr>
<h2 id="paragraphs">Paragraphs</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>This unit provides some guidelines on building cohesive paragraphs. But first, here is an inspirational message:</p>
<blockquote>
<p>The work of writing is <em>simply</em> this: untangling the dependencies among the parts of a topic, and presenting those parts in a logical stream that enables the reader to understand you.</p>
</blockquote>
<h3 id="write-a-great-opening-sentence">Write a great opening sentence</h3>
<p>The opening sentence is the most important sentence of any paragraph. Busy readers focus on opening sentences and sometimes skip over subsequent sentences. Therefore, focus your writing energy on opening sentences.</p>
<p>Good opening sentences establish the paragraph's central point. For example, the following paragraph features an effective opening sentence:</p>
<blockquote>
<p>A loop runs the same block of code multiple times. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times.</p>
</blockquote>
<p>The preceding opening sentence establishes the theme of the paragraph as an introduction to loops. By contrast, the following opening sentence sends readers in the wrong direction:</p>
<blockquote>
<p>A block of code is any set of contiguous code within the same function. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times.</p>
</blockquote>
<h4 id="exercise-22">Exercise</h4>
<p>Is the opening sentence of the following paragraph effective or defective?</p>
<blockquote>
<p>The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The k-means clustering algorithm relies on the Pythagorean Theorem to measure distances. By contrast, the k-median clustering algorithm relies on the Manhattan Distance.</p>
</blockquote>
<h5 id="answer-22">Answer.</h5>
<p>This opening sentence is <strong>defective</strong> because it implies that the paragraph will focus on the Pythagorean Theorem. In fact, the paragraph's focus is actually clustering algorithms. The following would be a more effective opening sentence:</p>
<blockquote>
<p>Different clustering algorithms measure distances differently.</p>
</blockquote>
<hr>
<p><strong>Note:</strong> Effective opening sentences can take many forms. That is, not all great paragraphs start with a sentence that states the theme. Starting a paragraph with a rhetorical question, for example, can engage readers.</p>
<h3 id="focus-each-paragraph-on-a-single-topic">Focus each paragraph on a single topic</h3>
<p>A paragraph should represent an independent unit of logic. Restrict each paragraph to the current topic. Don't describe what will happen in a future topic or what happened in a past topic. When revising, ruthlessly delete (or move to another paragraph) any sentence that doesn't directly relate to the current topic.</p>
<p>For example, assume that the opening sentence of the following paragraph does focus on the correct topic. Can you spot the sentences that should be removed from the following paragraph?</p>
<blockquote>
<p>The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The perimeter of a triangle is equal to the sum of the three sides. You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2.</p>
</blockquote>
<p>We've crossed out the second and fifth sentences to yield a paragraph focused exclusively on the Pythagorean Theorem:</p>
<blockquote>
<p>The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. <s>The perimeter of a triangle is equal to the sum of the three sides.</s> You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. <s>To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2.</s></p>
</blockquote>
<h4 id="exercise-23">Exercise</h4>
<p>Remove the extraneous sentence(s) from the following paragraph. Assume that the opening sentence does establish the desired theme for the paragraph:</p>
<blockquote>
<p><strong>Spreadsheets</strong> provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. Spreadsheets also provide mathematical functions, such as means and standard deviations. Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread.</p>
</blockquote>
<h5 id="answer-23">Answer.</h5>
<p>The paragraph focuses on spreadsheets as a way of organizing data. The third sentence distracts from that theme. Move the third sentence to another paragraph about mathematical operations in spreadsheets.</p>
<blockquote>
<p><strong>Spreadsheets</strong> provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. <s>Spreadsheets also provide mathematical functions, such as means and standard deviations.</s> Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread.</p>
</blockquote>
<hr>
<h3 id="dont-make-paragraphs-too-long-or-too-short">Don't make paragraphs too long or too short</h3>
<p>Long paragraphs are visually intimidating. <em>Very</em> long paragraphs form a dreaded &quot;wall of text&quot; that readers ignore. Readers generally welcome paragraphs containing three to five sentences, but will avoid paragraphs containing more than about seven sentences. When revising, consider dividing very long paragraphs into two separate paragraphs.</p>
<p>Conversely, don't make paragraphs too short. If your document contains plenty of one-sentence paragraphs, your organization is faulty. Seek ways to combine those one-sentence paragraphs into cohesive multi-sentence paragraphs or possibly into lists.</p>
<h3 id="answer-what-why-and-how">Answer what, why, and how</h3>
<p>Good paragraphs answer the following three questions:</p>
<ol>
<li><strong>What</strong> are you trying to tell your reader?</li>
<li><strong>Why</strong> is it important for the reader to know this?</li>
<li><strong>How</strong> should the reader use this knowledge. Alternatively, how should the reader know your point to be true?</li>
</ol>
<p>For example, the following paragraph answers what, why, and how:</p>
<blockquote>
<p><code>&lt;Start of What&gt;</code> The <code>garp()</code> function returns the delta between a dataset's mean and median.<code>&lt;End of What&gt;</code><br>
<code>&lt;Start of Why&gt;</code>Many people believe unquestioningly that a mean always holds the truth. However, a mean is easily influenced by a few very large or very small data points. <code>&lt;End of Why&gt;</code><br>
<code>&lt;Start of How&gt;</code>Call <code>garp()</code> to help determine whether a few very large or very small data points are influencing the mean too much. A relatively small <code>garp()</code> value suggests that the mean is more meaningful than when the <code>garp()</code> value is relatively high.<code>&lt;End of How&gt;</code></p>
</blockquote>
<h2 id="audience">Audience</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>The course designers believe that you are probably comfortable with mathematics. Therefore, this unit begins with an equation:</p>
<blockquote>
<p>good documentation = knowledge and skills your audience needs to do a task − your audience's current knowledge and skills</p>
</blockquote>
<p>In other words, make sure your document provides the information your audience needs that your audience doesn't already have. Therefore, this unit explains how to do the following:</p>
<ul>
<li>Define your audience.</li>
<li>Determine what your audience needs to learn.</li>
<li>Fit documentation to your audience.</li>
</ul>
<p>As the following video suggests, targeting the <em>wrong</em> audience can be messy: https://youtu.be/eFtXIrmsMwI</p>
<h3 id="define-your-audience">Define your audience</h3>
<p>Serious documentation efforts spend considerable time and energy on defining their audience. These efforts might involve surveys, user experience studies, focus groups, and documentation testing. You probably don't have that much time, so this unit takes a simpler approach.</p>
<p>Begin by identifying your audience's <strong>role</strong>(s). Sample roles include:</p>
<ul>
<li>software engineers</li>
<li>technical, non-engineer roles (such as technical program managers)</li>
<li>scientists</li>
<li>professionals in scientific fields (for example, physicians)</li>
<li>undergraduate engineering students</li>
<li>graduate engineering students</li>
<li>non-technical positions</li>
</ul>
<p>We happily appreciate that many people in non-technical roles have great technical and mathematical skills. However, roles remain an essential first-order approximation in defining your audience. People within the same role<em>generally</em> share certain base skills and knowledge. For example:</p>
<ul>
<li>Most software engineers know popular sorting algorithms, big O notation, and at least one programming language. Therefore, you can depend on software engineers knowing what O(n) means, but you can't depend on non-technical roles knowing O(n).</li>
<li>A research report targeted at physicians should look very different from a newspaper article about the same research aimed at a lay audience.</li>
<li>A professor's explanation of a new machine learning approach to graduate students should differ from the explanation to first-year undergraduate students.</li>
</ul>
<p>Writing would be so much easier if everyone in the same role shared exactly the same knowledge. Unfortunately, knowledge within the same role quickly diverges. Amal is an expert in Python, Sharon's expertise is C++, and Micah's is in Java. Kara loves Linux, but David only knows iOS.</p>
<p>Roles, by themselves, are insufficient for defining an audience. That is, you must also consider your audience's <em>proximity</em> to the knowledge. The software engineers in Project Frombus know something about related Project Dingus but nothing about unrelated Project Carambola. The average heart specialist knows more about ear problems than the average software engineer but far less than an audiologist.</p>
<p>Time also affects proximity. Almost all software engineers, for example, studied calculus. However, most software engineers don't use calculus in their jobs, so their knowledge of calculus gradually fades. Conversely, experienced engineers typically know vastly more about their current project than new engineers on the same project.</p>
<h4 id="sample-audience-analysis">Sample audience analysis</h4>
<p>The following is a sample audience analysis for fictitious Project Zylmon:</p>
<blockquote>
<p>The target audience for Project Zylmon falls into the following roles:</p>
<ul>
<li>software engineers</li>
<li>technical product managers</li>
</ul>
<p>The target audience has the following proximity to the knowledge:</p>
<ul>
<li>My target audience already knows the Zyljeune APIs, which are somewhat similar to the Zylmon APIs.</li>
<li>My target audience knows C++, but has not typically built C++ programs in the new Winged Victory development environment.</li>
<li>My target audience took linear algebra in university, but many members of the team need a refresher on matrix multiplication.</li>
</ul>
</blockquote>
<h3 id="determine-what-your-audience-needs-to-learn">Determine what your audience needs to learn</h3>
<p>Write down a list of everything your target audience needs to learn to accomplish goals. In some cases, the list should hold tasks that the target audience needs to <em>perform</em>. For example:</p>
<blockquote>
<p>After reading the documentation, the audience will know how to do the following tasks:</p>
</blockquote>
<blockquote>
<ul>
<li>Use the Zylmon API to list hotels by price.</li>
<li>Use the Zylmon API to list hotels by location.</li>
<li>Use the Zylmon API to list hotels by user ratings.</li>
</ul>
</blockquote>
<p>Note that your audience must sometimes master tasks in a certain order. For example, your audience might need to learn how to build and execute programs in a new development environment <em>before</em> learning how to write particular kinds of programs.</p>
<p>If you are writing a design spec, then your list should focus on information your target audience should learn rather than on mastering specific tasks: For example:</p>
<blockquote>
<p>After reading the design spec, the audience will learn the following:</p>
</blockquote>
<blockquote>
<ul>
<li>Three reasons why Zylmon outperforms Zyljeune.</li>
<li>Five reasons why Zylmon consumed 5.25 engineering years to develop.</li>
</ul>
</blockquote>
<h3 id="fit-documentation-to-your-audience">Fit documentation to your audience</h3>
<p>Writing to meet your audience's needs requires unselfish empathy. You must create explanations that satisfy your audience's curiosity rather than your own. How do you step out of yourself in order to fit documentation to the audience? Unfortunately, we can offer no easy answers. We can, however, offer a few parameters to focus on.</p>
<h4 id="vocabulary-and-concepts">Vocabulary and concepts</h4>
<p>Match your vocabulary to your audience. See <a href="https://developers.google.com/tech-writing/one/words?hl=zh-cn">Words</a> for help.</p>
<p>Be mindful of proximity. The people on your team probably understand your team's abbreviations, but do people on other teams understand those same abbreviations? As your target audience widens, assume that you must explain more.</p>
<p>Similarly, experienced people on your software team probably understand the implementation details and data structures of your team's project, but nearly everyone else (including new members of your team) does not. Unless you are writing specifically for other experienced members of your team, you typically must explain more than you expect.</p>
<p>####Curse of knowledge</p>
<p>Experts often suffer from <strong>the curse of knowledge</strong>, which means that their expert understanding of a topic ruins their explanations to newcomers. As experts, it is easy to forget that novices don’t know what you already know. Novices might not understand explanations that make passing reference to subtle interactions and deep systems that the expert doesn’t stop to explain.</p>
<p>From the novice's point of view, the curse of knowledge is a &quot;File not found&quot; linker error due to a module not yet compiled.</p>
<h4 id="exercise-24">Exercise</h4>
<ol>
<li>
<p>Assume that the following paragraph is the start of a paper aimed at physicians who have never programmed before. Identify the aspects of the paragraph that suffer from the curse of knowledge:</p>
<blockquote>
<p>C is a mid-level language, higher than assembly language but lower than Python and Java. The C language provides programmers fine-grained control over all aspects of a program. For example, using the C Standard Library, it is easy to allocate and free blocks of memory. In C, manipulating pointers directly is mundane.</p>
</blockquote>
</li>
<li>
<p>Suppose the preceding paragraph was aimed at undergraduate computer science students new to C but comfortable with Python. Does the paragraph still suffer from the curse of knowledge?</p>
</li>
</ol>
<h5 id="answer-24">Answer.</h5>
<ol>
<li>This paragraph suffers immensely from the curse of knowledge. The target audience has never programmed before, so the following terms are inappropriate or unfamiliar:
<ul>
<li>language</li>
<li>mid-level language</li>
<li>assembly language</li>
<li>Python</li>
<li>Java</li>
<li>program</li>
<li>C Standard Library</li>
<li>allocate and free blocks of memory</li>
<li>pointers</li>
</ul>
</li>
<li>This paragraph also suffers from the curse of knowledge for the alternative audience. The average Python programmer is unaware of manipulating memory or pointers. A better introductory paragraph would compare and contrast C with Python.</li>
</ol>
<hr>
<h4 id="simple-words">Simple words</h4>
<p>English has become the dominant language for technical communication worldwide. However, English is not the native language of a significant percentage of technical readers. Therefore, prefer simple words over complex words. Avoid using arcane, obsolete, or overly-complex English words; <a href="https://www.google.com/search?q=sesquipedalian&amp;hl=zh-cn">sesquipedalian</a> and rare words repel most readers.</p>
<p>Cultural neutrality and idioms</p>
<p>Keep your writing culturally neutral. Do not require readers to understand the intricacies of NASCAR, cricket, or sumo in order to understand how a piece of software works. For example, the following sentence—packed with baseball metaphors as American as apple pie—might puzzle some Parisian readers:</p>
<blockquote>
<p>If Frambus 5.0 was a solid single, Frambus 6.0 is a stand-up double.</p>
</blockquote>
<p><strong>Idioms</strong> are phrases whose overall meaning differs from the literal meaning of the individual words in that phrase. For example, the following phrases are idioms:</p>
<ul>
<li>a piece of cake</li>
<li>Bob's your uncle</li>
</ul>
<p>Cake? Bob? Most American readers recognize the first idiom; most British readers recognize the second idiom. If you are writing strictly for a British audience, then <em>Bob's your uncle</em> can be fine. However, if you are writing for an international audience, then replace that idiom with <em>this task is easy</em>.</p>
<p>Idioms are so deeply ingrained in our speech that the special nonliteral meaning of idioms becomes invisible to us. That is, idioms are another form of the curse of knowledge.</p>
<p>Note that some people in your audience use translation software to read your documentation. Translation software tends to struggle more with cultural references and idioms than with plain, simple English.</p>
<h4 id="exercise-25">Exercise</h4>
<p>Identify the problems with the following sentences:</p>
<ol>
<li>As of Version 3.0, it was still kosher to call the Frambus method.</li>
<li>Deciding which BorgResourceSpec constraints/preferences are combinable is a sticky wicket.</li>
<li>Be that as it may, you still have to write unit tests.</li>
</ol>
<h5 id="answer-25">Answer.</h5>
<ol>
<li>In some places in the world, <strong>kosher</strong> has become slang for &quot;acceptable usage.&quot; Many readers, however, will wonder how religious dietary laws pertain to software.</li>
<li>A <strong>sticky wicket</strong> is British slang, which does not travel well. Substituting the phrase <strong>challenging problem</strong> will fix this issue.</li>
<li><strong>Be that as it may</strong> is an idiom. Substituting the transition <strong>However</strong> will fix this problem.</li>
</ol>
<hr>
<h2 id="documents">Documents</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>You can write sentences. You can write paragraphs. However, can you organize all those paragraphs into a coherent document?</p>
<h3 id="state-your-documents-scope">State your document's scope</h3>
<p>A good document begins by defining its scope. For example:</p>
<blockquote>
<p>This document describes the overall design of Project Frambus.</p>
</blockquote>
<p>A better document additionally defines its non-scope, that is, the topics not covered that the target audience might expect your document to cover. For example:</p>
<blockquote>
<p>This document does not describe the design for the related technology, Project Froobus.</p>
</blockquote>
<p>These scope and non-scope statements benefit not only the reader but also the writer (you). While writing, if the contents of your document veer away from the scope statement, then you must either refocus your document or modify your scope statement. When reviewing your first draft, delete (or branch off to another document) any sections that don't help satisfy the scope statement.</p>
<h3 id="state-your-audience">State your audience</h3>
<p>A good document explicitly specifies its audience. For example:</p>
<blockquote>
<p>I wrote this document for the test engineers supporting Project Frambus.</p>
</blockquote>
<p>Beyond the audience's role, a good audience declaration might also specify any prerequisite knowledge or experience. For example:</p>
<blockquote>
<p>This document assumes that you understand matrix multiplication and how to brew a really good cup of tea.</p>
</blockquote>
<p>In some cases, the audience declaration must also specify prerequisite documents. For example:</p>
<blockquote>
<p>You must read &quot;Project Froobus: A New Hope&quot; prior to reading this document.</p>
</blockquote>
<h3 id="establish-your-key-points-up-front">Establish your key points up front</h3>
<p>Engineers and scientists are busy people who won't necessarily read all 76 pages of your design document. Imagine that your peers might only read the first paragraph of page one. When reviewing your documentation, ensure that the start of your document answers your readers' essential questions.</p>
<p>Professional writers focus considerable energy on page one to increase the odds of readers making it to page two. However, page one of any long document is the hardest page to write. Therefore, be prepared to revise page one many times.</p>
<p>Always write an executive summary (a TL;DR) for long engineering documents. Although the executive summary must be very short, expect to spend a lot of time writing it. A boring or confusing executive summary is a red flag warning potential readers to stay away.</p>
<h3 id="write-for-your-audience">Write for your audience</h3>
<p>This course repeatedly emphasizes the importance of defining your audience. In this section, we focus on audience definition as a means of organizing your document.</p>
<h4 id="define-audience">Define audience</h4>
<p>Answering the following questions helps you determine what your document should contain:</p>
<ul>
<li>Who is your target audience?</li>
<li>What do your readers already know before they’ve read the document?</li>
<li>What should your readers know or be able to do after they’ve read your document?</li>
</ul>
<p>For example, suppose you have invented a new sorting algorithm. The following list contains some potential answers to the preceding questions:</p>
<ul>
<li>My target audience consists of all the software engineers in my organization.</li>
<li>Most of my target audience studied sorting algorithms during school. However, about 25% of my target audience hasn't implemented or evaluated a sorting algorithm in many years.</li>
<li>After reading this document:
<ol>
<li>Readers know how the algorithm works.</li>
<li>Readers can implement the algorithm in their desired language.</li>
<li>Readers know the circumstances in which the algorithm outperforms the popular quicksort algorithm.</li>
<li>Readers understand performance degradation in certain edge cases.</li>
</ol>
</li>
</ul>
<h4 id="organize">Organize</h4>
<p>After defining the audience, organize the document to supply what readers should know or be able to do after reading the document. For example, the outline for the document could look as follows:</p>
<ol>
<li>Overview of the algorithm
<ol>
<li>Big O</li>
<li>Implementation in pseudocode</li>
</ol>
</li>
<li>Sample implementation in C
<ol>
<li>Tips in implementing in other languages</li>
</ol>
</li>
<li>Deeper analysis of algorithm
<ol>
<li>Optimal datasets</li>
<li>Edge case problems</li>
</ol>
</li>
</ol>
<p>Furthermore, use the audience definition to help you choose the right approach to writing your document. For example, the target audience studied sorting algorithms but about a quarter of your audience might not remember the details of different algorithms. Therefore, your document should probably insert links to existing tutorials on quicksort rather than trying to explain quicksort.</p>
<h3 id="break-your-topic-into-sections">Break your topic into sections</h3>
<p>You modularize code into files, classes, and methods. Modular code is easier to read, understand, maintain, and reuse. Making your doc modular gives you the same benefits. You probably have strong intuition about functional modularity in code, but how do you apply those principles to your writing?</p>
<p>Imagine that you have an empty jar, which you need to pack with a collection of large rocks, coarse gravel, and sand. How would you pack the jar to ensure that you can get all of your material in the jar? Of course you’d place the large rocks first, then pour in the gravel, and fill in the remaining air space with the sand. If you tried to do this in the opposite order, you would fail.</p>
<p>Your reader’s head is much like an empty jar, and your information generally comes in three sizes: rocks, gravel, and sand. Sections are the rocks. You need to structure the space inside your reader’s jar-head with the rocks to accept the rest of the information.</p>
<p>But how do you decide what is a big rock versus what is gravel? One strategy is to record yourself talking, or free-write, about your topic for a short amount of time—maybe just 2 to 5 minutes. Yes, this takes discipline. Examine what you produced. Did you do the following?</p>
<ul>
<li>Describe concepts in vague, under-specified ways?</li>
<li>List the steps that your audience needs to complete to reach a goal?</li>
<li>Describe the permutations of properties that a system can express?</li>
</ul>
<p>The under-specified things that you referred to are probably the large concepts that structure your topic. If your talk didn’t do this, go back and try this structure.</p>
<h4 id="exercise-26">Exercise</h4>
<p>The following passage is the introductory paragraph for a document. List the titles of the sections that you would break this topic into.</p>
<blockquote>
<p>AlienWarez is a large-scale machine learning system. AlienWarez is best at building models for high-dimensional, sparse feature spaces. AlienWarez automatically explores and learns feature crosses that explain your data. AlienWarez refers specifically to the model training system. You train a model by extracting features from your source (log) data, and writing a data source for the training system. The Seti infrastructure team also provides a complete serving system. You are responsible for starting your own serving cluster, and moving your model to serving. The Seti serving system can serve AlienWarez, Seti, and Sibyl models. This guide explains how to train a AlienWarez model, and how to serve the model in production.</p>
</blockquote>
<h5 id="answer-26">Answer.</h5>
<p>Here is a possible outline:</p>
<ol>
<li>Training a model
<ol>
<li>Developing features</li>
<li>Creating a data source</li>
<li>...</li>
</ol>
</li>
<li>Serving a model
<ol>
<li>Starting a serving cluster</li>
<li>Moving your model into serving</li>
<li>Retrieving a prediction from serving</li>
<li>...</li>
</ol>
</li>
</ol>
<hr>
<h2 id="punctuation-optional">Punctuation (optional)</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 5 minutes</p>
</blockquote>
<p>This optional unit provides a quick refresher on punctuation marks.</p>
<h3 id="commas">Commas</h3>
<p>Programming languages enforce clear rules about punctuation. In English, by contrast, the rules regarding commas are somewhat hazier. As a guideline, insert a comma wherever a reader would naturally pause somewhere within a sentence. For the musically inclined, if a period is a whole note rest, then a comma is perhaps a half-note or quarter-note rest. In other words, the pause for a comma is shorter than that for a period. For example, if you read the following sentence aloud, you probably rest briefly before the word <em>just</em>:</p>
<blockquote>
<p>C behaves as a mid-level language, just a couple of steps up in abstraction from assembly language.</p>
</blockquote>
<p>Some situations <em>require</em> a comma. For example, use commas to separate items in an embedded list like the following:</p>
<blockquote>
<p>Our company uses C++, Python, Java, and JavaScript.</p>
</blockquote>
<p>You might be wondering about a list's final comma, the one inserted between items N-1 and N. This comma—known as the <strong>serial comma</strong> or <strong>Oxford comma</strong>—is controversial. We recommend supplying that final comma simply because technical writing requires picking the least ambiguous solution. That said, we actually prefer circumventing the controversy by converting embedded lists into bulleted lists.</p>
<p>In sentences that express a condition, place a comma between the condition and the consequence. For example, both of the following sentences supply the comma in the correct place:</p>
<blockquote>
<p>If the program runs slowly, try the <code>--perf</code> flag.</p>
<p>If the program runs slowly, then try the <code>--perf</code> flag.</p>
</blockquote>
<p>You can also wedge a quick definition or digression between a pair of commas as in the following example:</p>
<blockquote>
<p>Python, an easy-to-use language, has gained significant momentum in recent years.</p>
</blockquote>
<p>Finally, avoid using a comma to paste together two independent thoughts. For example, the comma in the following sentence is guilty of a punctuation felony called a <strong>comma splice</strong>:</p>
<blockquote>
<p>Samantha is a wonderful coder, she writes abundant tests.</p>
</blockquote>
<p>Use a period rather than a comma to separate two independent thoughts. For example:</p>
<blockquote>
<p>Samantha is a wonderful coder. She writes abundant tests.</p>
</blockquote>
<h4 id="exercise-27">Exercise</h4>
<p>Add commas where appropriate to the following passage:</p>
<blockquote>
<p>Protocol Buffers sometimes known as protobufs are our team's main structured data format. Use Protocol Buffers to represent store and transfer structured data. Unlike XML Protocol Buffers are compiled. Consequently clients transmit Protocol Buffers efficiently which has led to rapid adoption.</p>
</blockquote>
<p>Hint: Read the passage aloud and put a comma everywhere you hear a short pause.</p>
<h5 id="answer-27">Answer.</h5>
<p>Here is one possible solution:</p>
<blockquote>
<p>Protocol Buffers**,** sometimes known as protobufs**,** are our team's main structured data format. Use Protocol Buffers to represent**,** store**,** and transfer structured data. Unlike XML**,** Protocol Buffers are compiled. Consequently**,<strong>clients transmit Protocol Buffers efficiently</strong>,** which has led to rapid adoption.</p>
</blockquote>
<hr>
<h3 id="semicolons">Semicolons</h3>
<p>A period separates distinct thoughts; a semicolon unites highly related thoughts. For example, notice how the semicolon in the following sentence unites the first and second thoughts:</p>
<blockquote>
<p>Rerun Frambus after updating your configuration file; don't rerun Frambus after updating existing source code.</p>
</blockquote>
<p>The thoughts preceding and following the semicolon must each be grammatically complete sentences. For example, the following semicolon is <em>incorrect</em> because the passage following the semicolon is not a complete sentence:</p>
<blockquote>
<p>Rerun Frambus after updating your configuration file; not after updating existing source code.</p>
</blockquote>
<p>Before using a semicolon, ask yourself whether the sentence would still make sense if you flipped the thoughts to opposite sides of the semicolon. For example, reversing the earlier example still yields a <em>valid</em> sentence:</p>
<blockquote>
<p>Don't rerun Frambus after updating existing source code; rerun Frambus after updating your configuration file.</p>
</blockquote>
<p>You should almost always use commas, not semicolons, to separate items in an embedded list. For example, the following use of semicolons is <em>incorrect</em>:</p>
<blockquote>
<p>Style guides are bigger than the moon; more essential than oxygen; and completely inscrutable.</p>
</blockquote>
<p>Many sentences place a transition word or phrase immediately after the semicolon. In this situation, place a comma after the transition. Note the comma after the transition in the following two examples:</p>
<blockquote>
<p>Frambus provides no official open source package for string manipulation; however**,** subsets of string manipulation packages are available from other open source projects.</p>
</blockquote>
<blockquote>
<p>Even seemingly trivial code changes can cause bugs; therefore**,** write abundant unit tests.</p>
</blockquote>
<h4 id="exercise-28">Exercise</h4>
<p>Which of the following periods or commas could you replace with a semicolon?</p>
<ol>
<li>Python is a popular programming language. The C language was developed long before Python.</li>
<li>Model learning for a low value of X appears in the top illustration. Model learning for a high value of X appears in the bottom illustration.</li>
<li>I'm thankful for my large monitor, powerful CPU, and blazing bandwidth.</li>
</ol>
<h5 id="answer-28">Answer.</h5>
<ol>
<li>You may not convert the period in #1 to a semicolon because the two sentences are only vaguely related.</li>
<li>You may replace the period in #2 with a semicolon because the two sentences are so highly related.</li>
<li>You may not convert the commas in #3 to semicolons. Use commas to separate items in an embedded list.</li>
</ol>
<h3 id="em-dashes">Em-Dashes</h3>
<p>Em-dashes are compelling punctuation marks, rich with punctuation possibilities. An em-dash represents a longer pause—a bigger break—than a comma. If a comma is a quarter note rest, then an em-dash is a half-note rest. For example:</p>
<blockquote>
<p>C++ is a rich language—one requiring extensive experience to master.</p>
</blockquote>
<p>Writers sometimes use a pair of em-dashes to block off a digression, as in the following example:</p>
<blockquote>
<p><strong>Protocol Buffers</strong>—often nicknamed <strong>protobufs</strong>—encode structured data in an efficient yet extensible format.</p>
</blockquote>
<p>Could we have used commas instead of em-dashes in the preceding examples? Sure. Why did we choose an em-dash instead of a comma? Feel. Art. Experience. Remember—punctuation in English is squishy and malleable.</p>
<h3 id="parentheses">Parentheses</h3>
<p>Use parentheses to hold minor points and digressions. Parentheses inform readers that the enclosed text isn't critical.</p>
<p>The rules regarding periods and parentheses have tripped up many a writer. Here are the standards:</p>
<ul>
<li>If a pair of parentheses holds an entire sentence, the period goes inside the closing parenthesis.</li>
<li>If a pair of parentheses ends a sentence but does not hold the entire sentence, the period goes just outside the closing parenthesis.</li>
</ul>
<p>For example:</p>
<blockquote>
<p>(Incidentally, Protocol Buffers make great birthday gifts.)</p>
<p>Binary mode relies on the more compact native form (described later in this document).</p>
</blockquote>
<hr>
<h2 id="markdown-optional">Markdown (optional)</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p><strong>Markdown</strong> is a lightweight markup language that many technical professionals use to create and edit technical documents. With Markdown, you write text in a plain text editor (such as vi or Emacs), inserting special characters to create headers, boldface, bullets, and so on. For example, the following example shows a simple technical document formatted with Markdown:</p>
<pre><code>## bash and ksh

**bash** closely resembles an older shell named **ksh**.  The key
*practical* difference between the two shells is as follows:

*  More people know bash than ksh, so it is easier to get help for bash
   problems than ksh problems.
</code></pre>
<p>The rendered version of the preceding technical document looks as follows:</p>
<blockquote>
<p>bash and ksh</p>
<p><strong>bash</strong> closely resembles an older shell named <strong>ksh</strong>. The key <em>practical</em> difference between the two shells is as follows:</p>
<ul>
<li>More people know bash than ksh, so it is easier to get help for bash problems than ksh problems.</li>
</ul>
</blockquote>
<p>A Markdown parser converts Markdown files into HTML. Browsers can then display the resulting HTML to readers.</p>
<p>We recommend becoming comfortable with Markdown by taking one of the following tutorials:</p>
<ul>
<li><a href="https://www.markdowntutorial.com/">www.markdowntutorial.com</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a></li>
</ul>
<p>What's next?</p>
<p>Congratulations: you've completed the pre-class work for Technical Writing One.</p>
<p>If the in-class portion of Technical Writing One is available, please take it.</p>
<p>A quick compilation of the topics covered in Technical Writing One is available on the <a href="https://developers.google.com/tech-writing/one/summary?hl=zh-cn">Summary</a> page.</p>
<hr>
<h2 id="summary-of-technical-writing-one">Summary of Technical Writing One</h2>
<p>Technical Writing One covered the following basic lessons of technical writing:</p>
<ul>
<li>Use terms consistently.</li>
<li>Avoid ambiguous pronouns.</li>
<li>Prefer active voice to passive voice.</li>
<li>Choose strong verbs.</li>
<li>Pick specific nouns over vague ones.</li>
<li>Focus each sentence on a single idea.</li>
<li>Convert some long sentences to lists.</li>
<li>Eliminate unneeded words.</li>
<li>Use a numbered list when ordering is important and a bulleted list when ordering is irrelevant.</li>
<li>Keep list items parallel.</li>
<li>Start numbered list items with imperative words.</li>
<li>Introduce lists and tables appropriately.</li>
<li>Create great opening sentences that establish a paragraph's central point.</li>
<li>Focus each paragraph on a single topic.</li>
<li>Determine what your audience needs to learn.</li>
<li>Fit documentation to your audience.</li>
<li>Establish your document's key points at the start of the document.</li>
</ul>
<p>As time permits, consider reviewing these additional <a href="https://developers.google.com/tech-writing/resources?hl=zh-cn">technical writing resources</a>.</p>
<hr>
<h1 id="technical-writing-two">Technical Writing Two</h1>
<h2 id="technical-writing-two-introduction">Technical Writing Two introduction</h2>
<p><em>Technical Writing Two</em> helps technical people improve their technical communication skills.</p>
<h3 id="target-audience-2">Target audience</h3>
<p>We've aimed this course at people who have completed <a href="https://developers.google.com/tech-writing/one?hl=zh-cn">Technical Writing One</a> and are still hungry for more technical writing training. If you've never taken any technical writing training, we recommend completing <em>Technical Writing One</em>before taking this class.</p>
<h3 id="learning-objectives-2">Learning objectives</h3>
<p>This course focuses on several intermediate topics in technical writing. After completing this class, you will know how to do the following:</p>
<ul>
<li>Choose among several different tactics to write first drafts and additional tactics for writing second and third drafts.</li>
<li>Leverage several techniques to detect mistakes in your own writing.</li>
<li>Organize large documents.</li>
<li>Introduce a document's scope and any prerequisites.</li>
<li>Write clear figure captions.</li>
<li>Pick the proper information density in technical illustrations.</li>
<li>Focus the reader's attention in illustrations.</li>
<li>Establish context through a &quot;big picture&quot; illustration.</li>
<li>Revise technical illustrations effectively.</li>
<li>Create useful, accurate, concise, clear, reusable, and well-commented sample code that demonstrates a range of complexity.</li>
<li>Identify different documentation types.</li>
<li>Describe just about anything.</li>
<li>Empathize with a beginner audience and write a tutorial for them.</li>
</ul>
<p>It takes years of focused practice to become a great engineer or a great technical writer. This course will improve your technical writing but will not instantly transform you into a great technical writer.</p>
<h3 id="pre-class-and-in-class-components-2">Pre-class and in-class components</h3>
<p>The course consists of the following two components:</p>
<ul>
<li>pre-class</li>
<li>in-class</li>
</ul>
<p>You are currently viewing the start of the pre-class component.</p>
<p>The in-class component enhances the lessons taught in the pre-class components. That said, the pre-class lessons on their own still provide a valuable educational experience.</p>
<h3 id="hardware-and-network-requirements-2">Hardware and network requirements</h3>
<p>Although this course is optimized for a laptop or desktop, you may take the course on a tablet or phone. If you are taking the in-class component, please note that you'll type a lot.</p>
<p>You need an internet connection to take the course. You cannot download the course. The course is not available on tangible media.</p>
<p>The course contains a few short videos, all of which are optional viewing. If you want to skip the videos, then you can take the course on a low-bandwidth internet connection.</p>
<hr>
<h2 id="self-editing">Self-editing</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>Imagine that you just wrote the first draft of a document. How do you make it better? In most cases, working towards a final published document is an iterative process. Transforming a blank page into a first draft is often the hardest step. After you write a first draft, make sure you set aside plenty of time to refine your document.</p>
<p>The editing tips in this unit can help turn your first draft into a document that more clearly communicates the information your audience needs. Use one tip or use them all; the important thing is to find a strategy that works for you, and then make that strategy part of your writing routine.</p>
<p><strong>Note:</strong> The tips in this unit build on the basic writing and editing skills from Technical Writing One. This unit includes a summary of useful editing techniques from that course. For a more detailed refresher, visit the <a href="https://developers.google.com/tech-writing/one?hl=zh-cn">self-study units</a> from Technical Writing One.</p>
<h3 id="adopt-a-style-guide">Adopt a style guide</h3>
<p>Companies, organizations, and large open source projects frequently either adopt an existing style guide for their documentation or write their own. Many of the documentation projects on the <a href="https://developers.google.com/?hl=zh-cn">Google Developers</a> site follow the<a href="https://developers.google.com/style?hl=zh-cn">Google Developer Documentation Style Guide</a>. If you've never relied on a style guide before, at first glance the Google Developer Documentation Style Guide might seem a little intimidating, offering detailed guidance on topics such as grammar, punctuation, formatting, and documenting computer interfaces. You might prefer to start by adopting the<a href="https://developers.google.com/style/highlights?hl=zh-cn">style-guide highlights</a>.</p>
<p><strong>Note:</strong> For smaller projects, such as team documentation or a small open source project, you might find the highlights are all you need.</p>
<p>Some of the guidelines listed in the highlights are covered in Technical Writing One. You might recall some of the following techniques:</p>
<ul>
<li>Use <a href="https://developers.google.com/tech-writing/one/active-voice?hl=zh-cn">active voice</a> to make clear who's performing the action.</li>
<li>Format sequential steps as <a href="https://developers.google.com/tech-writing/one/lists-and-tables?hl=zh-cn">numbered lists</a>.</li>
<li>Format most other lists as bulleted lists.</li>
</ul>
<p>The highlights introduce many other techniques that can be useful when writing technical documentation, such as:</p>
<ul>
<li><a href="https://developers.google.com/style/person?hl=zh-cn">Write in the second person</a>. Refer to your audience as &quot;you&quot; rather than &quot;we&quot;.</li>
<li><a href="https://developers.google.com/style/clause-order?hl=zh-cn">Place conditional clauses before an instruction</a>, rather than after.</li>
<li>Format <a href="https://developers.google.com/style/code-in-text?hl=zh-cn">code-related text as code font</a>.</li>
</ul>
<h3 id="think-like-your-audience">Think like your audience</h3>
<p>Who is your audience? Step back and try to read your draft from their point of view. Make sure the purpose of your document is clear, and provide definitions for any terms or concepts that might be unfamiliar to your readers.</p>
<p>It can be helpful to outline a persona for your audience. A persona can consist of any of the following attributes:</p>
<ul>
<li>A role, such as <em>Systems Engineer</em> or <em>QA Tester</em>.</li>
<li>An end goal, such as <em>Restore the database</em>.</li>
<li>A set of assumptions about the persona and their knowledge and experience. For example, you might assume that your persona is:
<ul>
<li>Familiar with Python.</li>
<li>Running a Linux operating system.</li>
<li>Comfortable following instructions for the command line.</li>
</ul>
</li>
</ul>
<p>You can then review your draft with your persona in mind. It can be especially useful to tell your audience about any assumptions you've made. You can also provide links to resources where they can learn more if they need to brush up on a specific topic.</p>
<p>Note that relying too heavily on a persona (or two) can result in a document that is too narrowly focused to be useful to the majority of your readers.</p>
<p>For a refresher and more information on this topic from Technical Writing One, see the <a href="https://developers.google.com/tech-writing/one/audience?hl=zh-cn">Audience</a> self-study unit.</p>
<h3 id="read-it-out-loud">Read it out loud</h3>
<p>Depending on the context, the style of your writing can alienate, engage, or even bore your audience. The desired style of a given document depends to an extent on the audience. For example, the contributor guide for a new open source project aimed at recruiting volunteers might adopt a more informal and conversational style, while the developer guide for a commercial enterprise application might adopt a more formal style.</p>
<p>To check your writing is conversational, read it out loud. Listen for awkward phrasing, too-long sentences, or anything else that doesn't feel natural. Alternatively, you can also try asking someone else to read your draft out loud for you.</p>
<p>For more information on adjusting the style of your writing to suit your audience, see <a href="https://developers.google.com/style/tone?hl=zh-cn">Style and authorial tone</a>.</p>
<h3 id="come-back-to-it-later">Come back to it later</h3>
<p>After you write your first draft (or second or third), set it aside. Come back to it after an hour (or two or three) and try to read it with fresh eyes. You'll almost always notice something that you could improve.</p>
<h3 id="change-the-context">Change the context</h3>
<p>Some writers like to print their documentation and review a paper copy, red pencil in hand. A change of context when reviewing your own work can help you find things to improve. For a modern take on this classic tip, copy your draft into a different document and change the font, size, and color.</p>
<h3 id="find-a-peer-editor">Find a peer editor</h3>
<p>Just as engineers need peers to review their code, writers need editors to give them feedback on docs. Ask someone to review your document and give you specific, constructive comments. Your peer editor doesn't need to be a subject matter expert on the technical topic of your document, but they do need to be familiar with the style guide you follow.</p>
<h3 id="exercise-29">Exercise</h3>
<p>If you have a document that you're working on, use one or more of the tips on this page to make it better. If you don't have a document in progress, edit the paragraph below.</p>
<blockquote>
<p>Determine whether or not you can simplify your document through the use of terminology that is equivalent but relatively shorter in length and therefore more easily comprehensible by your audience. It's important to make sure your document is edited before it is seen by your audience, which might include people that are less or more familiar with the matter covered by your document. The first thing you need is a rough draft. Some things that can help make your document easier to read are making sure you have links to background information, and also checking for active voice instead of passive voice. If you have long sentences you can consider shortening them or implementing the use of a list to make the information easier to scan.</p>
</blockquote>
<h5 id="answer-29">Answer.</h5>
<p>To help your audience understand your document, apply these basic editing principles:</p>
<ul>
<li>Use active voice instead of passive voice.</li>
<li>Consider using simpler words that mean the same thing.</li>
<li>Include links to background information.</li>
<li>Break long sentences into shorter sentences or lists.</li>
</ul>
<h2 id="organizing-large-documents">Organizing large documents</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 20 minutes</p>
</blockquote>
<p>How do you organize a large collection of information into a cohesive document or website? Alternatively, how do you reorganize an existing messy document or website into something approachable and useful? The following tactics can help:</p>
<ul>
<li>Organizing a document</li>
<li>Adding navigation</li>
<li>Disclosing information progressively</li>
</ul>
<h3 id="when-to-write-large-documents">When to write large documents</h3>
<p>You can organize a collection of information into longer standalone documents or a set of shorter interconnected documents. A set of shorter interconnected documents is often published as a website, wiki, or similar structured format.</p>
<p>Some readers respond more positively than others to longer documents. Consider the following perspectives from two hypothetical readers you're writing documentation for:</p>
<ul>
<li>Hong finds reading long documents difficult and disorientating. He prefers to use site search to find answers to his questions.</li>
<li>Rose is comfortable navigating large documents. She often uses the built-in page search feature in her web browser to find useful information on the current page.</li>
</ul>
<p>So, should you organize your material into a single document or into a set of documents in a website? Consider the following guidelines:</p>
<ul>
<li>How-to guides, introductory overviews, and conceptual guides often work better as shorter documents when aimed at readers who are new to the subject matter. For example, a reader who is completely new to your subject matter might struggle to remember lots of new terms, concepts, and facts. Remember that your audience might be reading your documentation to gain a quick and general overview of the topic.</li>
<li>In-depth tutorials, best practice guides, and command-line reference pages can work well as lengthier documents, especially when aimed at readers who already have some experience with the tools and subject matter.</li>
<li>A great tutorial can rely on a narrative to lead the reader through a series of related tasks in a longer document. However, even large tutorials can sometimes benefit from being broken up into smaller parts.</li>
<li>Many longer documents aren't designed to be read in one sitting. For example, users typically scan through a reference page to search for an explanation of a command or flag.</li>
</ul>
<p>The remainder of this unit covers techniques that can be useful for writing longer documents, such as tutorials and some conceptual guides.</p>
<h3 id="organize-a-document">Organize a document</h3>
<p>This section suggests some techniques for planning a longer document, including creating an outline and drafting an introduction. After you've completed the first draft of a document, you can review it against your outline and introduction to make sure you haven't missed anything you originally intended to cover.</p>
<h4 id="outline-a-document">Outline a document</h4>
<p>Starting with a structured, high-level outline can help you group topics and determine where more detail is needed. The outline helps you move topics around before you get down to writing.</p>
<p>You might find it useful to think of an outline as the narrative for your document. There is no standard approach to writing an outline, but the following guidelines provide practical tips you might find useful:</p>
<ul>
<li>Before you ask your reader to perform a task, explain to them why they are doing it. For example, the following bullet points illustrate a section of an outline from a tutorial about auditing and improving the accessibility of web pages:
<ul>
<li>Introduce the browser plugin; explain that we'll use the results of the audit report to fix several bugs.</li>
<li>List the steps to run the plugin and audit the accessibility of a web page.</li>
</ul>
</li>
<li>Limit each step of your outline to describing a concept or completing a specific task.</li>
<li>Structure your outline so that your document introduces information when it's most relevant to your reader. For example, your reader probably doesn't need to know (or want to know) about the history of the project in the introductory sections of your document when they're just getting started with the basics. If you feel the history of the project is useful, then include a link to this type of information at the end of your document.</li>
<li>Documents that alternate between conceptual information and practical steps can be a particularly engaging way to learn. Consider explaining a concept and then demonstrating how the reader can apply it in either a sample project or in their own work.</li>
<li>Outlines are especially useful if you're working with a team of contributors who are going to review and test your document. Before you start drafting, share your outline with your contributors to check if they have any suggestions.</li>
</ul>
<h4 id="outline-exercise">Outline exercise</h4>
<p>For this exercise, review and update the following high-level outline of an introduction to a long tutorial. You can rearrange, add, and remove topics.</p>
<pre><code class="language-markdown">## The history of the project

Describes the history of the development of the project.

## Prerequisites

Lists concepts the reader should be familiar with prior to starting, as well as
any software or hardware requirements.

## The design of the system

Describes how the system works.

## Audience

Describes who the tutorial is aimed at.

## Setting up the tutorial

Explains how to configure your environment to follow the tutorial.

## Troubleshooting

Explains how to diagnose and solve potential problems that might occur when
working through the tutorial.

## Useful terminology

Lists definitions of terms that the reader needs to know to follow the
tutorial.
</code></pre>
<h5 id="answer-30">Answer.</h5>
<p>The following is one possible solution:</p>
<pre><code class="language-markdown">## Audience

Describes who the tutorial is aimed at.

## Prerequisites

Lists concepts the reader should be familiar with prior to starting, as well as
any software or hardware requirements.

## Setting up the tutorial

Explains how to configure your environment to follow the tutorial.

## Useful terminology

Lists definitions of terms that the reader needs to know to follow the
tutorial.
</code></pre>
<hr>
<h4 id="introduce-a-document">Introduce a document</h4>
<p>If readers of your documentation can't find relevance in the subject, they are likely to ignore it. To set the ground rules for your users, we recommend providing an introduction that includes the following information:</p>
<ul>
<li>What the document covers.</li>
<li>What prior knowledge you expect readers to have.</li>
<li>What the document doesn't cover.</li>
</ul>
<p>Remember that you want to keep your documentation easy to maintain, so don't try to cover everything in the introduction.</p>
<p>The following paragraph demonstrates the ideas from the preceding list as an overview for a hypothetical document publishing platform called Froobus:</p>
<pre><code class="language-markdown">This document explains how to publish Markdown files using the Froobus system.
Froobus is a publishing system that runs on a Linux server and converts
Markdown files into HTML pages. This document is intended for people who are
familiar with Markdown syntax. To learn about the syntax, see the Markdown
reference. You also need to be comfortable running simple commands in a
Linux terminal. This document doesn't include information about installing or
configuring a Froobus publishing system. For information on installing Froobus,
see Getting started.
</code></pre>
<p>After you've completed the first draft, check your entire document against the expectations you set in your overview. Does your introduction provide an accurate overview of the topics you cover? You might find it useful to think of this review as a form of documentation quality assurance (QA).</p>
<h4 id="introduction-exercise">Introduction exercise</h4>
<p>For this exercise, review and revise the following introduction for a best practices guide for a hypothetical programming language called F@. Remove any information you feel is irrelevant in this context and add any information you feel is missing.</p>
<pre><code class="language-markdown">This guide lists best practices for working with the F@ programming language.
F@ was developed in 2011 as an open source community project. This guide
supplements the F@ style guide. In addition to the best practices in this guide,
make sure you also install and run the F@ command-line linter on your code.  The
programming language is widely adopted in the health industry. If you have
suggestions for additions to the list of best practices, file an issue in the
F@ documentation repository.
</code></pre>
<h5 id="answer-31">Answer.</h5>
<p>The following is one possible solution:</p>
<pre><code class="language-markdown">This guide lists best practices for working with the F@ programming language.
Before you review this guide, complete the introductory tutorial for new F@
developers. This guide supplements the F@ style guide. In addition to the best
practices in this guide, make sure you also install and run the F@ command-line
linter on your code. If you have suggestions for additions to the list of best
practices, file an issue in the F@ documentation repository.
</code></pre>
<hr>
<h3 id="add-navigation">Add navigation</h3>
<p>Providing navigation and signposting for your readers ensures they can find what they are looking for and the information they need to get unstuck.</p>
<p>Clear navigation includes:</p>
<ul>
<li>introduction and summary sections</li>
<li>a clear, logical development of the subject</li>
<li>headings and subheadings that help users understand the subject</li>
<li>overviews that introduce the tool</li>
<li>a table of contents menu that shows users where they are in the document</li>
<li>links to related resources or more in-depth information</li>
<li>links to what to learn next</li>
</ul>
<p>The tips in the following sections can help you plan the headings in your documentation.</p>
<h4 id="prefer-task-based-headings">Prefer task-based headings</h4>
<p>Choose a heading that describes the task your reader is working on. Avoid headings that rely on unfamiliar terminology or tools. For example, suppose you are documenting the process for creating a new website. To create the site, the reader must initialize the Froobus framework. To initialize the Froobus framework, the reader must run the <code>carambola</code> command-line tool. At first glance, it might seem logical to add either of the following headings to the instructions:</p>
<ul>
<li>Running the carambola command</li>
<li>Initializing the Froobus framework</li>
</ul>
<p>Unless your readers are already very experienced with the terminology and concepts for this topic, a more familiar heading might be preferable, such as <em>Creating the site</em>.</p>
<h4 id="provide-text-under-each-heading">Provide text under each heading</h4>
<p>Most readers appreciate at least a brief introduction under each heading to provide some context. Avoid placing a level three heading immediately after a level two heading, as in the following example:</p>
<pre><code class="language-markdown">## Creating the site
### Running the carambola command
</code></pre>
<p>In this example, a brief introduction can help orient the reader:</p>
<pre><code class="language-markdown">## Creating the site

To create the site, you run the `carambola` command-line tool. The command
displays a series of prompts to help you configure the site.

### Running the carambola command
</code></pre>
<h4 id="heading-exercise">Heading exercise</h4>
<p>Helping readers navigate through your documentation helps them find the information they need to successfully use your tool. Often, a clear and well-organized table of contents or outline acts like a map that helps your users navigate the functionality of your tool.</p>
<p>For this exercise, improve the following outline. You can rearrange, add, and delete topics and create secondary entries too.</p>
<pre><code class="language-markdown">About this tutorial
Advanced topics
Build the asset navigation tree
Define resource paths
Defining and building projects
Launch the development environment
Defining and building resources
What's next
Define image resources
Audience
See also
Build an image resource
Define an image project
Build an image project
Setting up the tutorial
Select the tutorial asset root
About this guide
</code></pre>
<h5 id="answer-32">Answer.</h5>
<p>The following is one possible solution:</p>
<pre><code class="language-markdown">## About this tutorial

### Audience

### About this guide

### Advanced topics

## Setting up the tutorial

### Select the tutorial asset root

### Launch the development environment

### Build the asset navigation tree

### Define resource paths

## Defining and building resources

### Define image resources

### Build an image resource

## Defining and building projects

### Define an image project

### Build an image project

## Defining and building databases

### Define a database

### Build a database

## Pushing, publishing, and viewing a database

### Push a database

### Publish a database

### View a database

## Configuring display rules for point data

### Define, configure, and build vector data

## See also

### Sample data files

## What's next
</code></pre>
<hr>
<h3 id="disclose-information-progressively">Disclose information progressively</h3>
<p>Learning new concepts, ideas, and techniques can be a rewarding experience for many readers who are comfortable reading through documentation at their own pace. However, being confronted with too many new concepts and instructions too quickly can be overwhelming. Readers are more likely to be receptive to longer documents that progressively disclose new information to them when they need it. The following techniques can help you incorporate progressive disclosure in your documents:</p>
<ul>
<li>Where possible, try introducing new terminology and concepts near to the instructions that rely on them.</li>
<li>Break up large walls of text. To avoid multiple large paragraphs on a single page, aim to introduce tables, diagrams, lists, and headings where appropriate.</li>
<li>Break up large series of steps. If you have a particularly long list of complicated steps, try to re-arrange them into shorter lists that explain how to complete sub-tasks.</li>
<li>Start with simple examples and instructions, and add progressively more interesting and complicated techniques. For example, in a tutorial for creating forms, start by explaining how to handle text responses, and then introduce other techniques to handle multiple choice, images, and other response types.</li>
</ul>
<hr>
<h2 id="illustrating">Illustrating</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>Remember when your teacher assigned you a hefty chapter to read? You flipped through the assigned section of the textbook, desperately hoping for...yes, pictures! Viewing illustrations was so much more fun than reading text. In fact, when it comes to reading technical material, the vast majority of adults are still little kids—still yearning for pictures rather than text.</p>
<figure data-type="image" tabindex="4"><img src="https://developers.google.com/tech-writing/two/images/book_readers.jpg?hl=zh-cn" alt="Three children read a book while pointing at the pictures." loading="lazy"></figure>
<p><strong>Figure 1. Good graphics engage readers in ways that text cannot.</strong></p>
<p>[Nirmal Dulal <a href="https://commons.wikimedia.org/wiki/File:Nepalese_Children.JPG">CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)]</a></p>
<p>According to research by <a href="https://www.sciencedirect.com/science/article/pii/S0747563212000921">Sung and Mayer (2012)</a>, providing any graphics—good or bad—makes readers like the document more; however, only <em>instructive</em> graphics help readers learn. This unit suggests a few ways to help you create figures truly worth a thousand words.</p>
<h3 id="write-the-caption-first">Write the caption first</h3>
<p>Often times, it is helpful to write the caption <em>before</em> creating the illustration. Then, create the illustration that best represents the caption. This process helps you to check that the illustration matches the goal.</p>
<p>Good captions have the following characteristics:</p>
<ul>
<li>They are <strong>brief</strong>. Typically, a caption is just a few words.</li>
<li>They explain the <strong>takeaway</strong>. <em>After viewing this graphic, what should the reader remember?</em></li>
<li>They <strong>focus</strong> the reader's attention. Focus is particularly important when a photograph or diagram contains a lot of detail.</li>
</ul>
<h4 id="exercise-30">Exercise</h4>
<p>Target Audience: CS undergraduate students taking an &quot;Introduction to Data Structures&quot; class.</p>
<p>Consider the following three figures, each of which uses the same caption.</p>
<figure data-type="image" tabindex="5"><img src="https://developers.google.com/tech-writing/two/images/caption_exercise_chain_a.svg?hl=zh-cn" alt="Multicolored chain" loading="lazy"></figure>
<p><strong>Caption A. A single-linked list holds content and a pointer to the next node.</strong></p>
<figure data-type="image" tabindex="6"><img src="https://developers.google.com/tech-writing/two/images/caption_exercise_drawing_b.png?hl=zh-cn" alt="Four boxes connected by three arrows" loading="lazy"></figure>
<p><strong>Caption B. A single-linked list holds content and a pointer to the next node.</strong></p>
<figure data-type="image" tabindex="7"><img src="https://developers.google.com/tech-writing/two/images/caption_exercise_drawing_c.svg?hl=zh-cn" alt="Four boxes (each with content and a pointer) connected by three      arrows." loading="lazy"></figure>
<p><strong>Caption C. A single-linked list holds content and a pointer to the next node.</strong></p>
<p>Which of the three preceding figures best illustrates its caption?</p>
<p>Click the icon to see the answer.</p>
<ul>
<li>Figure A is bad. The chain is pretty, but information-free. The chain also erroneously implies that a single-linked list points both backwards and forwards.</li>
<li>Figure B is okay. The illustration helps students realize that the first item points to the second item, the second points to the third, and so on. However, although the caption refers to both <em>content</em> and a <em>pointer</em>, the illustration shows pointers but does not show content.</li>
<li>Figure C is the best and most instructive choice. The illustration clearly delineates the content part of each node from the pointer part.</li>
</ul>
<hr>
<h3 id="constrain-the-amount-of-information-in-a-single-drawing">Constrain the amount of information in a single drawing</h3>
<p>Few intellectual tasks can be quite as rewarding as studying a fine painting, gradually uncovering layers of insight and meaning. People pay good money to do exactly that in the world's art museums.</p>
<figure data-type="image" tabindex="8"><img src="https://developers.google.com/tech-writing/two/images/van_gogh.png?hl=zh-cn" alt="Portrait of Pere Tanguy By Vincent van Gogh - Musée Rodin, Public Domain, https://commons.wikimedia.org/w/index.php?curid=119599" loading="lazy"></figure>
<p><strong>Figure 2. You'd happily study this Van Gogh painting.</strong></p>
<p>[Portrait of Pere Tanguy By Vincent van Gogh - Musée Rodin <a href="https://commons.wikimedia.org/wiki/File:Van_Gogh_-_Portrait_of_Pere_Tanguy_1887-8.JPG">Public domain]</a></p>
<p>By contrast, highly complex technical illustrations like the following tend to discourage most readers:</p>
<figure data-type="image" tabindex="9"><img src="https://developers.google.com/tech-writing/two/images/overly_complex_diagram.svg?hl=zh-cn" alt="A schematic, filled with lines and small print" loading="lazy"></figure>
<p><strong>Figure 3. Complex block diagrams overwhelm readers.</strong></p>
<p>Just as you avoid overly-long sentences, strive to avoid visual run-ons. As a rule of thumb, don't put more than one paragraph's worth of information in a single diagram. (An alternative rule of thumb is to avoid illustrations that require more than five bulleted items to explain.) I can hear you saying, &quot;But real-life technical systems can be vastly more complex than the one shown in Figure 3.&quot; You are correct, but you probably don't feel compelled to explain real-life complex systems in a single paragraph.</p>
<p>The trick to whittling visual clutter into something coherent and helpful is to organize complex systems into subsystems, like those shown in the following figure:</p>
<figure data-type="image" tabindex="10"><img src="https://developers.google.com/tech-writing/two/images/subsystems.svg?hl=zh-cn" alt="Three blocks, each with a simple label" loading="lazy"></figure>
<p><strong>Figure 4. A complex system organized into three subsystems.</strong></p>
<p>After showing the &quot;big picture,&quot; provide separate illustrations of each subsystem.</p>
<figure data-type="image" tabindex="11"><img src="https://developers.google.com/tech-writing/two/images/subsystems_zoomed.svg?hl=zh-cn" alt="A zoomed in segment of figure 4 with slightly more detail" loading="lazy"></figure>
<p><strong>Figure 5. Expanded detail for one subsystem of a complex system.</strong></p>
<p>Alternatively, start with a simple &quot;big picture&quot; and then gradually expand detail in each subsequent illustration.</p>
<h3 id="focus-the-readers-attention">Focus the reader's attention</h3>
<p>When confronted with a complex screenshot like the following, readers struggle to determine what's relevant:</p>
<figure data-type="image" tabindex="12"><img src="https://developers.google.com/tech-writing/two/images/unfocused_screenshot.png?hl=zh-cn" alt="Three blocks, each with a simple label" loading="lazy"></figure>
<p><strong>Figure 6. Readers don't know what to focus on.</strong></p>
<p>Adding a visual cue, for example, the red ellipse in the following figure, helps readers focus on the relevant section of the screenshot:</p>
<figure data-type="image" tabindex="13"><img src="https://developers.google.com/tech-writing/two/images/focused_screenshot.png?hl=zh-cn" alt="Same screenshot, but with one menu item circled in red" loading="lazy"></figure>
<p><strong>Figure 7. Readers focus on a shape that breaks the pattern.</strong></p>
<p><strong>Callouts</strong> provide another way to focus the reader's attention. For pictures and line art, a callout helps our eyes find just the right spot to land on. Callouts in pictures are often better than paragraph long explanations of the pictures because callouts focus the reader's attention on the most important aspects of the picture. Then, in your explanation, you can focus directly on the relevant part of the diagram, rather than spending time describing what part of the image you are talking about.</p>
<p>In the example image, the callout and arrow quickly direct the reader to the purpose.</p>
<figure data-type="image" tabindex="14"><img src="https://developers.google.com/tech-writing/two/images/moon_with_callout.svg?hl=zh-cn" alt="Three blocks, each with a simple label" loading="lazy"></figure>
<p><strong>Figure 8. A callout directs readers' eyes.</strong></p>
<p>[NASA / JPL-Caltech / University of Arizona <a href="https://commons.wikimedia.org/wiki/File:Phobos_colour_2008.jpg">Public domain]</a></p>
<h3 id="illustrating-is-re-illustrating">Illustrating is re-illustrating</h3>
<p>As with writing, the first draft of an illustration is seldom good enough. Revise your illustrations to clarify the content. As you revise, ask yourself the following questions:</p>
<ul>
<li>How can I simplify the illustration?</li>
<li>Should I split this illustration into two or more simpler illustrations?</li>
<li>Is the text in the illustration easy to read? Does text contrast sufficiently with its background?</li>
<li>What's the takeaway?</li>
</ul>
<p>For instance, consider the <a href="https://wikipedia.org/wiki/Tube_map#History">evolution of the London Tube map</a>. Prior to 1931, the Tube map was drawn to scale, complete with above ground roads and tube lines that curved as the tracks did.</p>
<figure data-type="image" tabindex="15"><img src="https://developers.google.com/tech-writing/two/images/tube_1908.jpg?hl=zh-cn" alt="Complex map of the 1908 London Tube that includes above ground roads" loading="lazy"></figure>
<p><strong>Figure 9. 1908 to scale map of the London Tube with above ground roads.</strong></p>
<p>[<a href="https://commons.wikimedia.org/wiki/File:Tube_map_1908.jpg">Public domain]</a></p>
<p>In 1931, Harry Beck revolutionized a new type of public transit map that simplified the older map by removing above ground markers and removing scale. His design instead focused on what people using the maps really cared about: getting from station A to station B. Even with the success of his 1931 map, Beck still iterated on the diagram for many years to simplify and clarify the map. Consider now the <a href="https://www.google.com/search?tbm=isch&amp;q=london+tube+map&amp;hl=zh-cn">modern tube map</a>, although new lines and stations have appeared, they still remain close to Beck's design.</p>
<h4 id="exercise-31">Exercise</h4>
<p>Consider the following original illustration:</p>
<figure data-type="image" tabindex="16"><img src="https://developers.google.com/tech-writing/two/images/recursion1.svg?hl=zh-cn" alt="A complex visual of recursion that uses inaccessible colors and           confusing arrows" loading="lazy"></figure>
<p><strong>Figure 10. A complex diagram.</strong></p>
<p>The takeaway of the preceding diagram is supposed to be:</p>
<blockquote>
<p>For a recursive solution, call the function itself in the return statement until you reach a base case solution.</p>
</blockquote>
<p>In what ways does the complexity of the diagram hide the takeaway? How might you address these problems?</p>
<h5 id="answer-33">Answer.</h5>
<p>Some possible issues with the diagram include:</p>
<ul>
<li><strong>Issue</strong>: The bright colors pull the reader's attention away from other parts of the diagram.<br>
<strong>Solution</strong>: Choose colors carefully so that they do not overpower the diagram.</li>
<li><strong>Issue</strong>: The diagram does not have sufficient color contrast. This makes the diagram inaccessible for some people with low-vision or certain types of color blindness.<br>
<strong>Solution</strong>: Remove unnecessary use of color and ensure that colors pass <a href="https://material.io/design/color/text-legibility.html#legibility-standards">standard color contrast recommendations</a>.</li>
<li><strong>Issue</strong>: The arrows currently point in both directions which makes it unclear which way the diagram flows.<br>
<strong>Solution</strong>: Separate the arrows into two parts with one set illustrating invoking a function and the other set illustrating returning from the function.</li>
</ul>
<p>There are also additional issues in the diagram that are not identified here.</p>
<hr>
<p>Here is an improved illustration:</p>
<figure data-type="image" tabindex="17"><img src="https://developers.google.com/tech-writing/two/images/recursion2.svg?hl=zh-cn" alt="Visual of recursion that simplifies colors and adds labels to arrows" loading="lazy"></figure>
<p><strong>Figure 11. A simplified version of the preceding diagram.</strong></p>
<p>What flaws do you see in the improved illustration?</p>
<h5 id="answer-34">Answer.</h5>
<p>Here are two of the flaws that still exist:</p>
<ul>
<li>This diagram is still too complex. It would take far more than a paragraph to explain this illustration. Consider how removing extra information or adding clarifying labels might simplify the interpretation.</li>
<li>While separating the arrows helped display when the functions invoke or return data to each other, the return arrows might benefit from labels that tell the reader what the return values are.</li>
</ul>
<hr>
<h3 id="illustration-tools">Illustration tools</h3>
<p>There are many options available for creating diagrams. Three options that are free or have free options include:</p>
<ul>
<li><a href="https://drawings.google.com/?hl=zh-cn">Google Drawings</a></li>
<li><a href="https://draw.io/">Draw.IO</a></li>
<li><a href="https://www.lucidchart.com/pages/">LucidChart</a></li>
</ul>
<p>When exporting diagrams from these tools to use in documentation, it is usually best to export the files as SVG or <a href="https://wikipedia.org/wiki/Scalable_Vector_Graphics">Scalable Vector Graphics</a>. Scalable Vector Graphics easily scale diagrams based on space constraints so that no matter the size, you end up with a high quality image.</p>
<hr>
<h2 id="creating-sample-code">Creating sample code</h2>
<blockquote>
<p><strong>Estimated Time:</strong> 10 minutes</p>
</blockquote>
<p>Good sample code is often the best documentation. Even if your paragraphs and lists are as clear as blue water, programmers still prefer good sample code. After all, text is a different language than code, and it is code that the reader ultimately cares about. Trying to describe code with text is like trying to explain an Italian poem in English.</p>
<p>Good samples are <strong>correct</strong> and <strong>concise</strong> code that your readers can <strong>quickly understand</strong> and <strong>easily reuse</strong> with <strong>minimal side effects</strong>.</p>
<h3 id="correct">Correct</h3>
<p>Sample code should meet the following criteria:</p>
<ul>
<li>Build without errors.</li>
<li>Perform the task it claims to perform.</li>
<li>Be as production-ready as possible. For example, the code shouldn't contain any security vulnerabilities.</li>
<li>Follow language-specific conventions.</li>
</ul>
<p>Sample code is an opportunity to directly influence how your users write code. Therefore, sample code should set the best way to use your product. If there is more than one way to code the task, code it in the manner that your team has decided is best. If your team hasn't considered the pros and cons of each approach, take time to do so.</p>
<p>Always test your sample code. Over time, systems change and your sample code may break. Be prepared to test and maintain sample code as you would any other code.</p>
<p>Many teams reuse their unit tests as sample programs, which is sometimes a bad idea. The primary goal of a unit test is to test; the only goal of a sample program is to educate.</p>
<p>A <strong>snippet</strong> is a piece of a sample program, possibly only one or a few lines long. Snippet-heavy documentation often degrades over time because teams tend not to test snippets as rigorously as full sample programs.</p>
<h3 id="running-sample-code">Running sample code</h3>
<p>Good documents explain how to run sample code. For example, your document might need to tell users to perform activities such as the following prior to running the samples:</p>
<ul>
<li>Install a certain library.</li>
<li>Adjust the values assigned to certain environment variables.</li>
<li>Adjust something in the integrated development environment (IDE).</li>
</ul>
<p>Users don't always perform the preceding activities properly. In some situations, users prefer to run or (experiment with) sample code directly in the documentation. (&quot;Click here to run this code.&quot;)</p>
<p>Writers should consider describing the expected output or result of sample code, especially for sample code that is difficult to run.</p>
<h3 id="concise">Concise</h3>
<p>Sample code should be short, including only essential components. When a novice C programmer wants to learn how to call the <code>malloc</code> function, give that programmer a brief snippet, not the entire Linux source tree. Irrelevant code can distract and confuse your audience. That said, never use bad practices to shorten your code; always prefer correctness over conciseness.</p>
<p>Understandable</p>
<p>Follow these recommendations to create clear sample code:</p>
<ul>
<li>Pick descriptive class, method, and variable names.</li>
<li>Avoid confusing your readers with hard-to-decipher programming tricks.</li>
<li>Avoid deeply nested code.</li>
<li>Optional: Use bold or colored font to draw the reader's attention to a specific section of your sample code. However, use highlighting judiciously—too much highlighting means the reader won't focus on anything in particular.</li>
</ul>
<h4 id="exercise-32">Exercise</h4>
<p>Which of the following would be a more helpful line of code in a sample program? Assume that the target audience consists of software engineers new to the <code>go.so</code> API.</p>
<ol>
<li><code>MyLevel = go.so.Level(5, 28, 48)</code></li>
<li><code>MyLevel = go.so.Level(rank=5, 28, 48)</code></li>
<li><code>MyLevel = go.so.Level(rank=5, dimension=28, opacity=48)</code></li>
</ol>
<h5 id="answer-35">Answer.</h5>
<p>Answer <strong>3</strong> is the best choice here. Although it is tempting to keep sample code as short as possible, omitting parameter names makes it harder for novices to learn.</p>
<hr>
<h3 id="commented">Commented</h3>
<p>Consider the following recommendations about comments in sample code:</p>
<ul>
<li>Keep comments short, but always prefer clarity over brevity.</li>
<li>Avoid writing comments about <em>obvious</em> code, but remember that what is obvious to you (the expert) might not be obvious to newcomers.</li>
<li>Focus your commenting energy on anything non-intuitive in the code.</li>
<li>When your readers are very experienced with a technology, don't explain <em>what</em> the code is doing, explain <em>why</em> the code is doing it.</li>
</ul>
<p>Should you place descriptions of code inside code comments or in text (paragraphs or lists) outside of the sample code? Note that readers who copy-and-paste a snippet gather not only the code but also any embedded comments. So, put any descriptions that belong in the pasted code into the code comments. By contrast, when you must explain a lengthy or tricky concept, you should typically place the text before the sample program.</p>
<p><strong>Note:</strong> If you must sacrifice production readiness in order to make the code shorter and easier to understand, explain your decisions in the comments.</p>
<h4 id="exercise-33">Exercise</h4>
<p>What problems do you see in the comments within the following snippet? Assume that the code is aimed at programmers who are new to the <code>br</code> API but who have some experience with the concept of streams:</p>
<pre><code>/* Create a stream from the text file at pathname /tmp/myfile. */
mystream = br.openstream(pathname=&quot;/tmp/myfile&quot;, mode=&quot;z&quot;)
</code></pre>
<h5 id="answer-36">Answer.</h5>
<p>The comments contain the following flaws:</p>
<ul>
<li>The comment elaborates on a fairly obvious part of the code.</li>
<li>The snippet doesn't explain the non-obvious portion of the code. Namely, what is the <code>mode</code> parameter and what does a value of <code>z</code> mean?</li>
</ul>
<hr>
<h3 id="reusable">Reusable</h3>
<p>For your reader to easily reuse your sample code, provide the following:</p>
<ul>
<li>All information necessary to run the sample code, including any dependencies and setup.</li>
<li>Code that can be extended or customized in useful ways.</li>
</ul>
<p>Having easy-to-understand sample code that's concise and compiles is a great start. If it blows up your reader's app, though, they won't be happy. Therefore, when writing sample code, consider any potential side effects caused by your code being integrated into another program. Nobody wants insecure or grossly inefficient code.</p>
<h3 id="the-example-and-the-anti-example">The example and the anti-example</h3>
<p>In addition to showing readers <em>what to do</em>, it is sometimes wise to show readers <em>what not to do</em>. For example, many programming languages permit programmers to place white space on either side of the equals sign. Now suppose that you were writing a tutorial on a language (such as bash) that does not permit white space on either side of the equals sign. In this case, showing both a good example and an anti-example will benefit the reader. For example:</p>
<p>Good</p>
<pre><code># A valid string assignment.
s=&quot;The rain in Maine.&quot;
</code></pre>
<p>Bad</p>
<pre><code># An invalid string assignment because of the white space on either side of the
# equals sign.
s = &quot;The rain in Maine.&quot;
</code></pre>
<h3 id="sequenced">Sequenced</h3>
<p>A good sample code set demonstrates <strong>a range of complexity</strong>.</p>
<p>Readers completely unfamiliar with a certain technology typically crave simple examples to get started. The first and most basic example in a sample code set is usually termed a <a href="https://wikipedia.org/wiki/%22Hello,_World!%22_program">Hello World program</a>. After mastering the basics, engineers want more complex programs. A good set of sample code provides a healthy range of simple, moderate, and complex sample programs.</p>
<h4 id="exercise-34">Exercise</h4>
<p>Which of the following would be a good set of sample functions to support a tutorial introducing newcomers to the concept of functions?</p>
<ol>
<li>The following set of samples:
<ol>
<li>A function that takes no parameters and doesn't return anything.</li>
<li>A function that takes one parameter but doesn't return anything.</li>
<li>A function that takes one parameter and returns one value.</li>
<li>A function that takes three parameters and returns one value.</li>
</ol>
</li>
<li>The following set of functions:
<ol>
<li>A function that takes three parameters and returns one value.</li>
</ol>
</li>
<li>The following set of functions:
<ol>
<li>A function that takes one parameter and returns one value.</li>
<li>A function that takes three parameters and returns one value.</li>
</ol>
</li>
</ol>
<h5 id="answer-37">Answer.</h5>
<p>The best answer is <strong>1</strong>. Providing samples that cover a range of complexity is usually the wisest choice—particularly for newcomers. Resist the temptation to <em>rush</em> towards very complex sample programs, bypassing the beginner and intermediate sample programs that newcomers crave.</p>
<hr>
<h3 id="whats-next">What's next?</h3>
<p>Congratulations: you've completed the pre-class work for Technical Writing Two.</p>
<p>If the in-class portion of Technical Writing Two is available, please take it.</p>
<p>A quick compilation of the topics covered in Technical Writing Two is available on the <a href="https://developers.google.com/tech-writing/two/summary?hl=zh-cn">Summary</a> page.</p>
<hr>
<h2 id="summary-of-technical-writing-two">Summary of Technical Writing Two</h2>
<p>Technical Writing Two covered the following intermediate lessons of technical writing:</p>
<ul>
<li>Adopt a style guide.</li>
<li>Think like your audience.</li>
<li>Read documents out loud (to yourself).</li>
<li>Return to documents well after you've written the draft.</li>
<li>Find a good peer editor.</li>
<li>Outline a document. Alternatively, write free form and then organize.</li>
<li>Introduce a document's scope and any prerequisites.</li>
<li>Prefer task-based headings.</li>
<li>Disclose information progressively (in some situations).</li>
<li>Consider writing the caption <em>before</em> creating the illustration.</li>
<li>Constrain the amount of information in a single drawing.</li>
<li>Focus the reader's attention through discontinuities.</li>
<li>Create concise sample code that is easy to understand.</li>
<li>Keep code comments short, but prefer clarity over brevity.</li>
<li>Avoid writing comments about <em>obvious</em> code.</li>
<li>Focus your commenting energy on anything non-intuitive in the code.</li>
<li>Provide not only examples but also anti-examples.</li>
<li>Provide code samples that demonstrate a range of complexity.</li>
<li>Make a practice of continuous revision.</li>
<li>Provide different documentation types for different categories of users.</li>
<li>Compare and contrast with something that readers are already familiar with.</li>
<li>In tutorials, reinforce concepts with examples.</li>
<li>In tutorials, point out dragons.</li>
</ul>
<p>As time permits, consider reviewing these additional <a href="https://developers.google.com/tech-writing/resources?hl=zh-cn">technical writing resources</a>.</p>
<h3 id="references">References</h3>
<p><code>[1]</code> Technical Writing One: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[2]</code> Technical Writing Two: <em>https://developers.google.com/tech-writing/two?hl=zh-cn</em><br>
<code>[3]</code> Words: <em>https://developers.google.com/tech-writing/one/words?hl=zh-cn</em><br>
<code>[4]</code> 1: <em>https://developers.google.com/tech-writing/one/active-voice?hl=zh-cn#Footnote1</em><br>
<code>[5]</code> Words: <em>https://developers.google.com/tech-writing/one/words?hl=zh-cn</em><br>
<code>[6]</code> sesquipedalian: <em>https://www.google.com/search?q=sesquipedalian&amp;hl=zh-cn</em><br>
<code>[7]</code> www.markdowntutorial.com: <em>https://www.markdowntutorial.com/</em><br>
<code>[8]</code> Mastering Markdown: <em>https://guides.github.com/features/mastering-markdown/</em><br>
<code>[9]</code> Summary: <em>https://developers.google.com/tech-writing/one/summary?hl=zh-cn</em><br>
<code>[10]</code> technical writing resources: <em>https://developers.google.com/tech-writing/resources?hl=zh-cn</em><br>
<code>[11]</code> Technical Writing One: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[12]</code> self-study units: <em>https://developers.google.com/tech-writing/one?hl=zh-cn</em><br>
<code>[13]</code> Google Developers: <em>https://developers.google.com/?hl=zh-cn</em><br>
<code>[14]</code> Google Developer Documentation Style Guide: <em>https://developers.google.com/style?hl=zh-cn</em><br>
<code>[15]</code> style-guide highlights: <em>https://developers.google.com/style/highlights?hl=zh-cn</em><br>
<code>[16]</code> active voice: <em>https://developers.google.com/tech-writing/one/active-voice?hl=zh-cn</em><br>
<code>[17]</code> numbered lists: <em>https://developers.google.com/tech-writing/one/lists-and-tables?hl=zh-cn</em><br>
<code>[18]</code> Write in the second person: <em>https://developers.google.com/style/person?hl=zh-cn</em><br>
<code>[19]</code> Place conditional clauses before an instruction: <em>https://developers.google.com/style/clause-order?hl=zh-cn</em><br>
<code>[20]</code> code-related text as code font: <em>https://developers.google.com/style/code-in-text?hl=zh-cn</em><br>
<code>[21]</code> Audience: <em>https://developers.google.com/tech-writing/one/audience?hl=zh-cn</em><br>
<code>[22]</code> Style and authorial tone: <em>https://developers.google.com/style/tone?hl=zh-cn</em><br>
<code>[23]</code> Nirmal Dulal [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)]: <em>https://commons.wikimedia.org/wiki/File:Nepalese_Children.JPG</em><br>
<code>[24]</code> Sung and Mayer (2012): <em>https://www.sciencedirect.com/science/article/pii/S0747563212000921</em><br>
<code>[25]</code> Portrait of Pere Tanguy By Vincent van Gogh - Musée Rodin [Public domain]: <em>https://commons.wikimedia.org/wiki/File:Van_Gogh_-_Portrait_of_Pere_Tanguy_1887-8.JPG</em><br>
<code>[26]</code> NASA / JPL-Caltech / University of Arizona [Public domain]: <em>https://commons.wikimedia.org/wiki/File:Phobos_colour_2008.jpg</em><br>
<code>[27]</code> evolution of the London Tube map: <em>https://wikipedia.org/wiki/Tube_map#History</em><br>
<code>[28]</code> [Public domain]: <em>https://commons.wikimedia.org/wiki/File:Tube_map_1908.jpg</em><br>
<code>[29]</code> modern tube map: <em>https://www.google.com/search?tbm=isch&amp;q=london+tube+map&amp;hl=zh-cn</em><br>
<code>[30]</code> standard color contrast recommendations: <em>https://material.io/design/color/text-legibility.html#legibility-standards</em><br>
<code>[31]</code> Google Drawings: <em>https://drawings.google.com/?hl=zh-cn</em><br>
<code>[32]</code> Draw.IO: <em>https://draw.io/</em><br>
<code>[33]</code> LucidChart: <em>https://www.lucidchart.com/pages/</em><br>
<code>[34]</code> Scalable Vector Graphics: <em>https://wikipedia.org/wiki/Scalable_Vector_Graphics</em><br>
<code>[35]</code> Hello World program: <em>https://wikipedia.org/wiki/&quot;Hello,_World!&quot;_program</em><br>
<code>[36]</code> Summary: <em>https://developers.google.com/tech-writing/two/summary?hl=zh-cn</em><br>
<code>[37]</code> technical writing resources: <em>https://developers.google.com/tech-writing/resources?hl=zh-cn</em></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="18"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="19"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「工具推荐」golang 代码可视化工具 go-callvis]]></title>
        <id>http://blog.gusibi.site/post/go-callvis/</id>
        <link href="http://blog.gusibi.site/post/go-callvis/">
        </link>
        <updated>2020-01-19T07:14:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="工具推荐go-callvis">「工具推荐」<a href="https://github.com/TrueFurby/go-callvis">go-callvis</a></h2>
<p>go-callvis是相对 以图片的形式展示了go程序的调用关系，这个工具在看复杂项目时尤其有用。</p>
<blockquote>
<p>亲测，借助它看祖传golang代码，头痛好多了。</p>
</blockquote>
<h3 id="安装">安装</h3>
<pre><code class="language-sh">go get -u github.com/TrueFurby/go-callvis
# or
git clone https://github.com/TrueFurby/go-callvis.git
cd go-callvis &amp;&amp; make install
</code></pre>
<p>运行依赖</p>
<ul>
<li><a href="https://golang.org/dl/">Go</a> 1.12+</li>
<li><a href="http://www.graphviz.org/download/">Graphviz：http://www.graphviz.org/download/</a> Mac 可以直接 brew install graphviz</li>
</ul>
<p><a href="https://github.com/TrueFurby/go-callvis">项目地址：https://github.com/TrueFurby/go-callvis</a></p>
<h3 id="使用命令">使用命令</h3>
<p>命令特别简单，只需要简单的输入：</p>
<pre><code class="language-sh">go-callvis [OPTIONS] &lt;main package&gt;
</code></pre>
<p>这里 main package 是包含代码的main函数所在的包，比如项目 https://github.com/gusibi/oneplus/tree/master/idgenerator</p>
<p>目录结构为：</p>
<pre><code class="language-sh">.
├── README.md
└── src
    ├── dbs
    ├── go.mod
    ├── go.sum
    ├── idg
    │   ├── area_code.go
    │   ├── idg.go
    │   ├── idg_test.go
    │   ├── index.go
    │   ├── index_test.go
    │   ├── sort.go
    │   ├── sort_test.go
    │   ├── wr.go
    │   └── wr_test.go
    ├── main.go
    └── sorteDB
</code></pre>
<p>其中src目录是一个go package，运行go-callvis 时就需要先<strong>cd src/</strong>，然后再执行命令：</p>
<pre><code class="language-sh">go-callvis  -group pkg,type md52id
</code></pre>
<blockquote>
<p>md52id 是package name，已在go.mod中声明，pakage name是一个必须要带的参数。</p>
</blockquote>
<p>运行命令，默认会打开浏览器加载地址<strong>http://localhost:7878</strong></p>
<blockquote>
<p>图片格式为 svg，也可以添加 -format=png，指定以png形式展示</p>
<p>推荐使用svg，svg格式的内容是可交互的，比如这里想查看gin包的内容就可以点击 对应的模块来看详情。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/clJZosivjY3n-3G5Bm-kQu6BbuAAV5z_L8iMjR8CoJSknZWRTiF51g9X8hHVq0jk" alt="" loading="lazy"></figure>
<p>结果如果所示，图像展示的结果就是这个包所有的调用关系，按包的调用层级由左向右排列。第二列上边是 gin 框架的代码，如果看代码时不想看这部分，可以使用 ignore 参数排除掉。</p>
<p>命令为：</p>
<pre><code class="language-sh">go-callvis -group pkg,type -ignore github.com/gin-gonic/gin md52id
</code></pre>
<blockquote>
<p>这里 gin 包的名字是 <em>github.com/gin-gonic/gin</em>而不是 <em>gin</em></p>
<p>如果要再排出idg 包，可以直接加在gin 包后边，用,（英文逗号）隔开。</p>
<p>使用limit 命令可以得到相同的结果</p>
<p>go-callvis  -group pkg,type -limit md52id md52id</p>
</blockquote>
<p>得到的结果为：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/I8l10FfoYRXYj0VtxMqbTwsz-mpQ7jsgaiq4Exd_8WNglM_mYDbWF6sye9x2uO-c" alt="" loading="lazy"></figure>
<p>如果想看idg包内部的调用关系，可以使用 focus 命令，指定idg 包，命令如下：</p>
<pre><code class="language-sh">go-callvis -focus=md52id/idg -group pkg,type -limit md52id md52id
</code></pre>
<p>结果如图：	<img src="http://media.gusibi.mobi/7WYETqHNJ2ShtiLf-rHKyWqLOnGVdLnBzTGiA_JBdzL26WwnwwaTkZ4xFBTh4-D4" alt="" loading="lazy"></p>
<p>详细命令可以参考：https://github.com/TrueFurby/go-callvis/tree/master/examples</p>
<p>使用go-callvis ，直观的展示代码的调用关系，对于大项目的源码尤其有用，比如下图是gin stagic 包的调用关系：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/VjziH07V8r_X33RlnVo2WeEWa0od4OvAnw9eJoCiAd1eLAAC-I3XuniOeWK0OVCW" alt="" loading="lazy"></figure>
<p>通过图可以直观的看到，</p>
<ol>
<li>static 调用了 staticFS，而staticFS 只使用了 HEAD和GET 方法。</li>
<li>所有的http method 最终都是通过调用handler来处理响应的。</li>
</ol>
<h3 id="go-callvis-的另类用法">### go-callvis 的另类用法</h3>
<p>go-callvis 也可以用来评估系统设计是否合理，代码是否清晰，下图是docker 的调用图：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/8vZ7dwD6bLOVUBecbWsC5ZMTDOSUeeLzRw2kfxL44TVO8BM0AFGHGzVO1iHJCFqd" alt="" loading="lazy"></figure>
<blockquote>
<p>原图地址：http://media.gusibi.mobi/8vZ7dwD6bLOVUBecbWsC5ZMTDOSUeeLzRw2kfxL44TVO8BM0AFGHGzVO1iHJCFqd</p>
</blockquote>
<p>可以看到，代码结构非常清晰，调用链也比较简单，项目成功果然每一环都做的非常完美。</p>
<h3 id="references">References</h3>
<p><code>[1]</code> go-callvis: <em>https://github.com/TrueFurby/go-callvis</em><br>
<code>[2]</code> Go: <em>https://golang.org/dl/</em><br>
<code>[3]</code> Graphviz：http://www.graphviz.org/download/: <em>http://www.graphviz.org/download/</em><br>
<code>[4]</code> 项目地址：https://github.com/TrueFurby/go-callvis: <em>https://github.com/TrueFurby/go-callvis</em></p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推">内推</h3>
<p>以下是shopee内推广告，「深圳、新加坡、上海」的职位都有，感兴趣的可以留言或者识别二维码直接投递。</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/3Z6eP3JKdGQkAdfFm3X9cgV1x46YLwIX8iP8Rvg7_QSwYKYTRjAyt0jVEHKdql3P" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习单元测试，告别祈祷式编程]]></title>
        <id>http://blog.gusibi.site/post/unit-test/</id>
        <link href="http://blog.gusibi.site/post/unit-test/">
        </link>
        <updated>2019-10-06T17:48:04.000Z</updated>
        <content type="html"><![CDATA[<p>[[TOC]]</p>
<h2 id="祈祷式编程">祈祷式编程</h2>
<h3 id="祈祷式编程-2">祈祷式编程</h3>
<p>如果代码中包含以下代码</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/hZPxabAhNvjs0RBsFX2UYcWceM6hASMsuiUtsNRI1zcC_cARLqu_flemSEpRdHT2" alt="" loading="lazy"></figure>
<p>或者上线后进行这种活动</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/vgTOaVcTBjWjIDs7hL3XA388F7gZvklpH5UjwqpuePotN3Q5NcHJ1PecTn50Um2m" alt="" loading="lazy"></figure>
<p>那么这种编程方式就是祈祷式编程。</p>
<p>用流程图表示基本就是这个样子。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/ZEkOQqFT-JnOR9YJ9FVhLEgptWS73yo2XYO19M_Yz0X1MZOhQtCjjLXA1XFiekCG" alt="" loading="lazy"></figure>
<p>祈祷式编程有什么危害呢？</p>
<ol>
<li>累，每次写完代码还需要再祈祷</li>
<li>不受控，代码运行结果主要看运气，大仙忙的时候可能保佑不了</li>
</ol>
<p>解决这个问题有好多种方法，单元测试是其中之一。</p>
<h2 id="单元测试">单元测试</h2>
<h3 id="什么是单元测试">什么是单元测试</h3>
<blockquote>
<p>单元测试是由开发人员编写的，用于对软件基本单元进行测试的可执行的程序。<br>
单元（unit）是一个应用程序中最小的课测试部分。（比如一个函数，一个类</p>
</blockquote>
<p>google 把测试分成小型测试、中型测试和大型测试。单元测试基本和小型测试的作用类似，但是通常也会使用mock或者stub 的方式模拟外部服务。</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/Wn7YW9mDHRpI_3DO2eVFdk1Xx-s_jw5iJogwT0G7ED2UFpXsCYaTqICzqButt02I" alt="" loading="lazy"></figure>
<p>理想情况下，单元测试应该是相互独立、可自动化运行的。</p>
<p><strong>目的：</strong> 通常用单元测试来验证代码逻辑是否符合预期。完整可靠的单元测试是代码的<code>安全网</code>，可以在代码修改或重构时验证业务逻辑是否正确，提前发现代码错误，减少调试时间。设计良好的单元测试某些情况下可以比文档更能反应出代码的功能和作用。</p>
<p>单元测试这么多优点为什么有人不喜欢写单元测试呢？</p>
<ol>
<li>单元测试太费时间了，对于编写单元测试不熟练的新手来说，编写单元测试可能比写代码的还费时间</li>
<li>单元测试运行时间太长（这通常是单元测试设计不合理或者代码可测试性较差造成的</li>
<li>祖传代码，看都看不懂怎么写单元测试（这个确实优点棘手。。可以考虑先给新代码加单元测试</li>
<li>不会写单元测试</li>
</ol>
<p>这篇文章主要关注第四个问题，如何写单元测试。</p>
<h3 id="单元测试的结构">单元测试的结构</h3>
<p>首先看一下单元测试的结构，一个完整的单元测试主要包括<strong>Arrange-Act-Assert（3A）</strong> 三部分。</p>
<ul>
<li>Arrange--准备数据</li>
<li>Act--运行代码</li>
<li>Assert--判断结果是否符合预期</li>
</ul>
<p>比如我们要给下面这段代码（golang）加单元测试：</p>
<pre><code class="language-go">
func Add(x, y int) int {
	return x + y
}

</code></pre>
<p>单元测试代码如下：</p>
<pre><code class="language-go">import &quot;testing&quot;

func TestAdd(t *testing.T) {
    // arrange 准备数据
	x, y := 1, 2
    // act   运行
	got := Add(x, y)
    //assert  断言
	if got != 3 {
		t.Errorf(&quot;Add() = %v, want %v&quot;, got, 3)
	}
}
</code></pre>
<h3 id="如何编写好的单元测试">如何编写好的单元测试</h3>
<blockquote>
<p>什么样的单元测试才是好的单元测试呢？</p>
</blockquote>
<p>先看一个例子：</p>
<pre><code class="language-go">package ut

import (
	&quot;fmt&quot;
	&quot;strconv&quot;
	&quot;strings&quot;
)

func isNumber(num string) (int, error) {
	num = strings.TrimSpace(num)
	n, err := strconv.Atoi(num)
	return n, err
}

func multiply(x string, y int) string {
    // 如果x 去除前后的空格后是数字，返回 数字的乘积
    //     比如 x=&quot;2&quot; y=3 return &quot;6&quot;
    // 如果x 去除前后的空格后不是数字，则返回字符串的x的y倍 
    //     比如 x=&quot;a&quot; y=2 return &quot;aa&quot;
	num, err := isNumber(x)
	if err == nil {
		return fmt.Sprintf(&quot;%d&quot;, num*y)
	}
	result := &quot;&quot;
	for i := 0; i &lt; y; i++ {
		result = fmt.Sprintf(&quot;%s%s&quot;, result, x)
	}
	return result
}
</code></pre>
<p>测试代码可能是这个样子。</p>
<pre><code class="language-go">
// 测试方法的名字不直观，并不能看出具体要测试什么
func Test_multiply(t *testing.T) {
	type args struct {
		x string
		y int
	}
    // 一个测试方法中有太多的测试用例
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			&quot;return nil&quot;,
			args{
				&quot;&quot;,
				2,
			},
			&quot;&quot;,
		},
		{
			&quot;return 2&quot;,
			args{
				&quot;1&quot;,
				2,
			},
			&quot;2&quot;,
		},
		{// 测试数据有点奇葩，不直观
			&quot;return aaa&quot;,
			args{
				&quot;aaaaaaaaaa&quot;,
				6,
			},
			&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := multiply(tt.args.x, tt.args.y); got != tt.want {
               // 数据错误的时候有明确标明测试数据，期望结果和实际结果，这一点还是有用的
				t.Errorf(&quot;multiply() = %v, want %v&quot;, got, tt.want)
			}
		})
	}
}

</code></pre>
<p>这个单元测试代码有什么问题呢？</p>
<ol>
<li>代码比较长（这里只列出来了三个用例，实际上并没有完整覆盖全部结果）</li>
<li>测试方法如果出错了并不容易定位位置(三个测试数据都在一个方法，任何一个错误都会指向到同一个位置</li>
<li>有个测试的数据比较长，不太能直观判断测试数据是否正确</li>
<li>输入值并不完整，比如包含空格的数字字符串&quot; 1&quot; 、&quot; 1 &quot;、 &quot;1 &quot;并没有测试。</li>
</ol>
<p>结合上面我们对<strong>单元测试目的</strong>的描述，<strong>一个好的单元测试应该满足以下几个条件</strong>：</p>
<ol>
<li>单元测试越简单越好，一个单元测试只做一件事</li>
<li>对错误易于追踪，如果测试失败，错误提示应该容易帮我我们定位问题</li>
<li>测试函数的命名符合特定的规则 <code>Test_{被测方法}_{输入}_{期望输出}</code></li>
<li>有用的失败消息</li>
<li>输入简单且能够完整运用代码的输入(包含边界值、特殊情况</li>
</ol>
<p>比如，上边的单元测试我们改成这样：</p>
<pre><code class="language-go">// 测试特殊值 “空字符串”
func Test_multiply_empty_returnEmpty(t *testing.T) {
    // 用例简单，只包含输入、执行和判断 
	x, y, want := &quot;&quot;, 1, &quot;&quot;
	got := multiply(x, y)
	if got != want {
       // 有效的失败消息
		t.Errorf(&quot;multiply() = %v, want %v&quot;, got, want)
	}
}

// 测试包含空格的数字 边界值
func Test_multiply_numberWithSpace_returnNumber(t *testing.T) {
	x, y, want := &quot; 2&quot;, 3, &quot;6&quot;
	got := multiply(x, y)
	if got != want {
		t.Errorf(&quot;multiply() = %v, want %v&quot;, got, want)
	}
}
// 测试正常数据
func Test_multiply_number_returnNumber(t *testing.T) {
	x, y, want := &quot;2&quot;, 3, &quot;6&quot;
	got := multiply(x, y)
	if got != want {
		t.Errorf(&quot;multiply() = %v, want %v&quot;, got, want)
	}
}
// 测试非数字字符 
func Test_multiply_String_returnString(t *testing.T) {
    // 输入简单的字符串就可以测试，没必要用太奇怪或者太长或者太大的数据数据
	x, y, want := &quot;a&quot;, 3, &quot;aaa&quot;
	got := multiply(x, y)
	if got != want {
		t.Errorf(&quot;multiply() = %v, want %v&quot;, got, want)
	}
}
// 测试空格 边界值
func Test_multiply_space_returnSpace(t *testing.T) {
	x, y, want := &quot; &quot;, 3, &quot;   &quot;
	got := multiply(x, y)
	if got != want {
		t.Errorf(&quot;multiply() = %v, want %v&quot;, got, want)
	}
}
</code></pre>
<p>当然这个数据也并不完整，还可以再加入：</p>
<ul>
<li>包含空格的非数字字符</li>
<li>数字右侧包含空格的字符串</li>
<li>数字两侧都有空格的字符串</li>
</ul>
<p>既然好的单元测试需要能完整的测试代码，那么有什么方法可以保证单元测试可以完整覆盖被测代码呢？</p>
<p>基于代码路径进行分析编写单元测试是一个方法。</p>
<h4 id="单元测试路径">单元测试路径</h4>
<p>设计测试路径时可以使用流程图的方式来分析，拿上边<code>multiply</code>的例子进行分析，这段代码的路径如下：</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/D-Ve2XrZs8zq4sRpVcRv4quYrcv0X2bVJHlcCUNoxZuoL6Cy3HIV4tsiYBUOorKA" alt="" loading="lazy"></figure>
<p>当然，每个路径的测试数据并不是只有一种，比如<code>x为前后包含空格的数字字符串</code>这个路径中就包含三种情况：</p>
<ul>
<li>左边有空格</li>
<li>右边有空格</li>
<li>两边都有空格</li>
</ul>
<h4 id="单元测试数据">单元测试数据</h4>
<p>合理的设计测试数据非常重要，测试除了符合上边说的要简单直观以外还要着重考虑边界值。</p>
<p>设计测试数据通常是把可能的输入数据分成多个子集，然后从每个子集中选取具有代表性的数据作为测试用例。<br>
比如一段代码的作用是计算个税，我们就应该按照个税不同的等级来设计测试数据，比如：</p>
<ul>
<li>年收入0-36000部分</li>
<li>年收入36000-144000 部分</li>
<li>年收入144000-300000部分</li>
<li>年收入300000-420000部分</li>
<li>...</li>
</ul>
<p>然后在这个子集的基础上在针对边界值做一些检查，比如36000、144000 等。</p>
<h3 id="私有方法如何测试">私有方法如何测试</h3>
<p>通常情况下，如果私有方法在公有方法中有被调用，通过测试公有方法就已经可以间接测试到私有方法。</p>
<p>也有些私有方法写的不合理，比如私有方法没有被使用或者私有方法的功能和类的相关性不大，这个时候就建议把私有方法单独提取成新的函数或者类来测试。</p>
<h3 id="外部服务如何测试">外部服务如何测试</h3>
<p>当然现实世界中的代码并不会这么简单，通常都会包含外部请求或者对于其它类的调用。<br>
在编写单元测试时，对于外部依赖我们通常使用Mock和Stub的方式来模拟外部依赖。</p>
<p>Mock和Stub 的区别：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/qS_I1IXOCN1KJSbqD0TucScwusxpXW6C2V9_dewdTniGhvvuw5e1MlaWR7mzew2k" alt="" loading="lazy"></figure>
<ul>
<li>Mock是在测试代码中创建一个模拟对象，模拟被测方法的执行。测试使用模拟对象来验证结果是否正确</li>
</ul>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/n8_BO2UKcDLlUQ6atxb7CaZ6ndGpuwA_ewjxj_QdCb9LuRLhDsC7UNWr4wLD2wTW" alt="" loading="lazy"></figure>
<ul>
<li>Stub是在测试包中创建一个模拟方法，用于替换被测代码中的方法，断言针对被测类执行。</li>
</ul>
<p>下面是代码示例：</p>
<h4 id="mock">Mock</h4>
<p>实际代码：</p>
<pre><code class="language-go">//auth.go
//假设我们有一个依赖http请求的鉴权接口
type AuthService interface{    
    Login(username string,password string) (token string,e error)   
    Logout(token string) error
}
</code></pre>
<p>Mock代码：</p>
<pre><code class="language-go">//auth_test.go
type authService struct {}
func (auth *authService) Login (username string,password string) (string,error){
    return &quot;token&quot;, nil
}
func (auth *authService) Logout(token string) error{    
    return nil
}

</code></pre>
<p>在测试代码中使用 authService实现了AuthService 接口，这样测试时可以模拟外部的网络的请求，解除依赖。</p>
<blockquote>
<p>这里使用的是golang 代码，golang 不支持重载，这样使用的问题是会产生大量重复的代码。<br>
如果是python、java等支持重载的面向对象语言，可以简单的继承父类，只重载包含外部请求的代码就可以实现Mock的需求。</p>
</blockquote>
<h4 id="stub">Stub</h4>
<pre><code class="language-go">package ut

func notifyUser(username string){
	// 如果是管理员，发送登录提醒邮件
}

type AuthService struct{}

func (auth *AuthService) Login(username string, password string) (string, error) {
    notifyUser(username)
	return &quot;token&quot;, nil
}
func (auth *AuthService) Logout(token string) error {
	return nil
}
</code></pre>
<p>对于这段代码想要测试其实是比较困难的，因为Login 中调用了notifyUser，如果想测试这段代码：</p>
<ul>
<li>一个方式是使用Mock的形式，定义authService 接口，然后实现接口 TestAuthService，在 TestAuthService Login中 替换掉notifyUser。这种做法改动比较大，同时重复代码也比较多（当然如果是python java等支持重载的语言可以只重载Login接口即可。</li>
<li>还有一种方法就是重构Login方法，把notifyUser 作为参数传入其中，这样，我们只需在测试代码中重新定义notifyUser，然后作为参数传入到Login即可模拟发送邮件提醒的功能。</li>
</ul>
<p>第二种就是stub 的方式。</p>
<p>通过这个例子我们也可以看到，如果想要代码容易测试，代码在设计时就应该考虑可测试性。</p>
<h3 id="编写可测试代码">编写可测试代码</h3>
<blockquote>
<p>Writing Testable Code 中提到一个非常实用的观点：在开发时，多想想如何使得自己的代码更方便去测试。如果考虑到这些，那么通常你的代码设计也不会太差。</p>
</blockquote>
<p>如果代码中出现了以下情况，那么通常是不易于测试的：</p>
<ol>
<li>在构造函数或成员变量中出现new关键字</li>
<li>在构造函数或成员变量中使用static方法</li>
<li>在构造函数中有除了字段赋值外的其它操作</li>
<li>在构造函数中使用条件语句或者循环</li>
<li>在构造函数中没有使用builder或factory方法，二十使用object graph来构造</li>
<li>增加或使用初始化代码</li>
</ol>
<p>这篇文章地址为：http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf 推荐阅读。</p>
<blockquote>
<p>也可以在公号回复 「test」 获取pdf</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>总结一下就是编写可测试代码，使用高质量单元测试（命名清晰、功能简单、路径完整、数据可靠）保证代码质量。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://juejin.im/post/5ce93447e51d45775746b8b0">搞定Go单元测试（一）——基础原理</a></li>
<li><a href="http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf">Guide Writing Testable Code</a></li>
<li><a href="http://blog.stevensanderson.com/2009/11/04/selective-unit-testing-costs-and-benefits/">Selective Unit Testing – Costs and Benefits</a></li>
<li><a href="https://www.zhihu.com/question/52985744">版本上线拜哪个神仙比较灵验？</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何通过MD5反查身份证号？]]></title>
        <id>http://blog.gusibi.site/post/id-md5-search/</id>
        <link href="http://blog.gusibi.site/post/id-md5-search/">
        </link>
        <updated>2019-08-17T22:22:26.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><strong>题目</strong>：设计一个身份证查询系统，将身份证号md5 之后存储，输入md5值查询对应的身份证号。<br>
<strong>要求：成本低，查询速度快</strong></p>
</blockquote>
<h3 id="设计思路">设计思路：</h3>
<ol>
<li>将所有可能的身份证号做一个简单的统计计算数据量</li>
<li>根据数据量选择存储方式</li>
<li>查询</li>
</ol>
<h3 id="身份证生成规则">身份证生成规则：</h3>
<p>身份号码是特征组合码，由前十七位数字本体码和最后一位数字校验码组成。排列顺序从左至右依次为六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。</p>
<p><strong>地址码</strong>： 表示编码对象常住户口所在县(市、旗、区)的行政区划代码。对于新生儿，该地址码为户口登记地行政区划代码。需要没说明的是，随着行政区划的调整，同一个地方进行户口登记的可能存在地址码不一致的情况。行政区划代码按GB/T2260的规定执行。</p>
<p><strong>出生日期码</strong>：表示编码对象出生的年、月、日，年、月、日代码之间不用分隔符，格式为YYYYMMDD，如19880328。按GB/T 7408的规定执行。原15位身份证号码中出生日期码还有对百岁老人特定的标识，其中999、998、997、996分配给百岁老人。</p>
<p><strong>顺序码</strong>： 表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。</p>
<p><strong>校验码</strong>： 根据本体码，通过采用ISO 7064:1983,MOD 11-2校验码系统计算出校验码。算法可参考下文。前面有提到数字校验码，我们知道校验码也有X的，实质上为罗马字符X，相当于10.</p>
<h4 id="校验码算法">校验码算法</h4>
<p>将本体码各位数字乘以对应加权因子并求和，除以11得到余数，根据余数通过校验码对照表查得校验码。</p>
<p><strong>加权因子表</strong>：</p>
<pre><code class="language-sh">+-----------------------------------------------------------+ 
|位置序号|1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|16|17| 
+-----------------------------------------------------------+ 
|加权因子|7 |9 |10|5 |8 |4 |2 |1 |6 |3 |7 |9 |10|5 |8 |4 |2 | 
+-----------------------------------------------------------+ 
</code></pre>
<p><strong>校验码表</strong>:</p>
<pre><code class="language-sh">+----------------------------------------------------+ 
| 余数  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 
+----------------------------------------------------+ 
| 校验码| 1 | 0 | X | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2  | 
+----------------------------------------------------+ 
</code></pre>
<h4 id="算法举例">算法举例：</h4>
<p>本体码为11010519491231002</p>
<ul>
<li>第一步：各位数与对应加权因子乘积求和1* 7+1 * 9+0 * 10+1 * 5+ *** =167</li>
<li>第二步：对求和进行除11得余数167%11=2</li>
<li>第三步：根据余数2对照校验码得X</li>
</ul>
<p>**因此完整身份证号为：11010519491231002X **</p>
<h3 id="预估数据量">预估数据量：</h3>
<ol>
<li>身份证号18位，前六位为地区码，中间八位为日期，日期后三位为顺序码，最后一位为校验位，占32个字节</li>
<li>md5值为32位，占32个字节</li>
<li>计算最近100年数据，大约数据量为：<code>3465x100x365x999=126346027500</code></li>
<li>数据以字符串存储，每条数据<code>32+18=50B</code></li>
<li>则数据量为 `126346027500 x 50=6317301375000B=6169239624k=6024648M=5883G=5.74T ``</li>
</ol>
<blockquote>
<p>存储方式有文件存储、关系型数据库存储和es存储等。从结果可以看到有接近6T的数据，如果存入数据库或es<strong>成本较高</strong>，这里选择以文件的方式存储。</p>
</blockquote>
<p><strong>那有没有方式压缩存储空间呢？</strong></p>
<ol>
<li>身份证号最后一位为校验位，可以不存储，省略掉这一位会节约1/50点空间</li>
<li>不以字符串的方式存储，将身份证号以uint64存储，md5值也转化成两个uint64存储。uint64占8阁字节空间，这样一条数据的空间由50降为了 24。最终数据量为2.74T，节约一半多的空间。</li>
</ol>
<p><strong>那现在有一个问题，每个文件多大合适呢？</strong></p>
<p>如果文件太大，每次将文件读取到内存中耗时较长，如果文件太小，则会生成太多的文件可能超出系统的文件数限制。</p>
<p>这里可以参考数据库索引的存储方式，设定每个数据文件的大小（2.8T数据可以设置每个数据文件1G左右。</p>
<h3 id="数据生成后如何查询">数据生成后如何查询？</h3>
<ol>
<li>遍历，依次读取文件，查找数据，效率太低</li>
<li>这里参考数据库索引的查询方式，首先将数据按md5值排序后存储多个文件，记录每个文件中md5值的范围，输入md5值确定文件，再读取文件使用二分查找。</li>
<li>这时查找数据只需要读取一个文件，但是每个文件都有几百兆的数据，查询效率还是太低，再参考一下数据库索引，这里将文件内部再分页，记录每页的范围，和文件所自身记录的起始值一起生成索引，索引结构如图所示：</li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/id2md5index.png" alt="89b91ea63b15a762099ccc0a6fdaf412.png" loading="lazy"></figure>
<p>索引数据结构为：</p>
<pre><code class="language-python"># 为了简化存储，这里file1、file2、file3、file4 为该文件第一条数据的md5值，也是对应的文件名
# 页的大小固定，所以二级索引只需要按顺序记录每页的第一个md5值即可

indexes = { 
    &quot;file1&quot;: [&quot;md51&quot;, &quot;md52&quot;, &quot;md53&quot;, &quot;...&quot;],
    &quot;file2&quot;: [&quot;md51&quot;, &quot;md52&quot;, &quot;md53&quot;, &quot;...&quot;], 
    &quot;file3&quot;: [&quot;md51&quot;, &quot;md52&quot;, &quot;md53&quot;, &quot;...&quot;], 
    &quot;file4&quot;: [&quot;md51&quot;, &quot;md52&quot;, &quot;md53&quot;, &quot;...&quot;],  
} 
</code></pre>
<p>第一层索引为文件索引，首先通过md5值判断md5值所在文件，比如输入的 start1 &gt; md5 &gt; start1，可以判断结果可能在file1 中；</p>
<p>第二层为文件内索引，通过md5值判断所在的页，读取根据offset读取该页的全部数据，再通过二分查找找到对应的身份证号。</p>
<p>代码实现源码地址：https://github.com/gusibi/oneplus/tree/master/idgenerator</p>
<p>使用方式：</p>
<pre><code class="language-sh">1. go run main.go
2. curl http://127.0.0.1:8080/search?md5={id md5}
</code></pre>
<h2 id="参考链接">参考链接：</h2>
<ul>
<li><a href="https://github.com/gusibi/oneplus/tree/master/idgenerator">源码地址</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周分享第4期]]></title>
        <id>http://blog.gusibi.site/post/weekly-04/</id>
        <link href="http://blog.gusibi.site/post/weekly-04/">
        </link>
        <updated>2019-08-04T02:05:15.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>Docker 终端UI： <a href="htps://github.com/jesseduffield/lazydocker">https://github.com/jesseduffield/lazydocker</a></li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/demo3.gif" alt="" loading="lazy"></figure>
<ol start="2">
<li>宝数据库内核月报：<a href="htp://mysql.taobao.org/monthly/">http://mysql.taobao.org/monthly/</a></li>
</ol>
<p>比较深入的数据库源码分析</p>
<ol start="3">
<li>手机号码归属地查询：https://apis-mp.gusibi.mobi/mobile/location?mobile=18512345678</li>
</ol>
<p>使用serverless部署，无需服务器。源码地址：<a href="https://github.com/gusibi/oneplus/tree/master/mobile-attribution">https://github.com/gusibi/oneplus/tree/master/mobile-attribution</a></p>
<ol start="4">
<li>手绘风格CSS：<a href="https://www.getpapercss.com/">https://www.getpapercss.com/</a></li>
</ol>
<p><img src="evernotecid://49E50F6F-983A-4D9E-90FA-7763241410D1/appyinxiangcom/8460937/ENResource/p5740" alt="6336b6d107a91081d7abb93525425bd6.png" loading="lazy"><br>
<img src="http://media.gusibi.mobi/%E6%89%8B%E7%BB%98css.png" alt="" loading="lazy"></p>
<ol start="5">
<li>
<p>Image-to-Image Demo： <a href="https://affinelayer.com/pixsrv/">https://affinelayer.com/pixsrv/</a></p>
</li>
<li>
<p>学霸用左边，学渣用右边：<a href="https://www.plainlanguage.gov/guidelines/words/use-simple-words-phrases/">https://www.plainlanguage.gov/guidelines/words/use-simple-words-phrases/</a></p>
</li>
</ol>
<blockquote>
<p>美国政府的一个网页，有几百条单词建议，指导你怎么写出简单的文章，不要用复杂的单词。</p>
</blockquote>
<p>比如说，“a和b可以同时使用，也可以单独使用”，不要用 a and/or b，而要用 a or b or both。</p>
<ol start="7">
<li>微软上线了一套 Python 教程<a href="https://docs.microsoft.com/zh-cn/windows/python/">《Develop with Python on Windows》</a></li>
</ol>
<p>微软上线了一套 Python 教程《Develop with Python on Windows》。</p>
<ol start="8">
<li>百度网盘下载器：<a href="https://github.com/b3log/baidu-netdisk-downloaderx">https://github.com/b3log/baidu-netdisk-downloaderx</a></li>
</ol>
<p>一款图形界面的百度网盘不限速下载器，支持 Windows、Linux 和 Mac。</p>
<h2 id="参考链接">参考链接</h2>
<h2 id="1-develop-with-python-on-windows-httpsdocsmicrosoftcomzh-cnwindowspython">[1] 《Develop with Python on Windows》: https://docs.microsoft.com/zh-cn/windows/python/</h2>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周分享第3期-史上最全的编程学习资料合集]]></title>
        <id>http://blog.gusibi.site/post/weekly-03/</id>
        <link href="http://blog.gusibi.site/post/weekly-03/">
        </link>
        <updated>2019-06-29T02:05:15.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/toutiaoio/weekly.manong.io">【资料】史上最全的编程学习资料合集（持续更新）</a></li>
<li><a href="https://mp.weixin.qq.com/s/eYn1buoKXOCNgRv2-coDmA">【资料】一周 GitHub 开源项目推荐：阿里、腾讯、陌陌、bilibili……</a></li>
<li><a href="https://juejin.im/post/5d14a319e51d4577407b1d77">【资料】常用的 Go 框架、库和软件中文收录大全</a></li>
<li><a href="https://dave.cheney.net/high-performance-go-workshop/gopherchina-2019.html">【教程】高性能 Go 代码工坊</a>（英文）</li>
<li><a href="https://mp.weixin.qq.com/s/tv6S0VmDtbdSW8-qKjERiA">【文章】我用了10年 从深圳流水线厂妹做到纽约高薪程序员</a></li>
<li><a href="https://www.fastcompany.com/90356079/whatever-happened-to-the-hottest-iphone-apps-of-2009">【文章】2009年最热门的 iPhone 应用程序</a>（英文）</li>
</ul>
<blockquote>
<p>苹果公司的应用商店即将满十周年，本文回顾了2009年最热门的付费应用和免费应用</p>
</blockquote>
<ul>
<li><a href="https://github.com/vlang/v">【语言】v语言-语法综合了python和go</a></li>
<li><a href="https://github.com/gusibi/python-weixin">【工具】weixin python sdk 支持小程序云开发</a></li>
<li><a href="https://dujiaoshou.io/">【工具】网站收录了估值达到 10 亿美元的创业公司，实时更新</a></li>
<li><a href="https://github.com/gee1k/uPic">【工具】简洁的 Mac 图床客户端 uPic</a></li>
</ul>
<h3 id="references">References</h3>
<h2 id="1-资料史上最全的编程学习资料合集持续更新-httpsgithubcomtoutiaoioweeklymanongio2-资料常用的-go-框架-库和软件中文收录大全-httpsjuejinimpost5d14a319e51d4577407b1d773-教程高性能-go-代码工坊-httpsdavecheneynethigh-performance-go-workshopgopherchina-2019html4-文章2009年最热门的-iphone-应用程序-httpswwwfastcompanycom90356079whatever-happened-to-the-hottest-iphone-apps-of-20095-语言v语言-语法综合了python和go-httpsgithubcomvlangv6-工具weixin-python-sdk-支持小程序云开发-httpsgithubcomgusibipython-weixin7-工具网站收录了估值达到-10-亿美元的创业公司实时更新-httpsdujiaoshouio8-工具简洁的-mac-图床客户端-upic-httpsgithubcomgee1kupic">[1] 【资料】史上最全的编程学习资料合集（持续更新）: https://github.com/toutiaoio/weekly.manong.io<br>
[2] 【资料】常用的 Go 框架、库和软件中文收录大全: https://juejin.im/post/5d14a319e51d4577407b1d77<br>
[3] 【教程】高性能 Go 代码工坊: https://dave.cheney.net/high-performance-go-workshop/gopherchina-2019.html<br>
[4] 【文章】2009年最热门的 iPhone 应用程序: https://www.fastcompany.com/90356079/whatever-happened-to-the-hottest-iphone-apps-of-2009<br>
[5] 【语言】v语言-语法综合了python和go: https://github.com/vlang/v<br>
[6] 【工具】weixin python sdk 支持小程序云开发: https://github.com/gusibi/python-weixin<br>
[7] 【工具】网站收录了估值达到 10 亿美元的创业公司，实时更新: https://dujiaoshou.io/<br>
[8] 【工具】简洁的 Mac 图床客户端 uPic: https://github.com/gee1k/uPic</h2>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周分享第2期-宇宙模拟器]]></title>
        <id>http://blog.gusibi.site/post/weekly-02/</id>
        <link href="http://blog.gusibi.site/post/weekly-02/">
        </link>
        <updated>2019-06-22T02:05:15.000Z</updated>
        <content type="html"><![CDATA[<p>1 宇宙模拟器 ：<a href="http://spaceengine.org">http://spaceengine.org</a><br>
2 APIJSON：<a href="https://github.com/APIJSON/APIJSON">https://github.com/APIJSON/APIJSON</a></p>
<blockquote>
<p>APIJSON是一种为API而生的 JSON网络传输协议 以及 基于这套协议实现的ORM库。<br>
后端接口和文档自动化，前端(客户端) 定制返回JSON的数据和结构</p>
</blockquote>
<p>3 【文章】小火箭对SpaceX星链计划低轨巨型星座的分析：<a href="https://mp.weixin.qq.com/s/NNmI_cqwo4ba0ViJ9O7f3Q">https://mp.weixin.qq.com/s/NNmI_cqwo4ba0ViJ9O7f3Q</a></p>
<blockquote>
<p>这篇对SpaceX 星链计划 可行性进行了详细的分析，共11575字，101图。预计阅读时间：1小时15分钟</p>
</blockquote>
<p>4 微软与 Google 共同开设的量子算法课程：<a href="https://brilliant.org/courses/quantum-computing/">https://brilliant.org/courses/quantum-computing/</a></p>
<blockquote>
<p>通过浏览器模拟的量子计算环境，学习量子算法</p>
</blockquote>
<p>5 一个VPS搜索工具: <a href="https://anothervps.com/vps/">https://anothervps.com/vps/</a></p>
<blockquote>
<p>可怜我linode 都用不了了</p>
</blockquote>
<p>6 一些有趣的网站：</p>
<ul>
<li>https://www.ctolib.com Github开源项目收集网站</li>
<li>http://www.nicetool.net 实用工具比较多</li>
<li>http://www.mvyxws.com/ 以视频方式分享医学知识的网站</li>
<li>https://www.tikitiki.cn 自由的音乐，能够试听并下载全网音乐</li>
<li>https://showmore.com/zh/ 在线录制屏幕的工具</li>
<li>https://weibomiaopai.com 视频下载</li>
</ul>
<p>7 PySnooper：<a href="https://github.com/cool-RR/PySnooper">https://github.com/cool-RR/PySnooper</a></p>
<blockquote>
<p>python DeBug工具</p>
</blockquote>
<p>8 pyecharts：<a href="https://github.com/pyecharts/pyecharts">https://github.com/pyecharts/pyecharts</a></p>
<blockquote>
<p>Echarts 是一个由百度开源的数据可视化，pycharts 是Echarts 的python版。</p>
</blockquote>
<p>9 LeetCodeAnimation：<a href="https://github.com/MisterBooo/LeetCodeAnimation">https://github.com/MisterBooo/LeetCodeAnimation</a></p>
<blockquote>
<p>用动画的形式呈现解LeetCode题目的思路</p>
</blockquote>
<p>10 ColorUI：<a href="https://www.color-ui.com/">https://www.color-ui.com/</a></p>
<blockquote>
<p>鲜亮的高饱和色彩，专注视觉的小程序组件库</p>
</blockquote>
<p>iPhone X怎么强制关机？</p>
<p>iPhone X强制关机有三步：</p>
<ol>
<li>按下音量+键然后松开；</li>
<li>按下音量-键然后松开；</li>
<li>之后按住侧边按钮（即电源键）直到iPhone X黑屏。</li>
</ol>
<blockquote>
<p>升级了iOS13，打电话的时候就停留在了通话界面，再也退不出去了。。只能用强制关机的方式。<br>
才知道是这么个方式</p>
</blockquote>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 选择hash还是string 存储数据？]]></title>
        <id>http://blog.gusibi.site/post/redis-string-or-hash-to-represent-json/</id>
        <link href="http://blog.gusibi.site/post/redis-string-or-hash-to-represent-json/">
        </link>
        <updated>2019-06-21T19:29:15.000Z</updated>
        <content type="html"><![CDATA[<p>在stackoverflow 看到一个问题，<a href="https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency">Redis strings vs Redis hashes to represent JSON: efficiency?</a>内容如下：</p>
<blockquote>
<p>I want to store a JSON payload into redis. There's really 2 ways I can do this:</p>
<ol>
<li>
<p>One using a simple string keys and values.</p>
<p>key:user, value:payload (the entire JSON blob which can be 100-200 KB)</p>
<p>SET user:1 payload</p>
</li>
<li>
<p>Using hashes</p>
<p>HSET user:1 username &quot;someone&quot;<br>
HSET user:1 location &quot;NY&quot;<br>
HSET user:1 bio &quot;STRING WITH OVER 100 lines&quot;</p>
</li>
</ol>
<p>Keep in mind that if I use a hash, the value length isn't predictable. They're not all short such as the bio example above.<br>
Which is more memory efficient? Using string keys and values, or using a hash?</p>
</blockquote>
<h3 id="string-和-hash-直观测试">string 和 hash 直观测试</h3>
<p>首先我们先测试用数据测试一下，测试数据结构如下：</p>
<pre><code class="language-json">values = {
    &quot;name&quot;: &quot;gs&quot;,
    &quot;age&quot;: 1
}
</code></pre>
<p>使用for 生成10w个key，key的生成规则为：</p>
<pre><code class="language-python">for i in range(100000):
    key = &quot;object:%d&quot; % i
</code></pre>
<p>把数据分别以hash 和 string（values 使用 json encode 为string ）的形式存入redis。</p>
<p>结果如下：</p>
<blockquote>
<p>hash 占用 10.16M</p>
<p>string 占用 10.15M</p>
</blockquote>
<p><strong>这看起来和我们印象中hash 占空间比较大的观念不太一致，这是为什么呢？</strong></p>
<p>这里是因为Redis 的hash 对象有两种编码方式：</p>
<ol>
<li>ziplist（2.6之前是zipmap）</li>
<li>hashtable</li>
</ol>
<p>当哈希对象可以同时满足以下两个条件时， 哈希对象使用 ziplist 编码：</p>
<ol>
<li>哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；</li>
<li>哈希对象保存的键值对数量小于 512 个；</li>
</ol>
<p>不能满足这两个条件的哈希对象需要使用 hashtable 编码。上述测试数据满足这两个条件，所以这里使用的是ziplist来存储的数据，而不是hashtable。</p>
<blockquote>
<p><code>注意</code><br>
这两个条件的上限值是可以修改的， 具体请看配置文件中关于 hash-max-ziplist-value 选项和 hash-max-ziplist-entries 选项的说明。</p>
<p>hash-max-ziplist-entries for Redis &gt;= 2.6<br>
hash-max-ziplist-value for Redis &gt;= 2.6</p>
</blockquote>
<h4 id="ziplist">ziplist</h4>
<p><strong>ziplist 编码的数据底层是使用压缩列表作为底层数据结构，结构如下：</strong></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/Ir11LH8z_BiQW8eVl2OXaKERDyO5V5cXkx1OqNaeGWBuqo1Z6WZRss_YP98mnJuc" alt="ziplist" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/EinQ3TgdfGywd8GtAk93ksSzJeZsf7cBSBxEMgtrt9SM2MAvQcLoxvuGeQSdFS7W" alt="ziplist 底层实现" loading="lazy"></figure>
<p>hash 对象使用ziplist 保存时，程序会将保存了键的ziplist节点推入到列表的表尾，然后再将保存了值的ziplist节点推入列表的表尾。</p>
<p>使用这种方式保存时，并不需要申请多余的内存空间，而且每个Key都要存储一些关联的系统信息（如过期时间、LRU等），因此和String类型的Key/Value相比，Hash类型极大的减少了Key的数量(大部分的Key都以Hash字段的形式表示并存储了)，从而进一步优化了存储空间的使用效率。</p>
<p>在这篇<a href="https://redis.io/topics/memory-optimization">redis memory optimization</a>官方文章中，作者强烈推荐使用hash存储数据</p>
<blockquote>
<h3 id="use-hashes-when-possible">Use hashes when possible</h3>
<p>Small hashes are encoded in a very small space, so you should try representing your data using hashes every time it is possible. For instance if you have objects representing users in a web application, instead of using different keys for name, surname, email, password, use a single hash with all the required fields.</p>
<p>But many times hashes contain just a few fields. When hashes are small we can instead just encode them in an O(N) data structure, like a linear array with length-prefixed key value pairs. Since we do this only when N is small, the amortized time for HGET and HSET commands is still O(1): the hash will be converted into a real hash table as soon as the number of elements it contains will grow too much (you can configure the limit in redis.conf).</p>
<p>This does not work well just from the point of view of time complexity, but also from the point of view of constant times, since a linear array of key value pairs happens to play very well with the CPU cache (it has a better cache locality than a hash table).</p>
</blockquote>
<h4 id="hashtable">hashtable</h4>
<p><code>hashtable</code> 编码的哈希对象使用字典作为底层实现， 哈希对象中的每个键值对都使用一个字典键值对来保存：</p>
<ul>
<li>字典的每个键都是一个字符串对象， 对象中保存了键值对的键；</li>
<li>字典的每个值都是一个字符串对象， 对象中保存了键值对的值。</li>
</ul>
<p><strong>hashtable 编码的对象如下所示：</strong></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/uxuYAXAcsW_18WeIiiwGNTbMqWbncG6Vd143kyizERZgYMmBggKd4EK_zkIva7AQ" alt="" loading="lazy"></figure>
<h3 id="第二次测试">第二次测试</h3>
<pre><code class="language-json">values = {
    &quot;name&quot;: &quot;gs&quot;,
    &quot;age&quot;: 1,
    &quot;intro&quot;: &quot;long..long..long..string&quot;
}
</code></pre>
<p>第二次测试方式和第一次一样，只是把测试数据中加了一个大的字符串，以保证hash 使用hashtable 的方式存储数据</p>
<p>结果如下：</p>
<blockquote>
<p>hashtable： 1.13G</p>
<p>string：        1.13G</p>
</blockquote>
<p>基本一样，这里应该主要是Hash类型极大的减少了Key的数量(大部分的Key都以Hash字段的形式表示并存储了)，从而进一步优化了存储空间的使用效率。</p>
<p><strong>NOTE:</strong> 读取和写入的速度基本一致，差别不大</p>
<p>回到这个问题，对于string 和 hash 该如何选择呢？</p>
<p>我比较赞同下面这个答案：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5v4pyfA4GAF4q-BnGujmFveL24N6uGWuhISE5RXYThGUtZlot_-H5OTymX4ANnNr" alt="" loading="lazy"></figure>
<p>具体使用哪种数据结构，其实是需要看你要存储的数据以及使用场景。</p>
<p>如果存储的都是比较结构化的数据，比如用户数据缓存，或者经常需要操作数据的一个或者几个，特别是如果一个数据中如果filed比较多，但是每次只需要使用其中的一个或者少数的几个，使用hash是一个好的选择，因为它提供了hget 和 hmget，而无需取出所有数据再在代码中处理。</p>
<p>反之，如果数据差异较大，操作时常常需要把所有数据都读取出来再处理，使用string 是一个好的选择。</p>
<blockquote>
<p>当然，也可以听Redis 的，放心的使用hash 吧。</p>
</blockquote>
<p>还有一种场景：如果一个hash中有大量的field（成千上万个），需要考虑是不是使用string来分开存储是不是更好的选择。</p>
<h3 id="references">References</h3>
<p>[1] Redis strings vs Redis hashes to represent JSON: efficiency?: https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency<br>
[2] redis memory optimization: https://redis.io/topics/memory-optimization<br>
[3] Redis 设计与实现： http://redisbook.com/preview/object/hash.html</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[markdown中code生成图片的实现]]></title>
        <id>http://blog.gusibi.site/post/mardown-code-to-image-2/</id>
        <link href="http://blog.gusibi.site/post/mardown-code-to-image-2/">
        </link>
        <updated>2019-06-15T07:34:53.000Z</updated>
        <content type="html"><![CDATA[<p>前几天写了《markdown 生成头条文章的一个思路》，周末就试了试。</p>
<p>先回顾一下思路，大致流程如下：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/AeaSby9Zk5mB9lMW2hiZDbSzaQa9VlpRaHomeb_mVndzFIn6oMEKbIKJqk3P59_U" alt="" loading="lazy"></figure>
<p>这里的三个关键点是：</p>
<ol>
<li>提取code</li>
<li>把code 转换为html</li>
<li>把html 生成图片</li>
<li>code 替换成图片</li>
</ol>
<p>第一个很简单，只有用正则表达式就可以解决：</p>
<pre><code class="language-python">_fenced_code_block_re = re.compile(r'''
    (?:\n+|\A\n?)
    ^```\s*?([\w+-]+)?\s*?\n # opening fence, $1 = optional lang
    (.*?)                  # $2 = code block content
    ^```[ \t]*\n           # closing fence
    ''', re.M | re.X | re.S)
</code></pre>
<blockquote>
<p>这个正则来自 python-markdown2: https://github.com/trentm/python-markdown2</p>
</blockquote>
<p>这个正则只匹配了 <strong>```</strong> 样式的代码，对于前边有四个空格的并没有做处理（也不想做处理，还是严格一点好）。</p>
<p>第二个也不麻烦，只需要把提取出的code 放到html 中，下面是一个html模板：</p>
<pre><code class="language-html">&lt;html&gt;
&lt;head&gt;
   &lt;link rel=&quot;stylesheet&quot; href=&quot;http://media.gusibi.mobi/highlight/static/styles/atom-one-dark.css&quot;&gt;
   &lt;script src=&quot;http://media.gusibi.mobi/highlight/static/highlight.site.pack.js&quot;&gt;&lt;/script&gt;
   &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;
&lt;/head&gt;
&lt;body style=&quot;width: 640px;&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;{{.Language}}&quot;&gt;{{.Code}}&lt;/code&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;`
</code></pre>
<p>这里有一个点是渲染html 页面的时候， 由于加载html 页面的工具都是get请求，这里我们需要先把code 数据保存起来。所以请求code 的html 页面分成了两步。</p>
<ol>
<li>存储code</li>
<li>请求code 对应的html</li>
</ol>
<p>在 html-server 服务中，实现了code 的存储和请求，使用方式如下：</p>
<pre><code class="language-python">def code2html(code, language=&quot;plaintext&quot;):
    data = {
        &quot;code&quot;: code,
        &quot;language&quot;: language
    }
    # 先存储代码
    resp = requests.post(Code2HtmlCreateUrl, json=data)
    if resp.status_code == 200:
        content = resp.json()
    else:
        content = resp.content
    return content[&quot;ID&quot;]

</code></pre>
<p>第三个问题比较麻烦一点。</p>
<p>开始的时候是准备使用pyqt5 生成图片，但是它渲染html 的大小和直觉不太一致，API也比较复杂。最坑的是，一次生成多张图片有问题，最后改成了使用 的方式。</p>
<p>图片生成的代码比较简单，</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-

from selenium import webdriver
import time
import os.path
import multiprocessing as mp

def webshot(url, height, outfile):
    driver = webdriver.PhantomJS()
    driver.set_window_size(660, height)# 这里的宽高是先计算好指定的
    # driver.maximize_window()
    # 返回网页的高度的js代码
    js_height = &quot;return document.body.clientHeight&quot;
    try:
        driver.get(url)
        k = 1
        height = driver.execute_script(js_height)
        while True:
            if k*500 &lt; height:
                js_move = &quot;window.scrollTo(0,{})&quot;.format(k * 500)
                driver.execute_script(js_move)
                time.sleep(0.2)
                height = driver.execute_script(js_height)
                k += 1
            else:
                break
        driver.save_screenshot(outfile)
        print(&quot;save screenshot to {} success&quot;.format(outfile))
        time.sleep(0.1)
    except Exception as e:
        print(outfile,e)
</code></pre>
<p>第四个问题和第一个问题现在是关联的，操作方式是，找出code，处理然后直接替换：</p>
<pre><code class="language-python">     def _fenced_code_block_sub(self, match):
        language = match.group(1)
        codeblock = match.group(2)
        image_path = code2img(codeblock, language)
        image_url, _ = upload27niu(image_path)
        return &quot;\n\n![](%s)\n\n&quot; % image_url

    def _do_fenced_code_blocks(self, text):
        &quot;&quot;&quot;Process ```-fenced unindented code blocks 
        ('fenced-code-blocks' extra).&quot;&quot;&quot;
        return self._fenced_code_block_re.sub(
            self._fenced_code_block_sub, text)
</code></pre>
<p>这么做虽然简单但是弊端也很明显，就是没有使用并发，脚本执行的慢。如果想提高速度，可以先把code 全找出来，然后使用多进程来处理。</p>
<p>代码我上传到了github，使用方式如下</p>
<p>使用方法</p>
<pre><code class="language-bash">git clone git@github.com:gusibi/oneplus.git

cd oneplus

python plus.py -m [markdown_path] -n [outfile_path]
</code></pre>
<h2 id="转换前后的效果">转换前后的效果</h2>
<p>这是转换前：</p>
<p>https://github.com/gusibi/oneplus/blob/master/325.md</p>
<p>这是转换后：</p>
<p>https://github.com/gusibi/oneplus/blob/master/new_325.md</p>
<h2 id="这个只是一个粗糙的优化方式也只识别了代码对于流程图table-并没有适配作为一个优化项之后再做吧">这个只是一个粗糙的优化方式，也只识别了代码，对于流程图，table 并没有适配，作为一个优化项之后再做吧。</h2>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[markdown中code生成图片的思路]]></title>
        <id>http://blog.gusibi.site/post/mardown-code-to-image-1/</id>
        <link href="http://blog.gusibi.site/post/mardown-code-to-image-1/">
        </link>
        <updated>2019-06-13T07:34:53.000Z</updated>
        <content type="html"><![CDATA[<p>最近在头条上写东西，遇到了一个比较烦的事情---<strong>编辑器不支持代码</strong>。这对于一个像我这样使用代码凑字数的人来说实在不是一个好的消息。但是等头条改进编辑器太遥远了，只能自己自足实现一个替代方案了--把代码替换成图片。</p>
<p>一段代码的时候，我随手截图，简单完成了；<br>
两段代码的时候，我随手随手截图，也完成了；<br>
三段代码的时候，我随手随手随手截图，强忍着完成了；<br>
等我发现代码越来越多的时候，不能忍了。<br>
懒惰是程序员的美德，不能再花费时间干这些事情了。我觉得要写个程序，把markdown 中的代码自动生成图片。</p>
<p><strong>考虑了一下，大概需要做的工作是：</strong></p>
<ol>
<li>把markdown 中 &quot;<code></code>&quot; 包换的代码提取出来（也可以使用工具先把markdown 转换成html 再解析html 取出code</li>
<li>把每一段code 分别生成图片</li>
<li>把图片对应的代码替换掉</li>
</ol>
<p>想想还是很简单的。那就开始吧。</p>
<p>但是到第二步的时候遇到了问题，<strong>code 如何生成图片，生成什么样的图片？</strong></p>
<ol>
<li>首先code 需要保持原有的样式，如果能高亮那就更好了（嗯，高亮</li>
<li>生成图片的时候是把code 作为文字使用PIL（我使用python）写在背景上么，图片大小是多少，高亮怎么实现</li>
<li>算了，还是先把code 生成html，然后截取html页面吧。（这样html 还能使用 highlight.js 来实现高亮）</li>
<li>如何动态生成包含code 的html 页面呢？</li>
<li>如何把截取html 页面呢？</li>
</ol>
<p><strong>动态生成包含code 的html 页面有两个思路：</strong></p>
<ol>
<li>使用post 请求，把code 写入数据库（或者文件），然后返回id，再使用id GET 请求获取页面（需要存储，两次请求）</li>
<li>压缩code，把code 作为url参数，使用GET请求获取页面（可能会造成url太长的错误）</li>
</ol>
<p><strong>那如何截取html呢？</strong></p>
<p>如果是python，可以使用pyqt，渲染html页面，截取webview。<br>
如果使用node，可以使用 html2canvas。</p>
<p>大致流程如下：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/AeaSby9Zk5mB9lMW2hiZDbSzaQa9VlpRaHomeb_mVndzFIn6oMEKbIKJqk3P59_U" alt="" loading="lazy"></figure>
<p><strong>哎，这一篇没有代码，就凑不了多少字。</strong></p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DynamoDB 最佳实践]]></title>
        <id>http://blog.gusibi.site/post/dynamodb-best-practice/</id>
        <link href="http://blog.gusibi.site/post/dynamodb-best-practice/">
        </link>
        <updated>2019-06-10T06:36:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="面向dynamodb的nosql设计">面向DynamoDB的NoSQL设计</h2>
<h3 id="关系数据库设计和nosql之间的差异">关系数据库设计和NoSQL之间的差异</h3>
<ul>
<li>关系型数据库可以灵活的查询数据，但是成本较高，高流量无法扩展
<ul>
<li>RDBMS 设计灵活，可以随时修改</li>
</ul>
</li>
<li>NoSQL查询方式有限
<ul>
<li>需要对架构进行专门设计，以尽可能的加快查询速度。数据结构和需求高度相关，需要特制。</li>
</ul>
</li>
</ul>
<h3 id="nosql设计的两个关键概念">NoSQL设计的两个关键概念</h3>
<ul>
<li>需要先了解业务问题和应用程序的使用案例，然后再开始设计</li>
<li>应保留尽可能少的表。</li>
</ul>
<h3 id="了解nosql设计">了解NoSQL设计</h3>
<ul>
<li>
<p>三个基本属性</p>
<ul>
<li>
<p>数据大小</p>
<p>了解一次存储和请求的数据量将有助于确定对数据进行分区的最有效方法。</p>
</li>
<li>
<p>数据形状</p>
<p>NoSQL 数据库不会在处理查询时重塑数据（如 RDBMS 系统所做的一样），而是整理数据以便数据在数据库中的形状与查询内容对应。这是加快速度并增强可扩展性的一个关键因素</p>
</li>
<li>
<p>数据速度</p>
<p>DynamoDB 通过增加可用于处理查询的物理分区的数量并通过跨这些分区有效分发数据来进行扩展。预先了解峰值查询负载可能有助于确定数据分区方式，从而最高效地使用 I/O 容量。</p>
</li>
</ul>
</li>
<li>
<p>性能的一般准则</p>
<ul>
<li>
<p>将相关数据放在一起</p>
<p>将相关数据集中放置到一个位置。将相关数据保留在最近位置会对成本和性能产生重大影响。<br>
不是跨多个表分发相关数据项目，而是在 NoSQL 系统中尽可能紧密地保留相关项目。<br>
作为一般规则，应在 DynamoDB 应用程序中保留尽可能少的表。</p>
<p>只需要一个表，<br>
例外是涉及大量时间序列数据的情况或具有明显不同的访问模式的数据集 — 但这些都是例外。具有反向索引的单个表通常可启用简单查询来创建和检索应用程序所需的复杂层次数据结构。</p>
</li>
<li>
<p>使用排序顺序</p>
<p>可将相关项目组织起来并进行有效查询，前提是它们的键设计可促使它们一起排序</p>
</li>
<li>
<p>分发查询</p>
<p>您应该设计数据键以跨尽可能多的分区均匀分发流量，从而避免“热点”。</p>
</li>
<li>
<p>使用全局二级索引</p>
<p>通过创建特定的全局二级索引，可启用主表支持的查询以外的查询</p>
</li>
</ul>
</li>
</ul>
<h2 id="设计并高效使用分区键的最佳实践">设计并高效使用分区键的最佳实践</h2>
<p>项目主键可以是仅分区键<br>
也可以是分区键+排序键</p>
<h3 id="高效使用突增容量">高效使用突增容量</h3>
<p>DynamoDB 当前可将未使用的读取和写入容量保留最多五分钟 (300 秒)<br>
当读取或写入突增导致容量不足时使用。</p>
<h3 id="dynamodb适应性容量">DynamoDB适应性容量</h3>
<p>DynamoDB 适应性容量 允许您的应用程序继续不受限地对热分区进行读写操作，前提是流量未超出表的配置的总容量或分区最大容量。自适应容量的工作原理是，自动增加分区的吞吐量容量来接收更多流量</p>
<p>示例表配置了 400 个写入容量单位 (WCU)，这些容量单位均匀分布在 4 个分区中，每个分区每秒可以接收最多 100 个 WCU。分区 1、2 和 3 每秒接收的写入流量为 50 个 WCU。分区 4 每秒接收 150 个 WCU。此热分区可以在接受写入流量的同时仍具有未利用的突增容量，但是，它最终会限制每秒超过 100 个 WCU 的流量。</p>
<p>DynamoDB 适应性容量通过增加分区 4 的容量来做出响应，因此分区 4 可以接收 150 WCU/秒的更高工作负载，而不会受到限制。</p>
<h3 id="设计分区键以均匀分发工作负载">设计分区键以均匀分发工作负载</h3>
<p>表的主键的分区键用来确定数据存储在哪个物理分区</p>
<p>每个物理分区均分读取和写入容量</p>
<p>合理设计分区键，避免出现“热点” (请求频率非常高的) 分区键值而导致整体性能降低。</p>
<p>好的<br>
用户 ID</p>
<p>差的<br>
状态代码 项目创建日期（时间段）</p>
<h3 id="使用写入分片均匀分发工作负载">使用写入分片均匀分发工作负载</h3>
<p>跨分区键空间写入是一种比较好的方式</p>
<p>比如：分区键是日期，现在有1w条数据，日期均分在100天，不好的方式是按时间插入，这样会在短时间内产生 热键</p>
<ul>
<li>
<p>使用随机后缀分区</p>
<p>将随机数字添加到分区键值的末尾。然后跨更大型的空间随机化写入。</p>
<p>例如，对于表示当天日期的分区键，可能会选择介于 1 和 200 之间的随机数并将它作为后缀连接到该日期。这将生成分区键值 (如 2014-07-09.1、2014-07-09.2，以此类推，直到 2014-07-09.200)。由于随机化分区键，因此将跨多个分区均匀分布每天对表的写入。这将提高并行度和总体吞吐量。</p>
<p>问题：读取困难</p>
</li>
<li>
<p>使用计算得出的后缀分区</p>
<p>不使用随机数在分区间分发项目，而是使用可根据查询内容计算出的数字。</p>
<p>例如：表在分区键中使用当天日期。现在假设每个项目都有可访问的 OrderId 属性，并且除了日期，还最常需要按订单 ID 查找项目。在应用程序将项目写入表之前，它可根据订单 ID 计算得出一个哈希后缀并将此后缀追加到分区键日期。此计算可能生成一个介于 1 和 200 之间、分发甚是均匀的数字 (类似于随机策略所生成的数字)。</p>
</li>
</ul>
<h3 id="在数据上传期间有效分发写入活动">在数据上传期间有效分发写入活动</h3>
<p>例如，假设要将用户消息上传至使用复合主键（其中 UserID 作为主键，MessageID 作为排序键）的 DynamoDB 表。</p>
<p>在后台，DynamoDB 将跨多台服务器为表数据分区。要充分利用为表配置的所有吞吐容量，必须跨分区键值分发工作负载。</p>
<p>可分发上传工作，方式为使用排序键通过每个分区键值加载一个项目，然后通过每个分区键值加载另一个项目，以此类推</p>
<p>此序列中的每次上传都使用不同的分区键值，以便能够同时使用更多 DynamoDB 服务器，从而提高吞吐量性能</p>
<h2 id="使用排序键整理数据的最佳实践">使用排序键整理数据的最佳实践</h2>
<p>精心设计的排序键具有两个主要好处：</p>
<p>它们将相关信息聚集在一个位置，以便进行高效查询。利用精心设计的排序键，您可以使用带运算符 (如 starts-with、between、&gt;、&lt; 等) 的范围查询检索通常需要的相关项目组。<br>
利用组合排序键，可以在数据中定义可在任何层次结构级别查询的层次 (一对多) 关系。<br>
例如，在列出地理位置的表中，可按如下所示构建排序键：<br>
[country]#[region]#[state]#[county]#[city]#[neighborhood]</p>
<h3 id="使用排序键进行版本控制">使用排序键进行版本控制</h3>
<p>http://docs.amazonaws.cn/amazondynamodb/latest/developerguide/bp-sort-keys.html</p>
<p>请为每个新项目创建两个副本：一个副本在排序键的开头应具有版本号前缀零 (如 v0_)，一个应具有版本号前缀 1 (如 v001_)。<br>
每次更新项目时，请在已更新版本的排序键中使用下一个更高的版本前缀，并将更新后的内容复制到版本前缀为零的项目中。这意味着，可使用前缀零轻松找到所有项目的最新版本。</p>
<h2 id="在dynamodb中使用二级索引的最佳实践">在DynamoDB中使用二级索引的最佳实践</h2>
<p>本地二级索引和表一起创建，不能修改，<br>
全局二级索引可以在后期更新创建修改，<br>
上限都是5个</p>
<h3 id="索引类型">索引类型</h3>
<ul>
<li>
<p>全局二级索引</p>
<ul>
<li>
<p>分区键和排序键可与基表中的这些键不同的索引。</p>
<p>全局二级索引之所以称为“全局”，这是因为该索引上的查询可跨过所有分区，涵盖基表中的所有数据。全局二级索引没有大小限制且具有其自己的读取和写入活动的预配置吞吐量设置，这些设置独立于表的相应设置。</p>
</li>
</ul>
</li>
<li>
<p>本地二级索引</p>
<ul>
<li>
<p>分区键与基表相同但排序键不同的索引。</p>
<p>本地二级索引之所以称为“本地”，是因为该索引的每个分区的范围都限定为具有相同分区键值的基表分区。因此，对于任何一个分区键值，索引项目的大小总和不得超过 10GB。此外，本地二级索引与其索引的表共享用于读取和写入活动的预配置吞吐量设置。</p>
</li>
</ul>
</li>
</ul>
<h3 id="dynamodb中二级索引的一般准则">DynamoDB中二级索引的一般准则</h3>
<ul>
<li>
<p>高效使用索引</p>
<ul>
<li>
<p>最大程度的减少索引数量</p>
<p>很少使用的索引会增加存储和 I/O 成本，而且无法提高应用程序性能。</p>
</li>
<li>
<p>对于写入活动工作量大的表，避免使用索引</p>
<p>在数据捕获应用程序中，要在具有极高写入负载的表上维护索引所需的 I/O 操作，成本非常高。如果您需要为此类表中的数据编制索引，可能更有效的方法是将数据复制到具有必要索引的另外一个表，并对其进行查询。</p>
</li>
</ul>
</li>
<li>
<p>慎重选择投影</p>
<p>相较于查询整个表，索引越小，性能优势越明显。如果您的查询通常只返回很少一部分属性，并且这些属性的总和远远少于整个项目的大小，那么您应当只投影经常请求的属性。</p>
<ul>
<li>
<p>请尽量减少投影属性的数量，以最大程度减少写入索引的项目大小</p>
<p>但是，这仅在投影属性的大小大于单个写入容量单位 (1 KB) 时适用。</p>
<p>例如，如果索引条目的大小仅为 200 字节，则 DynamoDB 会将其向上取整为 1 KB。也就是说，如果索引项目很小的话，您可以投影更多属性，而不会额外增加成本。</p>
</li>
<li>
<p>避免投影您知道在查询中极少需要的属性。</p>
<p>每次更新在索引中投影的属性时，也会因更新索引而额外产生成本</p>
</li>
<li>
<p>只有当您需要让查询返回按不同的排序键排序的整个表项目时，才应指定 ALL。</p>
</li>
</ul>
</li>
<li>
<p>优化频繁查询以避免抓取</p>
<ul>
<li>
<p>频繁使用的属性需要投影，已避免重复抓取</p>
<p>例如，如果索引只投影了 属性A B，<br>
但是查询结果会经常使用属性C</p>
<p>只能再次查询表来抓取属性C</p>
</li>
</ul>
</li>
<li>
<p>创建本地二级索引时注意项目集合大小限制</p>
<p>对于任何一个分区键值，索引项目的大小总和不得超过 10GB</p>
<p>例如表有一个特定的分区键 A，该表有3个本地索引。增加一个新项目时，二级索引也会同步创建，三个二级索引可能会创建3个数据备份。</p>
<p>最严重的情况是，同一个数据可能会占用4倍数据的空间。</p>
<p>可能，在分区数据在2.5G大小的时候，索引就已经到达了10G。</p>
</li>
</ul>
<h3 id="利用稀疏索引">利用稀疏索引</h3>
<ul>
<li>
<p>对于表中的任何项目，DynamoDB 仅当项目中存在索引排序键值时才会写入相应的索引条目。如果排序键并未出现在每个表项目中，则这种索引称为稀疏 索引。</p>
<p>稀疏索引对于查询表的小型子部分非常有用。例如，假设您有一个存储您的所有客户订单的表，该表具有以下键属性：</p>
<p>分区键：CustomerId<br>
排序键: OrderId</p>
<p>要跟踪未结订单，可以在尚未发运的订单项目中插入一个名为 isOpen 的布尔值。然后，在该订单发运后，您可以删除该属性。然后，如果对 CustomerId (分区键) 和 isOpen (排序键) 创建索引，则只有定义为 isOpen 的订单才显示在其中。如果有数以千计的订单，其中只有少量订单处于未结状态，则查询未结订单的索引要比扫描整个表更快速且更便宜。</p>
<p>布尔值不能做索引</p>
<p>可以使用具有在索引中生成有用的排序顺序的值的属性，而不是使用布尔类型的属性，如 isOpen。<br>
例如，可以使用 OrderOpenDate 属性设置为下每个订单的日期，然后在订单完成后将其删除。这样，在查询稀疏索引时，会返回按下每个订单的日期排序的项目。</p>
</li>
<li>
<p>全局二级索引应用稀疏索引后，可以使用比基表低的吞吐配置实现高性能查询</p>
</li>
</ul>
<h3 id="使用全局二级索引进行具体化聚合查询">使用全局二级索引进行具体化聚合查询</h3>
<p>https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/bp-gsi-aggregation.html</p>
<h3 id="重载全局二级索引">重载全局二级索引</h3>
<p>https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/bp-gsi-overloading.html</p>
<h3 id="对选择性表查询使用全局二级索引写入分片">对选择性表查询使用全局二级索引写入分片</h3>
<p>例如： 有遍历表的需求</p>
<p>此时如果分区键平均分布，只能使用scan 操作，操作昂贵</p>
<p>也可以使用特定的分区键，但是容易产生热键</p>
<p>可以利用全局索引，要在整个键空间中启用选择性查询，可使用写入分片，方式是向用于全局二级索引分区键的每个项目添加一个包含 (0-N) 值的属性。</p>
<p>通过使用此架构设计，事件项目将分布在 GSI 上的 0-N 分区中，从而允许在复合键上使用排序条件来执行分散读取，以便检索指定时间段内具有给定状态的所有项目。</p>
<p>此架构模式以最低的成本交付一个高度选择性的结果集，而无需表扫描。</p>
<h3 id="使用全局二级索引创建一致性副本">使用全局二级索引创建一致性副本</h3>
<p>最终一致</p>
<ul>
<li>全局二级索引副本支持功能
<ul>
<li>为不同的读取器设置不同的预置读取容量</li>
<li>完全消除对表的读取</li>
</ul>
</li>
</ul>
<h2 id="存储大型项目和属性的最佳实践">存储大型项目和属性的最佳实践</h2>
<p>DynamoDB 当前限制存储在表中的每个项目的大小</p>
<p>DynamoDB 中的项目大小上限为 400 KB，包括属性名称二进制长度（UTF-8 长度）和属性值长度（同为二进制长度）。属性名称也包含在此大小限制之内。</p>
<p>具有本地二级索引的表的项目大小</p>
<p>对于表上的每个local secondary index，以下对象的总大小有 400 KB 的限制：</p>
<p>表中项目数据的大小。<br>
与该项目对应的local secondary index条目的大小，包括其键值和投影属性。</p>
<h3 id="压缩大型属性值">压缩大型属性值</h3>
<p>压缩大型属性值可以让属性值符合 DynamoDB 中的项目限制并降低存储成本。压缩算法 (如 GZIP 或 LZO) 将生成之后可存储在 Binary 属性类型中的二进制输出。</p>
<p>比如表中一个属性包含长文本，这些内容就适合压缩处理</p>
<h3 id="在s3中存储大型属性值">在S3中存储大型属性值</h3>
<p>可以将它们作为对象存储在 Amazon S3 中，然后将对象标识符存储在 DynamoDB 项目中。</p>
<p>实施此策略时，请记住以下几点：</p>
<p>DynamoDB 不支持跨 Amazon S3 和 DynamoDB 的事务。因此，应用程序必须处理任何故障，其中可能包括清理孤立的 Amazon S3 对象。<br>
Amazon S3 限制对象标识符的长度。因此必须通过不会生成过长对象标识符或违反其他 Amazon S3 约束的方式组织数据。</p>
<h2 id="在dynamodb中处理时间序列数据的最佳实践">在DynamoDB中处理时间序列数据的最佳实践</h2>
<h3 id="时间序列数据的设计模式">时间序列数据的设计模式</h3>
<p>考虑您想跟踪大量活动的典型时间序列场景。写入访问模式即要记录的所有事件都具有今日日期。读取访问模式读取今日事件的频率最高，读取昨日事件的频率小很多，而读取更早事件的频率是最低的。</p>
<p>一种处理方式是将当前日期和时间构建成主键。</p>
<ul>
<li>
<p>以日期为主键</p>
</li>
<li>
<p>以日期或时间间隔创建不同的表</p>
<p>每个时间段创建一个表，并为表预置所需的读取和写入容量以及所需的索引。<br>
在每个时间段结束之前，为下一个时间段预构建表。在当前时间段结束时，事件流量将定向至新表。可以为这些表分配名称以指明这些表所记录的时间段。</p>
<p>只要表不再被写入，就将其预置的写入容量降至较低的值（例如，1 WCU）并预置适当的读取容量。随着时间推移，降低早期表的预置读取容量。可以选择存档或删除极少或根本不需要其内容的表。</p>
<p>这种做法的目的是将所需的资源分配给承受最高流量的当前时间段，同时降低使用不活跃的旧表的预置资源，从而节省成本。根据您的业务需求，您可能需要考虑写入分片，以将流量均匀地分配到逻辑分区键。</p>
</li>
</ul>
<h2 id="管理多对多关系的最佳实践">管理多对多关系的最佳实践</h2>
<h3 id="相邻列表设计模式">相邻列表设计模式</h3>
<p>相邻列表是一种设计模式，有助于在 Amazon DynamoDB 中为多对多关系建模。一般地说，它们提供在 DynamoDB 中表示图表数据 (节点和边缘) 的方式。</p>
<p>当应用程序的不同实体之间具有多对多关系时，此关系可建模为相邻列表。<br>
在此模式中，所有顶级实体 (与图表模型中的节点同义) 都是使用分区键表示的。通过将排序键的值设置为目标实体 ID (目标节点)，与其他实体 (图表中的边缘) 的任何关系都将表示为分区内的项目。</p>
<p>例如存储关注信息：</p>
<p>用户A ID_A 为分区键，用户 A 的关注者ID 为排序键<br>
查询用户A 的所关注的所有人可按ID_A 筛选<br>
查询用户A 被谁关注可以加一个全局二级索引 索引分区键为表排序键，排序键为表分区键</p>
<p>此模式的优势包括数据重复率最低和精简的查询模式 ，以便查找与目标实体 (让边缘作为目标节点) 相关的所有实体 (节点)。</p>
<ul>
<li>关注关系</li>
<li>好友关系</li>
</ul>
<h3 id="具体化图标模式">具体化图标模式</h3>
<h2 id="实现混合数据库系统的最佳实践">实现混合数据库系统的最佳实践</h2>
<h3 id="不是所有数据都迁移到dynamodb">不是所有数据都迁移到DynamoDB</h3>
<h3 id="如何实现混合系统">如何实现混合系统</h3>
<p>可利用 DynamoDB 流和 AWS Lambda 与一个或多个现有关系数据库系统无缝集成</p>
<p>集成 DynamoDB 流和 AWS Lambda 的系统可提供若干好处：</p>
<p>它可作为具体化视图的持久化缓存运行。<br>
它可设置为在查询数据时以及在 SQL 系统中修改数据时逐渐填充所查询和所修改数据。这意味着整个视图无需预先填充，这反过来意味着高效利用预置的吞吐容量的可能性更高。<br>
它的管理成本低并且高度可用和可靠。</p>
<ul>
<li>
<p>增量填充 DynamoDB 缓存</p>
<p>需要某个项目时，首先在 DynamoDB 中查找它。如果它不在此处，则在 SQL 系统中查找它，然后将它加载到 DynamoDB 中</p>
</li>
<li>
<p>通过 DynamoDB 缓存写入</p>
<p>当客户更改 DynamoDB 中的值时，将触发 Lambda 函数以将新数据写回 SQL 系统</p>
</li>
<li>
<p>通过 SQL 系统更新 DynamoDB</p>
<p>当内部流程（如库存管理或定价）更改 SQL 系统中的值时，将触发存储过程以将更改传播至 DynamoDB 具体化视图。</p>
</li>
</ul>
<h2 id="在dynamodb为关系数据建模的最佳实践">在DynamoDB为关系数据建模的最佳实践</h2>
<h3 id="为关系型数据建模的初始步骤">为关系型数据建模的初始步骤</h3>
<ul>
<li>对于新应用程序，查看有关活动和目标的用户案例。记录确定的各种使用案例，然后分析这些案例需要的访问模式。</li>
<li>对于现有应用程序，分析查询日志以了解人们目前使用该系统的方式以及密钥访问模式有哪些。</li>
<li>DynamoDB 架构设计的常见方法是确定应用程序层实体并使用反规范化和复合键聚合来降低查询复杂性。</li>
</ul>
<h3 id="为关系数据建模的示例">为关系数据建模的示例</h3>
<ul>
<li>https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/bp-relational-modeling.html</li>
</ul>
<h3 id="关系型数据库缺陷">关系型数据库缺陷</h3>
<ul>
<li>它规范化数据并将其存储在需要多个查询以写入磁盘的多个表中</li>
<li>它通常会产生与 ACID 兼容的事务系统的性能成本</li>
<li>它使用成本高昂的联接来重组查询结果的所需视图</li>
</ul>
<h3 id="dynamodb的优点">DynamoDB的优点</h3>
<ul>
<li>架构灵活性让 DynamoDB 存储单个项目内的复杂层次数据</li>
<li>复合键设计让其将相关项目靠近存储在相同表中</li>
</ul>
<h2 id="针对查询和扫描数据的最佳实践">针对查询和扫描数据的最佳实践</h2>
<h3 id="扫描的性能注意事项">扫描的性能注意事项</h3>
<ul>
<li>Scan 操作的效率低于其他操作。Scan 操作始终扫描整个表或二级索引</li>
<li>应避免对大型表或索引使用带有会删除很多结果的筛选条件的 Scan 操作</li>
</ul>
<h3 id="利用并行扫面">利用并行扫面</h3>
<ul>
<li>如果满足以下条件，就可以选择并行扫描
<ul>
<li>表的大小为 20 GB 或更大。</li>
<li>表的预置读取吞吐量尚未完全利用。</li>
<li>按顺序执行的 Scan 操作速度过慢。</li>
</ul>
</li>
</ul>
<h3 id="避免读取活动陡增">避免读取活动陡增</h3>
<ul>
<li>
<p>设置读取和写入容量单位要求</p>
<p>读取容量单位通过每秒强一致性 4 KB 数据读取请求的数量表示。一个最终一致性读取容量单位是每秒 2 个 4 KB 读取请求。默认情况下，<code>Scan</code> 操作执行最终一致性读取，可返回最多 1 MB（一页）数据。因此，单个 <code>Scan</code> 请求可占用（1 MB 页面大小/4 KB 项目大小）/2（最终一致性读取）= 128 个读取操作。如果改为请求强一致性读取，则 <code>Scan</code> 操作占用的吞吐量是预置吞吐量的两倍 — 如 256 次读取操作。</p>
<p>问题不仅仅在于 <code>Scan</code> 使用的容量单位陡增。由于扫描请求的读取项目在分区中彼此相邻，因此扫描还可能会占用同一分区中的所有容量单位。这意味着，请求一直调用相同的分区，导致该分区的所有容量单位用尽，进而限制该分区中的其他请求。如果读取数据请求分布在多个分区之中，则此操作不会给特定分区带来限制。</p>
</li>
<li>
<p>查询技巧</p>
<ul>
<li>
<p>减小页面大小</p>
<p>由于扫描操作会读取整个页面（默认情况下为 1 MB），因此，您可以通过设置较小的页面大小来降低扫描操作的影响。您可以使用 <code>Scan</code> 操作提供的 <em>Limit</em> 参数设置请求的页面大小。设置了较小的页面大小后，每个 <code>Query</code> 或 <code>Scan</code>请求都会使用更少的读取操作，并会在每个请求之间“停顿”。例如，假设每个项目为 4 KB，并且您将页面大小设置为 40 个项目。之后，<code>Query</code> 请求仅使用 20 次最终一致性读取操作或 40 次强一致性读取操作。如果占用较小容量单位的 <code>Query</code> 或 <code>Scan</code> 操作数量较多，您就可以成功完成其他重要请求而不会受到限制。</p>
</li>
<li>
<p>隔离扫描操作</p>
<p>应用程序可以创建多个表以彼此区分，甚至多个表可能会复制彼此的内容。您可能会在没有“关键任务型”流量的表中执行扫描。某些应用程序会每小时在两个表之间轮换流量来处理此负载 — 一个用于关键流量，另一个用于计账。其他应用程序可通过让每次写入都在两个表（“关键任务型”表和“影子”表）中执行来实现这一目的。</p>
</li>
</ul>
</li>
</ul>
<h2 id="使用全局表的最佳实践">使用全局表的最佳实践</h2>
<p><em>XMind: ZEN - Trial Version</em></p>
<h2 id="思维导图">思维导图</h2>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/5HvoP9-Hbod2k-btCPDBBj5aiegMfO6awp3w9-DqxTpNUnJhQr4ZyEX7maG-HtRv" alt="best practice" loading="lazy"></figure>
<h2 id="xmind-zen-trial-version"><em>XMind: ZEN - Trial Version</em></h2>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周分享第1期-常用表情包收录]]></title>
        <id>http://blog.gusibi.site/post/weekly-01/</id>
        <link href="http://blog.gusibi.site/post/weekly-01/">
        </link>
        <updated>2019-06-07T02:05:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong>每周分享，分享看到的一些有意思的文章和项目</strong></p>
<p>1 中国表情包大集合 <a href="https://zhaoolee.github.io/ChineseBQB/">https://zhaoolee.github.io/ChineseBQB/</a></p>
<p>表情包目录(共收录2298张表情包)Emoticon package directory (commonly included 2298 emoticon pack)</p>
<p>2 谷歌产品替代品</p>
<p>一批谷歌产品的替代方案</p>
<p><a href="https://nomoregoogle.com/">https://nomoregoogle.com/</a></p>
<p>3 Redis作者：开源维护者的挣扎和无奈</p>
<p>英文作者是著名开源项目 Redis 的开发者 antirez。截至 2019-06-04 为止，Redis 项目在 GitHub 将近有 37,000 Star，Fork 数达 14000。</p>
<p><a href="https://mp.weixin.qq.com/s/6C7-4Fp46rxfn0J34ebKyg">https://mp.weixin.qq.com/s/6C7-4Fp46rxfn0J34ebKyg</a></p>
<p>4 一个分享 GitHub 上 有趣、入门级的开源项目网站</p>
<p><a href="https://hellogithub.com">https://hellogithub.com</a></p>
<p>5 Saber - 新一代静态网站生成系统</p>
<p><a href="https://saber.land">https://saber.land</a></p>
<p>6 star-history: 帮助用户查看 github 项目 star 数目的历史</p>
<p>star-history 帮助用户查看 github 项目 star 数目的历史, 判断项目发展情况，项目地址：<a href="https://github.com/timqian/star-history">https://github.com/timqian/star-history</a></p>
<p>7 一个分类收集 GitHub 开源项目的网站，并对项目的热度和活跃度进行分析</p>
<p>项目地址：<a href="https://www.ctolib.com/">https://www.ctolib.com/</a></p>
<p>8 git 提交信息规范检测工具 git-commit-msg-linter</p>
<p>项目地址：<a href="https://www.npmjs.com/package/git-commit-msg-linter">https://www.npmjs.com/package/git-commit-msg-linter</a></p>
<p>9 编码一时爽，重写火葬场？这些公司都重写了软件，结局却不同。</p>
<blockquote>
<p>生存，还是死亡，这是一个问题。重写，还是不重写，这是导致生存或死亡的另一个问题。</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s/SqxPoIDPuvKlrlqZmubpXA">https://mp.weixin.qq.com/s/SqxPoIDPuvKlrlqZmubpXA</a></p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么json 不能使用 int64类型]]></title>
        <id>http://blog.gusibi.site/post/why-json-not-support-int64/</id>
        <link href="http://blog.gusibi.site/post/why-json-not-support-int64/">
        </link>
        <updated>2019-06-03T05:14:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="json-简介">json 简介</h3>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 <strong>它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集</strong>。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p>
<p>JSON支持两种数据结构存在：</p>
<ul>
<li>对象（object）：一个对象包含一系列非排序的名称／值对(pair)，一个对象以{开始，并以}结束。每个名称／值对之间使用 <strong>:</strong> 分割。</li>
<li>数组 (array)：一个数组是一个值(value)的集合，一个数组以 <strong>[</strong> 开始，并以]结束。数组成员之间使用 <strong>,</strong> 分割。<br>
具体的格式如下：</li>
</ul>
<pre><code class="language-json">[value1, value2, value3]
</code></pre>
<ul>
<li>名称／值（pair）：名称和值之间使用 <strong>:</strong> 隔开，格式如下：</li>
</ul>
<pre><code class="language-json">{name:value}
</code></pre>
<blockquote>
<p>名称必须是字符串类型；<br>
值(value)必须是可以是字符串(string)，数值(number)，对象(object)，有序列表(array)，或者 false， null， true 的其中一种。</p>
</blockquote>
<p>JSON的格式描述可以参考RFC 4627。</p>
<h3 id="为什么json不支持-int64-类型">为什么JSON不支持 int64 类型？</h3>
<p>通过上面的介绍有两个关键点：</p>
<ol>
<li>JSON 是基于 JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集</li>
<li>JSON 支持number 类型</li>
</ol>
<p>Javascript的数字存储使用了IEEE 754中规定的双精度浮点数数据类型，而这一数据类型能够安全存储 -(2^53-1) 到 2^53-1 之间的数值（包含边界值）。JSON 是Javascript 的一个子集，所以它也遵守这个规则。</p>
<p>以下是rfc7159的说明：</p>
<blockquote>
<p>Note that when such software is used, numbers that are integers and<br>
are in the range [-(2^53)+1, (2^53)-1] are interoperable in the<br>
sense that implementations will agree exactly on their numeric<br>
values.</p>
</blockquote>
<blockquote>
<p>这两个边界值可以通过 JavaScript 的 Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER 获取。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/json1.png" alt="" loading="lazy"></figure>
<blockquote>
<p>安全存储的意思是指能够准确区分两个不相同的值，比如，253 - 1 是一个安全整数，它能被精确表示，在任何 IEEE-754 舍入模式（rounding mode）下，没有其他整数舍入结果为该整数。作为对比，253 就不是一个安全整数，它能够使用 IEEE-754 表示，但是 253 + 1 不能使用 IEEE-754 直接表示，在就近舍入（round-to-nearest）和向零舍入中，会被舍入为 253。<br>
Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2 将得到 true的结果，而这在数学上是错误的。<br>
同样 105308320612483198 === 105308320612483200 结果也是true</p>
</blockquote>
<p>int64 类型的数值范围是 -(2^63-1) 到 2^63-1。使用int64 类型json 对于超出范围的数字，会出现解析错误的情况。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/json2.png" alt="" loading="lazy"></figure>
<p>一个建议：对于大数字来说，使用str 是一个好的选择。或者用类似这样的结构：</p>
<pre><code class="language-json">{&quot;int&quot;: 105308320612483198, &quot;int_str&quot;: &quot;105308320612483198&quot;}
</code></pre>
<p>在json 中使用的时候 使用 int_str 属性。</p>
<h3 id="python-对json-的处理">python 对json 的处理</h3>
<p>python 中 int 类型值远远超过IEEE 754 中定义的双精度值的范围，所以对于在python中使用的json数据，可以使用放心使用 int64 类型（python中的long ）。但是如果序列化后的数据要被其它语言的解析器（比如：JavaScript的解析器）解析的时候，就要当心数值是不是超出了安全数的范围。如果超出，这里推荐使用字符串类型来代替数值类型。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7159.html">RFC7159</a></li>
<li><a href="http://www.json.org/json-zh.html">介绍JSON</a></li>
<li><a href="https://zh.wikipedia.org/zh-hans/IEEE_754">IEEE 754</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQL jsonb 使用入门]]></title>
        <id>http://blog.gusibi.site/post/postgresql-json/</id>
        <link href="http://blog.gusibi.site/post/postgresql-json/">
        </link>
        <updated>2019-05-30T05:05:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="json-类型">json 类型</h2>
<h3 id="说明">说明</h3>
<p>根据<a href="https://tools.ietf.org/html/rfc7159">RFC 7159</a>中的说明，JSON 数据类型是用来存储 JSON（JavaScript Object Notation）数据的。这种数据也可以被存储为<code>text</code>，但是 JSON 数据类型的优势在于能强制要求每个被存储的值符合 JSON 规则。也有很多 JSON 相关的函数和操作符可以用于存储在这些数据类型中的数据</p>
<p>PostgreSQL支持两种 JSON 数据类型：json 和 jsonb。它们几乎接受完全相同的值集合作为输入。两者最大的区别是效率。json数据类型存储输入文本的精准拷贝，处理函数必须在每 次执行时必须重新解析该数据。而jsonb数据被存储在一种分解好的二进制格式中，因为需要做附加的转换，它在输入时要稍慢一些。但是 jsonb在处理时要快很多，因为不需要重新解析。</p>
<blockquote>
<p>重点：jsonb支持索引</p>
</blockquote>
<p>由于json类型存储的是输入文本的准确拷贝，存储时会空格和JSON 对象内部的键的顺序。如果一个值中的 JSON 对象包含同一个键超过一次，所有的键/值对都会被保留（** 处理函数会把最后的值当作有效值**）。</p>
<p>jsonb不保留空格、不保留对象键的顺序并且不保留重复的对象键。如果在输入中指定了重复的键，只有最后一个值会被保留。</p>
<blockquote>
<p>推荐把JSON 数据存储为jsonb</p>
</blockquote>
<p>在把文本 JSON 输入转换成jsonb时，JSON的基本类型（<a href="https://tools.ietf.org/html/rfc7159">RFC 7159 </a>）会被映射到原生的 PostgreSQL类型。因此，jsonb数据有一些次要额外约束。<br>
<code>比如：</code>jsonb将拒绝除 PostgreSQL numeric数据类型范围之外的数字，而json则不会。</p>
<p><strong>JSON 基本类型和相应的PostgreSQL类型</strong></p>
<table>
<thead>
<tr>
<th>JSON 基本类型</th>
<th>PostgreSQL类型</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>string</code></td>
<td><code>text</code></td>
<td>不允许<code>\u0000</code>，如果数据库编码不是 UTF8，非 ASCII Unicode 转义也是这样</td>
</tr>
<tr>
<td><code>number</code></td>
<td><code>numeric</code></td>
<td>不允许<code>NaN</code> 和 <code>infinity</code>值</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>boolean</code></td>
<td>只接受小写<code>true</code>和<code>false</code>拼写</td>
</tr>
<tr>
<td><code>null</code></td>
<td>(无)</td>
<td>SQL <code>NULL</code>是一个不同的概念</td>
</tr>
</tbody>
</table>
<h3 id="json-输入输出语法">json 输入输出语法</h3>
<pre><code class="language-sql">-- 简单标量/基本值
-- 基本值可以是数字、带引号的字符串、true、false或者null
SELECT '5'::json;

-- 有零个或者更多元素的数组（元素不需要为同一类型）
SELECT '[1, 2, &quot;foo&quot;, null]'::json;

-- 包含键值对的对象
-- 注意对象键必须总是带引号的字符串
SELECT '{&quot;bar&quot;: &quot;baz&quot;, &quot;balance&quot;: 7.77, &quot;active&quot;: false}'::json;

-- 数组和对象可以被任意嵌套
SELECT '{&quot;foo&quot;: [true, &quot;bar&quot;], &quot;tags&quot;: {&quot;a&quot;: 1, &quot;b&quot;: null}}'::json;

-- &quot;-&gt;&quot; 通过键获得 JSON 对象域 结果为json对象
select '{&quot;nickname&quot;: &quot;goodspeed&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json-&gt;'nickname' as nickname;
 nickname
-------------
 &quot;goodspeed&quot;

-- &quot;-&gt;&gt;&quot; 通过键获得 JSON 对象域 结果为text 
select '{&quot;nickname&quot;: &quot;goodspeed&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json-&gt;&gt;'nickname' as nickname;
 nickname
-----------
 goodspeed
 
-- &quot;-&gt;&quot; 通过键获得 JSON 对象域 结果为json对象
select '{&quot;nickname&quot;: &quot;goodspeed&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;'nickname' as nickname;
 nickname
-------------
 &quot;goodspeed&quot;

-- &quot;-&gt;&gt;&quot; 通过键获得 JSON 对象域 结果为text 
select '{&quot;nickname&quot;: &quot;goodspeed&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;&gt;'nickname' as nickname;
 nickname
-----------
 goodspeed
</code></pre>
<p>当一个 JSON 值被输入并且接着不做任何附加处理就输出时， json会输出和输入完全相同的文本，而jsonb 则不会保留语义上没有意义的细节</p>
<pre><code class="language-sql">SELECT '{&quot;bar&quot;: &quot;baz&quot;, &quot;balance&quot;: 7.77, &quot;active&quot;:false}'::json;
                      json                       
-------------------------------------------------
 {&quot;bar&quot;: &quot;baz&quot;, &quot;balance&quot;: 7.77, &quot;active&quot;:false}

-- jsonb 不会保留语义上的细节，key 的顺序也和原始数据不一致
SELECT '{&quot;bar&quot;: &quot;baz&quot;, &quot;balance&quot;: 7.77, &quot;active&quot;:false}'::jsonb;
                      jsonb                       
--------------------------------------------------
 {&quot;bar&quot;: &quot;baz&quot;, &quot;active&quot;: false, &quot;balance&quot;: 7.77}
</code></pre>
<h3 id="json-查询语法">json 查询语法</h3>
<blockquote>
<p>在使用JSON文档时，推荐 将JSON 文档存储为固定的结构。（该结构是非强制的，但是有一个可预测的结构会使集合的查询更容易。 ）<br>
<code>设计JSON文档建议：</code>任何更新都在整行上要求一个行级锁。为了减少锁争夺，JSON 文档应该每个表示 一个原子数据（业务规则上的不可拆分，可独立修改的数据）。</p>
</blockquote>
<blockquote>
<p><strong>这些常用的比较操作符只对jsonb 有效，而不适用于json</strong></p>
</blockquote>
<p><strong>常用的比较操作符</strong></p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>=</code></td>
<td>等于</td>
</tr>
<tr>
<td><code>&lt;&gt;</code> or <code>!=</code></td>
<td>不等于</td>
</tr>
</tbody>
</table>
<h4 id="包含和存在">包含和存在</h4>
<h5 id="json-数据查询适用于jsonb">json 数据查询（适用于jsonb）</h5>
<p><strong>json和jsonb 操作符</strong></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/PKR8RaA4jTwGLXslUgbb0BF9dM4fnKENY91UUx_BVSLZJ4wzg0s3eHuHbT6r2wgM" alt="" loading="lazy"></figure>
<h6 id="-和-操作符"><code>-&gt; 和 -&gt;&gt;</code> 操作符</h6>
<blockquote>
<p>使用 -&gt;&gt; 查出的数据为text<br>
使用 -&gt; 查出的数据为json 对象</p>
</blockquote>
<pre><code class="language-sql">-- nickname 为 gs 的用户 这里使用 -&gt;&gt; 查出的数据为text，所以匹配项也应该是text
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json-&gt;&gt;'nickname' = 'gs';
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;&gt;'nickname' = 'gs';

-- 使用 -&gt; 查询，会抛出错误，这里无论匹配项是text类型的 'gs'  还是 json 类型的 '&quot;gs&quot;'::json都会抛出异常，json 类型不支持 等号（=）操作符
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json-&gt;'nickname' = '&quot;gs&quot;';
ERROR:  operator does not exist: json = unknown
-- json 类型不支持 &quot;=&quot; 操作符
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json-&gt;'nickname' = '&quot;gs&quot;'::json;
ERROR:  operator does not exist: json = json

-- jsonb 格式是可以查询成功的，这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;'nickname' = '&quot;gs&quot;';
</code></pre>
<h6 id="和-操作符"><code>#&gt; 和 #&gt;&gt;</code> 操作符</h6>
<blockquote>
<p>使用 #&gt;&gt; 查出的数据为text<br>
使用 #&gt; 查出的数据为json 对象</p>
</blockquote>
<pre><code class="language-sql">select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json#&gt;'{tags,0}' as tag;
   tag
----------
 &quot;python&quot;

select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json#&gt;&gt;'{tags,0}' as tag;
  tag
--------
 python
 
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb#&gt;'{tags,0}' = '&quot;python&quot;';
 ?column?
----------
 t
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb#&gt;&gt;'{tags,0}' = 'python';
 ?column?
----------
 t

select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json#&gt;&gt;'{tags,0}' = 'python';
 ?column?
----------
 t
-- 会抛出错误，这里无论匹配项是text类型的 'python'  还是 json 类型的 '&quot;python&quot;'::json都会抛出异常，json 类型不支持 等号（=）操作符
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::json#&gt;'{tags,0}' = '&quot;python&quot;';
ERROR:  operator does not exist: json = unknown
</code></pre>
<h5 id="jsonb-数据查询不适用于json">jsonb 数据查询（不适用于json）</h5>
<p>** 额外的jsonb操作符**</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/-xkIrM_CZ63Hsh7QQdcQsDe35gDFNOrmSKpmZ9_UoYPawclXzGGg0cD-Ar6wQvR1" alt="" loading="lazy"></figure>
<h6 id="操作符"><code>@&gt;</code>操作符</h6>
<pre><code class="language-sql">-- nickname 为 nickname 的用户
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb @&gt; '{&quot;nickname&quot;: &quot;gs&quot;}'::jsonb;

-- 等同于以下查询
-- 这里使用 -&gt; 查出的数据为json 对象，所以匹配项也应该是json 对象
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;'nickname' = '&quot;gs&quot;';
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;&gt;'nickname' = 'gs';

-- 查询有 python 和 golang 标签的数据
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb @&gt; '{&quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;]}';
 ?column?
----------
 t
</code></pre>
<h6 id="操作符-操作符和操作符"><code>?</code>操作符、<code>?|</code>操作符和<code>?&amp;</code>操作符</h6>
<pre><code class="language-sql">-- 查询有 avatar 属性的用户
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb ? 'avatar';
-- 查询有 avatar 属性 并且avatar 数据不为空的数据
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: null, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;&gt;'avatar' is not null;

-- 查询 有 avatar 或 tags 的数据
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb ?| array['avatar', 'tags'];
 ?column?
----------
 t

-- 查询 既有 avatar 又有 tags 的用户
select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb ?&amp; array['avatar', 'tags'];
 ?column?
----------
 f
 
 -- 查询 tags 中包含 python 标签的数据
 select '{&quot;nickname&quot;: &quot;gs&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}'::jsonb-&gt;'tags' ? 'python';
 ?column?
----------
 t
</code></pre>
<h3 id="json-更新">json 更新</h3>
<pre><code class="language-sql">-- 更新 account content 字段（覆盖式更新）
update account set content = jsonb_set(content, '{}', '{&quot;nickname&quot;: &quot;gs&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;db&quot;]}', false);

-- 修改nickanme为nickanme 的用户标签
update account set content = jsonb_set(content, '{tags}', '[&quot;test&quot;, &quot;心理&quot;]', true) where content @&gt; '{&quot;nickname&quot;: &quot;nickname&quot;}'::jsonb;

update account set content = jsonb_set(content, '{tags}', '[&quot;test&quot;, &quot;心理&quot;, &quot;医疗&quot;]', true) where content @&gt; '{&quot;nickname&quot;: &quot;nickname&quot;}'::jsonb;

-- 更新account content字段中 weixin_mp 的值（如果没有会创建）

update account set content = jsonb_set(content, '{weixin_mp}', '&quot;weixin_mp5522bd28-ed4d-11e8-949c-7200014964f0&quot;', true) where id='5522bd28-ed4d-11e8-949c-7200014964f0';

-- 更新account 去除content 中weixin 字段（如果没有weixin 字段也不会抛出异常）
update account set content= content - 'weixin' where id='5522bd28-ed4d-11e8-949c-7200014964f0';
</code></pre>
<h3 id="json-函数">json 函数</h3>
<h4 id="jsonb_pretty">jsonb_pretty</h4>
<blockquote>
<p>作为缩进JSON文本返回from_json。</p>
</blockquote>
<pre><code class="language-sql">select jsonb_pretty('[{&quot;f1&quot;:1,&quot;f2&quot;:null},2,null,3]');
    jsonb_pretty
--------------------
 [                 +
     {             +
         &quot;f1&quot;: 1,  +
         &quot;f2&quot;: null+
     },            +
     2,            +
     null,         +
     3             +
 ]
(1 row)
</code></pre>
<h4 id="jsonb_set">jsonb_set</h4>
<p>jsonb_set() 函数参数如下：</p>
<pre><code class="language-c">jsonb_set(target         jsonb,  // 需要修改的数据
          path           text[], // 数据路径
          new_value      jsonb,  // 新数据
          create_missing boolean default true)
</code></pre>
<blockquote>
<p>如果create_missing 是true （缺省是true），并且path指定的路径在target 中不存在，那么target将包含path指定部分， new_value替换部分， 或者new_value添加部分。</p>
</blockquote>
<pre><code class="language-sql">-- target 结构
select jsonb_pretty('[{&quot;f1&quot;:1,&quot;f2&quot;:null},2]');
    jsonb_pretty
--------------------
 [                 +
     {             +
         &quot;f1&quot;: 1,  +
         &quot;f2&quot;: null+
     },            +
     2             +
 ]

-- 更新 target 第0 个元素 key 为 f1 的值，如果f1 不存在 忽略
select jsonb_set('[{&quot;f1&quot;:1,&quot;f2&quot;:null},2,null,3]', '{0,f1}','[2,3,4]', false);
                  jsonb_set
---------------------------------------------
 [{&quot;f1&quot;: [2, 3, 4], &quot;f2&quot;: null}, 2, null, 3]

-- 更新 target 第0 个元素 key 为 f3 的值，如果f3 不存在 创建 
select jsonb_set('[{&quot;f1&quot;:1,&quot;f2&quot;:null},2]', '{0,f3}','[2,3,4]');
                  jsonb_set
---------------------------------------------
 [{&quot;f1&quot;: 1, &quot;f2&quot;: null, &quot;f3&quot;: [2, 3, 4]}, 2]
 
 -- 更新 target 第0 个元素 key 为 f3 的值，如果f3 不存在 忽略
select jsonb_set('[{&quot;f1&quot;:1,&quot;f2&quot;:null},2]', '{0,f3}','[2,3,4]', false);
                  jsonb_set
---------------------------------------------
 [{&quot;f1&quot;: 1, &quot;f2&quot;: null}, 2]
</code></pre>
<p>详细的json 函数和操作符可以参考文档：<a href="http://www.postgres.cn/docs/9.5/functions-json.html">JSON 函数和操作符</a></p>
<h2 id="jsonb-性能分析">jsonb 性能分析</h2>
<p>我们使用下面的例子来说明一下json 的查询性能</p>
<h3 id="表结构">表结构</h3>
<pre><code class="language-sql">-- account 表 id 使用uuid 类型，需要先添加uuid-ossp模块。
CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;

-- create table
create table account (id UUID NOT NULL PRIMARY KEY default uuid_generate_v1(), content jsonb, created_at timestamptz DEFAULT CURRENT_TIMESTAMP, updated_at timestamptz DEFAULT CURRENT_TIMESTAMP);
json=&gt; \d account
                               Table &quot;public.account&quot;
    Column    |           Type           | Collation | Nullable |      Default
--------------+--------------------------+-----------+----------+--------------------
 id           | uuid                     |           | not null |uuid_generate_v1()
 content      | jsonb                    |           |          |
 created_at   | timestamp with time zone |           |          | CURRENT_TIMESTAMP
 updated_at   | timestamp with time zone |           |          | CURRENT_TIMESTAMP
Indexes:
    &quot;account_pkey&quot; PRIMARY KEY, btree (id)
</code></pre>
<blockquote>
<p>一个好的实践是把 created_at和 updated_at 也放入jsonb 字段，这里只是示例</p>
</blockquote>
<p>content 数据结构为：</p>
<pre><code class="language-json">content = {
    &quot;nickname&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;avatar&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;weixin&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;tags&quot;: {&quot;type&quot;: &quot;array&quot;, &quot;items&quot;: {&quot;type&quot;: &quot;string&quot;}},
}
</code></pre>
<h3 id="准备数据">准备数据</h3>
<p><strong>批量插入数据</strong></p>
<pre><code class="language-sql">-- 插入100w条有 nickname avatar tags 为[&quot;python&quot;, &quot;golang&quot;, &quot;c&quot;]的数据
insert into account select uuid_generate_v1(), ('{&quot;nickname&quot;: &quot;nn-' || round(random()*20000000) || '&quot;, &quot;avatar&quot;: &quot;avatar_url&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;, &quot;c&quot;]}')::jsonb from (select * from generate_series(1,100000)) as tmp;

-- 插入100w条有 nickname tags 为[&quot;python&quot;, &quot;golang&quot;]的数据
insert into account select uuid_generate_v1(), ('{&quot;nickname&quot;: &quot;nn-' || round(random()*2000000) || '&quot;, &quot;tags&quot;: [&quot;python&quot;, &quot;golang&quot;]}')::jsonb from (select * from generate_series(1,1000000)) as tmp;

-- 插入100w条有 nickname tags 为[&quot;python&quot;]的数据
insert into account select uuid_generate_v1(), ('{&quot;nickname&quot;: &quot;nn-' || round(random()*2000000) || '&quot;, &quot;tags&quot;: [&quot;python&quot;]}')::jsonb from (select * from generate_series(1,1000000)) as tmp;
</code></pre>
<h3 id="测试查询">测试查询</h3>
<ul>
<li>EXPLAIN：显示PostgreSQL计划程序为提供的语句生成的执行计划。</li>
<li>ANALYZE：收集有关数据库中表的内容的统计信息。</li>
</ul>
<pre><code class="language-sql">
--content 中有avatar key 的数据条数 count(*) 查询不是一个好的测试语句，就算是有索引，也只能起到过滤的作用，如果结果集比较大，查询速度还是会很慢
explain analyze select count(*) from account where content::jsonb ? 'avatar';
                   QUERY PLAN
----------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=29280.40..29280.41 rows=1 width=8) (actual time=170.366..170.366 rows=1 loops=1)
   -&gt;  Gather  (cost=29280.19..29280.40 rows=2 width=8) (actual time=170.119..174.451 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         -&gt;  Partial Aggregate  (cost=28280.19..28280.20 rows=1 width=8) (actual time=166.034..166.034 rows=1 loops=3)
               -&gt;  Parallel Seq Scan on account  (cost=0.00..28278.83 rows=542 width=0) (actual time=0.022..161.937 rows=33333 loops=3)
                     Filter: (content ? 'avatar'::text)
                     Rows Removed by Filter: 400000
 Planning Time: 0.048 ms
 Execution Time: 174.486 ms


-- content 中没有avatar key 的数据条数
explain analyze select count(*) from account where content::jsonb ? 'avatar' = false;
                QUERY PLAN
----------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=30631.86..30631.87 rows=1 width=8) (actual time=207.770..207.770 rows=1 loops=1)
   -&gt;  Gather  (cost=30631.65..30631.86 rows=2 width=8) (actual time=207.681..212.357 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         -&gt;  Partial Aggregate  (cost=29631.65..29631.66 rows=1 width=8) (actual time=203.565..203.565 rows=1 loops=3)
               -&gt;  Parallel Seq Scan on account  (cost=0.00..28278.83 rows=541125 width=0) (actual time=0.050..163.629 rows=400000 loops=3)
                     Filter: (NOT (content ? 'avatar'::text))
                     Rows Removed by Filter: 33333
 Planning Time: 0.050 ms
 Execution Time: 212.393 ms
</code></pre>
<pre><code class="language-sql">--查询content 中nickname 为nn-194318的数据
explain analyze select * from account where content@&gt;'{&quot;nickname&quot;: &quot;nn-194318&quot;}';
                                                         QUERY PLAN
----------------------------------------------------------------------------------------
 Gather  (cost=1000.00..29408.83 rows=1300 width=100) (actual time=0.159..206.990 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   -&gt;  Parallel Seq Scan on account  (cost=0.00..28278.83 rows=542 width=100) (actual time=130.867..198.081 rows=0 loops=3)
         Filter: (content @&gt; '{&quot;nickname&quot;: &quot;nn-194318&quot;}'::jsonb)
         Rows Removed by Filter: 433333
 Planning Time: 0.047 ms
 Execution Time: 207.007 ms
 
-- 对应的查询id 为 'b5b3ed06-7d35-11e9-b3ea-00909e9dab1d' 的数据
explain analyze select * from account where id='b5b3ed06-7d35-11e9-b3ea-00909e9dab1d';
                                                       QUERY PLAN
----------------------------------------------------------------------------------------
 Index Scan using account_pkey on account  (cost=0.43..8.45 rows=1 width=100) (actual time=0.912..0.914 rows=1 loops=1)
   Index Cond: (id = 'b5b3ed06-7d35-11e9-b3ea-00909e9dab1d'::uuid)
 Planning Time: 0.348 ms
 Execution Time: 0.931 ms
</code></pre>
<p>通过结果可以看到 使用 jsonb 查询和使用主键查询速度差异巨大，通过看查询分析记录可以看到，这两个语句最大的差别在于使用主键的查询用到了索引，而content nickname 的查询没有索引可以使用。<br>
接下来测试一下使用索引时的查询速度。</p>
<h3 id="索引">索引</h3>
<h4 id="gin-索引介绍">GIN 索引介绍</h4>
<p>JSONB 最常用的是<code>GIN</code> 索引，GIN 索引可以被用来有效地搜索在大量jsonb文档（数据）中出现 的键或者键值对。</p>
<blockquote>
<p>GIN(Generalized Inverted Index, 通用倒排索引) 是一个存储对(key, posting list)集合的索引结构，其中key是一个键值，而posting list 是一组出现过key的位置。如(‘hello', '14:2 23:4')中，表示hello在14:2和23:4这两个位置出现过，在PG中这些位置实际上就是元组的tid(行号，包括数据块ID（32bit）,以及item point(16 bit) )。</p>
<p>在表中的每一个属性，在建立索引时，都可能会被解析为多个键值，所以同一个元组的tid可能会出现在多个key的posting list中。</p>
<p>通过这种索引结构可以快速的查找到包含指定关键字的元组，因此GIN索引特别适用于多值类型的元素搜索，比如支持全文搜索，数组中元素的搜索，而PG的GIN索引模块最初也是为了支持全文搜索而开发的。</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/olurF8ptRiSWx6WsIThgzKL-QkLlIJB_qF0QTYy5fvhce4-e-ATPQ4O8byaE75IE" alt="gin 索引数据结构" loading="lazy"></figure>
<p><code>jsonb</code>的默认 GIN 操作符类支持使用顶层键存在运算符<code>?</code>、<code>?&amp;</code>以及<code>?|</code> 操作符和路径/值存在运算符<code>@&gt;</code>的查询。</p>
<pre><code class="language-sql">-- 创建默认索引
CREATE INDEX idxgin ON api USING GIN (jdoc);
</code></pre>
<p>非默认的 GIN 操作符类<code>jsonb_path_ops</code>只支持索引<code>@&gt;</code>操作符。</p>
<pre><code class="language-sql">-- 创建指定路径的索引
CREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);
-- create index  ix_account_content_nickname_gin on account using gin (content, (content-&gt;'nickname'));
-- create index  ix_account_content_tags_gin on account using gin (content, (content-&gt;'nickname'));
-- create index  ix_account_content_tags_gin on account using gin ((content-&gt;'tags'));
</code></pre>
<h4 id="多索引支持">多索引支持</h4>
<blockquote>
<p>PostgreSQL 拥有开放的索引接口，使得PG支持非常丰富的索引方法，例如btree , hash , gin , gist , sp-gist , brin , bloom , rum , zombodb , bitmap (greenplum extend)，用户可以根据不同的数据类型，以及查询的场景，选择不同的索引。</p>
</blockquote>
<h4 id="查询优化">查询优化</h4>
<p><strong>创建默认索引</strong></p>
<pre><code class="language-sql">-- 创建简单索引
create index ix_account_content on account USING GIN (content);
</code></pre>
<p>现在下面这样的查询就能使用该索引：</p>
<pre><code class="language-sql">-- content 中有avatar key 的数据条数
explain analyze select count(*) from account where content::jsonb ? 'avatar';
                                                                QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4180.49..4180.50 rows=1 width=8) (actual time=43.462..43.462 rows=1 loops=1)
   -&gt;  Bitmap Heap Scan on account  (cost=30.07..4177.24 rows=1300 width=0) (actual time=8.362..36.048 rows=100000 loops=1)
         Recheck Cond: (content ? 'avatar'::text)
         Heap Blocks: exact=2032
         -&gt;  Bitmap Index Scan on ix_account_content  (cost=0.00..29.75 rows=1300 width=0) (actual time=8.125..8.125 rows=100000 loops=1)
               Index Cond: (content ? 'avatar'::text)
 Planning Time: 0.078 ms
 Execution Time: 43.503 ms
</code></pre>
<p>和之前没有添加索引时速度提升了3倍。</p>
<pre><code class="language-sql">-- 查询content 中nickname 为nn-194318的数据
explain analyze select * from account where content@&gt;'{&quot;nickname&quot;: &quot;nn-194318&quot;}';
                                                          QUERY PLAN
----------------------------------------------------------------------------------------
 Bitmap Heap Scan on account  (cost=46.08..4193.24 rows=1300 width=100) (actual time=0.097..0.097 rows=1 loops=1)
   Recheck Cond: (content @&gt; '{&quot;nickname&quot;: &quot;nn-194318&quot;}'::jsonb)
   Heap Blocks: exact=1
   -&gt;  Bitmap Index Scan on ix_account_content  (cost=0.00..45.75 rows=1300 width=0) (actual time=0.091..0.091 rows=1 loops=1)
         Index Cond: (content @&gt; '{&quot;nickname&quot;: &quot;nn-194318&quot;}'::jsonb)
 Planning Time: 0.075 ms
 Execution Time: 0.132 ms
</code></pre>
<p>这个查询效率提升更明显，竟然比使用主键还要高效。</p>
<p><strong>但是下面这种查询并不能使用索引</strong>：</p>
<pre><code class="language-sql">-- 查询content 中不存在 avatar key 的数据条数
explain analyze select count(*) from account where content::jsonb ? 'avatar' = false;
                                                                 QUERY PLAN
----------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=30631.86..30631.87 rows=1 width=8) (actual time=207.641..207.641 rows=1 loops=1)
   -&gt;  Gather  (cost=30631.65..30631.86 rows=2 width=8) (actual time=207.510..211.062 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         -&gt;  Partial Aggregate  (cost=29631.65..29631.66 rows=1 width=8) (actual time=203.739..203.739 rows=1 loops=3)
               -&gt;  Parallel Seq Scan on account  (cost=0.00..28278.83 rows=541125 width=0) (actual time=0.024..163.444 rows=400000 loops=3)
                     Filter: (NOT (content ? 'avatar'::text))
                     Rows Removed by Filter: 33333
 Planning Time: 0.068 ms
 Execution Time: 211.097 ms
</code></pre>
<p>该索引也不能被用于下面这样的查询，因为尽管操作符<code>?</code> 是可索引的，但它不能直接被应用于被索引列content：</p>
<pre><code class="language-sql">explain analyze select count(1) from account where content -&gt; 'tags' ? 'c';
                                                               QUERY PLAN
----------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=30634.57..30634.58 rows=1 width=8) (actual time=184.864..184.864 rows=1 loops=1)
   -&gt;  Gather  (cost=30634.35..30634.56 rows=2 width=8) (actual time=184.754..189.652 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         -&gt;  Partial Aggregate  (cost=29634.35..29634.36 rows=1 width=8) (actual time=180.755..180.755 rows=1 loops=3)
               -&gt;  Parallel Seq Scan on account  (cost=0.00..29633.00 rows=542 width=0) (actual time=0.022..177.051 rows=33333 loops=3)
                     Filter: ((content -&gt; 'tags'::text) ? 'c'::text)
                     Rows Removed by Filter: 400000
 Planning Time: 0.074 ms
 Execution Time: 189.716 ms
</code></pre>
<p><strong>使用表达式索引</strong></p>
<pre><code class="language-sql">-- 创建路径索引
create index ix_account_content_tags on account USING GIN ((content-&gt;'tags'));
</code></pre>
<pre><code class="language-sql">-- 测试查询性能
explain analyze select count(1) from account where content -&gt; 'tags' ? 'c';
                                                                   QUERY PLAN
----------------------------------------------------------------------------------------
 Aggregate  (cost=4631.74..4631.75 rows=1 width=8) (actual time=49.274..49.275 rows=1 loops=1)
   -&gt;  Bitmap Heap Scan on account  (cost=478.07..4628.49 rows=1300 width=0) (actual time=8.655..42.074 rows=100000 loops=1)
         Recheck Cond: ((content -&gt; 'tags'::text) ? 'c'::text)
         Heap Blocks: exact=2032
         -&gt;  Bitmap Index Scan on ix_account_content_tags  (cost=0.00..477.75 rows=1300 width=0) (actual time=8.417..8.417 rows=100000 loops=1)
               Index Cond: ((content -&gt; 'tags'::text) ? 'c'::text)
 Planning Time: 0.216 ms
 Execution Time: 49.309 ms
</code></pre>
<p>现在，WHERE 子句<code>content -&gt; 'tags' ? 'c'</code> 将被识别为可索引操作符?在索引表达式<code>content -&gt; 'tags'</code> 上的应用。</p>
<p>也可以利用包含查询的方式，例如：</p>
<pre><code class="language-sql">-- 查寻 &quot;tags&quot; 包含数组元素 &quot;c&quot; 的数据的个数
select count(1) from account where content @&gt; '{&quot;tags&quot;: [&quot;c&quot;]}';
</code></pre>
<p>content 列上的简单 GIN 索引（默认索引）就能支持索引查询。 但是索引将会<strong>存储content列中每一个键 和值的拷贝</strong>，<br>
<strong>表达式索引</strong>只存储tags 键下找到的数据。</p>
<blockquote>
<p>虽然简单索引的方法更加灵活（因为它支持有关任意键的查询），但定向的表达式索引更小并且搜索速度比简单索引更快。<br>
尽管jsonb_path_ops操作符类只支持用 @&gt;操作符的查询，但它比起默认的操作符类 jsonb_ops有更客观的性能优势。一个 jsonb_path_ops索引通常也比一个相同数据上的 jsonb_ops要小得多，并且搜索的专一性更好，特 别是当查询包含频繁出现在该数据中的键时。因此，其上的搜索操作 通常比使用默认操作符类的搜索表现更好。</p>
</blockquote>
<h2 id="总结">总结</h2>
<ul>
<li>PG 有两种 JSON 数据类型：<code>json</code> 和 <code>jsonb</code>，jsonb 性能优于json，且jsonb 支持索引。</li>
<li>jsonb 写入时会处理写入数据，写入相对较慢，json会保留原始数据（包括无用的空格）</li>
<li>jsonb 查询优化时一个好的方式是添加GIN 索引
<ul>
<li>简单索引和路径索引相比更灵活，但是占用空间多</li>
<li>路径索引比简单索引更高效，占用空间更小</li>
</ul>
</li>
</ul>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7159">RFC 7159 The JavaScript Object Notation (JSON) Data Interchange Format</a></li>
<li><a href="http://www.postgres.cn/docs/10/datatype-json.html">PostgreSQL 文档： JSON 类型</a></li>
<li><a href="http://www.postgres.cn/docs/9.5/functions-json.html">JSON 函数和操作符</a></li>
<li><a href="https://stackoverflow.com/questions/18209625/how-do-i-modify-fields-inside-the-new-postgresql-json-datatype">How do I modify fields inside the new PostgreSQL JSON datatype?</a></li>
<li><a href="https://yq.aliyun.com/articles/111793">PostgreSQL 9种索引的原理和应用场景</a></li>
<li><a href="https://github.com/digoal/blog/blob/master/201702/20170204_01.md">PostgreSQL GIN索引实现原理</a></li>
<li><a href="https://bitnine.net/blog-postgresql/postgresql-internals-jsonb-type-and-its-indexes/">PostgreSQL internals: JSONB type and its indexes</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95">倒排索引</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建高质量的代码--软件构建中的设计]]></title>
        <id>http://blog.gusibi.site/post/Design-in-software-construction/</id>
        <link href="http://blog.gusibi.site/post/Design-in-software-construction/">
        </link>
        <updated>2019-05-29T05:05:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>《代码大全》读书笔记</p>
</blockquote>
<blockquote>
<p>太长不看版<br>
<img src="http://media.gusibi.mobi/2nqKmJp5tMClypa0WqnJXl8sI9Tv4hwo3Zs6oEp4U4nwV9dV1XWqmFjvQNxRrggg" alt="" loading="lazy"></p>
</blockquote>
<h2 id="软件构建中的设计">软件构建中的设计</h2>
<blockquote>
<p>软件设计是一项明确的活动</p>
</blockquote>
<h3 id="设计中的挑战">设计中的挑战</h3>
<blockquote>
<p><code>软件设计</code>一词意味着去构思、创造或发明一套方案，把一份计算机软件的规格说明书要求转变为可实际运行的软件。<br>
设计就是把需求分析和编码调试连接在一起的活动。<br>
好的高层词设计能够提供一个可以稳妥容纳多个较低层次设计的结构。</p>
</blockquote>
<h4 id="设计是一个险恶的问题">设计是一个险恶的问题</h4>
<blockquote>
<p>险恶（wicked）的问题就是那种只有通过解决或部分解决才能被明确的问题。</p>
</blockquote>
<p>Tacoma Narrows 大桥是一个险恶问题的好例子，因为直到这座桥坍塌，工程师才知道不应该只考虑桥的负荷，还需要充分的考虑空气动力学因素（只有建造大桥，才能从中学到需要考虑额外的环节）。</p>
<h4 id="设计是一个了无章法的过程即使它能得处清爽的成果">设计是一个了无章法的过程（即使它能得处清爽的成果）</h4>
<ul>
<li>是因为在设计的过程中可能会采用很多错误的步骤，多次出错</li>
<li>因为设计的优劣差异往往非常微妙</li>
<li>因为不能判断设计是否足够好</li>
</ul>
<h4 id="设计就是确定取舍和调整顺序的过程">设计就是确定取舍和调整顺序的过程</h4>
<p>现实世界中，设计者工作的一个关键内容就是衡量彼此冲突的各项设计特性，并尽力在其中寻求平衡。响应速度优先和开发时间短优先得出的设计结果可能是不同的。</p>
<h4 id="设计受到诸多限制">设计受到诸多限制</h4>
<p>设计的要点一部分是在创造可能发生的事情，另一部分是在限制可能发生的事情。</p>
<blockquote>
<p>如果一个人有无限空间和资源来建造房子，可能会建造出无法控制的建筑。正是因为有了限制，才得出了简单的结果。软件设计也是一样。</p>
</blockquote>
<h4 id="设计是不确定的">设计是不确定的</h4>
<p>每个人设计的结果可能是不同的，并且可能用起来都不错。设计没有标准答案。</p>
<h4 id="设计是一个启发式的过程">设计是一个启发式的过程</h4>
<p>设计过程中充满了不确定性，因此设计技术也趋于具有探索性--“经验法则”或者“试试没准能行”--而不是保证能产生预期结果的可重复的过程。</p>
<h4 id="设计是自然而然形成的">设计是自然而然形成的</h4>
<p>设计不是在谁的头脑中直接跳出来的，它是在不断的设计评估、非正式讨论、写试经验以及修改试验代码中演化和完善的。</p>
<h3 id="关键的设计概念">关键的设计概念</h3>
<h4 id="软件的首要技术使命管理复杂度">软件的首要技术使命：管理复杂度</h4>
<h5 id="本质的难题和偶然的难题">本质的难题和偶然的难题</h5>
<p>偶然的难题可以理解为bug，编程语言笨拙的语法，等易于发现容易解决的问题。<br>
本质的难题则比较复杂，本质上说，软件开发就是不断去发掘错综复杂，相互关连的整套概念的所有细节。本质困难就是：</p>
<ol>
<li>要面对复杂、无序的现实世界；</li>
<li>精确而完成的识别出各种依赖关系和外部情况</li>
<li>设计出完全正确而不是大致正确的解决方案<br>
。。。</li>
</ol>
<h5 id="管理复杂度的重要性">管理复杂度的重要性</h5>
<p>一个失败的项目如果是由于技术原因而失败，通常都是因为软件复杂度失控了。如果复杂度失控，那么软件就会变得极端复杂，没有人知道它能做什么，它出了问题如何解决。</p>
<p><strong>管理复杂度是软件开发中最为重要的技术话题。</strong></p>
<p>在软件架构层次上，可以通过把大的系统分解为多个子系统来降低问题的复杂度，多个简单的问题比一个复杂的大问题更容易理解。</p>
<p>子系统相互间应该减少依赖；<br>
子系统的关注点应该是相互分离的。</p>
<h5 id="如何应对复杂度">如何应对复杂度</h5>
<p><strong>高代价、低效率的设计源于下面三种根源：</strong></p>
<ol>
<li>用复杂的方法解决简单的问题</li>
<li>用简单但错误的方法解决复杂的问题</li>
<li>用不恰当的复杂的方法解决复杂的问题</li>
</ol>
<p><strong>用下面的方法管理复杂度</strong></p>
<ul>
<li>把任何人在同一时间需要处理的本质复杂度降到最低</li>
<li>不要让偶然性的复杂度无谓的增长</li>
</ul>
<h4 id="理想的设计特征">理想的设计特征</h4>
<ul>
<li>
<p>最小的复杂度</p>
</li>
<li>
<p>易于维护</p>
</li>
<li>
<p>松散耦合</p>
</li>
<li>
<p>可扩展性</p>
</li>
<li>
<p>可重用性</p>
</li>
<li>
<p>高扇入：让大量的类使用某个给定的类。（意味着设计出的系统很好的利用了在较低层次上的工具类</p>
</li>
<li>
<p>低扇出：让一个类少量或始终的使用其他类。（高扇出（7个）意味着一个类过多的使用了其他类，可能会变得过于复杂</p>
</li>
<li>
<p>可移植性</p>
</li>
<li>
<p>精简性：没有多余的部分</p>
</li>
<li>
<p>层次性：比如一个新系统会用到很多设计不佳的旧系统，这时就应该为新系统编写一个负责同就代码交互的层（代理模式）</p>
<ul>
<li>层次性能把低劣的代码紧闭起来</li>
<li>如果能最终抛弃或重构旧代码，旧不必修改处交互层之外的任何新代码。</li>
</ul>
</li>
<li>
<p>标准技术：用到的外来的、古怪的东西越多，也越难理解。</p>
</li>
</ul>
<h4 id="设计的层次">设计的层次</h4>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/f_5cYtiP6KGYRSvnhNwgU0Oij5su1slnjVMk40DsRdmSvUJBJRdIhccBmgyWa5yW" alt="设计的层次" loading="lazy"></figure>
<h5 id="1-软件系统software-system">1. 软件系统（Software System）</h5>
<h5 id="2-分解为子系统或包division-into-subsystems-or-packages">2. 分解为子系统或包（Division into Subsystems or Packages）</h5>
<p>这一层的主要目的是确定如何把程序分为主要的子系统，并定义清楚允许各子系统如何使用其他子系统。</p>
<blockquote>
<p>对于任何需要几周时间才能完成的项目，在这一层上进行划分都是必须的。</p>
</blockquote>
<p>这里有个特别重要的点，即不同子系统之间相互通信的原则。如果不同子系统间都可以相互通信，就失去了拆分子系统的意义。</p>
<ul>
<li>如果拿不准改如何设计，就应该先对子系统之间的通信加以限制，等以后需要时再放开。</li>
<li>有一个很好的基本原则是，程序之间不应该有环形关系，比如A类调用B类，B类调用C类，C类又调用A类这种情况，系统设计也应遵守这个原则</li>
</ul>
<h6 id="一些常用的子系统">一些常用的子系统</h6>
<ul>
<li>业务规则：这个是指哪些再计算机系统中编入的规则、策略以及过程。比如开发一个薪资系统，可能就需要把税务局关于允许提扣的金额以及估算的税率编写到系统中。</li>
<li>用户界面：这应该是一个子系统，把用户界面组件同其它组件隔离开。</li>
<li>数据库访问：需要把数据库的访问细节隐藏起来，让程序的绝大部份不需要关心底层实现细节。</li>
<li>对系统的依赖性：把对操作系统的依赖因素归类到一个子系统，就如同把对硬件的依赖因素封装起来一样。
<ul>
<li>这里的操作系统也可以是外部系统，比如微信小程序开发中对微信的依赖。</li>
</ul>
</li>
</ul>
<h5 id="3-分解为类division-into-classes">3. 分解为类（Division into Classes）</h5>
<p>这一层次上的设计包括识别出系统中所有的类。例如：数据库接口子系统可能会分为数据库访问类、持久化框架类以及数据库元数据类。</p>
<p><strong>类与对象的比较</strong></p>
<ol>
<li>对象是指运行期间在程序中实际存在的具体实体</li>
<li>类是指在程序源码中存在的静态事物</li>
</ol>
<h5 id="4-分解为子程序division-into-routines">4. 分解为子程序（Division into Routines）</h5>
<p>完整的定义出类内部的子程序，常常会有助于更好的理解类的接口，反过来也有助于对类的接口进行进一步的修改。</p>
<blockquote>
<p>这一层的分解和设计通常由程序员个人来完成，对于用时超过几个小时的项目就有做的必要了。</p>
</blockquote>
<h5 id="5-子程序内部的设计internal-routine-design">5. 子程序内部的设计（Internal Routine Design）</h5>
<h3 id="设计构造块启发式方法">设计构造块：启发式方法</h3>
<blockquote>
<p>由于软件设计是非确定性的，因此灵活熟练的运用一组有效的启发式方法，就成了一件特别重要的工作</p>
</blockquote>
<h4 id="找出现实世界中的对象">找出现实世界中的对象</h4>
<p>在确定设计方案时，首选且最流行的一种做法便是“常规的”面向对象设计方法，此方法的要点是要鞭尸现实世界中的对象以及人造的对象。具体步骤为：</p>
<ol>
<li>便是对象及其属性</li>
<li>确定可以对各个对象进行的操作</li>
<li>确定各个对象能对其他对象进行的操作</li>
<li>确定对象的哪些部分对其他对象可见--哪些部分可以是公用的，哪些部分应该是私用的。</li>
<li>定义每个对象的公开接口</li>
</ol>
<p>经过上述步骤得到一个高层次的、面向对象的系统组织结构之后，你可以用这两种方式来迭代；在高层次的系统组织结构上进行迭代，以便更好的组织类的结构；或者在每一个已经定义好的类上进行迭代，把每个类的设计细化。</p>
<h4 id="形成一致的抽象">形成一致的抽象</h4>
<p>抽象是一个能让你在关注某一概念的同时可以放心的忽略其中一些细节的能力---在不同的层次上处理不同的细节。</p>
<blockquote>
<p>以复杂度的观点看，抽象的主要好处就在于它使你能忽略相关的细节。</p>
</blockquote>
<p>好的设计会在子程序接口的层次上、在类接口的层次上以及包接口的层次上（在门把手上、门的层次上以及房屋的层次上）进行抽象。</p>
<h4 id="封装实现细节">封装实现细节</h4>
<p>抽象是说“让你从高层的细节来看待一个对象”，而封装则说：“初次之外，你不能看到对象的任何其他细节层次”。</p>
<blockquote>
<p>封装管理复杂度的方式是不让你看到那些复杂度。</p>
</blockquote>
<h4 id="当继承能简化设计时就继承">当继承能简化设计时就继承</h4>
<p>继承能简化编程工作</p>
<h4 id="隐藏秘密信息隐藏">隐藏秘密（信息隐藏）</h4>
<p>信息隐藏是结构化程序设计与面向对象设计的基础之一。</p>
<h5 id="秘密和隐私权">秘密和隐私权</h5>
<p>在设计一个类的时候，一项关键性的决策就是确定类的那些特性应该对外可见，哪些应该被隐藏起来。<br>
类的接口应该尽可能少的暴露其内部工作机制。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/EI-c5Qdo2Wr453L_jakhC222GtL7R7PUYSpzq4EceNkSBtXhzTyIQ039yQHmBY8J" alt="好的类接口就像是冰山的尖一样，让大部分内容都不暴露出来" loading="lazy"></figure>
<h5 id="信息隐藏的一个例子">信息隐藏的一个例子</h5>
<p>比如有一个程序，没个对象都有一个名为id的成员变量来保存唯一的ID。</p>
<ol>
<li>一种设计方法是用一个整数来表示ID，同时有一个名为 max_id 的全局变量来保存当前的最大值，新的id 使用 ++max_id 来生成。这种设计是不合适的设计
<ul>
<li>不是线程安全</li>
<li>++max_id 可能遍布代码的各个位置，修改id 的生成规则需要改动太大</li>
</ul>
</li>
<li>一个好的设计方式是，使用一个NewId() 方法来生成id，具体的实现逻辑在 NewId() 方法中，id 的类型也使用自定义的 IdType 类型，而不是指定 int 类型。</li>
</ol>
<h5 id="两种秘密">两种秘密</h5>
<p>信息隐藏中所说的秘密主要分为两大类：</p>
<ul>
<li>隐藏复杂度，这样你就不用再去应付它，除非你要特别关注的时候</li>
<li>隐藏变化源，这样当变化发生时，其影响就能被限制在局部范围内。</li>
</ul>
<h5 id="信息隐藏的障碍">信息隐藏的障碍</h5>
<p>少数情况下，信息隐藏会变的不可能，通常这种情况是由以下障碍造成的：</p>
<ul>
<li>信息过度分散 比如一个变量 数字<code>42</code>被写入了代码中（写死了），这样就会造成对它的引用过于分散。最好是把这个信息隐藏起来，比如写入常量中：THE_ANSWER = 42，代码中使用的时候引用 THE_ANSWER 这个常量就可以了。</li>
<li>循环依赖：比如 A 类的子程序引用了B 类中的子程序，而B类中的子程序又引用了A 类中的子程序。这样会造成难以测试，需要保证两个类都正常才可以。</li>
<li>类内数据设置成了全局数据：使用全局数据通常会遇到两个问题：一种是子程序执行时可能有另一个子程序也对它进行了操作，另一种是子程序知道有其他子程序在使用但不知道具体是哪个。这时应该使用只有少数子类可访问的类内数据。</li>
<li>可以察觉的性能损耗：有的开发者为了减少调用关系试图在系统架构层和编码层进行优化。认为额外的层次调用会影响性能（事实上这种担心可能太早了，等以后遇到问题再优化是更好的选择）。</li>
</ul>
<h5 id="信息隐藏的价值">信息隐藏的价值</h5>
<blockquote>
<p>信息隐藏是少数几个得到公认的、在实践中证明了其自身价值的理论技术、并且已经有很长一段时间了（Boehm 1987a）。</p>
</blockquote>
<ol>
<li>大型项目修改起来更容易</li>
<li>有助于公开接口的设计（使开发者更容易理解什么样的数据应该隐藏、什么样的数据应该公开</li>
</ol>
<h4 id="找出容易改变的区域">找出容易改变的区域</h4>
<blockquote>
<p>对优秀的设计师的一份研究表明，他们所共有的一项特质就是都有对变化的预期能力（Glass 1995）<br>
看起来非常可信</p>
</blockquote>
<p>以下是应对变动的措施：</p>
<ol>
<li>找出看起来容易变化的项目</li>
<li>把容易变化的项目分离出来</li>
<li>把看起来容易变化的项目隔离出来。</li>
</ol>
<p>以下是容易变化的区域：</p>
<ol>
<li>业务规则</li>
<li>对硬件的依赖性：屏幕，打印机、键盘、鼠标等设备之间的接口</li>
<li>输入和输出</li>
<li>非标准的语言特性</li>
<li>困难的设计区域和构建区域</li>
<li>状态变量：可以在使用状态变量是增加至少两层的灵活性和可读性</li>
</ol>
<ul>
<li>不要使用布尔变量作为状态变量</li>
<li>使用防蚊器子程序取代对状态变量的直接检查</li>
</ul>
<ol start="7">
<li>数据量的限制：当你定义了一个具有100个元素数据的时候，实际上也向外界透露了一些不必要的信息。用全局变量代替100 是一个好的选择。</li>
</ol>
<p><strong>预料不同程度的变化</strong></p>
<p>当考虑系统的潜在变化时，你认为越有可能发生变化的区域，越要做好应对变化的准备。<br>
找出容易变化的区域的一个好的办法是：受限找出程序中可能对用户有用的最小子集。这一子集构成了系统的核心，不容易变化，然后扩充系统。</p>
<blockquote>
<p><code>通过首先定义清楚核心，来认清哪些组件是附属功能，这时就容易把它们提取出来，并且这些内容也容易改进优化。</code></p>
</blockquote>
<h4 id="保持松散耦合">保持松散耦合</h4>
<p>模块之间好的耦合关系会松散到恰好能使一个模块能够很容易地被其他模块使用。</p>
<blockquote>
<p>请尽量使你创建的模块不依赖或者很少依赖其他模块。<br>
如果模块是微服务中的一个服务，那么一个好的耦合关系是一个服务可以在其它服务挂掉的情况下可以正常提供基础服务。</p>
</blockquote>
<h5 id="耦合标准">耦合标准</h5>
<ul>
<li>规模：这里的规模指的是模块之间的连接数。对于耦合度来说，小就是美。</li>
<li>可见性：可见性指的是两个模块之间的连接显著程度。通过参数传递数据是一种明显的连接，值得提倡，而通过修改全局数据而使另一模块能够使用该数据则是一种 鬼鬼祟祟的做法，不值得提倡。</li>
<li>灵活性：灵活性指的是模块之间的连接是否容易改动。模块越灵活，越容易被其它模块调用（耦合越松散）越好。</li>
</ul>
<h5 id="耦合的种类">耦合的种类</h5>
<ul>
<li>简单数据参数耦合，两个模块之间通过参数传递数据，这种耦合关系正常，可以接受</li>
<li>简单对象耦合，如果一个模块实例化一个对象，那么它们之间的耦合关系就是简单对象耦合。这种耦合关系也能接受</li>
<li>对象耦合 如果object1 要求object2传递给他一个object3，那么这两个模块就是对象参数耦合。这种耦合更紧密，因为它要求object1 了解object3。</li>
<li>语义耦合，如果一个模块不仅使用了另一模块的语法元素，而且还是用了那个模块内部工作细节的语义知识。这种耦合就非常危险，因为更改被调用模块，会影响调用者。</li>
</ul>
<h4 id="查阅常用的设计模式">查阅常用的设计模式</h4>
<p>设计模式其实是一些现成精炼的解决方案，可用于解决很多软件开发中常见的问题。</p>
<p>设计模式提供了如下好处：</p>
<ol>
<li>设计模式通过提供现成的抽象来减少复杂度</li>
<li>设计模式通过把常见解决方案的细节予以制度化来减少出错</li>
<li>设计模式通过提供多种设计方案儿带来启发性的价值。</li>
<li>设计模式通过把设计对话提升到一个更高的层次上来简化交流。比如你和其它开发者讨论问题时说：我用来Factory Method。其实已经传递了很多有效信息。</li>
</ol>
<p>常见的设计模式请参考百科介绍：<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549">设计模式 （设计模式概念）</a></p>
<p><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzAwNjI5MjAzNw==&amp;hid=2&amp;sn=c32f7371e7df2e2282e2bdba080aa9c2">常用设计模式Python实现</a></p>
<h4 id="其它的启发式方法">其它的启发式方法</h4>
<ul>
<li>高内聚性</li>
<li>构造分层结构</li>
<li>严格描述类契约
<ul>
<li>把没个类的接口看作是与程序的其余部分之间的一项契约会更有助于更好的洞察程序。这种契约类似于“如果你承诺提供数据x、y 和 z，并且答应让这些数据具有特征 a、b 和 c，我就承诺基于约束8、9和10来执行操作1、2和3</li>
</ul>
</li>
<li>分配职责</li>
<li>为测试而设计
<ul>
<li>如果为了便于测试儿设计这个系统，那么这个系统会是什么样子？</li>
</ul>
</li>
<li>避免失误</li>
<li>有意识的绑定时间
<ul>
<li>绑定时间是指的是吧特定的值绑定到某一变量的时间。早绑定会比较简单但不灵活</li>
</ul>
</li>
<li>创建中央控制点
<ul>
<li>唯一一个正确位置的原则：为了找到某个事物，需要查找的地方越少，该起来就越容易越简单</li>
</ul>
</li>
<li>考虑使用蛮力突破
<ul>
<li>一个可行的蛮力解决方案要好于一个优雅但不能用的解决方案</li>
</ul>
</li>
<li>画一个图
<ul>
<li>一幅图顶的上一千句话--鲁迅说的。</li>
</ul>
</li>
<li>保持设计的模块化</li>
</ul>
<h4 id="使用启发方式的原则">使用启发方式的原则</h4>
<ol>
<li>理解问题</li>
<li>设计一个计划。找出现有数据和未知量之间的联系。</li>
<li>执行这一计划</li>
<li>回顾。检视整个解决方案。</li>
</ol>
<h3 id="设计实践">设计实践</h3>
<h4 id="迭代iterate">迭代（Iterate）</h4>
<p>设计是个迭代的过程，并非只是从A点到B点，也可以从A点到B点，再从B点到A点。在设计方案中尝试不同的做法时，会同时从不同层次取审视问题。更有助于找出相关细节。</p>
<blockquote>
<p>当你首次尝试得出一个看上去足够好的设计方案后，不要停下来，第二次尝试肯定会好于第一个。</p>
</blockquote>
<h4 id="分而治之divide-and-conquer">分而治之（Divide and Conquer）</h4>
<p>没有人的头脑能大到装下一个复杂程序的全部细节-- Edsger Dijkstra</p>
<h4 id="自上而下和自下而上的设计方法">自上而下和自下而上的设计方法</h4>
<p>自上而下和自下而上策略最关键的区别在于，前者是一种分解（decomposition）策略而后者是一种合成（composition）策略。</p>
<ul>
<li>自上而下的设计很简单，因为人们善于把一些大的事物分解成小的组件。</li>
<li>自上而下另一个强项是可以推迟构建的细节</li>
<li>自下而上的一个优点是通常能够焦躁的找出所需的功能，从而带来紧凑合理的设计</li>
<li>自下而上的一个缺点是很难完全独立的使用它。大多数人擅长把大的概念分解成小概念，而不擅长从小概念中得出大的概念。</li>
<li>自下而上设计的另一个缺点是，有时候会发现自己无法使用手头已有的零件来构建整个系统。</li>
<li>自上而下和自下而上设计并不互斥，两者可以协作。</li>
</ul>
<blockquote>
<p>设计是一个启发式的过程，没有任何方案能保证万无一失，需要在设计的过程中需要不停的迭代，改进。需要多尝试来找出最佳方案。</p>
</blockquote>
<h4 id="建立试验性原型">建立试验性原型</h4>
<p>有些时候，判断一种设计是否合适，只有用过才能知道。创建一个试验性原型（写出用于回答特定设计问题、量最少且能够随时扔掉的代码），来验证设计的可行性，通常可以找出设计中遇到的问题以及需要改进的方向。</p>
<h4 id="合作设计">合作设计</h4>
<p>三个臭皮匠，顶个诸葛亮。</p>
<ol>
<li>随便找个同事，向他征求意见</li>
<li>坐在会议室，在白板上画出可选设计方案</li>
<li>结对编程</li>
<li>和多名同事一起过设计想法</li>
</ol>
<h4 id="要做多少设计才够">要做多少设计才够</h4>
<p>对于正式编码前的设计工作量和设计文档的正规程度，很难有个准确的定论。下图总结了设计文档的正规化以及所需的设计层次：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/hFeM_4EYd9btf0y09WRKh6M57Hqc6VNLnpUC8vVUOo28T1cqTy-pMNAvigkzT6HL" alt="设计的层次" loading="lazy"></figure>
<blockquote>
<p>如果在编码前判断不了应该做多深入的设计，那么详细的设计是一个好的选择。</p>
</blockquote>
<h4 id="记录设计成果">记录设计成果</h4>
<ul>
<li>把设计文档加入到代码中
<ul>
<li>合适的注释非常关键，特别是某些特定的设计决策</li>
</ul>
</li>
<li>用Wiki 来记录设计讨论和决策</li>
<li>写总结邮件</li>
<li>保留设计图</li>
</ul>
<h3 id="总结">总结</h3>
<ul>
<li>软件的首要技术使命就是管理复杂度。以简单性为努力目标的设计方案对此最有帮助</li>
<li>简单性可以通过两种方式来获取：轶事减少在同一时间所关注的本质性复杂度的量，二是避免生成不必要的偶然的复杂度</li>
<li>设计是一个启发式的过程。固执于某一种单一方法会损害创新能力，从而损害程序</li>
<li>好的设计都是迭代的，尝试的越多，最终方案会越好</li>
<li>信息隐藏是一个非常有价值的概念。通过询问“我应该隐藏什么？&quot;能够解决很多设计问题</li>
</ul>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzAwNjI5MjAzNw==&amp;hid=2&amp;sn=c32f7371e7df2e2282e2bdba080aa9c2">常用设计模式Python实现</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并发模型：线程与锁]]></title>
        <id>http://blog.gusibi.site/post/concurrency-models-thread-and-lock/</id>
        <link href="http://blog.gusibi.site/post/concurrency-models-thread-and-lock/">
        </link>
        <updated>2019-05-19T04:29:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="并发并行">并发&amp;并行</h2>
<p>并发程序含有多个逻辑上的独立执行块，他们可以独立的并行执行，也可以串行执行。<br>
并行程序解决问题的速度比串行程序快的多，因为其可以同时执行整个任务的多个部分。并行程序可能有多个独立执行块，也可能只有一个。</p>
<blockquote>
<p>引用Rob Pike的经典描述就是：<br>
并发是同一时间应对多件事情的能力；<br>
并行是同一时间动手做多件事情的能力。</p>
</blockquote>
<p>常见的并发模型有：</p>
<ol>
<li>线程与锁</li>
<li>函数式编程</li>
<li>actor模型和通信顺序是进行（Communicating Sequential Processes, CSP）</li>
<li>数据级并行</li>
<li>lambda 架构</li>
<li>分离标识与状态模型</li>
</ol>
<p>这篇主要介绍线程与锁模型</p>
<h2 id="线程与锁模型">线程与锁模型</h2>
<p>线程与锁模型是对底层硬件运行过程的形式化，非常简单直接，几乎所有的编程语言都对其提供了支持，且不对其使用方法加以限制（易出错）。</p>
<blockquote>
<p>这篇文章主要使用python语言来演示线程与锁模型。文章结构来自《七周七并发模型》</p>
</blockquote>
<h2 id="互斥和内存模型">互斥和内存模型</h2>
<h3 id="创建线程">创建线程</h3>
<pre><code class="language-python">from threading import Thread

def hello_world():
    print(&quot;Hello from new thread&quot;)

def main():
    my_thread = Thread(target=hello_world)
    my_thread.start()
    print(&quot;Hello from main thread&quot;)
    my_thread.join()

main()

</code></pre>
<p>这段代码创建并启动了一个<code>Thread</code>实例，首先从<code>start()</code> 开始，<code>my_thread.start() main()</code>函数的余下部分一起并发执行。最后调用<code>join()</code> 来等待<code>my_thread</code>线程结束。</p>
<p>运行这段代码输出结果有几种：</p>
<pre><code>Hello from new thread
Hello from main thread
</code></pre>
<p>或者</p>
<pre><code>Hello from main thread
Hello from new thread
</code></pre>
<p>或者</p>
<pre><code>Hello from new threadHello from main thread
</code></pre>
<p>究竟哪个结果取决于哪个线程先执行<code>print()</code>。多线程编程很难的原因之一就是运行结果可能依赖于时序，多次运行结果并不稳定。</p>
<h3 id="第一把锁">第一把锁</h3>
<pre><code class="language-python">
from threading import Thread, Lock


class Counter(object):
    def __init__(self, count=0):
        self.count = count

    def increment(self):
        self.count += 1

    def get_count(self):
        print(&quot;Count: %s&quot; % self.count)
        return self.count


def test_count():
    counter = Counter()

    class CounterThread(Thread):
        def run(self):
            for i in range(10000):
                counter.increment()

    t1 = CounterThread()
    t2 = CounterThread()
    t1.start()
    t2.start()
    t1.join()
    t2.join()

    counter.get_count()

test_count()
</code></pre>
<p>这段代码创建一个简单的类Counter 和两个线程，每个线程都调用counter.increment() 10000次。</p>
<p>多次运行这段代码会得到不同的值，原因是两个线程在使用 counter.count 时发生了<code>竞态条件</code>（代码行为取决于各操作的时序）。</p>
<p>一个可能的操作是：</p>
<ol>
<li>线程t1 获取count的值时，线程t2也同时获取到了count 的值（假设是100），</li>
<li>这时t1  count + 1， 此时count 为101，回写count 值，然后t2 执行了相同的操作 count+1，因为t2 取到的值也是100 此时 count 仍是101，回写后count 依然是101，但是 +1 操作执行了两次。</li>
</ol>
<p>竞态条件的解决方法是对 count 进行同步（synchronize）访问。一种操作是使用 <code>内置锁</code>(也称互斥锁（mutex）、管程（monitor）或临界区（critical section）)来同步对increment() 的调用。</p>
<blockquote>
<p>线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。互斥锁为资源引入一个状态：锁定/非锁定。某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；<br>
直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p>
</blockquote>
<blockquote>
<p>当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“同步阻塞”。<br>
直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。</p>
</blockquote>
<p>python 锁的使用流程如下：</p>
<pre><code class="language-python">#创建锁
mutex = threading.Lock()
#锁定
mutex.acquire([timeout])
#释放
mutex.release()
</code></pre>
<p>推荐使用上下文管理器来操作锁，</p>
<pre><code class="language-python">with lock:
    do someting

# 相当于

lock.acquire()

try:
    # do something...
finally:
    lock.release()
</code></pre>
<blockquote>
<p>acquire(blocking=True, timeout=-1)<br>
可以阻塞或非阻塞地获得锁。<br>
当调用时参数 blocking 设置为 True （缺省值），阻塞直到锁被释放，然后将锁锁定并返回 True 。<br>
在参数 blocking 被设置为 False 的情况下调用，将不会发生阻塞。如果调用时 blocking 设为 True 会阻塞，并立即返回 False ；否则，将锁锁定并返回 True。<br>
当浮点型 timeout 参数被设置为正值调用时，只要无法获得锁，将最多阻塞 timeout 设定的秒数。timeout 参数被设置为 -1 时将无限等待。当 blocking 为 false 时，timeout 指定的值将被忽略。<br>
如果成功获得锁，则返回 True，否则返回 False (例如发生 超时 的时候)。<br>
timeout 参数需要 <code>python3.2+</code></p>
</blockquote>
<pre><code class="language-python">from threading import Thread, Lock
mutex = Lock()

class SynchronizeCounter(object):
    def __init__(self, count=0):
        self.count = count

    def increment(self):
        # if mutex.acquire(1): # 获取锁
        #     self.count += 1
        #     mutex.release()  # 释放锁
        # 等同于上述代码
        with mutex:
            self.count += 1

    def get_count(self):
        print(&quot;Count: %s&quot; % self.count)
        return self.count

def test_synchronize_count():
    counter = SynchronizeCounter()

    class CounterThread(Thread):
        def run(self):
            for i in range(100000):
                counter.increment()

    t1 = CounterThread()
    t2 = CounterThread()
    t1.start()
    t2.start()
    t1.join()
    t2.join()

    counter.get_count()


if __name__ == &quot;__main__&quot;:
    for i in range(100):
        test_synchronize_count()

</code></pre>
<blockquote>
<p>这段代码还有一个隐藏的bug，那就是 get_count()，这里get_count() 是在join()之后调用的，因此是线程安全的，但是如果在其它地方调用了 get_count() 函数。<br>
由于在 get_count() 中没有进行线程同步，调用时可能会获取到一个失效的值。</p>
</blockquote>
<h4 id="诡异的内存">诡异的内存</h4>
<p>对于JAVA等竞态编译语言，</p>
<ol>
<li>编译器的静态优化可能会打乱代码的执行顺序</li>
<li>JVM 的动态优化也会打乱代码的执行顺序</li>
<li>硬件可以通过乱序执行来优化性能</li>
</ol>
<p>更糟糕的是，有时一个线程产生的修改可能会对另一个线程不可见。</p>
<blockquote>
<p>从直觉上来说，编译器、JVM、硬件都不应插手修改原本的代码逻辑。但是近几年的运行效率提升，尤其是共享内存交媾的运行效率提升，都仰仗于此类代码优化。<br>
具体的副作用，Java 内存模型有明确说明。<br>
Java 内存模型定义了何时一个线程对内存的修改对另一个线程可见。<code>基本原则是：如果读线程和写线程不进行同步，就不能保证可见性。</code></p>
</blockquote>
<h3 id="多把锁">多把锁</h3>
<p><strong>一个重点：</strong> 两个线程都需要进行同步。只在其中一个线程进行同步是不够的。</p>
<p>可如果所有的方法都同步，大多数线程可能都会被阻塞，失去了并发的意义，并且可能会出现死锁。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98">哲学家进餐问题</a></p>
<blockquote>
<p><code>哲学家就餐问题</code>：假设有五位哲学家围坐在一张圆形餐桌旁，做以下两件事情之一：吃饭，或者思考。吃东西的时候，他们就停止思考，思考的时候也停止吃东西。餐桌中间有一大碗意大利面，每两个哲学家之间有一只餐叉。因为用一只餐叉很难吃到意大利面，所以假设哲学家必须用两只餐叉吃东西。他们只能使用自己左右手边的那两只餐叉。</p>
</blockquote>
<blockquote>
<p>哲学家从来不交谈，这就很危险，可能产生死锁，每个哲学家都拿着左手的餐叉，永远都在等右边的餐叉（或者相反）。<br>
即使没有死锁，也有可能发生资源耗尽。例如，假设规定当哲学家等待另一只餐叉超过五分钟后就放下自己手里的那一只餐叉，并且再等五分钟后进行下一次尝试。这个策略消除了死锁（系统总会进入到下一个状态），但仍然有可能发生“活锁”。如果五位哲学家在完全相同的时刻进入餐厅，并同时拿起左边的餐叉，那么这些哲学家就会等待五分钟，同时放下手中的餐叉，再等五分钟，又同时拿起这些餐叉。</p>
</blockquote>
<p>下面是哲学家进餐问题的一个实现：</p>
<pre><code class="language-python">import threading
import random
import time


class Philosopher(threading.Thread):

    running = True

    def __init__(self, xname, forkOnLeft, forkOnRight):
        threading.Thread.__init__(self)
        self.name = xname
        self.forkOnLeft = forkOnLeft
        self.forkOnRight = forkOnRight

    def run(self):
        while self.running:
            #  Philosopher is thinking (but really is sleeping).
            time.sleep(random.uniform(1, 3))
            print(&quot;%s is hungry.&quot; % self.name)
            self.dine()

    def dine(self):
        fork1, fork2 = self.forkOnLeft, self.forkOnRight

        while self.running:
            fork1.acquire(True)  # 阻塞式获取left 锁
            # locked = fork2.acquire(True) # 阻塞式 获取right 锁  容易产生死锁
            locked = fork2.acquire(False)  # 非阻塞式 获取right 锁
            if locked:
                break  # 如果被锁定，释放 left 退出等待
            fork1.release()
            print(&quot;%s swaps forks&quot; % self.name)
            fork1, fork2 = fork2, fork1
        else:
            return

        self.dining()
        fork2.release()
        fork1.release()

    def dining(self):
        print(&quot;%s starts eating &quot; % self.name)
        time.sleep(random.uniform(1, 5))
        print(&quot;%s finishes eating and leaves to think.&quot; % self.name)


def DiningPhilosophers():
    forks = [threading.Lock() for n in range(5)]
    philosopherNames = (&quot;Aristotle&quot;, &quot;Kant&quot;, &quot;Buddha&quot;, &quot;Marx&quot;, &quot;Russel&quot;)

    philosophers = [
        Philosopher(philosopherNames[i], forks[i % 5], forks[(i + 1) % 5])
        for i in range(5)
    ]

    Philosopher.running = True
    for p in philosophers:
        p.start()
    for p in philosophers:
        p.join()
    time.sleep(100)
    Philosopher.running = False
    print(&quot;Now we're finishing.&quot;)


DiningPhilosophers()

</code></pre>
<h3 id="外星方法的危害">外星方法的危害</h3>
<p>规模较大的程序常用监听器模式来解耦模块，这里我们构造一个类从一个URL进行下载，Listeners 监听下载进度。</p>
<pre><code class="language-python">import requests
import threading


class Listeners(object):
    def __init__(self, count=0):
        self.count = count
        self.done_count = 0.0
        self.listeners = []

    def append(self, listener):
        self.listeners.append(listener)

    def remove(self, listener):
        self.listeners.remove(listener)

    def on_progress(self, n):
        # 一些我们不知道的实现
        # do someting
        # self.done_count += 1
        # print(&quot;Process: %f&quot; % (self.done_count / self.count))
        pass


listeners = Listeners(5)


class Downloader(threading.Thread):
    def __init__(
        self, group=None, target=None, name=None, args=(), kwargs=None, daemon=None
    ):
        threading.Thread.__init__(
            self, group=group, target=target, name=name, daemon=daemon
        )
        self.url = kwargs.get(&quot;url&quot;)

    def download(self):
        resp = requests.get(self.url)

    def add_listener(self, listener):
        listeners.append(listener)

    def remove_listener(self, listener):
        listeners.delete(listener)

    def update_progress(self, n):
        for listener in listeners:
            listner.on_progress(n)

    def run(self):
        self.download()
        print(self.url)
        listeners.on_progress(1)


def test():
    urls = [
        &quot;https://www.baidu.com&quot;,
        &quot;https://www.google.com&quot;,
        &quot;https://www.bing.com&quot;,
        &quot;https://www.zaih.com&quot;,
        &quot;https://www.github.com&quot;,
    ]
    ts = [Downloader(kwargs=dict(url=url)) for url in urls]
    print(ts)
    [t.start() for t in ts]
    [t.join() for t in ts]


if __name__ == &quot;__main__&quot;:
    test()

</code></pre>
<p>这段代码中，add_listener， remove_listener 和 update_progress 都是同步方法，但 update_progress 调用了一个我们不知道如何实现的方法。如果这个方法中，获取了一把锁，程序在执行的过程中就可能发生死锁。所以，我们要尽量避免使用这种方法。还有一种方法是在遍历之前对 listeners 进行保护性复制，再针对这份副本进行遍历。（现在调用外星方法不再需要加锁）</p>
<h2 id="超越内置锁">超越内置锁</h2>
<h3 id="可重入锁">可重入锁</h3>
<p>Lock() 虽然方便，但限制很多：</p>
<ol>
<li>一个线程因为等待内置锁而进入阻塞之后，就无法中断该线程</li>
<li>Lock() 不知道当前拥有锁的线程是否是当前线程，如果当前线程获取了锁，再次获取也会阻塞。</li>
</ol>
<p>重入锁是(threading.RLock)一个可以被同一个线程多次获取的同步基元组件。在内部，它在基元锁的锁定/非锁定状态上附加了 &quot;所属线程&quot; 和 &quot;递归等级&quot; 的概念。在锁定状态下，某些线程拥有锁 ； 在非锁定状态下， 没有线程拥有它。</p>
<p>若要锁定锁，线程调用其 acquire() 方法；一旦线程拥有了锁，方法将返回。若要解锁，线程调用 release() 方法。 acquire()/release() 对可以嵌套；只有最终 release() (最外面一对的 release() ) 将锁解开，才能让其他线程继续处理 acquire() 阻塞。</p>
<p>threading.RLock 提供了显式的 acquire() 和 release() 方法<br>
一个好的实践是：</p>
<pre><code>lock = threading.RLock()
</code></pre>
<p>Lock 和 RLock 的使用区别如下：</p>
<pre><code class="language-python">#rlock_tut.py
import threading
num = 0
lock = Threading.Lock()
lock.acquire()
num += 1
lock.acquire() # 这里会被阻塞
num += 2
lock.release()

# With RLock, that problem doesn’t happen.
lock = Threading.RLock()
lock.acquire()
num += 3
lock.acquire() # 不会被阻塞.
num += 4
lock.release()
lock.release() # 两个锁都需要调用 release() 来释放.

</code></pre>
<h3 id="超时">超时</h3>
<p>使用内置锁时，阻塞的线程无法被中断，程序不能从死锁恢复，可以给锁设置超时时间来解决这个问题。</p>
<blockquote>
<p>timeout 参数需要 python3.2+</p>
</blockquote>
<pre><code class="language-python">import time
from threading import Thread, Lock

lock1 = RLock()
lock2 = RLock()

# 这个程序会一直死锁下去，如果想突破这个限制，可以在获取锁的时候加上超时时间
# &gt; python threading 没有实现 销毁(destroy)，停止(stop)，暂停(suspend)，继续（resume）,中断（interrupt）等


class T1(Thread):
    def run(self):
        print(&quot;start run T1&quot;)
        lock1.acquire()
        # lock1.acquire(timeout=2) # 设置超时时间可避免死锁
        time.sleep(1)
        lock2.acquire()
        # lock2.acquire(timeout=2) # 设置超时时间可避免死锁
        lock1.release()
        lock2.release()


class T2(Thread):
    def run(self):
        print(&quot;start run T2&quot;)
        lock2.acquire()
        # lock2.acquire(timeout=2) # 设置超时时间可避免死锁
        time.sleep(1)
        lock1.acquire()
        # lock1.acquire(timeout=2) # 设置超时时间可避免死锁
        lock2.release()
        lock1.release()


def test():
    t1, t2 = T1(), T2()
    t1.start()
    t2.start()

    t1.join()
    t2.join()


if __name__ == &quot;__main__&quot;:
    test()

</code></pre>
<h3 id="交替锁">交替锁</h3>
<p>如果我们要在链表中插入一个节点。一种做法是用锁保护整个链表，但链表加锁时其它使用者无法访问。交替锁可以只所追杀链表的一部分，允许不涉及被锁部分的其它线程自由访问。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/TEbTwYoXnf5oLt4T3ovmxSALDg90i63Lx3t2EZIfyqVyo6bDHJGVnvu-v89vas7E" alt="交替锁" loading="lazy"></figure>
<pre><code class="language-python">
from random import randint
from threading import Thread, Lock

class Node(object):

    def __init__(self, value, prev=None, next=None):
        self.value = value
        self.prev = prev
        self.next = next
        self.lock = Lock()


class SortedList(Thread):

    def __init__(self, head):
        Thread.__init__(self)
        self.head = head

    def insert(self, value):
        head = self.head
        node = Node(value)
        print(&quot;insert: %d&quot; % value)
        while True:
            if head.value &lt;= value:
                if head.next != None:
                    head = head.next
                else:
                    head.lock.acquire()
                    head.next = node
                    node.prev = head
                    head.lock.release()
                    break
            else:
                prev = head.prev
                prev.lock.acquire()
                head.lock.acquire()
                if prev != None:
                    prev.next = node
                else:
                    self.head = node
                node.prev = prev
                prev.lock.release()
                node.next = head
                head.prev = node
                head.lock.release()
                break

    def run(self):
        for i in range(5):
            self.insert(randint(10, 20))


def test():
    head = Node(10)
    t1 = SortedList(head)
    t2 = SortedList(head)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    while head:
        print(head.value)
        head = head.next


if __name__ == &quot;__main__&quot;:
    test()
</code></pre>
<p>这种方案不仅可以让多个线程并发的进行链表插入操作，还能让其他的链表操作安全的并发。</p>
<h3 id="条件变量">条件变量</h3>
<p>并发编程经常需要等待某个事件发生。比如从队列删除元素前需要等待队列非空、向缓存添加数据前需要等待缓存有足够的空间。条件变量就是为这种情况设计的。</p>
<p>条件变量总是与某种类型的锁对象相关联，锁对象可以通过传入获得，或者在缺省的情况下自动创建。当多个条件变量需要共享同一个锁时，传入一个锁很有用。锁是条件对象的一部分，不必单独地跟踪它。</p>
<p>条件变量服从上下文管理协议：使用 with 语句会在它包围的代码块内获取关联的锁。 acquire() 和 release() 方法也能调用关联锁的相关方法。</p>
<p>其它方法必须在持有关联的锁的情况下调用。 wait() 方法释放锁，然后阻塞直到其它线程调用 notify() 方法或 notify_all() 方法唤醒它。一旦被唤醒， wait() 方法重新获取锁并返回。它也可以指定超时时间。</p>
<pre><code class="language-python">#condition_tut.py
import random, time
from threading import Condition, Thread
&quot;&quot;&quot;
'condition' variable will be used to represent the availability of a produced
item.
&quot;&quot;&quot;
condition = Condition()
box = []
def producer(box, nitems):
    for i in range(nitems):
        time.sleep(random.randrange(2, 5))  # Sleeps for some time.
        condition.acquire()
        num = random.randint(1, 10)
        box.append(num)  # Puts an item into box for consumption.
        condition.notify()  # Notifies the consumer about the availability.
        print(&quot;Produced:&quot;, num)
        condition.release()
def consumer(box, nitems):
    for i in range(nitems):
        condition.acquire()
        condition.wait()  # Blocks until an item is available for consumption.
        print(&quot;%s: Acquired: %s&quot; % (time.ctime(), box.pop()))
        condition.release()
threads = []
&quot;&quot;&quot;
'nloops' is the number of times an item will be produced and
consumed.
&quot;&quot;&quot;
nloops = random.randrange(3, 6)
for func in [producer, consumer]:
    threads.append(Thread(target=func, args=(box, nloops)))
    threads[-1].start()  # Starts the thread.
for thread in threads:
    &quot;&quot;&quot;Waits for the threads to complete before moving on
       with the main script.
    &quot;&quot;&quot;
    thread.join()
print(&quot;All done.&quot;)

</code></pre>
<h3 id="原子变量">原子变量</h3>
<blockquote>
<p>与锁相比使用原子变量的优点：</p>
<ol>
<li>不会忘记在正确的时候获取锁</li>
<li>由于没有锁的参与，对原子变量的操作不会引发死锁。</li>
<li>原子变量时无锁（lock-free）非阻塞（non-blocking）算法的基础，这种算法可以不用锁和阻塞来达到同步的目的。</li>
</ol>
</blockquote>
<p><strong>python 不支持原子变量</strong></p>
<h2 id="总结">总结</h2>
<h3 id="优点">优点</h3>
<p>线程与锁模型最大的优点是适用面广，更接近于“本质”--近似于对硬件工作方式的形式化--正确使用时效率高。<br>
此外，线程与锁模型也可轻松的集成到大多数编程语言。</p>
<h3 id="缺点">缺点</h3>
<ol>
<li>线程与锁模型没有为并行提供直接的支持</li>
<li>线程与锁模型只支持共享内存模型，如果要支持分布式内存模型，就需要寻求其他技术的帮助。</li>
<li>用线程与锁模型编写的代码难以测试（比如死锁问题可能很久才会出现），出了问题后很难找到问题在哪，并且bug难以复现</li>
<li>代码难以维护（要保证所有对象的同步都是正确的、必须按  顺序来获取多把锁、持有锁时不调用外星方法。还要保证维护代码的开发者都遵守这个规则</li>
</ol>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://hackernoon.com/synchronization-primitives-in-python-564f89fee732?gi=ce162d119247">Let’s Synchronize Threads in Python</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98">哲学家进餐问题</a></li>
</ul>
<h4 id="references">References</h4>
<p>[1] 哲学家进餐问题: https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98<br>
[2] Let’s Synchronize Threads in Python: https://hackernoon.com/synchronization-primitives-in-python-564f89fee732?gi=ce162d119247</p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JWT RefreshToken 实践]]></title>
        <id>http://blog.gusibi.site/post/jwt-refresh-token/</id>
        <link href="http://blog.gusibi.site/post/jwt-refresh-token/">
        </link>
        <updated>2019-04-29T05:05:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Json web token (JWT), 根据官网的定义，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。<br>
详细介绍可以查看这篇文章 <a href="https://mp.weixin.qq.com/s/gUgh_kmMu0Hmobeah7wNLQ">理解JWT（JSON Web Token）认证及实践</a></p>
</blockquote>
<h2 id="jwt-特点">JWT 特点</h2>
<h3 id="优点">优点</h3>
<ul>
<li>体积小，因而传输速度快</li>
<li>传输方式多样，可以通过URL/POST参数/HTTP头部等方式传输</li>
<li>严格的结构化。它自身（在 payload 中）就包含了所有与用户相关的验证消息，如用户可访问路由、访问有效期等信息，服务器无需再去连接数据库验证信息的有效性，并且 payload 支持为你的应用而定制化。</li>
<li>支持跨域验证，可以应用于单点登录。</li>
</ul>
<h3 id="存在的问题">存在的问题</h3>
<p>JWT 自身（在 payload 中）就包含了所有与用户相关的验证消息，所以通常情况下不需要保存。这种设计存在几个问题：</p>
<ol>
<li>Token不能撤销--客户端重置密码后之前的JWT依然可以使用（JWT 并没有过期或者失效</li>
<li>不支持refresh token，JWT过期后需要执行登录授权的完整流程</li>
<li>无法知道用户签发了几个JWT</li>
</ol>
<p>针对第一个问题，可能的解决方法有：</p>
<ol>
<li>保存JWT到数据库（或Redis），这样可以针对每个JWT单独校验</li>
<li>在重置密码等需要作废之前全部JWT时，把操作时间点记录到数据库（或Redis），校验JWT时同时判断此JWT创建之后有没有过重置密码等类似操作，如果有校验不通过</li>
</ol>
<p>当然，这种解决方法都会多一次数据库请求，JWT自身可校验的优势会有所减少，同时也会影响认证效率。</p>
<p>这篇文章主要介绍解决第二个问题（不支持refresh token）的思路。</p>
<h3 id="refresh-token">refresh token</h3>
<p>refresh token是OAuth2 认证中的一个概念，和OAuth2 的access token 一起生成，表示更新令牌，过期所需时间比access toen 要长，可以用来获取下一次的access token。</p>
<p>如果JWT 需要添加 refresh token支持，refresh token需要满足的条件有一下几项：</p>
<ol>
<li>和JWT一起生成返回给客户端</li>
<li>有实效时间，有效时间比JWT要长</li>
<li>只能用来换取下一次JWT，不能用于访问认证</li>
<li>不能重复使用（可选）</li>
</ol>
<h4 id="refresh-token-获取流程">refresh token 获取流程</h4>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/kY3mm6nLAlHkGDxHJF1WLctLSbp9eA-6iirdYBlC0CDwMcq_rTPsCWpAhmWUr_nJ" alt="" loading="lazy"></figure>
<h4 id="refresh-token-使用流程">refresh token 使用流程</h4>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/-PJDYI_rQ-EiYl6aGJ-_zPtkgKY9nRnBnShAj47rsoEY115E8IRlM4zMuOvx70zi" alt="" loading="lazy"></figure>
<h2 id="代码示例">代码示例</h2>
<pre><code class="language-python">import jwt
import time

# 使用 sanic 作为restful api 框架 
def create_token(account_id, username):
    payload = {
        &quot;iss&quot;: &quot;gusibi.mobi&quot;,
        &quot;iat&quot;: int(time.time()),
        &quot;exp&quot;: int(time.time()) + 86400 * 7,
        &quot;aud&quot;: &quot;www.gusibi.mobi&quot;,
        &quot;sub&quot;: account_id,
        &quot;username&quot;: username,
        &quot;scopes&quot;: ['open']
    }
    token = jwt.encode(payload, 'secret', algorithm='HS256')
    payload['grant_type'] = &quot;refresh&quot;
    refresh_token = jwt.encode(payload, 'secret', algorithm='HS256')
    return True, {
        'access_token': token,
        'account_id': account_id,
        &quot;refresh_token&quot;: refresh_token
        }

# 验证refresh token 出否有效
def verify_refresh_token(token):
    payload = jwt.decode(token, 'secret', audience='www.gusibi.com', algorithms=['HS256'])
    # 校验token 是否有效，以及是否是refresh token，验证通过后生成新的token 以及 refresh_token
    if payload and payload.get('grant_type') == 'refresh':
        # 如果需要标记此token 已经使用，需要借助redis 或者数据库（推荐redis）
        return True, payload
    return False, None

# 验证token 是否有效
def verify_bearer_token(token):
    #  如果在生成token的时候使用了aud参数，那么校验的时候也需要添加此参数
    payload = jwt.decode(token, 'secret', audience='www.gusibi.com', algorithms=['HS256'])
    # 校验token 是否有效，以及不能是refresh token
    if payload and not payload.get('grant_type') == 'refresh':
        return True, payload
    return False, None
</code></pre>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/gUgh_kmMu0Hmobeah7wNLQ">理解JWT（JSON Web Token）认证及实践</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a>[1]</li>
</ul>
<p>References<br>
[1] 理解OAuth 2.0: http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang mod 入门]]></title>
        <id>http://blog.gusibi.site/post/golang-mod/</id>
        <link href="http://blog.gusibi.site/post/golang-mod/">
        </link>
        <updated>2019-03-16T03:49:35.000Z</updated>
        <content type="html"><![CDATA[<p><code>go modules</code> 是 golang 1.11 新加的特性。现在1.12 已经发布了，是时候用起来了。Modules官方定义为：</p>
<blockquote>
<p>模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>
</blockquote>
<h2 id="如何使用-modules">如何使用 Modules ？</h2>
<ol>
<li>把 golang 升级到 1.11（现在1.12 已经发布了，建议使用1.12）</li>
<li>设置 <code>GO111MODULE</code></li>
</ol>
<p>GO111MODULE</p>
<p><code>GO111MODULE</code> 有三个值：<code>off</code>, <code>on</code>和<code>auto（默认值）</code>。</p>
<ul>
<li><code>GO111MODULE=off</code>，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。</li>
<li><code>GO111MODULE=on</code>，go命令行会使用modules，而一点也不会去GOPATH目录下查找。</li>
<li><code>GO111MODULE=auto</code>，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：
<ul>
<li>当前目录在GOPATH/src之外且该目录包含go.mod文件</li>
<li>当前文件在包含go.mod文件的目录下面。</li>
</ul>
</li>
</ul>
<blockquote>
<p>当modules 功能启用时，依赖包的存放位置变更为<code>$GOPATH/pkg</code>，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。</p>
</blockquote>
<h3 id="go-mod">go mod</h3>
<p>golang 提供了 <code>go mod</code>命令来管理包。</p>
<p>go mod 有以下命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>download</td>
<td>download modules to local cache(下载依赖包)</td>
</tr>
<tr>
<td>edit</td>
<td>edit go.mod from tools or scripts（编辑go.mod</td>
</tr>
<tr>
<td>graph</td>
<td>print module requirement graph (打印模块依赖图)</td>
</tr>
<tr>
<td>init</td>
<td>initialize new module in current directory（在当前目录初始化mod）</td>
</tr>
<tr>
<td>tidy</td>
<td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td>
</tr>
<tr>
<td>vendor</td>
<td>make vendored copy of dependencies(将依赖复制到vendor下)</td>
</tr>
<tr>
<td>verify</td>
<td>verify dependencies have expected content (验证依赖是否正确）</td>
</tr>
<tr>
<td>why</td>
<td>explain why packages or modules are needed(解释为什么需要依赖)</td>
</tr>
</tbody>
</table>
<h2 id="如何在项目中使用">如何在项目中使用</h2>
<h3 id="示例一创建一个新项目">示例一：创建一个新项目</h3>
<ol>
<li>在<code>GOPATH 目录之外</code>新建一个目录，并使用<code>go mod init</code> 初始化生成<code>go.mod</code> 文件</li>
</ol>
<pre><code class="language-sh">➜  ~ mkdir hello
➜  ~ cd hello
➜  hello go mod init hello
go: creating new go.mod: module hello
➜  hello ls
go.mod
➜  hello cat go.mod
module hello

go 1.12
</code></pre>
<blockquote>
<p>go.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。</p>
</blockquote>
<p>go.mod 提供了<code>module</code>, <code>require</code>、<code>replace</code>和<code>exclude</code> 四个命令</p>
<ul>
<li><code>module</code>  语句指定包的名字（路径）</li>
<li><code>require</code> 语句指定的依赖项模块</li>
<li><code>replace</code> 语句可以替换依赖项模块</li>
<li><code>exclude</code> 语句可以忽略依赖项模块</li>
</ul>
<ol start="2">
<li>添加依赖</li>
</ol>
<p>新建一个 server.go 文件，写入以下代码：</p>
<pre><code class="language-go">package main

import (
	&quot;net/http&quot;
	
	&quot;github.com/labstack/echo&quot;
)

func main() {
	e := echo.New()
	e.GET(&quot;/&quot;, func(c echo.Context) error {
		return c.String(http.StatusOK, &quot;Hello, World!&quot;)
	})
	e.Logger.Fatal(e.Start(&quot;:1323&quot;))
}
</code></pre>
<p>执行 <code>go run server.go</code> 运行代码会发现 go mod 会自动查找依赖自动下载：</p>
<pre><code class="language-sh">$ go run server.go
go: finding github.com/labstack/echo v3.3.10+incompatible
go: downloading github.com/labstack/echo v3.3.10+incompatible
go: extracting github.com/labstack/echo v3.3.10+incompatible
go: finding github.com/labstack/gommon/color latest
go: finding github.com/labstack/gommon/log latest
go: finding github.com/labstack/gommon v0.2.8
# 此处省略很多行
...

   ____    __
  / __/___/ /  ___
 / _// __/ _ \/ _ \
/___/\__/_//_/\___/ v3.3.10-dev
High performance, minimalist Go web framework
https://echo.labstack.com
____________________________________O/_______
                                    O\
⇨ http server started on [::]:1323
</code></pre>
<p>现在查看go.mod 内容：</p>
<pre><code class="language-go">$ cat go.mod

module hello

go 1.12

require (
	github.com/labstack/echo v3.3.10+incompatible // indirect
	github.com/labstack/gommon v0.2.8 // indirect
	github.com/mattn/go-colorable v0.1.1 // indirect
	github.com/mattn/go-isatty v0.0.7 // indirect
	github.com/valyala/fasttemplate v1.0.0 // indirect
	golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a // indirect
)
</code></pre>
<p>go module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit，详见 <a href="https://github.com/golang/go/wiki/Modules">Modules官方介绍</a>。 go 会自动生成一个 go.sum 文件来记录 dependency tree：</p>
<pre><code class="language-shell">$ cat go.sum
github.com/labstack/echo v3.3.10+incompatible h1:pGRcYk231ExFAyoAjAfD85kQzRJCRI8bbnE7CX5OEgg=
github.com/labstack/echo v3.3.10+incompatible/go.mod h1:0INS7j/VjnFxD4E2wkz67b8cVwCLbBmJyDaka6Cmk1s=
github.com/labstack/gommon v0.2.8 h1:JvRqmeZcfrHC5u6uVleB4NxxNbzx6gpbJiQknDbKQu0=
github.com/labstack/gommon v0.2.8/go.mod h1:/tj9csK2iPSBvn+3NLM9e52usepMtrd5ilFYA+wQNJ4=
github.com/mattn/go-colorable v0.1.1 h1:G1f5SKeVxmagw/IyvzvtZE4Gybcc4Tr1tf7I8z0XgOg=
github.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=
... 省略很多行
</code></pre>
<ol start="3">
<li>再次执行脚本 <code>go run server.go</code> 发现跳过了检查并安装依赖的步骤。</li>
<li>可以使用命令 <code>go list -m -u all</code> 来检查可以升级的package，使用<code>go get -u need-upgrade-package</code> 升级后会将新的依赖版本更新到go.mod<br>
* 也可以使用 <code>go get -u</code> 升级所有依赖</li>
</ol>
<h4 id="go-get-升级">go get 升级</h4>
<ul>
<li>运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li>
<li>运行 go get -u=patch 将会升级到最新的修订版本</li>
<li>运行 go get package@version 将会升级到指定的版本号version</li>
<li>运行go get如果有版本的更改，那么go.mod文件也会更改</li>
</ul>
<h3 id="示例二改造现有项目helloword">示例二：改造现有项目(helloword)</h3>
<p>项目目录为：</p>
<pre><code class="language-shell">$ tree
.
├── api
│   └── apis.go
└── server.go

1 directory, 2 files
</code></pre>
<p>server.go 源码为：</p>
<pre><code class="language-go">package main

import (
    api &quot;./api&quot;  // 这里使用的是相对路径
    &quot;github.com/labstack/echo&quot;
)

func main() {
    e := echo.New()
    e.GET(&quot;/&quot;, api.HelloWorld)
    e.Logger.Fatal(e.Start(&quot;:1323&quot;))
}
</code></pre>
<p>api/apis.go 源码为：</p>
<pre><code class="language-go">package api

import (
    &quot;net/http&quot;

    &quot;github.com/labstack/echo&quot;
)

func HelloWorld(c echo.Context) error {
    return c.JSON(http.StatusOK, &quot;hello world&quot;)
}
</code></pre>
<ol>
<li>使用 <code>go mod init ***</code> 初始化go.mod</li>
</ol>
<pre><code class="language-shell">$ go mod init helloworld
go: creating new go.mod: module helloworld
</code></pre>
<ol start="2">
<li>运行 <code>go run server.go</code></li>
</ol>
<pre><code class="language-shell">go: finding github.com/labstack/gommon/color latest
go: finding github.com/labstack/gommon/log latest
go: finding golang.org/x/crypto/acme/autocert latest
go: finding golang.org/x/crypto/acme latest
go: finding golang.org/x/crypto latest
build command-line-arguments: cannot find module for path _/home/gs/helloworld/api
</code></pre>
<p>首先还是会查找并下载安装依赖，然后运行脚本 <code>server.go</code>，这里会抛出一个错误：</p>
<pre><code class="language-shell">build command-line-arguments: cannot find module for path _/home/gs/helloworld/api
</code></pre>
<p>但是<code>go.mod</code> 已经更新：</p>
<pre><code class="language-json">$ cat go.mod
module helloworld

go 1.12

require (
        github.com/labstack/echo v3.3.10+incompatible // indirect
        github.com/labstack/gommon v0.2.8 // indirect
        github.com/mattn/go-colorable v0.1.1 // indirect
        github.com/mattn/go-isatty v0.0.7 // indirect
        github.com/valyala/fasttemplate v1.0.0 // indirect
        golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a // indirect
)
</code></pre>
<h5 id="那为什么会抛出这个错误呢">那为什么会抛出这个错误呢？</h5>
<p>这是因为 server.go 中使用 internal package 的方法跟以前已经不同了，由于 go.mod会扫描同工作目录下所有 package 并且<code>变更引入方法</code>，必须将 helloworld当成路径的前缀，也就是需要写成 import helloworld/api，以往 GOPATH/dep 模式允许的 import ./api 已经失效，详情可以查看这个 <a href="https://github.com/golang/go/issues/26645">issue</a>。</p>
<ol start="3">
<li>更新旧的package import 方式</li>
</ol>
<p>所以server.go 需要改写成：</p>
<pre><code class="language-go">package main

import (
    api &quot;helloworld/api&quot;  // 这是更新后的引入方法
    &quot;github.com/labstack/echo&quot;
)

func main() {
    e := echo.New()
    e.GET(&quot;/&quot;, api.HelloWorld)
    e.Logger.Fatal(e.Start(&quot;:1323&quot;))
}
</code></pre>
<blockquote>
<p><code>一个小坑</code>：开始在golang1.11 下使用go mod 遇到过 <code>go build github.com/valyala/fasttemplate: module requires go 1.12</code> <a href="https://github.com/golang/go/issues/27565">这种错误</a>，遇到类似这种需要升级到1.12 的问题，直接升级golang1.12 就好了。幸亏是在1.12 发布后才尝试的<code>go mod</code> 🤷‍♂️</p>
</blockquote>
<ol start="4">
<li>到这里就和新创建一个项目没什么区别了</li>
</ol>
<h2 id="使用replace替换无法直接获取的package">使用replace替换无法直接获取的package</h2>
<p>由于某些已知的原因，并不是所有的package都能成功下载，比如：<code>golang.org</code>下的包。</p>
<p>modules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：</p>
<pre><code class="language-json">replace (
	golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a
)
</code></pre>
<p>或者</p>
<pre><code class="language-json">replace golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a
</code></pre>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://github.com/golang/go/wiki/Modules">Modules官方介绍</a></li>
<li><a href="https://www.lightblue.asia/golang-1-11-new-festures-modules/?doing_wp_cron=1552464864.6369309425354003906250">Golang 1.11 新功能介紹 – Modules</a></li>
<li><a href="https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide#1">What are Go modules and how do I use them?</a></li>
<li><a href="https://github.com/golang/go/issues/27565">go mod doesn't work for github.com/gomarkdown/markdown/html </a></li>
<li><a href="https://www.cnblogs.com/apocelipes/p/10295096.html">再探go modules：使用与细节</a></li>
<li><a href="https://tonybai.com/2018/07/15/hello-go-module/">初窥Go module</a></li>
</ul>
<h4 id="references">References</h4>
<p>[1] Modules官方介绍: https://github.com/golang/go/wiki/Modules<br>
[2] issue: https://github.com/golang/go/issues/26645<br>
[3] 这种错误: https://github.com/golang/go/issues/27565<br>
[4] Modules官方介绍: https://github.com/golang/go/wiki/Modules<br>
[5] Golang 1.11 新功能介紹 – Modules: https://www.lightblue.asia/golang-1-11-new-festures-modules/?doing_wp_cron=1552464864.6369309425354003906250<br>
[6] What are Go modules and how do I use them?: https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide#1<br>
[7] go mod doesn't work for github.com/gomarkdown/markdown/html : https://github.com/golang/go/issues/27565<br>
[8] 再探go modules：使用与细节: https://www.cnblogs.com/apocelipes/p/10295096.html<br>
[9] 初窥Go module: https://tonybai.com/2018/07/15/hello-go-module/</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-状态模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-state-pattern/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-state-pattern/">
        </link>
        <updated>2018-12-30T20:59:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>问题：</code>有一个糖果公司需要设计一个糖果售卖机，控制流程如下图，需要怎么实现？</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/5aI8Zy9kkfNI8jzRA8VYMGrFpaGx30W6zSA3ZZAWN6AX0TWWb0SvlbKdJeWJpslF" alt="1b0d0134acf9ab9b2240066f847412f1.png" loading="lazy"></figure>
<p>这是一个状态图，每个圆圈都是一种状态。很明显，有<code>有25分钱</code>、 <code>没有25分钱</code>、 <code>售出糖果</code>、 <code>糖果售罄</code><strong>四个状态</strong>，同时也对应<strong>四个动作</strong>：<code>投入25分钱</code>，<code>退回25分钱</code>，<code>转动曲柄</code>和<code>发放糖果</code>。</p>
<p>那如何从状态图得到真正的代码呢？</p>
<p>简单代码实现如下：</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

class GumballMachine:

    # 找出所有状态，并创建实例变量来持有当前状态，然后定义状态的值
    STATE_SOLD_OUT = 0
    STATE_NO_QUARTER = 1
    STATE_HAS_QUARTER = 2
    STATE_SOLD = 3

    state = STATE_SOLD_OUT

    def __init__(self, count=0):
        self.count = count
        if count &gt; 0:
            self.state = self.STATE_NO_QUARTER

    def __str__(self):
        return &quot;Gumball machine current state: %s&quot; % self.state

    def insert_quarter(self):
        # 投入25分钱
        if self.state == self.STATE_HAS_QUARTER: # 如果已经投过
            print(&quot;You can't insert another quarter&quot;)
        elif self.state == self.STATE_NO_QUARTER: # 如果没有投过
            self.state = self.STATE_HAS_QUARTER
            print(&quot;You inserted a quarter&quot;)
        elif self.state == self.STATE_SOLD_OUT: # 如果已经售罄
            print(&quot;You can't insert a quarter, the machine is sold out&quot;)
        elif self.state == self.STATE_SOLD: # 如果刚刚买了糖果
            print(&quot;Please wait, we're already giving you a gumball&quot;)

    def eject_quarter(self):
        # 退回25分
        if self.state == self.STATE_HAS_QUARTER:
            print(&quot;Quarter returned&quot;)
            self.state = self.STATE_NO_QUARTER
        elif self.state == self.STATE_NO_QUARTER:
            print(&quot;You haven't inserted a quarter&quot;)
        elif self.state == self.STATE_SOLD:
            print(&quot;Sorry, you alread turned the crank&quot;)
        elif self.state == self.SOLD_OUT:
            print(&quot;You can't eject, you haven't inserted&quot;)

    def turn_crank(self):
        # 转动曲柄
        if self.state == self.STATE_SOLD:
            print(&quot;Turning twice doesn't get you another gumball&quot;)
        elif self.state == self.STATE_NO_QUARTER:
            print(&quot;You turned but there's no quarter&quot;)
        elif self.state == self.STATE_SOLD_OUT:
            print(&quot;You turned, but there are no gumballs&quot;)
        elif self.state == self.STATE_HAS_QUARTER:
            print(&quot;You turned...&quot;)
            self.state = self.STATE_SOLD
            self.dispense()
    
    def dispense(self):
        # 发放糖果
        if self.state == self.STATE_SOLD:
            print(&quot;A gumball comes rolling out the slot&quot;)
            self.count -= 1
            if self.count == 0:
                self.state = self.STATE_SOLD_OUT
            else:
                self.state = self.STATE_NO_QUARTER
        elif self.state == self.STATE_NO_QUARTER:
            print(&quot;You need to pay first&quot;)
        elif self.state == self.STATE_SOLD_OUT:
            print(&quot;No gumball dispensed&quot;)
        elif self.state == self.STATE_HAS_QUARTER:
            print(&quot;No gumball dispensed&quot;)


if __name__ == &quot;__main__&quot;:
    # 以下是代码测试
    gumball_machine = GumballMachine(5) # 装入5 个糖果
    print(gumball_machine)

    gumball_machine.insert_quarter() # 投入25分钱
    gumball_machine.turn_crank() # 转动曲柄
    print(gumball_machine)

    gumball_machine.insert_quarter() #投入25分钱
    gumball_machine.eject_quarter()  # 退钱
    gumball_machine.turn_crank()     # 转动曲柄

    print(gumball_machine)
    
    gumball_machine.insert_quarter() # 投入25分钱
    gumball_machine.turn_crank() # 转动曲柄 
    gumball_machine.insert_quarter() # 投入25分钱 
    gumball_machine.turn_crank()  # 转动曲柄
    gumball_machine.eject_quarter() # 退钱

    print(gumball_machine)
</code></pre>
<p>这段代码有几个问题：</p>
<ol>
<li>没有遵守开放-关闭原则</li>
<li>更像是面向过程的设计</li>
<li>状态转化被埋藏在条件语句中</li>
<li>未来加入新的需求，需要改动的较多，不易维护，可能会出bug</li>
</ol>
<p>如何改进呢？</p>
<blockquote>
<p>考虑<strong>封装变化</strong>，把每个状态的行为都放在各自的类中，每个状态只要实现自己的动作，用加入新类的方式来实现新状态的加入。</p>
</blockquote>
<ol>
<li>定义State 父类，在这个类中，糖果机的每个动作都有一个应对的方法</li>
<li>为机器中的每个状态实现状态类，这些类将负责在对应的状态下进行机器的行为</li>
<li>摆脱旧的条件代码，将动作委托到状态类</li>
</ol>
<p>新的实现代码如下：</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

class State:
    # 定义state基类
    def insert_quarter(self):
        pass

    def eject_quarter(self):
        pass

    def turn_crank(self):
        pass

    def dispense(self):
        pass


class SoldOutState(State):
    # 继承State 类
    def __init__(self, gumball_machine):
        self.gumball_machine = gumball_machine

    def __str__(self):
        return &quot;sold_out&quot;

    def insert_quarter(self):
        print(&quot;You can't insert a quarter, the machine is sold out&quot;)

    def eject_quarter(self):
        print(&quot;You can't eject, you haven't inserted a quarter yet&quot;)

    def turn_crank(self):
        print(&quot;You turned, but ther are no gumballs&quot;)

    def dispense(self):
        print(&quot;No gumball dispensed&quot;)


class SoldState(State):
    # 继承State 类
    def __init__(self, gumball_machine):
        self.gumball_machine = gumball_machine

    def __str__(self):
        return &quot;sold&quot;

    def insert_quarter(self):
        print(&quot;Please wait, we're already giving you a gumball&quot;)

    def eject_quarter(self):
        print(&quot;Sorry, you already turned the crank&quot;)

    def turn_crank(self):
        print(&quot;Turning twice doesn't get you another gumball&quot;)

    def dispense(self):
        self.gumball_machine.release_ball()
        if gumball_machine.count &gt; 0:
            self.gumball_machine.state = self.gumball_machine.no_quarter_state
        else:
            print(&quot;Oops, out of gumballs!&quot;)
            self.gumball_machine.state = self.gumball_machine.soldout_state


class NoQuarterState(State):
    # 继承State 类
    def __init__(self, gumball_machine):
        self.gumball_machine = gumball_machine

    def __str__(self):
        return &quot;no_quarter&quot;

    def insert_quarter(self):
        # 投币 并且改变状态
        print(&quot;You inserted a quarter&quot;)
        self.gumball_machine.state = self.gumball_machine.has_quarter_state

    def eject_quarter(self):
        print(&quot;You haven't insert a quarter&quot;)

    def turn_crank(self):
        print(&quot;You turned, but there's no quarter&quot;)

    def dispense(self):
        print(&quot;You need to pay first&quot;)


class HasQuarterState(State):
    # 继承State 类
    def __init__(self, gumball_machine):
        self.gumball_machine = gumball_machine

    def __str__(self):
        return &quot;has_quarter&quot;

    def insert_quarter(self):
        print(&quot;You can't insert another quarter&quot;)

    def eject_quarter(self):
        print(&quot;Quarter returned&quot;)
        self.gumball_machine.state = self.gumball_machine.no_quarter_state

    def turn_crank(self):
        print(&quot;You turned...&quot;)
        self.gumball_machine.state = self.gumball_machine.sold_state

    def dispense(self):
        print(&quot;No gumball dispensed&quot;)


class GumballMachine:

    def __init__(self, count=0):
        self.count = count
        # 找出所有状态，并创建实例变量来持有当前状态，然后定义状态的值
        self.soldout_state = SoldOutState(self)
        self.no_quarter_state = NoQuarterState(self)
        self.has_quarter_state = HasQuarterState(self)
        self.sold_state = SoldState(self)
        if count &gt; 0:
            self.state = self.no_quarter_state
        else:
            self.state = self.soldout_state

    def __str__(self):
        return &quot;&gt;&gt;&gt; Gumball machine current state: %s&quot; % self.state

    def insert_quarter(self):
        # 投入25分钱
        self.state.insert_quarter()

    def eject_quarter(self):
        # 退回25分
        self.state.eject_quarter()
        # print(&quot;state&quot;, self.state, type(self.state))

    def turn_crank(self):
        # 转动曲柄
        # print(&quot;state&quot;, self.state, type(self.state))
        self.state.turn_crank()
	    self.state.dispense()
    
    def release_ball(self):
        # 发放糖果
        print(&quot;A gumball comes rolling out the slot...&quot;)
        if self.count &gt; 0:
            self.count -= 1
        
        
if __name__ == &quot;__main__&quot;:
    # 以下是代码测试
    gumball_machine = GumballMachine(5) # 装入5 个糖果
    print(gumball_machine)

    gumball_machine.insert_quarter() # 投入25分钱
    gumball_machine.turn_crank() # 转动曲柄
    print(gumball_machine)

    gumball_machine.insert_quarter() #投入25分钱
    gumball_machine.eject_quarter()  # 退钱
    gumball_machine.turn_crank()     # 转动曲柄

    print(gumball_machine)
    
    gumball_machine.insert_quarter() # 投入25分钱
    gumball_machine.turn_crank() # 转动曲柄 
    gumball_machine.insert_quarter() # 投入25分钱 
    gumball_machine.turn_crank()  # 转动曲柄
    gumball_machine.eject_quarter() # 退钱

    print(gumball_machine)
</code></pre>
<p>重构后的代码相对于之前的代码做了哪些事情呢？</p>
<ol>
<li>将每个状态的行为局部话到自己的类中</li>
<li>删除if 语句</li>
<li>将<code>状态类</code>对修改关闭，对糖果季类对<code>扩展开放</code></li>
</ol>
<p>下图是刚初始状态图示：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/JR9i8dFfJU6cVB2NGvZh0BtL8IwXfODdcURvHOl-VI_L805iSpbq3p0heRCN5BIm" alt="" loading="lazy"></figure>
<p>上面重构部分代码使用的就是状态模式：</p>
<h3 id="定义">定义</h3>
<blockquote>
<p><code>状态模式</code>: 状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p>
</blockquote>
<p>状态模式的类图如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/_UOHaXfAO3xSgJJws_AoNGSDKWxCz6sD-N3xKvcY1hq_ZttIir68g9Ql295f8vED" alt="" loading="lazy"></figure>
<blockquote>
<p>状态模式是将多个行为封装在状态对象中， context 的行为随时可委托到其中一个状态中。当前状态在不同的状态对象中改变，以反映出context 内部的状态，context 的行为也会随之改变。</p>
</blockquote>
<h3 id="扩展">扩展</h3>
<blockquote>
<p>如果，现在要在这四个状态的基础上再加一个状态（购买糖果后，有10%的概率再得一个），该如何实现呢？</p>
</blockquote>
<pre><code class="language-python"># 添加WinnerState 类，只有dispense 方法不同，可以从SoldState 类继承
class WinnerState(SoldState):
    
    def __str__(self):
        return &quot;winner&quot;

    def dispense(self):
        print(&quot;You're a WINNER! You get two gumballs for your quarter&quot;)
        self.gumball_machine.release_ball()
        if gumball_machine.count == 0:
            self.gumball_machine.state = self.gumball_machine.soldout_state
        else:
            self.gumball_machine.release_ball()
            if gumball_machine.count &gt; 0:
                self.gumball_machine.state = self.gumball_machine.no_quarter_state
            else:
                print(&quot;Oops, out of gumballs!&quot;)
                self.gumball_machine.state = self.gumball_machine.soldout_state

# 修改turn_crank 方法
class HasQuarterState(State):
    ...
    def turn_crank(self):
        print(&quot;You turned...&quot;)
        winner = random.randint(0, 9)
        if winner == 4 and self.gumball_machine.count &gt; 1: # 如果库存大于 1 并且随机数等于4（可以是0到9任意值）
            self.gumball_machine.state = self.gumball_machine.winner_state
        else:
            self.gumball_machine.state = self.gumball_machine.sold_state


# 在 GumballMachine 中初始化
class GumballMachine:

    def __init__(self, count=0):
        self.count = count
        # 找出所有状态，并创建实例变量来持有当前状态，然后定义状态的值
        ...
        self.winner_state = WinnerState(self)
        ...
</code></pre>
<h3 id="总结">总结</h3>
<ol>
<li>状态模式允许一个对象给予内部状态而拥有不同的行为</li>
<li>状态模式用类代表状态</li>
<li>Context 会将行为委托给当前状态对象</li>
<li>通过将每状态封装进一个类，把改变局部化</li>
<li>状态装欢可以由State 类或Context 类控制</li>
<li>使用状态模式会增加类的数目</li>
<li>状态类可以被多个Context 实例共享</li>
</ol>
<hr>
<blockquote>
<p>本文例子来自《Head First 设计模式》。</p>
</blockquote>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-模板方法模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-template-pattern/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-template-pattern/">
        </link>
        <updated>2018-12-02T01:23:56.000Z</updated>
        <content type="html"><![CDATA[<p>首先先介绍一下咖啡和茶的冲泡方法：</p>
<p><strong>茶</strong></p>
<pre><code>1. 把水煮沸
2. 用沸水浸泡茶叶
3. 把茶放到杯子里
</code></pre>
<p><strong>咖啡</strong></p>
<pre><code>1. 把水煮沸
2. 用沸水冲泡咖啡
3. 把咖啡倒进杯子
4. 加糖和牛奶
</code></pre>
<p>用python代码实现冲泡方法大概是这个样子：</p>
<pre><code class="language-python"># 茶的制作方法
class Tea:

    def prepare_recipe(self):
        # 在下边实现具体步骤
        self.boil_water()
        self.brew_tea_bag()
        self.pour_in_cup()
        
    def boil_water(self):
        print(&quot;Boiling water&quot;)
        
    def brew_tea_bag(self):
        print(&quot;Steeping the tea&quot;)
        
    def pour_in_cup(self):
        print(&quot;Pouring into cup&quot;)
</code></pre>
<pre><code class="language-python"># 咖啡的制作方法
class Coffee:

    def prepare_recipe(self):
        # 在下边实现具体步骤
        self.boil_water()
        self.brew_coffee_grinds()
        self.pour_in_cup()
        self.add_sugar_and_milk()
        
    def boil_water(self):
        print(&quot;Boiling water&quot;)
        
    def brew_coffee_grinds(self):
        print(&quot;Dripping Coffee through filter&quot;)
        
    def pour_in_cup(self):
        print(&quot;Pouring into cup&quot;)
        
    def add_sugar_and_milk(self):
        print(&quot;Adding Sugar and Milk&quot;)
</code></pre>
<p>仔细看上边两端代码会发现，茶和咖啡的实现方式基本类似，都有<code>prepare_recipe</code>，<code>boil_water</code>，<code>pour_in_cup</code> 这三个方法。</p>
<blockquote>
<p><code>问题：</code>如何重新设计这两个类来让代码更简洁呢？</p>
</blockquote>
<p>首先看一下两个类的类图：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/jom4jOc8uWezDNwLSyqUYcOF5pXzLTh4ztvglMCIajscrtcrp3T5eyH7YnOgZbwD" alt="2bd637fbc0532bd0bafbf861005fabd3.png" loading="lazy"></figure>
<ol>
<li>每个类中都有 <code>prepare_recipe() boil_water() pour_in_cup()</code>方法。</li>
<li>每个类中<code>prepare_recipe()</code>方法的实现都不一样。</li>
</ol>
<p>现在把<code>prepare_recipe() boil_water() pour_in_cup()</code>三个方法抽取出来做成一个父类<code>CoffeineBeverage()</code>，<code>Tea</code> 和 <code>Coffee</code> 都继自<code>CoffeineBeverage()</code>。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/GTzGMHTGpxLF8o69DDykX4MCpkoy2Xf-uuGFWOIgARmWqv9xLnP5g74QKmgYf95d" alt="ce3e56409c313d4ce42e9878f3b5c8f4.png" loading="lazy"></figure>
<blockquote>
<p>因为每个类中<code>prepare_recipe()</code>实现的方法不一样，所以<code>Tea</code> 和 <code>Coffee</code> 类都分别实现了 <code>prepare_recipe()</code>。<br>
<code>问题</code>: 那么，有没有办法将<code>prepare_recipe()</code>也抽象化？</p>
</blockquote>
<p>对比 <code>Tea</code> 和 <code>Coffee</code> 的<code>prepare_recipe()</code> 方法会发现，他们之间的差异主要是：</p>
<pre><code class="language-python">
def prepare_recipe(self):
    # 相同部分隐藏
    # self.boil_water()
    self.brew_tea_bag()  # 差异1
    #self.pour_in_cup()
        
def prepare_recipe(self):
    # 相同部分隐藏
    # self.boil_water()
    self.brew_coffee_grinds() # 差异1
    # self.pour_in_cup()
    self.add_sugar_and_milk() # 差异2

</code></pre>
<p>这里的实现思路是，将两处差异分别用新的方法名代替，替换后结果如下：</p>
<pre><code class="language-python">
def prepare_recipe(self):
    # 新的实现方法
    self.boil_water()
    self.brew() # 差异1 使用brew 代替 brew_tea_bag 和 brew_coffee_grinds
    self.pour_in_cup()
    self.add_condiments() # 差异2 Tea 不需要此方法，可以用空的实现代替

</code></pre>
<p>新的类图如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/Fqusr6qE_RUIHrwJIoNIvR64HEE8LSNWndLIz3gmtNXNqdGw0nJ12GR9-l4SvD7T" alt="bff9cea3d8f8226b6a9bb29c1deb8d88.png" loading="lazy"></figure>
<p>现在，类 <code>Tea</code> 和 <code>Coffee</code> 只需要实现具体的 <code>brew()</code>和 <code>add_condiments()</code> 方法即可。代码实现如下：</p>
<pre><code class="language-python">
class CoffeineBeverage:

    def prepare_recipe(self):
        # 新的实现方法
        self.boil_water()
        self.brew() 
        self.pour_in_cup()
        self.add_condiments()
        
    def boil_water(self):
        print(&quot;Boiling water&quot;)
        
    def brew(self):
        # 需要在子类实现
        raise NotImplementedError
        
    def pour_in_cup(self):
        print(&quot;Pouring into cup&quot;)
        
    def add_condiments(self):
        # 这里其实是个钩子方法，子类可以视情况选择是否覆盖
        # 钩子方法是一个可选方法，也可以让钩子方法作为某些条件触发后的动作
        pass

# 茶的制作方法
class Tea(CoffeineBeverage):
        
    def brew(self):
        # 父类中声明了 raise NotImplementedError，这里必须要实现此方法
        print(&quot;Steeping the tea&quot;)
        
    # Tea 不需要 add_condiments 方法，所以这里不需要实现

# 咖啡的制作方法
class Coffee(CoffeineBeverage):
        
    def brew(self):
        # 父类中声明了 raise NotImplementedError，这里必须要实现此方法
        print(&quot;Dripping Coffee through filter&quot;)
        
    def add_condiments(self):
        print(&quot;Adding Sugar and Milk&quot;)
</code></pre>
<h3 id="模板方法">模板方法</h3>
<p>上述抽象过程使用的就是模板方法。模板方法定义了一个算法的步骤，并且允许子类为一个或多个步骤提供实现。在这个例子中，<code>prepare_recipe</code> 就是一个模板方法。</p>
<blockquote>
<p><code>定义：</code>模板方法牧师在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
</blockquote>
<h4 id="优点">优点</h4>
<ol>
<li>使用模板方法可以将代码的复用最大化</li>
<li>子类只需要实现自己的方法，将算法和实现的耦合降低。</li>
</ol>
<h4 id="好莱坞原则">好莱坞原则</h4>
<p>模板方法使用到了一个原则，<code>好莱坞原则</code>。</p>
<blockquote>
<p><code>好莱坞原则</code>，别调用我，我会调用你。</p>
</blockquote>
<p><img src="http://media.gusibi.mobi/F62XbVcTYD9i-4swfqL5_sgS8SYXCfyB_2h2pEJq2BIZ8LikiEF2Yulq3HIxvISz" alt="好莱坞原则" loading="lazy"><br>
在这个原则之下，允许低层组件将自己挂钩到系统上，但是由高层组件来决定什么时候使用这些低层组件。</p>
<p>在上边的例子中，CoffeineBeverage 是高层组件，Coffee和Tea 是低层组件，他们不会之间调用抽象类（CoffeineBeverage）。</p>
<h3 id="一个例子">一个例子🌰</h3>
<p>Python 第三方表单验证包 wtforms 的表单验证部分就使用到了模板方法模式。Field 类中<code>validate</code>方法就是一个模板方法，在这个方法中，会调用 <code>pre_validate</code>， <code>_run_validation_chain</code>，<code>post_validate</code>方法来验证表单，这些方法也都可以在子类中重新实现。具体实现可以参考以下源码。</p>
<p>源码地址：<a href="https://github.com/wtforms/wtforms/blob/master/src/wtforms/fields/core.py#L225">https://github.com/wtforms/wtforms/blob/master/src/wtforms/fields/core.py</a></p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://github.com/wtforms/wtforms/blob/master/src/wtforms/fields/core.py#L225">https://github.com/wtforms/wtforms/blob/master/src/wtforms/fields/core.py</a></li>
</ul>
<hr>
<blockquote>
<p>本文例子来自《Head First 设计模式》</p>
</blockquote>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-外观模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-facade-pattern/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-facade-pattern/">
        </link>
        <updated>2018-11-25T01:23:56.000Z</updated>
        <content type="html"><![CDATA[<p>上一篇<a href="https://mp.weixin.qq.com/s/69j6WbV_NoSumRuLj_gGug">《python设计模式-适配器模式》</a>介绍了如何将一个类的接口转换成另一个符合期望的接口。这一篇将要介绍需要一个为了简化接口而改变接口的新模式-外观模式（Facade-Pattern）。</p>
<h3 id="问题">问题</h3>
<blockquote>
<p><code>问题</code>：如果你组装了一套家庭影院，内含播放器、投影机、自动屏幕、立体声音响、爆米花机等。如何设计一个遥控器，可以简单的操作这个系统中的各个组件呢？</p>
</blockquote>
<p>首先来看一下最笨方式观赏电影的步骤：</p>
<ol>
<li>打开爆米花机</li>
<li>开始爆米花</li>
<li>将灯光调暗</li>
<li>放下屏幕</li>
<li>打开投影仪</li>
<li>将投影机的输入切换到播放器</li>
<li>将投影及设置在宽屏模式</li>
<li>打开功放</li>
<li>将功放的输入设置为播放器</li>
<li>将攻防设置为环绕立体声</li>
<li>将攻防音量调到适中</li>
<li>打开播放器</li>
<li>播放电影</li>
</ol>
<p>写成类和方法的调用大概是以下的样子：</p>
<pre><code class="language-python">
# 打开爆米花机，开始爆米花
poper.on()
poper.pop()
# 灯光调暗
lights.dim(10)

# 放下屏幕
screen.down()

# 打开投影仪，设置为宽屏模式
projector.on()
projector.setInput(dvd)
projector.wideScreenMode()

# 打开功放 设置为DVD 调整成环绕立体声模式，音量调到5
amp.on()
amp.setDvd(dvd)
amp.setSurroundSound()
amp.setVolume(5)

# 打开dvd 播放器
dvd.on()
dvd.play(movie)
</code></pre>
<p>可以看到代码中涉及到6个不同的类，而且电影看完后还需要回退，一切都要再反着重来一遍。怎样简化一下操作呢？<br>
现在，外观模式就可以大展身手了。</p>
<blockquote>
<p>使用外观模式，可以通过实现一个提供更合理的接口的外观类，将子系统变得更容易使用。当然，原来的接口还在。</p>
</blockquote>
<h3 id="解决方法">解决方法</h3>
<p><strong>先来看一下外观模式如何运作</strong></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/gqxnhAKcJZ7wYLGuWwls8NkjFUsAqou-lwHvR7I9Jrhk5sXtQv6xAqhqMnbO2ITW" alt="外观模式类图" loading="lazy"></figure>
<ol>
<li>这里为家庭影院系统创建了一个新的外观类<code>HomeTheaterFacade</code>，这个类暴露出来几个简单的方法，比如<code>watchMovie</code>，<code>endMovie</code>。</li>
<li>这个外观类将家庭影院的多个组件看作一个子系统，通过调用这个子系统来实现<code>watchMovie</code>方法。</li>
<li>外观只提供了一个更直接的操作方式，并没有将原来的子系统隔离，子系统的功能还可以使用</li>
</ol>
<blockquote>
<p><code>注意：</code></p>
<ol>
<li>可以有多个外观</li>
<li>外观提供简化的接口，但不隔离子系统</li>
<li>外观将实现从子系统中解耦，比如：现在有个子系统的组件需要升级换代，只需要把外观代码做相应的修改就可以实现</li>
<li>外观和适配器都可以包装多个类，但是<code>外观的意图时简化接口的调用</code>，而<code>适配器的意图是将接口转换成不同的接口</code>。</li>
</ol>
</blockquote>
<h3 id="示例">示例</h3>
<pre><code class="language-python">
class HomeTheaterFacade(object):

    #先声明需要用的子组件
    amp = Amplifier()
    tuner = Tuner()
    dvd = DvdPlayer()
    cd = CdPlayer()
    projector = Projector()
    lights = TheaterLights()
    screen = Screen()
    popper = PopcornPopper()
    
    def watchMovie(self, movie):
        # watchMovie 将之前需要手动处理的任务批量处理
        print(&quot;Get ready to watch a movie...&quot;)
        # 打开爆米花机，开始爆米花
        self.poper.on()
        self.poper.pop()
        # 灯光调暗
        self.lights.dim(10)

        # 放下屏幕
        self.screen.down()

        # 打开投影仪，设置为宽屏模式
        self.projector.on()
        self.projector.setInput(dvd)
        self.projector.wideScreenMode()

        # 打开功放 设置为DVD 调整成环绕立体声模式，音量调到5
        self.amp.on()
        self.amp.setDvd(dvd)
        self.amp.setSurroundSound()
        self.amp.setVolume(5)

        # 打开dvd 播放器
        self.dvd.on()
        self.dvd.play(movie)
    
    def endMovie(self):
        # endMovie 负责关闭一切，由子系统中的组件完成
        print(&quot;Shutting movie theater down...&quot;)
        self.popper.off()
        self.lights.on()
        self.screen.up()
        self.projector.off()
        self.amp.off()
        self.dvd.stop()
        self.dvd.eject()
        self.dvd.off()
</code></pre>
<h5 id="代码使用">代码使用</h5>
<pre><code class="language-python">def main():
    home_theater = HomeTheaterFacade() # 实例化外观
    home_theater.watchMovice() # 使用简化方法开启 关闭电影ß
    home_theater.endMovice()
</code></pre>
<h3 id="定义">定义</h3>
<blockquote>
<p><code>定义：</code>外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/LTw5Md09LS2JDhLP5TKFay5jNCGUK93PgDVhpB3clEv-8RzKOfyOFCvLlIzn4D0V" alt="外观模式类图" loading="lazy"></figure>
<p>从类图也可以了解到，外观模式的主要意图是提供一个更简单易用的接口。</p>
<h4 id="最少知识原则least-knowledge">最少知识原则（least Knowledge）</h4>
<p><code>最少知识原则</code>的意思是减少对象之间的交互，只和几个特定的对象交互。</p>
<blockquote>
<p>这个原则是希望在设计中，不要耦合太多的类，以免修改系统时，会影响到其它部分。</p>
</blockquote>
<p>比如：如果想从DVD播放器获取音响的音量，可以在Dvd播放器中加入一个方法，用来像音响请求当前音量，而不是先返回音响对象，再从音响对象返回音量。</p>
<pre><code class="language-python"># 不好的实践
def get_volume():
    tuner = dvd.tuner()
    return tuner.get_volume
    

# 好的实践
def get_volume():
    # 这里要给dvd 对象加一个get_volume方法
    return dvd.get_volume
</code></pre>
<blockquote>
<p><code>缺点：</code>虽然这个原则减少了对象之间的依赖，但是也会导致更多的包装被制造出来（比如上边例子中，就需要给<code>dvd 加一个 get_volume</code>方法），这也可能会导致系统更复杂。</p>
</blockquote>
<p>再回顾一下外观模式的例子，会发现外观模式符合<code>最少知识原则</code>，客户端只有<code>HomeTheaterFacade</code>这一个交互对象。它的存在让系统调用变的更简单，并且如果需要子系统有模块需要升级，只需要修改<code>HomeTheaterFacade</code>这个类就可以完成升级。</p>
<hr>
<blockquote>
<p>本文例子来自《Head First 设计模式》。</p>
</blockquote>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-适配器模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-adapter-pattern/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-adapter-pattern/">
        </link>
        <updated>2018-11-03T05:23:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>问题</code>：假设有一个软件系统，你希望它能在不改变现有代码的前提下和一个新的厂商类库搭配使用，但是这个新厂商所设计出来的接口不同于旧厂商的接口</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/ggjMjkbHdiBnU8YUY0iNQe3I9XXxZ_OYE0o7uI2Gxw8CXzOP1_WyHjcVrbXiDvcc" alt="" loading="lazy"></figure>
<p><strong>这个问题和下图的问题类似</strong></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/TWyhF3_0rCaiR4WVmmmVQN05VLUR0pVgbHL28bV4ce2Kim_i74yFICJDqEnoVi2L" alt="" loading="lazy"></figure>
<p>美国标准的插头🔌无法在欧洲标准的插座上使用，通常的做法是什么呢？</p>
<blockquote>
<p>添加一个插头适配器，适配器的作用是将欧式插头转换成美式插座，以便于让美式插头可以使用。</p>
</blockquote>
<h3 id="解决方案">解决方案</h3>
<p>所以，面对一个有全新接口的类库而又不能改变现有代码时，最先想到的做法是，在这两个系统之间添加一个适配器。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/VxXkkbIoWmKptVX2qSd_WNGrO2KdVgnrmMpe_sPdhuMk6xeVqLnJd3TN2qTY7k1q" alt="" loading="lazy"></figure>
<h3 id="简单的例子">简单的例子</h3>
<blockquote>
<p>有一个系统，需要一个鸭子🦆对象，但是现在只有一个火鸡🦃对象。鸭子和火鸡对象的功能简单描述如下：</p>
</blockquote>
<pre><code class="language-python">
# 鸭子的简单描述
class Duck:
    def quack(self):
        # 会呱呱叫
        print(&quot;Quack&quot;)
    
    def fly(self):
        # 飞的能力
        print(&quot;I'm flying&quot;)
        
# 火鸡的简单描述
class Turkey:
    def gobble(self):
        # 不会呱呱叫，只会咯咯叫
        print(&quot;Gobble gobble&quot;)
    
    def fly(self):
        # 飞的能力 但是飞不远
        print(&quot;I'm flying a short distance&quot;)
    
</code></pre>
<p>因为现在没有鸭子对象，只能那火鸡对象冒充。由于鸭子对象和火鸡对象功能不同，不能直接拿来用，现在就需要使用适配器来完成这个功能：</p>
<pre><code class="language-python">class TurkeyAdapter(Duck):
    turkey = Turkey()  # 这里实际使用的是火鸡对象
    
    # 实现鸭子对象拥有的quack方法
    def quack(self):
        self.turkey.gobble()
    
    def fly(self):
        # 假设火鸡比鸭子飞的短，为了模拟鸭子的动作，多飞几次
        for i in range(5):
            turkey.fly()
</code></pre>
<p>接下来调用就可以像使用鸭子对象一样使用火鸡适配后的对象。</p>
<pre><code class="language-python"># test

duck = Duck()
duck.quack()
duck.fly()

turkey_adapter = Duck()
turkey_adapter.quack()
turkey_adapter.fly()
</code></pre>
<p><strong>现在再来看一下适配器使用的过程：</strong></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/Y5ID_UHcjlr0row8knQGM5vb8KNtRSlH_-6k-SrVOgvbAsE-iH7kweMC-mgvIGnM" alt="" loading="lazy"></figure>
<ol>
<li>客户通过被适配者实现的接口调用适配器</li>
<li>适配器将请求转换为被适配者可以响应的请求</li>
<li>被适配者响应，把结果返回给适配器，然后适配器再将结果响应给客户。</li>
</ol>
<p>通过这个例子，接下来看一下适配器模式的正式定义</p>
<h3 id="定义">定义</h3>
<blockquote>
<p><code>适配器模式：</code>将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作。</p>
</blockquote>
<h4 id="优点">优点</h4>
<ul>
<li>可以通过创建适配器进行接口转换，让不兼容的接口兼容，让客户从实现的接口的解耦。</li>
<li>使用对象组合，以修改的接口包装被适配者</li>
<li>被适配的子类可以搭配着适配器使用</li>
<li>满足开放/封闭原则（open/close principle）</li>
</ul>
<blockquote>
<p><code>开放/封闭原则</code>是面向对象设计的基本原则之一，声明一个软件实体应该对扩展是开放的，对修改是关闭的。</p>
</blockquote>
<h3 id="真实世界中的适配器">真实世界中的适配器</h3>
<ul>
<li>xmltodict 可以将 xml 转换为 json</li>
<li>grpc 也可以认为是一种适配器，提供了跨语言调用能力</li>
<li>sqlalchemy 可以在不改变代码的情况下对接多种数据库</li>
</ul>
<blockquote>
<p>本文例子来自《Head First 设计模式》。</p>
</blockquote>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solidity 简易教程0x001]]></title>
        <id>http://blog.gusibi.site/post/solidity-sample-guide-0x001/</id>
        <link href="http://blog.gusibi.site/post/solidity-sample-guide-0x001/">
        </link>
        <updated>2018-10-22T05:36:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Solidity是以太坊的主要编程语言，它是一种静态类型的 JavaScript-esque 语言，是面向合约的、为实现智能合约而创建的高级编程语言，设计的目的是能在以太坊虚拟机（EVM）上运行。</p>
<p><code>本文基于CryptoZombies，教程地址为：https://cryptozombies.io/zh/lesson/2</code></p>
</blockquote>
<h3 id="地址address">地址（address）</h3>
<p>以太坊区块链由 account (账户)组成，你可以把它想象成银行账户。一个帐户的余额是以太 （在以太坊区块链上使用的币种），你可以和其他帐户之间支付和接受以太币，就像你的银行帐户可以电汇资金到其他银行帐户一样。</p>
<p>每个帐户都有一个“地址”，你可以把它想象成银行账号。这是账户唯一的标识符，它看起来长这样：</p>
<pre><code>0x0cE446255506E92DF41614C46F1d6df9Cc969183
</code></pre>
<blockquote>
<p>这是 CryptoZombies 团队的地址，为了表示支持CryptoZombies，可以赞赏一些以太币！</p>
</blockquote>
<p><code>address</code>：地址类型存储一个 20 字节的值（以太坊地址的大小）。 地址类型也有成员变量，并作为所有合约的基础。</p>
<blockquote>
<p><code>address</code> 类型是一个160位的值，且不允许任何算数操作。这种类型适合存储合约地址或外部人员的密钥对。</p>
</blockquote>
<h3 id="映射mapping">映射（mapping）</h3>
<blockquote>
<p>Mappings 和<a href="https://en.wikipedia.org/wiki/Hash_table">哈希表</a>类似，它会执行虚拟初始化，以使所有可能存在的键都映射到一个字节表示为全零的值。</p>
</blockquote>
<p>映射是这样定义的：</p>
<pre><code class="language-javascript">//对于金融应用程序，将用户的余额保存在一个 uint类型的变量中：
mapping (address =&gt; uint) public accountBalance;
//或者可以用来通过userId 存储/查找的用户名
mapping (uint =&gt; string) userIdToName;
</code></pre>
<p>映射本质上是存储和查找数据所用的键-值对。在第一个例子中，键是一个 address，值是一个 uint，在第二个例子中，键是一个uint，值是一个 string。</p>
<blockquote>
<p>映射类型在声明时的形式为 mapping(_KeyType =&gt; _ValueType)。 其中 _KeyType 可以是除了映射、变长数组、合约、枚举以及结构体以外的几乎所有类型。 _ValueType 可以是包括映射类型在内的任何类型。</p>
</blockquote>
<p>对映射的取值操作如下：</p>
<pre><code class="language-javascript">userIdToName[12]
// 如果键12 不在 映射中，得到的结果是0
</code></pre>
<blockquote>
<p>映射中，实际上并不存储 key，而是存储它的 keccak256 哈希值，从而便于查询实际的值。所以<strong>映射是没有长度的，也没有 key 的集合或 value 的集合的概念。</strong>，你不能像操作<code>python</code>字典那应该获取到当前 Mappings 的所有键或者值。</p>
</blockquote>
<h3 id="特殊变量">特殊变量</h3>
<p>在 Solidity 中，在全局命名空间中已经存在了（预设了）一些特殊的变量和函数，他们主要用来提供关于区块链的信息或一些通用的工具函数。</p>
<h4 id="msgsender">msg.sender</h4>
<p>msg.sender指的是当前调用者（或智能合约）的 address。</p>
<blockquote>
<p>注意：在 Solidity 中，功能执行始终需要从外部调用者开始。 一个合约只会在区块链上什么也不做，除非有人调用其中的函数。所以对于每一个<strong>外部函数</strong>调用，包括 msg.sender 和 msg.value 在内所有 msg 成员的值都会变化。这里包括对库函数的调用。</p>
</blockquote>
<p>以下是使用 msg.sender 来更新 mapping 的例子：</p>
<pre><code class="language-javascript">mapping (address =&gt; uint) favoriteNumber;

function setMyNumber(uint _myNumber) public {
  // 更新我们的 `favoriteNumber` 映射来将 `_myNumber`存储在 `msg.sender`名下
  favoriteNumber[msg.sender] = _myNumber;
  // 存储数据至映射的方法和将数据存储在数组相似
}

function whatIsMyNumber() public view returns (uint) {
  // 拿到存储在调用者地址名下的值
  // 若调用者还没调用 setMyNumber， 则值为 `0`
  return favoriteNumber[msg.sender];
}
</code></pre>
<p>在这个小小的例子中，任何人都可以调用 setMyNumber 在我们的合约中存下一个 uint 并且与他们的地址相绑定。 然后，他们调用 whatIsMyNumber 就会返回他们存储的 uint。</p>
<p>使用 msg.sender 很安全，因为它具有以太坊区块链的安全保障 —— 除非窃取与以太坊地址相关联的私钥，否则是没有办法修改其他人的数据的。</p>
<p>以下是其它的一些特殊变量。</p>
<h4 id="区块和交易属性">区块和交易属性</h4>
<ul>
<li>block.blockhash(uint blockNumber) returns (bytes32)：指定区块的区块哈希——仅可用于最新的 256 个区块且不包括当前区块；而 blocks 从 0.4.22 版本开始已经不推荐使用，由 blockhash(uint blockNumber) 代替</li>
<li>block.coinbase (address): 挖出当前区块的矿工地址</li>
<li>block.difficulty (uint): 当前区块难度</li>
<li>block.gaslimit (uint): 当前区块 gas 限额</li>
<li>block.number (uint): 当前区块号</li>
<li>block.timestamp (uint): 自 unix epoch 起始当前区块以秒计的时间戳</li>
<li>gasleft() returns (uint256)：剩余的 gas</li>
<li>msg.data (bytes): 完整的 calldata</li>
<li>msg.gas (uint): 剩余 gas - 自 0.4.21 版本开始已经不推荐使用，由 gesleft() 代替</li>
<li>msg.sender (address): 消息发送者（当前调用）</li>
<li>msg.sig (bytes4): calldata 的前 4 字节（也就是函数标识符）</li>
<li>msg.value (uint): 随消息发送的 wei 的数量</li>
<li>now (uint): 目前区块时间戳（block.timestamp）</li>
<li>tx.gasprice (uint): 交易的 gas 价格</li>
<li>tx.origin (address): 交易发起者（完全的调用链）</li>
</ul>
<h3 id="错误处理">错误处理</h3>
<p>Solidity 使用状态恢复异常来处理错误。这种异常将撤消对当前调用（及其所有子调用）中的状态所做的所有更改，并且还向调用者标记错误。</p>
<p>函数 <code>assert</code> 和 <code>require</code> 可用于检查条件并在条件不满足时抛出异常。</p>
<ul>
<li>assert 函数只能用于测试内部错误，并检查非变量。</li>
<li>require 函数用于确认条件有效性，例如输入变量，或合约状态变量是否满足条件，或验证外部合约调用返回的值。</li>
</ul>
<p>这里主要介绍 <code>require</code></p>
<p>require使得函数在执行过程中，当不满足某些条件时抛出错误，并停止执行：</p>
<pre><code class="language-javascript">function sayHiToVitalik(string _name) public returns (string) {
  // 比较 _name 是否等于 &quot;Vitalik&quot;. 如果不成立，抛出异常并终止程序
  // (敲黑板: Solidity 并不支持原生的字符串比较, 我们只能通过比较
  // 两字符串的 keccak256 哈希值来进行判断)
  require(keccak256(_name) == keccak256(&quot;Vitalik&quot;));
  // 如果返回 true, 运行如下语句
  return &quot;Hi!&quot;;
}
</code></pre>
<p>如果你这样调用函数 <code>sayHiToVitalik(&quot;Vitalik&quot;)</code> ,它会返回“Hi！”。而如果调用的时候使用了其他参数，它则会抛出错误并停止执行。</p>
<p>因此，在调用一个函数之前，用 require 验证前置条件是非常有必要的。</p>
<blockquote>
<p>注意：在 Solidity 中，关键词放置的顺序并不重要</p>
</blockquote>
<pre><code class="language-javascript">// 以下两个语句等效
require(keccak256(_name) == keccak256(&quot;Vitalik&quot;));
require(keccak256(&quot;Vitalik&quot;) == keccak256(_name));
</code></pre>
<h3 id="外内部函数">外/内部函数</h3>
<p>除 public 和 private 属性之外，Solidity 还使用了另外两个描述函数可见性的修饰词：internal（内部） 和 external（外部）。</p>
<p><code>internal</code> 和 <code>private</code> 类似，不过，如果某个合约继承自其父合约，这个合约即可以访问父合约中定义的<code>“内部(internal)”函数</code>。</p>
<p><code>external</code> 与<code>public</code> 类似，只不过<code>external</code>函数只能在合约之外调用 - 它们不能被合约内的其他函数调用。</p>
<p>声明函数 internal 或 external 类型的语法，与声明 private 和 public类 型相同：</p>
<pre><code class="language-javascript">contract Sandwich {
  uint private sandwichesEaten = 0;

  function eat() internal {
    sandwichesEaten++;
  }
}

contract BLT is Sandwich {
  uint private baconSandwichesEaten = 0;

  function eatWithBacon() public returns (string) {
    baconSandwichesEaten++;
    // 因为eat() 是internal 的，所以我们能在这里调用
    eat();
  }
}
</code></pre>
<p>Solidity 有两种函数调用（内部调用不会产生实际的 EVM 调用或称为<code>消息调用</code>，而外部调用则会产生一个 EVM 调用）， 函数和状态变量有四种可见性类型。 函数可以指定为 external ，public ，internal 或者 private，默认情况下函数类型为 public。 对于状态变量，不能设置为 external ，默认是 internal 。</p>
<ul>
<li>
<p><code>external ：</code><br>
外部函数作为合约接口的一部分，意味着我们可以从其他合约和交易中调用。 一个外部函数 f 不能从内部调用（即 f 不起作用，但 this.f() 可以）。 当收到大量数据的时候，外部函数有时候会更有效率。</p>
</li>
<li>
<p><code>public ：</code><br>
public 函数是合约接口的一部分，可以在内部或通过消息调用。对于公共状态变量， 会自动生成一个 getter 函数。</p>
</li>
<li>
<p><code>internal ：</code><br>
这些函数和状态变量只能是内部访问（即从当前合约内部或从它派生的合约访问），不使用 this 调用。</p>
</li>
<li>
<p><code>private ：</code><br>
private 函数和状态变量仅在当前定义它们的合约中使用，并且不能被派生合约使用。</p>
</li>
</ul>
<blockquote>
<p>合约中的所有内容对外部观察者都是可见的。设置一些 private 类型只能阻止其他合约访问和修改这些信息， 但是对于区块链外的整个世界它仍然是可见的。</p>
</blockquote>
<p>可见性标识符的定义位置，对于状态变量来说是在类型后面，对于函数是在参数列表和返回关键字中间。</p>
<pre><code class="language-javascript">pragma solidity ^0.4.16;

contract C {
    // 对于函数是在参数列表和返回关键字中间。
    function f(uint a) private pure returns (uint b) { return a + 1; }
    function setData(uint a) internal { data = a; }
    uint public data;  // 对于状态变量来说是在类型后面
}
</code></pre>
<h3 id="函数多值返回">函数多值返回</h3>
<p>和 python 类似，Solidity 函数支持多值返回，比如：</p>
<pre><code class="language-javascript">
function multipleReturns() internal returns(uint a, uint b, uint c) {
  return (1, 2, 3);
}

function processMultipleReturns() external {
  uint a;
  uint b;
  uint c;
  // 这样来做批量赋值:
  (a, b, c) = multipleReturns();
}

// 或者如果我们只想返回其中一个变量:
function getLastReturnValue() external {
  uint c;
  // 可以对其他字段留空:
  (,,c) = multipleReturns();
}

</code></pre>
<blockquote>
<p>这里留空字段使用<code>,</code>的方式太不直观了，还不如 python/go 使用下划线<code>_</code>代替无用字段。</p>
</blockquote>
<h3 id="storage与memory">Storage与Memory</h3>
<p>在 Solidity 中，有两个地方可以存储变量 —— storage 或 memory。</p>
<p>Storage 变量是指永久存储在区块链中的变量。 Memory 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 你可以把它想象成存储在你电脑的硬盘或是RAM中数据的关系。</p>
<blockquote>
<p>storage 和 memory 放到状态变量名前边，在类型后边，格式如下：<br>
<code>变量类型 &lt;storage|memory&gt; 变量名</code></p>
</blockquote>
<p>大多数时候都用不到这些关键字，默认情况下 Solidity 会自动处理它们。 状态变量（在函数之外声明的变量）默认为“存储”形式，并永久写入区块链；而在函数内部声明的变量是“内存”型的，它们函数调用结束后消失。</p>
<p>然而也有一些情况下，你需要手动声明存储类型，主要用于处理函数内的 <code>结构体</code> 和 <code>数组</code> 时：</p>
<pre><code class="language-javascript">contract SandwichFactory {
  struct Sandwich {
    string name;
    string status;
  }

  Sandwich[] sandwiches;

  function eatSandwich(uint _index) public {
    // Sandwich mySandwich = sandwiches[_index];

    // ^ 看上去很直接，不过 Solidity 将会给出警告
    // 告诉你应该明确在这里定义 `storage` 或者 `memory`。

    // 所以你应该明确定义 `storage`:
    Sandwich storage mySandwich = sandwiches[_index];
    // ...这样 `mySandwich` 是指向 `sandwiches[_index]`的指针
    // 在存储里，另外...
    mySandwich.status = &quot;Eaten!&quot;;
    // ...这将永久把 `sandwiches[_index]` 变为区块链上的存储

    // 如果你只想要一个副本，可以使用`memory`:
    Sandwich memory anotherSandwich = sandwiches[_index + 1];
    // ...这样 `anotherSandwich` 就仅仅是一个内存里的副本了
    // 另外
    anotherSandwich.status = &quot;Eaten!&quot;;
    // ...将仅仅修改临时变量，对 `sandwiches[_index + 1]` 没有任何影响
    // 不过你可以这样做:
    sandwiches[_index + 1] = anotherSandwich;
    // ...如果你想把副本的改动保存回区块链存储
  }
}
</code></pre>
<p>如果你还没有完全理解究竟应该使用哪一个，也不用担心 —— 在本教程中，我们将告诉你何时使用 storage 或是 memory，并且当你不得不使用到这些关键字的时候，Solidity 编译器也发警示提醒你的。</p>
<p>现在，只要知道在某些场合下也需要你显式地声明 storage 或 memory就够了！</p>
<h3 id="继承">继承</h3>
<p>Solidity 的继承和 Python 的继承相似，支持多重继承。<br>
看下面这个例子：</p>
<pre><code class="language-javascript">contract Doge {
  function catchphrase() public returns (string) {
    return &quot;So Wow CryptoDoge&quot;;
  }
}

contract BabyDoge is Doge {
  function anotherCatchphrase() public returns (string) {
    return &quot;Such Moon BabyDoge&quot;;
  }
}

// 可以多重继承。请注意，Doge 也是 BabyDoge 的基类，
// 但只有一个 Doge 实例（就像 C++ 中的虚拟继承）。
contract BlackBabyDoge is Doge, BabyDoge {
  function color() public returns (string) {
    return &quot;Black&quot;;
  }
}

</code></pre>
<p><code>BabyDoge</code> 从 <code>Doge</code> 那里 <code>inherits（继承)</code>过来。 这意味着当编译和部署了 <code>BabyDoge</code>，它将可以访问 catchphrase() 和 anotherCatchphrase()和其他我们在 Doge 中定义的其他公共函数（private 函数不可访问）。</p>
<p>Solidity使用 is 从另一个合约派生。派生合约可以访问所有非私有成员，包括内部函数和状态变量，但无法通过 <code>this</code> 来外部访问。</p>
<h4 id="基类构造函数的参数">基类构造函数的参数</h4>
<p>派生合约需要提供基类构造函数需要的所有参数。这可以通过两种方式来完成:</p>
<pre><code class="language-javascript">pragma solidity ^0.4.0;

contract Base {
    uint x;
    // 这是注册 Base 和设置名称的构造函数。
    function Base(uint _x) public { x = _x; }
}

contract Derived is Base(7) {
    function Derived(uint _y) Base(_y * _y) public {
    }
}

contract Derived1 is Base {
    function Derived1(uint _y) Base(_y * _y) public {
    }
}
</code></pre>
<p>一种方法直接在继承列表中调用基类构造函数（<code>is Base(7)</code>）。 另一种方法是像 <code>修饰器 modifier</code> 使用方法一样， 作为派生合约构造函数定义头的一部分，（<code>Base(_y * _y)</code>)。 如果构造函数参数是常量并且定义或描述了合约的行为，使用第一种方法比较方便。 如果基类构造函数的参数依赖于派生合约，那么必须使用第二种方法。 如果像这个简单的例子一样，两个地方都用到了，优先使用 修饰器modifier 风格的参数。</p>
<h3 id="抽象合约">抽象合约</h3>
<p>合约函数可以缺少实现，如下例所示（请注意函数声明头由 <strong>;</strong> 结尾）:</p>
<pre><code class="language-javascript">pragma solidity ^0.4.0;

contract Feline {
    function utterance() public returns (bytes32);
}
</code></pre>
<p>这些合约无法成功编译（即使它们除了未实现的函数还包含其他已经实现了的函数），但他们可以用作基类合约:</p>
<pre><code class="language-javascript">pragma solidity ^0.4.0;

contract Feline {
    function utterance() public returns (bytes32);
}

contract Cat is Feline {
    function utterance() public returns (bytes32) { return &quot;miaow&quot;; }
}
</code></pre>
<p>如果合约继承自抽象合约，并且没有通过重写来实现所有未实现的函数，那么它本身就是抽象的。</p>
<h3 id="接口interface">接口（Interface）</h3>
<p>接口类似于抽象合约，但是它们不能实现任何函数。还有进一步的限制：</p>
<ul>
<li>无法继承其他合约或接口。</li>
<li>无法定义构造函数。</li>
<li>无法定义变量。</li>
<li>无法定义结构体</li>
<li>无法定义枚举。</li>
</ul>
<p>首先，看一下一个interface的例子：</p>
<pre><code class="language-javascript">
contract NumberInterface {
  function getNum(address _myAddress) public view returns (uint);
}
</code></pre>
<p>请注意，这个过程虽然看起来像在定义一个合约，但其实内里不同：</p>
<ul>
<li>首先，只声明了要与之交互的函数 —— 在本例中为 getNum —— 在其中没有使用到任何其他的函数或状态变量。</li>
<li>其次，并没有使用大括号（{ 和 }）定义函数体，单单用分号（<code>;</code>）结束了函数声明。这使它看起来像一个合约框架。</li>
</ul>
<p>编译器就是靠这些特征认出它是一个接口的。</p>
<blockquote>
<p>就像继承其他合约一样，合约可以继承接口。</p>
</blockquote>
<p>可以在合约中这样使用接口：</p>
<pre><code class="language-javascript">contract MyContract {
  address NumberInterfaceAddress = 0xab38...;
  // ^ 这是FavoriteNumber合约在以太坊上的地址
  NumberInterface numberContract = NumberInterface(NumberInterfaceAddress);
  // 现在变量 `numberContract` 指向另一个合约对象

  function someFunction() public {
    // 现在我们可以调用在那个合约中声明的 `getNum`函数:
    uint num = numberContract.getNum(msg.sender);
    // ...在这儿使用 `num`变量做些什么
  }
}
</code></pre>
<p>通过这种方式，只要将合约的可见性设置为<code>public</code>(公共)或<code>external</code>(外部)，它们就可以与以太坊区块链上的任何其他合约进行交互。</p>
<h3 id="与其他合约的交互">与其他合约的交互</h3>
<p>如果一个合约需要和区块链上的其他的合约会话，则需先定义一个 interface (接口)。</p>
<p>先举一个简单的栗子。 假设在区块链上有这么一个合约：</p>
<pre><code class="language-javascript">contract LuckyNumber {
  mapping(address =&gt; uint) numbers;

  function setNum(uint _num) public {
    numbers[msg.sender] = _num;
  }

  function getNum(address _myAddress) public view returns (uint) {
    return numbers[_myAddress];
  }
}
</code></pre>
<p>这是个很简单的合约，可以用它存储自己的幸运号码，并将其与调用者的以太坊地址关联。 这样其他人就可以通过地址查找幸运号码了。</p>
<p>现在假设我们有一个外部合约，使用 getNum 函数可读取其中的数据。</p>
<p>首先，我们定义 LuckyNumber 合约的 interface ：</p>
<pre><code class="language-javascript">
contract NumberInterface {
  function getNum(address _myAddress) public view returns (uint);
}
</code></pre>
<p>使用这个接口，合约就知道其他合约的函数是怎样的，应该如何调用，以及可期待什么类型的返回值。</p>
<p>下面是一个示例代码，会用到上边的知识点：</p>
<pre><code class="language-javascript">pragma solidity ^0.4.19;

contract ZombieFactory {

    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {
        string name;
        uint dna;
    }

    Zombie[] public zombies;

    // 创建一个叫做 zombieToOwner 的映射。其键是一个uint，值为 address。映射属性为public
    mapping (uint =&gt; address) public zombieToOwner;
    // 创建一个名为 ownerZombieCount 的映射，其中键是 address，值是 uint
    mapping (address =&gt; uint) ownerZombieCount;

    function _createZombie(string _name, uint _dna) private {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }

    function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }

    function createRandomZombie(string _name) public {
        // 我们使用了 require 来确保这个函数只有在每个用户第一次调用它的时候执行，用以创建初始僵尸
        require(ownerZombieCount[msg.sender] == 0);
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

}

// CryptoKitties 合约提供了getKitty 函数，它返回所有的加密猫的数据，包括它的“基因”（僵尸游戏要用它生成新的僵尸）。
// 一个获取 kitty 的接口
contract KittyInterface {
  
  // 在interface里定义了 getKitty 函数 在 returns 语句之后用分号
  function getKitty(uint256 _id) external view returns (
    bool isGestating,
    bool isReady,
    uint256 cooldownIndex,
    uint256 nextActionAt,
    uint256 siringWithId,
    uint256 birthTime,
    uint256 matronId,
    uint256 sireId,
    uint256 generation,
    uint256 genes
  );
}

//ZombieFeeding继承自 `ZombieFactory 合约
contract ZombieFeeding is ZombieFactory {
  
  // CryptoKitties 合约的地址
  address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;
  // 创建一个名为 kittyContract 的 KittyInterface，并用 ckAddress 为它初始化 
  KittyInterface kittyContract = KittyInterface(ckAddress);
  
  function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) public {
      // 确保对自己僵尸的所有权
      require(msg.sender == zombieToOwner[_zombieId]);
      // 声明一个名为 myZombie 数据类型为Zombie的 storage 类型本地变量
      Zombie storage myZombie = zombies[_zombieId];
      _targetDna = _targetDna % dnaModulus;
      uint newDna = (myZombie.dna + _targetDna) / 2;
      // Add an if statement here
      if (keccak256(_species) == keccak256(&quot;kitty&quot;)){
          newDna = newDna - newDna％100 + 99;
      }
      _createZombie(&quot;NoName&quot;, newDna);
  }
  
  function feedOnKitty(uint _zombieId, uint _kittyId) public {
    uint kittyDna;
    // 多值返回，这里只需要最后一个值
    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);
    feedAndMultiply(_zombieId, kittyDna, &quot;kitty&quot;);
  }
}

</code></pre>
<blockquote>
<p>这段代码看起来内容有点多，可以拆分一下，把 <code>ZombieFactory</code>代码提取到一个新的文件<code>zombiefactory.sol</code>，现在就可以使用 import 语句来导入另一个文件的代码。</p>
</blockquote>
<h3 id="import">import</h3>
<p>在 Solidity 中，当你有多个文件并且想把一个文件导入另一个文件时，可以使用 import 语句：</p>
<pre><code class="language-javascript">
import &quot;./someothercontract.sol&quot;;

contract newContract is SomeOtherContract {

}
</code></pre>
<p>这样当我们在合约（contract）目录下有一个名为 someothercontract.sol 的文件（ ./ 就是同一目录的意思），它就会被编译器导入。</p>
<blockquote>
<p>这一点和 go 类似，在同一目录下文件中的内容可以直接使用，而不用使用 <strong>xxx.name</strong> 的形式。</p>
</blockquote>
<h3 id="测试调用">测试调用</h3>
<p>编译和部署 ZombieFeeding，就可以将这个合约部署到以太坊了。最终完成的这个合约继承自 ZombieFactory，因此它可以访问自己和父辈合约中的所有 public 方法。</p>
<p>下面是一个与ZombieFeeding合约进行交互的例子， 这个例子使用了 JavaScript 和 web3.js：</p>
<pre><code class="language-javascript">var abi = /* abi generated by the compiler */
var ZombieFeedingContract = web3.eth.contract(abi)
var contractAddress = /* our contract address on Ethereum after deploying */
var ZombieFeeding = ZombieFeedingContract.at(contractAddress)

// 假设我们有我们的僵尸ID和要攻击的猫咪ID
let zombieId = 1;
let kittyId = 1;

// 要拿到猫咪的DNA，我们需要调用它的API。这些数据保存在它们的服务器上而不是区块链上。
// 如果一切都在区块链上，我们就不用担心它们的服务器挂了，或者它们修改了API，
// 或者因为不喜欢我们的僵尸游戏而封杀了我们
let apiUrl = &quot;https://api.cryptokitties.co/kitties/&quot; + kittyId
$.get(apiUrl, function(data) {
  let imgUrl = data.image_url
  // 一些显示图片的代码
})

// 当用户点击一只猫咪的时候:
$(&quot;.kittyImage&quot;).click(function(e) {
  // 调用我们合约的 `feedOnKitty` 函数
  ZombieFeeding.feedOnKitty(zombieId, kittyId)
})

// 侦听来自我们合约的新僵尸事件好来处理
ZombieFactory.NewZombie(function(error, result) {
  if (error) return
  // 这个函数用来显示僵尸:
  generateZombie(result.zombieId, result.name, result.dna)
})
</code></pre>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://solidity-cn.readthedocs.io/zh/develop/index.html">Solidity 文档：https://solidity-cn.readthedocs.io/zh/develop/index.html</a></li>
<li><a href="https://cryptozombies.io/zh/lesson/2">cryptozombie-lessons2 僵尸攻击人类：https://cryptozombies.io/zh/lesson/2</a></li>
<li><a href="https://mp.weixin.qq.com/s/1MaIc7uNqBMx-_eO4WGQgA">Solidity 简易教程</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemy in 空列表问题分析]]></title>
        <id>http://blog.gusibi.site/post/sqlalchemy_in_empty_list_analyze/</id>
        <link href="http://blog.gusibi.site/post/sqlalchemy_in_empty_list_analyze/">
        </link>
        <updated>2018-10-04T05:36:53.000Z</updated>
        <content type="html"><![CDATA[<p>SQLAlchemy in 空列表问题</p>
<h3 id="问题场景">问题场景</h3>
<p>有model <code>Account</code>，SQLAlchemy 查询语句如下：</p>
<pre><code class="language-python">query = Account.query.filter(Account.id.in_(account_ids)).order_by(Account.date_created.desc())
</code></pre>
<p>这里 account_ids 如果为空，执行查询会有如下警告：</p>
<pre><code class="language-bash">/usr/local/lib/python2.7/site-packages/sqlalchemy/sql/default_comparator.py:35: SAWarning: The IN-predicate on &quot;account.id&quot; was invoked with an empty sequence. This results in a contradiction, which nonetheless can be expensive to evaluate.  Consider alternative strategies for improved performance.
  return o[0](self, self.expr, op, *(other + o[1:]), **kwargs)
</code></pre>
<blockquote>
<p>这里的意思是使用一个空的列表会花费较长的时间，需要优化以提高性能。</p>
</blockquote>
<p><strong>为什么会有这个提示呢？一个空列表为什么会影响性能呢？</strong></p>
<p>首先打印 query 可得到如下 sql 语句：</p>
<pre><code class="language-sql">SELECT *   // 字段使用 “*” 代替
FROM account
WHERE account.id != account.id ORDER BY account.date_created DESC
</code></pre>
<p>会发现生成的语句中过滤条件是 <code>WHERE account.id != account.id</code>，使用 <code>PostgreSQL Explain ANALYZE 命令</code>，</p>
<ul>
<li>EXPLAIN：显示PostgreSQL计划程序为提供的语句生成的执行计划。</li>
<li>ANALYZE：收集有关数据库中表的内容的统计信息。</li>
</ul>
<p>分析查询成本结果如下：</p>
<pre><code class="language-bash">postgres=&gt; EXPLAIN ANALYZE SELECT *
FROM account
WHERE account.id != account.id ORDER BY account.date_created DESC;
                                    QUERY PLAN
----------------------------------------------------------------------------------
 Sort  (cost=797159.14..808338.40 rows=4471702 width=29) (actual time=574.002..574.002 rows=0 loops=1)
   Sort Key: date_created DESC
   Sort Method: quicksort  Memory: 25kB
   -&gt;  Seq Scan on account  (cost=0.00..89223.16 rows=4471702 width=29) (actual time=573.991..573.991 rows=0 loops=1)
         Filter: (id &lt;&gt; id)
         Rows Removed by Filter: 4494173
 Planning time: 0.162 ms
 Execution time: 574.052 ms
(8 rows)
</code></pre>
<p>先看Postgresql提供的语句生成的执行计划，通过结果可以看到，虽然返回值为空，但是查询成本却还是特别高，执行计划部分几乎所有的时间都耗费在排序上，但是和执行时间相比，查询计划的时间可以忽略不计。（结果是先遍历全表，查出所有数据，然后再使用 <code>Filter: (id &lt;&gt; id)</code> 把所有数据过滤。）</p>
<p>按照这个思路，有两种查询方案：</p>
<ol>
<li>如果 account_ids 为空，那么直接返回空列表不进行任何操作，查询语句变为：</li>
</ol>
<pre><code class="language-python">if account_ids:
    query = Account.query.filter(Account.id.in_(account_ids)).order_by(Account.date_created.desc())
</code></pre>
<ol start="2">
<li>如果 account_ids 为空，那么过滤方式，查询语句变为：</li>
</ol>
<pre><code class="language-python">query = Account.query
if account_ids:
    query = query.filter(Account.id.in_(account_ids))
else:
    query = query.filter(False)
    
query = query.order_by(Account.date_created.desc())
</code></pre>
<p>如果 account_ids 为空，此时生成的 SQL 语句结果为：</p>
<pre><code class="language-sql">SELECT *
FROM account
WHERE 0 = 1 ORDER BY account.date_created DESC
</code></pre>
<p>分析结果为：</p>
<pre><code class="language-sql">postgres=&gt; EXPLAIN ANALYZE SELECT *
FROM account
WHERE 0 = 1 ORDER BY account.date_created DESC;
                                            QUERY PLAN
---------------------------------------------------------------------------------------------------
 Sort  (cost=77987.74..77987.75 rows=1 width=29) (actual time=0.011..0.011 rows=0 loops=1)
   Sort Key: date_created DESC
   Sort Method: quicksort  Memory: 25kB
   -&gt;  Result  (cost=0.00..77987.73 rows=1 width=29) (actual time=0.001..0.001 rows=0 loops=1)
         One-Time Filter: false
         -&gt;  Seq Scan on account  (cost=0.00..77987.73 rows=1 width=29) (never executed)
 Planning time: 0.197 ms
 Execution time: 0.061 ms
(8 rows)
</code></pre>
<p>可以看到，查询计划和执行时间都有大幅提高。</p>
<h4 id="一个测试">一个测试</h4>
<blockquote>
<p>如果只是去掉方案1排序，查看一下分析结果</p>
</blockquote>
<p>使用 <code>PostgreSQL Explain ANALYZE 命令</code>分析查询成本结果如下：</p>
<pre><code class="language-sh">postgres=&gt; EXPLAIN ANALYZE SELECT *
FROM account
WHERE account.id != account.id;
                                 QUERY PLAN
----------------------------------------------------------------------------
 Seq Scan on account  (cost=0.00..89223.16 rows=4471702 width=29) (actual time=550.999..550.999 rows=0 loops=1)
   Filter: (id &lt;&gt; id)
   Rows Removed by Filter: 4494173
 Planning time: 0.134 ms
 Execution time: 551.041 ms
</code></pre>
<p>可以看到，时间和有排序时差别不大。</p>
<h3 id="如何计算查询成本">如何计算查询成本</h3>
<p>执行一个分析，结果如下：</p>
<pre><code class="language-sql">postgres=&gt; explain select * from account where date_created ='2016-04-07 18:51:30.371495+08';
                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Seq Scan on account  (cost=0.00..127716.33 rows=1 width=211)
   Filter: (date_created = '2016-04-07 18:51:30.371495+08'::timestamp with time zone)
(2 rows)
</code></pre>
<p>EXPLAIN引用的数据是：</p>
<ol>
<li>0.00 预计的启动开销(在输出扫描开始之前消耗的时间，比如在一个排序节点里做排续的时间)。</li>
<li>127716.33 预计的总开销。</li>
<li>1 预计的该规划节点输出的行数。</li>
<li>211 预计的该规划节点的行平均宽度(单位：字节)。</li>
</ol>
<p>这里开销(cost)的计算单位是磁盘页面的存取数量，如1.0将表示一次顺序的磁盘页面读取。其中上层节点的开销将包括其所有子节点的开销。这里的输出行数(rows)并不是规划节点处理/扫描的行数，通常会更少一些。一般而言，顶层的行预计数量会更接近于查询实际返回的行数。<br>
这里表示的就是在只有单 CPU 内核的情况下，评估成本是127716.33;</p>
<h4 id="计算成本postgresql-首先看表的字节数大小">计算成本，Postgresql 首先看表的字节数大小</h4>
<p>这里 account 表的大小为：</p>
<pre><code class="language-sql">postgres=&gt; select pg_relation_size('account');

pg_relation_size
------------------
        737673216
(1 row)
</code></pre>
<h4 id="查看块的大小">查看块的大小</h4>
<p>Postgresql 会为每个要一次读取的快添加成本点，使用 <code>show block_size</code>查看块的大小：</p>
<pre><code class="language-sql">postgres=&gt; show block_size;

block_size
------------
 8192
(1 row)
</code></pre>
<h4 id="计算块的个数">计算块的个数</h4>
<p>可以看到每个块的大小为8kb，那么可以计算从表从读取的顺序块成本值为：</p>
<pre><code>blocks = pg_relation_size/block_size = 90048
</code></pre>
<p><code>90048</code> 是account 表所占用块的数量。</p>
<h4 id="查看每个块需要的成本">查看每个块需要的成本</h4>
<pre><code class="language-sql">postgres=&gt; show seq_page_cost;
 seq_page_cost
---------------
 1
(1 row)
</code></pre>
<p>这里的意思是 Postgresql 为每个块分配一个成本点，也就是说上面的查询需要从90048个成本点。</p>
<h4 id="处理每条数据-cpu-所需时间">处理每条数据 cpu 所需时间</h4>
<ul>
<li>cpu_tuple_cost：处理每条记录的CPU开销（tuple：关系中的一行记录）</li>
<li>cpu_operator_cost：操作符或函数带来的CPU开销。</li>
</ul>
<pre><code class="language-sql">postgres=&gt; show cpu_operator_cost;
 cpu_operator_cost
-------------------
 0.0025
(1 row)

postgres=&gt; show cpu_tuple_cost;
 cpu_tuple_cost
----------------
 0.01
(1 row)
</code></pre>
<h4 id="计算">计算</h4>
<p>cost 计算公式为：</p>
<blockquote>
<p>cost = 磁盘块个数 * 块成本（1） + 行数 * cpu_tuple_cost（系统参数值）+ 行数 * cpu_operator_cost</p>
</blockquote>
<p>现在用所有值来计算explain 语句中得到的值：</p>
<pre><code class="language-python">number_of_records = 3013466  # account 表 count

block_size = 8192  # block size in bytes

pg_relation_size=737673216

blocks = pg_relation_size/block_size = 90048

seq_page_cost = 1
cpu_tuple_cost = 0.01
cpu_operator_cost = 0.0025

cost = blocks * seq_page_cost + number_of_records * cpu_tuple_cost + number_of_records * cpu_operator_cost
</code></pre>
<h4 id="如何降低查询成本">如何降低查询成本？</h4>
<p>直接回答，使用索引。</p>
<pre><code class="language-sql">postgres=&gt; explain select * from account where id=20039;
                                       QUERY PLAN
----------------------------------------------------------------------------------------
 Index Scan using account_pkey on account  (cost=0.43..8.45 rows=1 width=211)
   Index Cond: (id = 20039)
(2 rows)
</code></pre>
<p>通过这个查询可以看到，在使用有索引的字段查询时，查询成本显著降低。</p>
<blockquote>
<p>索引扫描的计算比顺序扫描的计算要复杂一些。它由两个阶段组成。<br>
PostgreSQL会考虑random_page_cost和cpu_index_tuple_cost 变量，并返回一个基于索引树的高度的值。</p>
</blockquote>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/23523147/sqlalchemy-and-empty-in-clause">sqlalchemy-and-empty-in-clause</a></li>
<li><a href="https://www.linuxidc.com/Linux/2017-07/145768.htm">PostgreSQL查询性能分析和优化</a></li>
<li><a href="http://www.cnblogs.com/stephen-liu74/archive/2011/12/25/2301064.html">PostgreSQL学习手册(性能提升技巧)</a></li>
<li><a href="https://mp.weixin.qq.com/s/iBbVfmrTCxINlrbBS9u1Qw">PostgreSQL 查询成本模型</a></li>
<li><a href="https://blog.csdn.net/luojinbai/article/details/43085383">PostgreSQL 查询计划时间的计算详解</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solidity 简易教程]]></title>
        <id>http://blog.gusibi.site/post/solidity-simple-guide/</id>
        <link href="http://blog.gusibi.site/post/solidity-simple-guide/">
        </link>
        <updated>2018-09-04T05:36:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Solidity是以太坊的主要编程语言，它是一种静态类型的 JavaScript-esque 语言，是面向合约的、为实现智能合约而创建的高级编程语言，设计的目的是能在以太坊虚拟机（EVM）上运行。</p>
<p>本文基于CryptoZombies，教程地址为：https://cryptozombies.io/zh/</p>
</blockquote>
<h3 id="合约">合约</h3>
<p>Solidity 的代码都包裹在<strong>合约</strong>里面. 一份<code>合约</code>就是以太应币应用的基本模块， 所有的变量和函数都属于一份合约, 它是你所有应用的起点.</p>
<p>一份名为 <code>HelloWorld</code> 的空合约如下:</p>
<pre><code class="language-javascript">contract HelloWorld {

}
</code></pre>
<h4 id="hello-world">hello world</h4>
<p>首先看一个简单的智能合约。</p>
<pre><code class="language-javascript">pragma solidity ^0.4.0;

contract SimpleStorage {
    uint storedData; // 声明一个类型为 uint (256位无符号整数）的状态变量，叫做 storedData

    function set(uint x) public {
        storedData = x; // 状态变量可以直接访问，不需要使用 this. 或者 self. 这样的前缀
    }

    function get() public view returns (uint) {
        return storedData;
    }
}
</code></pre>
<p>所有的 Solidity 源码都必须冠以 &quot;version pragma&quot; — 标明 Solidity 编译器的版本. 以避免将来新的编译器可能破坏你的代码。</p>
<p>例如: <code>pragma solidity ^0.4.0;</code> (当前 Solidity 的最新版本是 0.4.0).</p>
<blockquote>
<p>关键字 <code>pragma</code> 的含义是，一般来说，pragmas（编译指令）是告知编译器如何处理源代码的指令的（例如， <a href="https://en.wikipedia.org/wiki/Pragma_once">pragma once</a> ）。</p>
</blockquote>
<p>Solidity中合约的含义就是一组代码（它的 <em>函数</em> )和数据（它的 <em>状态</em> ），它们位于以太坊区块链的一个特定地址上。</p>
<p>该合约能完成的事情并不多：它能允许任何人在合约中存储一个单独的数字，并且这个数字可以被世界上任何人访问，且没有可行的办法阻止你发布这个数字。当然，任何人都可以再次调用 <code>set</code> ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。</p>
<blockquote>
<p>Solidity 语句以分号（<strong>;</strong>）结尾</p>
</blockquote>
<h3 id="状态变量">状态变量</h3>
<p><strong>状态变量</strong>是被永久地保存在合约中。也就是说它们被写入以太币区块链中，想象成写入一个数据库。</p>
<pre><code class="language-javascript">contract HelloWorld {
   // 这个无符号整数将会永久的被保存在区块链中
   uint myUnsignedInteger = 100;
}
</code></pre>
<p>在上面的例子中，定义 <code>myUnsignedInteger</code> 为 <code>uint</code> 类型，并赋值100。</p>
<blockquote>
<p><code>uint</code> 无符号数据类型， 指<strong>其值不能是负数</strong>，对于有符号的整数存在名为 <code>int</code> 的数据类型。</p>
<p>Solidity中， <code>uint</code> 实际上是 <code>uint256</code>代名词， 一个256位的无符号整数。</p>
</blockquote>
<p>程序有时需要对不同类型的数据进行操作，因为 Solidity 是静态类型语言，对不同类型的数据进行运算会抛出异常，比如：</p>
<pre><code class="language-go">uint8 a = 5;
uint b = 6;
// 将会抛出错误，因为 a * b 返回 uint, 而不是 uint8:
uint8 c = a * b;
</code></pre>
<p><code>a * b</code> 返回类型是 <code>uint</code>, 但是当我们尝试用 <code>uint8</code> 类型接收时, 就会造成潜在的错误。这时，就需要显式的进行数据类型转换：</p>
<pre><code class="language-go">// 我们需要将 b 转换为 uint8:
uint8 c = a * uint8(b);
</code></pre>
<blockquote>
<p>把它的数据类型转换为 <code>uint8</code>, 就可以了，编译器也不会出错。</p>
</blockquote>
<p>Solidity 支持多种数据类型，比如：</p>
<ul>
<li>string（字符串）：字符串用于保存任意长度的 UTF-8 编码数据</li>
<li>fixedArray（静态数组）：固定长度的数组</li>
<li>dynamicArray（动态数组）：长度不固定，可以动态添加元素的数组</li>
<li>enum（枚举）</li>
<li>mapping</li>
<li>等</li>
</ul>
<h3 id="数学运算">数学运算</h3>
<p>在 Solidity 中，数学运算很直观明了，与其它程序设计语言相同:</p>
<ul>
<li>加法: <code>x + y</code></li>
<li>减法: <code>x - y</code>,</li>
<li>乘法: <code>x * y</code></li>
<li>除法: <code>x / y</code></li>
<li>取模 / 求余: <code>x % y</code> <em>(例如, 13 % 5 余 3, 因为13除以5，余3)</em></li>
<li>乘方: <code>x ** y</code></li>
</ul>
<h3 id="结构体">结构体</h3>
<p>Solidity 提供了 <code>结构体</code>，用来表示更复杂的数据类型。</p>
<pre><code class="language-c">struct Person {
  uint age;
  string name;
}
</code></pre>
<p>结构体允许你生成一个更复杂的数据类型，它有多个属性。</p>
<p>创建结构体方式为：</p>
<pre><code class="language-go">// 创建一个新的Person:
Person satoshi = Person(172, &quot;Satoshi&quot;);
</code></pre>
<h3 id="数组">数组</h3>
<p>Solidity 提供两种类型的数组：<code>静态数组</code>和<code>动态数组</code>。</p>
<pre><code class="language-go">// 固定长度为2的静态数组:
uint[2] fixedArray;
// 固定长度为5的string类型的静态数组:
string[5] stringArray;
// 动态数组，长度不固定，可以动态添加元素:
uint[] dynamicArray;
</code></pre>
<p>使用 push 函数向数组中添加值：</p>
<pre><code class="language-javascript">fixedArray.push[123] 
fixedArray.push[234]
// fixedArray 值为 [123, 234]
</code></pre>
<blockquote>
<p><code>array.push()</code> 在数组的 <strong>尾部</strong> 加入新元素 ，所以元素在数组中的顺序就是添加的顺序<br>
<code>array.push()</code> 会返回数组的长度。</p>
</blockquote>
<p>Solidity 数组支持多种类型，比如结构体：</p>
<pre><code class="language-c">struct Person {
  uint age;
  string name;
}

Person[] people; // dynamic Array, we can keep adding to it
</code></pre>
<p>结构体类型的数组添加值的方式为：</p>
<pre><code class="language-c">people.push(Person(16, &quot;Vitalik&quot;));
// 也可以使用下面的方式，推荐使用上述一行简洁的方式

Person satoshi = Person(172, &quot;Satoshi&quot;);
people.push(satoshi);
</code></pre>
<h4 id="公共数组">公共数组</h4>
<p>也可以使用<code>public</code>定义公共数组，Solidity 会自动创建<code>getter</code>方法。语法如下：</p>
<pre><code class="language-c">struct Person {
  uint age;
  string name;
}

Person[] public people; // dynamic Array, we can keep adding to it
</code></pre>
<blockquote>
<p>公共数组支持其它的合约读取数据（但不能写入数据），所以这在合约中是一个有用的保存公共数据的模式。（有点像全局变量，所有合约共享同一个“内存空间“，厉害了！）</p>
</blockquote>
<h3 id="函数">函数</h3>
<p>Solidity 中，函数定义如下：</p>
<pre><code class="language-javascript">function eatHamburgers(string _name, uint _amount) {

}
</code></pre>
<blockquote>
<p><code>Solidity</code>  习惯上函数里的变量都是以(<strong>_</strong>)开头 (但不是硬性规定) 以区别全局变量。</p>
</blockquote>
<p>这是一个名为 <code>eatHamburgers</code> 的函数，它接受两个参数：一个 <code>string</code>类型的 和 一个 <code>uint</code>类型的。现在函数内部还是空的。</p>
<p>函数调用如下：</p>
<pre><code class="language-go">eatHamburgers(&quot;vitalik&quot;, 100);
</code></pre>
<h4 id="私有公共函数">私有/公共函数</h4>
<p>Solidity 函数分为私有函数和共有函数。</p>
<blockquote>
<p>Solidity 定义的函数的属性默认为<code>公共</code>。 这就意味着任何一方 (或其它合约) 都可以调用你合约里的函数。</p>
</blockquote>
<p>显然，不是什么时候都需要这样，而且这样的合约易于受到攻击。所以将自己的函数定义为<code>私有</code>是一个好的编程习惯，只有当你需要外部世界调用它时才将它设置为<code>公共</code>。</p>
<blockquote>
<p>可以把所有的函数都显式的声明 <code>public</code>和<code>private</code>来规避这个问题。</p>
</blockquote>
<p>定义私有函数比较简单，只需要在函数参数后添加 <code>private</code>关键字即可。示例如下：</p>
<pre><code class="language-go">uint[] numbers;

function _addToArray(uint _number) private {
  numbers.push(_number);
}
</code></pre>
<p>这意味着只有我们合约中的其它函数才能够调用这个函数，给 <code>numbers</code>数组添加新成员。</p>
<blockquote>
<p>和函数的参数类似，私有函数的名字用(<code>_</code>)起始。</p>
</blockquote>
<blockquote>
<p><code>注意：</code>在智能合约中你所用的一切都是公开可见的，即便是局部变量和被标记成 <code>private</code> 的状态变量也是如此。</p>
</blockquote>
<h4 id="返回值">返回值</h4>
<p>和其它语言一样，Solidity 函数也有返回值，示例如下：</p>
<pre><code class="language-go">string greeting = &quot;What's up dog&quot;;

function sayHello() public returns (string) {
  return greeting;
}
</code></pre>
<p>返回值使用 <code>returns</code>关键字标注。（已经是非常奇怪的写法了。。）</p>
<h4 id="修饰符">修饰符</h4>
<h5 id="view">view</h5>
<blockquote>
<p><code>constant</code> 是 <code>view</code> 的别名</p>
</blockquote>
<pre><code class="language-go">string greeting = &quot;What's up dog&quot;;

function sayHello() public returns (string) {
  return greeting;
}
</code></pre>
<p>像 <code>sayHello</code> 函数这种实际上没有改变合约中数据内容的情况，可以把函数定义为<code>view</code>，这意味着此函数只读不修改数据。可以使用以下声明方式：</p>
<pre><code class="language-javascript">function sayHello() public view returns (string) {}
</code></pre>
<p>可以将函数声明为 <code>view</code> 类型，这种情况下要保证不修改状态。</p>
<p>下面的语句被认为是修改状态：</p>
<ol>
<li>修改状态变量。</li>
<li><a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html#events">产生事件</a>。</li>
<li><a href="https://solidity-cn.readthedocs.io/zh/develop/control-structures.html#creating-contracts">创建其它合约</a>。</li>
<li>使用 <code>selfdestruct</code>。</li>
<li>通过调用发送以太币。</li>
<li>调用任何没有标记为 <code>view</code> 或者 <code>pure</code> 的函数。</li>
<li>使用低级调用。</li>
<li>使用包含特定操作码的内联汇编。</li>
</ol>
<h5 id="pure">pure</h5>
<p>pure 比 view 更轻量，使用这个修饰符修饰的函数甚至都不会读取合约中的数据，例如：</p>
<pre><code class="language-javascript">function _multiply(uint a, uint b) private pure returns (uint) { return a * b; }
</code></pre>
<p>这个函数没有读取应用里的状态，它的返回值只和它输入的参数相关。</p>
<blockquote>
<p>Solidity 编辑器会给出提示，提醒你使用 pure/view修饰符。</p>
</blockquote>
<p>函数可以声明为 <code>pure</code> ，在这种情况下，承诺不读取或修改状态。</p>
<p>除了上面解释的状态修改语句列表之外，以下被认为是从状态中读取：</p>
<ol>
<li>读取状态变量。</li>
<li>访问 <code>this.balance</code> 或者 <code>&lt;address&gt;.balance</code>。</li>
<li>访问 <code>block</code>，<code>tx</code>， <code>msg</code> 中任意成员 （除 <code>msg.sig</code> 和 <code>msg.data</code> 之外）。</li>
<li>调用任何未标记为 <code>pure</code> 的函数。</li>
<li>使用包含某些操作码的内联汇编。</li>
</ol>
<h5 id="payable">payable</h5>
<p>payable 关键字用来说明，这个函数可以接受以太币，如果没有这个关键字，函数会自动拒绝所有发送给它的以太币。</p>
<h3 id="事件">事件</h3>
<p><strong>事件</strong> 是合约和区块链通讯的一种机制。你的前端应用“监听”某些事件，并做出反应。例如：</p>
<pre><code class="language-javascript">// 这里建立事件
event IntegersAdded(uint x, uint y, uint result);

function add(uint _x, uint _y) public {
  uint result = _x + _y;
  //触发事件，通知app
  IntegersAdded(_x, _y, result);
  return result;
}
</code></pre>
<p>用户界面（当然也包括服务器应用程序）可以监听区块链上正在发送的事件，而不会花费太多成本。一旦它被发出，监听该事件的listener都将收到通知。而所有的事件都包含了 <code>from</code> ， <code>to</code> 和 <code>amount</code> 三个参数，可方便追踪事务。 为了监听这个事件，你可以使用如下代码（javascript 实现）：</p>
<pre><code class="language-javascript">var abi = /* abi 由编译器产生 */;
var ClientReceipt = web3.eth.contract(abi);
var clientReceipt = ClientReceipt.at(&quot;0x1234...ab67&quot; /* 地址 */);

var event = clientReceipt.IntegersAdded();

// 监视变化
event.watch(function(error, result){
    // 结果包括对 `Deposit` 的调用参数在内的各种信息。
    if (!error)
        console.log(result);
});

// 或者通过回调立即开始观察
var event = clientReceipt.IntegersAdded(function(error, result) {
    if (!error)
        console.log(result);
});
</code></pre>
<h3 id="代码示例">代码示例</h3>
<p>下面是一个完整的代码示例：</p>
<pre><code class="language-javascript">pragma solidity ^0.4.19;

contract ZombieFactory {

    // 建立事件
    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;  // 定义状态变量
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {  // 定义结构体
        string name;
        uint dna;
    }

    Zombie[] public zombies;  // 定义动态数组

    // 创建私有函数，私有函数命名使用 _ 前缀
    function _createZombie(string _name, uint _dna) private {
        // 函数参数命名 使用 _ 作为前缀
        // arrays.push() 将元素加入到数组尾部，并且返回数组的长度
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        // 触发事件
        NewZombie(id, _name, _dna);
    }

    // view 为函数修饰符，表示此函数不需要更新或创建状态变量
    // pure 表示函数不需要使用状态变量
    function _generateRandomDna(string _str) private view returns (uint) {
        // 使用 keccak256 创建一个伪随机数
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }

    function createRandomZombie(string _name) public {
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

}

</code></pre>
<blockquote>
<p>Ethereum 内部有一个散列函数keccak256，它用了SHA3版本。一个散列函数基本上就是把一个字符串转换为一个256位的16进制数字。<br>
在智能合约中使用随机数很难保证节点不作弊， 这是因为智能合约中的随机数一般要依赖计算节点的本地时间得到， 而本地时间是可以被恶意节点伪造的，因此这种方法并不安全。 通行的做法是采用 链外off-chain 的第三方服务，比如 Oraclize 来获取随机数）。</p>
</blockquote>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://solidity-cn.readthedocs.io/zh/develop/index.html">Solidity 文档: https://solidity-cn.readthedocs.io/zh/develop/index.html</a></li>
<li><a href="https://cryptozombies.io/zh/">cryptozombie-lessons: https://cryptozombies.io/zh/</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/ah0mqMXMtdJb9Yj03suu-NGEyVRxyEuOIT5bXSv7ip5aqtHkiRjTTl8SMRMv3Qp5?" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾回收算法|引用计数法]]></title>
        <id>http://blog.gusibi.site/post/gc-reference-counting/</id>
        <link href="http://blog.gusibi.site/post/gc-reference-counting/">
        </link>
        <updated>2018-08-12T03:15:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文是《垃圾回收的算法与实现》读书笔记</p>
<p>上一篇为<a href="https://mp.weixin.qq.com/s/mJo5ADptfDxEVoqZjUIWTw">《GC 标记-清除算法》</a></p>
</blockquote>
<h3 id="引用计数算法">引用计数算法</h3>
<blockquote>
<p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。这也就是需要回收的对象。</p>
<p><code>引用计数算法</code>是对象记录自己被多少<strong>程序</strong>引用，引用计数为零的对象将被清除。</p>
<p><code>计数器</code>表示的是有多少程序引用了这个对象（被引用数）。计数器是无符号整数。</p>
</blockquote>
<h4 id="计数器的增减">计数器的增减</h4>
<p>引用计数法没有明确启动 GC 的语句，它与程序的执行密切相关，在程序的处理过程中通过增减计数器的值来进行内存管理。</p>
<h5 id="new_obj-函数"><strong>new_obj()</strong> 函数</h5>
<p>与<code>GC标记-清除</code>算法相同，程序在生成新对象的时候会调用 new_obj()函数。</p>
<pre><code class="language-c">func new_obj(size){
    obj = pickup_chunk(size, $free_list)
    
    if(obj == NULL)
        allocation_fail()
    else
        obj.ref_cnt = 1  // 新对象第一只被分配是引用数为1
        return obj
}
</code></pre>
<p>这里 <code>pickup_chunk()</code>函数的用法与<code>GC标记-清除算法</code>中的用法大致相同。不同的是这里返回 NULL 时，分配就失败了。这里 <code>ref_cnt</code> 域代表的是 obj 的计数器。</p>
<blockquote>
<p>在引用计数算法中，除了连接到空闲链表的对象，其他对象都是活跃对象。所以如果 pickup_chunk()返回 NULL，堆中也就没有其它大小合适的块了。</p>
</blockquote>
<h5 id="update_ptr-函数"><strong>update_ptr()</strong> 函数</h5>
<p>update_ptr() 函数用于更新指针 <code>ptr</code>，使其指向对象 obj，同时进行计数器值的增减。</p>
<pre><code class="language-c">func update_ptr(ptr, obj){
    inc_ref_cnt(obj)     // obj 引用计数+1
    dec_ref_cnt(*ptr)    // ptr之前指向的对象(*ptr)的引用计数-1
    *ptr = obj
}
</code></pre>
<blockquote>
<p>这里 update_ptr 为什么需要先调用 <code>inc_ref_cnt</code>，再调用<code>dec_ref_cnt</code>呢？</p>
<p>是因为有可能 *ptr和 obj 可能是同一个对象，如果先调用<code>dec_ref_cnt</code>可能会误伤。</p>
</blockquote>
<p>**inc_ref_cnt()**函数</p>
<p>这里inc_ref_cnt函数只对对象 obj 引用计数+1</p>
<pre><code class="language-go">func inc_ref_cnt(obj){
    obj.ref_cnt++
}
</code></pre>
<p><strong>dec_ref_cnt()</strong> 函数</p>
<p>这里 dec_ref_cnt 函数会把之前引用的对象进行-1 操作，如果这时对象的计数器变为0，说明这个对象是一个垃圾对象，需要销毁，那么被它引用的对象的计数器值都需要相应的-1。</p>
<pre><code class="language-go">func dec_ref_cnt(obj){
    obj_ref_cnt--
    if(obj.ref_cnt == 0)
        for(child : children(obj))
            dec_ref_cnt(*child)  // 递归将被需要销毁对象引用的对象计数-1
    reclaim(obj)
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/txUtZf4Me8iDveCpZWKaqzhnqxhuGwmSLwX8NxfJEAa3UC1D1byrEpmfLgpAXTQp" alt="update_prt() 函数执行是的情况" loading="lazy"></figure>
<p>上图这里开始时，A 指向 B，第二步 A 指向了 C。可以看到通过更新，B 的计数器值变为了0，因此 B 被回收（连接到空闲链表），C 的计数器值由1变成了2。</p>
<blockquote>
<p>通过上边的介绍，应该可以看出引用计数垃圾回收的特点。</p>
<ol>
<li>在变更数组元素的时候会进行指针更新</li>
<li>通过更新执行计数可能会产生没有被任何程序引用的垃圾对象</li>
<li>引用计数算法会时刻监控更新指针是否会产生垃圾对象，一旦生成会立刻被回收。</li>
</ol>
<p>所以如果调用 <code>pickup_chunk</code>函数返回 NULL，说明堆中所有对象都是活跃对象。</p>
</blockquote>
<h4 id="引用计数算法的优点">引用计数算法的优点</h4>
<ol>
<li>
<p>可立即回收垃圾</p>
<blockquote>
<p>每个对象都知道自己的引用计数，当变为0时可以立即回收，将自己接到空闲链表</p>
</blockquote>
</li>
<li>
<p>最大暂停时间短</p>
<blockquote>
<p>因为只要程序更新指针时程序就会执行垃圾回收，也就是每次通过执行程序生成垃圾时，这些垃圾都会被回收，内存管理的开销分布于整个应用程序运行期间，无需挂起应用程序的运行来做，因此消减了最大暂停时间（但是增多了垃圾回收的次数）</p>
<blockquote>
<p><code>最大暂停时间</code>，因执行 GC 而暂停执行程序的最长时间。</p>
</blockquote>
</blockquote>
</li>
<li>
<p>不需要沿指针查找</p>
<blockquote>
<p>产生的垃圾立即就连接到了空闲链表，所以不需要查找哪些对象是需要回收的</p>
</blockquote>
</li>
</ol>
<h4 id="引用计数算法的缺点">引用计数算法的缺点</h4>
<ol>
<li>
<p>计数器值的增减处理频繁</p>
<blockquote>
<p>因为每次对象更新都需要对计数器进行增减，特别是被引用次数多的对象。</p>
</blockquote>
</li>
<li>
<p>计数器需要占用很多位</p>
<blockquote>
<p>计数器的值最大必须要能数完堆中所有对象的引用数。比如我们用的机器是32位，那么极端情况，可能需要让2的32次方个对象同时引用一个对象。这就必须要确保各对象的计数器有32位大小。也就是对于所有对象，必须保留32位的空间。</p>
<p>假如对象只有两个域，那么其计数器就占用了整体的1/3。</p>
</blockquote>
</li>
<li>
<p>循环引用无法回收</p>
<blockquote>
<p>这个比较好理解，循环引用会让计数器最小值为1，不会变为0。</p>
</blockquote>
</li>
</ol>
<h4 id="循环引用">循环引用</h4>
<pre><code class="language-python">class Person{  // 定义 Person 类
    string name
    Person lover
}

lilw = new Person(&quot;李雷&quot;)    // 生成 person 类的实例 lilw
hjmmwmw = new Person(&quot;韩梅梅&quot;) // 生成 person 类的实例 hjmwmw

lilw.lover = hjmwmw   // lilw 引用 hjmwmw
hjmwmw.lover = lilw   // hjmwmw 引用 lilw

</code></pre>
<p>像这样，两个对象相互引用，所以各个对象的计数器都为1，且这些对象没有被其他对象引用。所以计数器最小值也为1，不可能为0。</p>
<h3 id="延迟引用计数法">延迟引用计数法</h3>
<p>引用计数法虽然缩小了<code>最大暂停时间</code>，但是<code>计数器的增减处理</code>特别多。为了改善这个缺点，<code>延迟引用计数法(Deferred Reference Counting)</code>被研究了出来。</p>
<p>通过上边的描述，可以知道之所以计数器增减处理特别繁重，是因为有些增减是根引用的变化，因此我们可以让根引用的指针变化不反映在计数器上。比如我们把 <code>update_ptr($ptr, obj)</code>改写成<code>*$ptr = obj</code>，这样频繁重写对重对象中引用关系时，计数器也不需要修改。但是这有一个问题，那就是计数器并不能正确反映出对象被引用的次数，就有可能会出现，对象仍在活动，却被回收。</p>
<p>在<strong>延迟引用计数法</strong>中使用<code>ZCT(Zero Count Table)</code>，来修正这一错误。</p>
<blockquote>
<p>ZCT 是一个表，它会事先记录下计数器在 <code>dec_ref_cnt()</code>函数作用下变成 0 的对象。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/R24lHD7lfMxlk4zSb5OE5gbhXy6YDtoMdjmdwMpEaX5uo_rRofrRZmqHcF5c99xD" alt="ZCT" loading="lazy"></figure>
<h4 id="dec_ref_cnt-函数">dec_ref_cnt 函数</h4>
<p>在延迟引用计数法中，引用计数为0 的对象并不一定是垃圾，会先存入到 zct 中保留。</p>
<pre><code class="language-go">func dec_ref_cnt(obj){
    obj_ref_cnt--
    if(obj.ref_cnt == 0) //引用计数为0 先存入到 $zct 中保留
        if(is_full($zct) == TRUE) // 如果 $zct 表已经满了 先扫描 zct 表，清除真正的垃圾
            scan_zct()
        push($zct, obj)
}
</code></pre>
<h4 id="scan_zct-函数">scan_zct 函数</h4>
<pre><code class="language-python">func scan_zct(){
    for(r: $roots)
        (*r).ref_cnt++
    
    for(obj : $zct)
        if(obj.ref_cnt == 0)
            remove($zct, obj)
            delete(obj)
    
    for(r: $roots)
        (*).ref_cnt--
}
</code></pre>
<ol>
<li>第二行和第三行，程序先把所有根直接引用的计数器都进行增量。这样，来修正计数器的值。</li>
<li>接下来检查 <code>$zct</code> 表中的对象，如果此时计数器还为0，则说明没有任何引用，那么将对象先从 <code>$zct</code>中清除，然后调用 <code>delete()</code>回收。</li>
</ol>
<p>delete() 函数定义如下：</p>
<pre><code class="language-python">func delete(obj){
    for(child : children(obj)) // 递归清理对象的子对象
        (*child).ref_cnt--
        if (*child).ref_cnt == 0 
            delete(*child)
    
    reclaim(obj)
}
</code></pre>
<h4 id="new_obj-函数-2">new_obj() 函数</h4>
<p>除 dec_ref_cnt 函数需要调整，new_obj 函数也要做相应的修改。</p>
<pre><code class="language-go">func new_obj(size){
    obj = pickup_chunk(size, $free_list)
    
    if(obj == NULL) // 空间不足
        scan_zct()  // 扫描 zct 以便获取空间
        obj = pickup_chunk(size, $free_list) // 再次尝试分配
        if(obj == NULL)
            allocation_fail()  // 提示失败
            
     obj.ref_cnt = 1
     return obj
}
</code></pre>
<blockquote>
<p>如果第一次分配空间不足，需要扫描 $zct，以便再次分配，如果这时空间还不足，就提示失败</p>
</blockquote>
<p>在延迟引用计数法中，程序延迟了根引用的计数，通过延迟，减轻了因根引用频繁变化而导致的计数器增减所带来的额外的负担。</p>
<p>但是，延迟引用计数却不能马上将垃圾进行回收，<code>可立即回收垃圾</code>这一优点也就不存在了。<code>scan_zct</code>函数也会增加程序的最大暂停时间。</p>
<h3 id="sticky-引用计数法">Sticky 引用计数法</h3>
<p>对于引用计数法，有一个不能忽略的部分是计数器位宽的设置。假设为了反映所有引用，计数器需要1个字（32位机器就是32位）的空间。但是这会大量的消耗内存空间。比如，2个字的对象就需要一个字的计数器。也就是计数器会使对象所占的空间增大1.5倍。</p>
<p><code>sticky 引用计数法</code>就是用来减少位宽的。</p>
<blockquote>
<p>如果我们为计数器的位数设为5，那么计数器最大的引用数为31，如果有超过31个对象引用，就会爆表。对于爆表，我们怎么处理呢？</p>
</blockquote>
<h4 id="1-什么都不做">1. 什么都不做</h4>
<p>这种处理方式对于计数器爆表的对象，再有新的引用也不在增加，当然，当计数器为0 的时候，也不能直接回收（因为可能还有对象在引用）。这样其实是会产生残留的对象占用内存。</p>
<blockquote>
<p>不过，研究表明，大部分对象其实只被引用了一次就被回收了，出现5位计数器溢出的情况少之又少。</p>
<p>爆表的对象大部分也都是重要的对象，不会轻易回收。</p>
<p>所以，什么都不做也是一个不错的办法。</p>
</blockquote>
<h4 id="2-使用gc-标记-清除算法进行管理">2. 使用GC 标记-清除算法进行管理</h4>
<p>这种方法是，对于爆表的对象，使用 GC 标记-清除算法来管理。</p>
<pre><code class="language-go">func mark_sweep_for_counter_overflow(){
    reset_all_ref_cnt()
    mark_phase()
    sweep_phase()
}
</code></pre>
<p>首先，把所有对象的计数器都设为0，然后进行标记和清除阶段。</p>
<p>标记阶段代码为：</p>
<pre><code class="language-go">func mark_phase(){
    for (r: $roots)  // 先把根引用的对象推到标记栈中
        push(*r, $mark_stack)
    
    while(is_empty($mark_stack) == False) // 如果堆不为空
        obj = pop($mark_stack)
        obj.ref_cnt++  
        if(obj.ref_cnt == 1) // 这里必须把各个对象及其子对象堆进行标记一次
            for(child : children(obj))
                push(*child, $mark_stack)
}
</code></pre>
<blockquote>
<p>在标记阶段，先把根引用的对象推到标记栈中</p>
<p>然后按顺序从标记栈中取出对象，对计数器进行增量操作。</p>
<p>对于循环引用的对象来说，obj.ref_cnt &gt;  1，为了避免无谓的 push 这里需要进行 if(obj.ref_cnt == 1) 的判断</p>
</blockquote>
<p>清除阶段代码为：</p>
<pre><code class="language-go">func sweep_phase(){
    sweeping = $heap_top
    while(sweeping &lt; $heap_end)  // 因为循环引用的所有对象都会被 push 到 head_end 所以也能被回收
        if(sweeping.ref_cnt == 0)
            reclaim(sweeping)
        sweeping += sweeping.size
}
</code></pre>
<p>在清除阶段，程序会搜索整个堆，回收计数器仍为0的对象。</p>
<blockquote>
<p>这里的 GC 标记-清除算法和上一篇<a href="https://mp.weixin.qq.com/s/mJo5ADptfDxEVoqZjUIWTw">GC 标记-清除算法</a> 主要不同点如下：</p>
<ol>
<li>开始时将所有对象的计数器值设为0</li>
<li>不标记对象，而是对计数器进行增量操作</li>
<li>为了对计数器进行增量操作，算法对活动对象进行了不止一次的搜索。</li>
</ol>
</blockquote>
<p>这里将 GC 标记-清除算法和引用计数法结合起来，在计数器溢出后，对象称为垃圾也不会漏掉清除。并且也能回收循环引用的垃圾。</p>
<p>因为在查找对象时不是设置标志位而是把计数器进行增量，所以需要多次查找活动对象，所以这里的标记处理比以往的标记清除花的时间更长，吞吐量会相应的降低。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://book.douban.com/subject/26821357/">垃圾回收的算法与实现</a></li>
<li><a href="https://mp.weixin.qq.com/s/mJo5ADptfDxEVoqZjUIWTw">《GC 标记-清除算法》</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用github+travis将Python包部署到Pypi]]></title>
        <id>http://blog.gusibi.site/post/howto-deploy-python-package-on-pypi-with-github-and-travis/</id>
        <link href="http://blog.gusibi.site/post/howto-deploy-python-package-on-pypi-with-github-and-travis/">
        </link>
        <updated>2018-07-23T07:45:46.000Z</updated>
        <content type="html"><![CDATA[<p>我在 github 托管 Python 代码，然后将包发布到 Pypi，通常的操作步骤是，更新完代码将提交到 github ，然后手动将包更新到 pypi，这样比较繁琐，就想到了使用github+travis-ci 构建一个自动部署环境。</p>
<h3 id="注册-pypi">注册 pypi</h3>
<p>访问<a href="https://pypi.org">https://pypi.org</a> 点击<code>Register</code>注册账号，记住自己的用户名密码。</p>
<h3 id="创建-setuppy-文件">创建 setup.py 文件</h3>
<p>setup.py 文件放置于包的根目录，示例内容如下：</p>
<pre><code class="language-python">#!/usr/bin/env python
from setuptools import setup, find_packages

with open(&quot;README.md&quot;, &quot;r&quot;) as fh:
    long_description = fh.read()

with open('requirements.txt') as f:
    requirements = [l for l in f.read().splitlines() if l]

setup(name=&quot;python-weixin&quot;,  # 项目名
      version=&quot;0.3.2&quot;,       # 版本号
      description=&quot;Python Weixin API client support wechat-app&quot;,  #简介
      long_description=long_description,  # 长简介 这里使用的 readme 内容
      long_description_content_type=&quot;text/markdown&quot;,
      license=&quot;BSD&quot;,   # 授权
      install_requires=requirements, # 依赖
      author=&quot;gusibi&quot;,  # 作者
      author_email=&quot;xxx@gmail.com&quot;,  # 邮箱
      url=&quot;https://github.com/gusibi/python-weixin&quot;,  # 地址
      download_url=&quot;https://github.com/gusibi/python-weixin/archive/master.zip&quot;,
      packages=find_packages(),
      keywords=[&quot;python-weixin&quot;, &quot;weixin&quot;, &quot;wechat&quot;, &quot;sdk&quot;, &quot;weapp&quot;, &quot;wxapp&quot;],
      zip_safe=True)
</code></pre>
<p>以上特别需要注意的是 <code>packages</code>参数，用来申明你的包里面要包含的目录，这里使用setuptools自动决定要包含哪些包。</p>
<h3 id="配置-travis-ci">配置 travis-ci</h3>
<p>github 提供了多种集成方式，这里我们选择 Travis-ci</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/WFUXxGYuC2Vsf5A-5ogKxthVs6xR3UU69UvYt4rFTsTn6ngDLEj62Qe05tZfKhpl" alt="" loading="lazy"></figure>
<p>选择后访问 <a href="https://travis-ci.com/profile">https://travis-ci.com/profile</a>，如果是第一次使用 travis-ci 可以使用 github 账号登录，然后选择对应的 github 库激活。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/bRInfNXvDr4_nkBX5hbmRdCMpTLicG2wrXgsWeBEylhKNe1SKiK8KQYeBNP5SwyT" alt="" loading="lazy"></figure>
<p>然后在 github 代码库的根目录添加 <code>.travis.yml</code> 文件。</p>
<pre><code class="language-yml">language: python
python:   # 指定运行环境，这里会分别在 2.7 和 3.5 运行
  - '2.7'
  - '3.5' 
install:
  - pip install -r requirements.txt   # 安装依赖
script: python test_example.py  # 如果有单元测试这里应该执行单元测试
</code></pre>
<blockquote>
<p>script 是一个必须的命令，通常如果有单元测试的话这里应该执行单元测试</p>
</blockquote>
<h4 id="添加-pypi-部署配置">添加 Pypi 部署配置</h4>
<p>通过在 <code>.travis.yml</code> 中添加 deploy 模块， <code>Travis CI</code> 实现自动部署，</p>
<pre><code class="language-yml">language: python
python:
- '2.7'
- '3.5'
install:
- pip install -r requirements.txt
script: python test_example.py
deploy:
  provider: pypi
  user: goodspeed     # pypi 用户名
  password: password  # pypi 密码
  on:
    python: 2.7
    tags: true
    branch: master
</code></pre>
<p>在 <code>deploy</code> 部分，我们指定 <code>provider</code> 为 pypi，然后添加 <code>user</code>、<code>password</code>。</p>
<p>在 <code>on</code> 部分我们声明一些特殊的配置，比如：</p>
<ul>
<li><code>brance: master</code> 意思是只有 master 分支才执行打包部署</li>
<li><code>python: 2.7</code> 意思是只在 python 2.7 版本执行打包部署</li>
<li><code>tags: true</code> 意思是只有在发布一个新的版本时才执行打包部署</li>
</ul>
<p>具体配置参考： <a href="https://docs.travis-ci.com/user/deployment#Conditional-Releases-with-on">Conditional-Releases-with-on</a></p>
<h4 id="加密密码">加密密码</h4>
<p>上面的配置使用的是明文密码，这样就把pypi 账号公开了，太不安全。这里推荐使用 <code>travis-encrypt</code> 加密密码。</p>
<h5 id="安装-travis-encrypt">安装 travis-encrypt</h5>
<pre><code class="language-bash">pip install travis-encrypt
</code></pre>
<p>然后在 <code>.travis.yml</code> 所在目录执行：</p>
<pre><code class="language-bash">travis-encrypt --deploy gusibi python-weixin .travis.yml
Password: # 在这里输入pypi 密码
</code></pre>
<blockquote>
<p>这里 <code>gusibi</code> <code>python-weixin</code> 需要替换成相对应的 github username 和 repository。</p>
<p>命令参考：<a href="https://pypi.org/project/travis-encrypt/">travis-encrypt</a></p>
</blockquote>
<p>执行完之后password 部分旧会被加密后的秘钥代替，最终 <code>.travis.yml</code> 内容如下：</p>
<pre><code class="language-yml">language: python
python:
- '2.7'
- '3.5'
install:
- pip install -r requirements.txt
script: python test_example.py
deploy:
  provider: pypi
  user: goodspeed
  password:
    secure: cjQdXGKkNpwKmGgEhONtd2YR+PF44gtZgMegv5O3CRsszocaRqxcBdfwi0qz6KupLMWl/WTq+bYtzf42lpytMe7cB/CPA2sCUDEo6qyIE+Brb5J57GUhd9HIhP5F44BHKWzBnYFbgPsQ2k1ckEDJsUp5yyFvUBkQmv3+LOo9Kf492oCQlgnzaGSRtPQaG56XdLKgCZrxdtfteTalTbjQO7w/GNm5lBn4l7iY1qWiQmzFxkUuZu317yAnohdH84fq9Ozov4S3nPNSTt800HjHkXwaBzxMuJ2SJBadZAW/abCvk34IPyvxjy7upNNLq80/yvgYKzxWBklcP9LxJX2Pwk9NtTY1zUEykkwdBVxZShhBXtWDma/yWQp2RdCVZtLS4GTg4X61PMgH0iwzwzGW8LARj2ZMowQoPipUYCJ7qUfyXrxU05ypizWKIIfrqdRh8Twj9Jhyg/fAoRygCoXNtMqwSmomjkwl6f1i+6lAQENdmVKQTesP56r/olXKb4rhrOgyhj7anJd3F/SZ+g8jQFHHGLcaSkEoVXL6BFPDMxYdMRmx5HKonP9uQO74ZdeevkHK0wFzSbjqpKdVzeuYuyPiHnDyooyjGL+2BzE/Zzo5KCNEflAE22kAuAbjXCuJji7+j47QohrlYjmj2+F7NDBE5sJRp3yLJWIEPqLND/k=
  on:
    python: 2.7
    tags: true
    branch: master
</code></pre>
<p>将代码提交之后，访问 travis-ci.org 会看到已经触发了 ci ，正在构建：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/6yydw0RZ2b26fRKzQXlV-QoRLHaOxrj04pVlFhJTULsF7OPE2Z4msVKV1fGUWkXB" alt="" loading="lazy"></figure>
<blockquote>
<p>这里有两个 job 正在同时构建，分别是 python2.7 环境和 python3.5 环境。</p>
</blockquote>
<p>但是这时并没有把包部署到 pypi，还需要在 <code>github releases 页面重新发布一个版本来触发部署</code>。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li>[https://github.com/romgar/5minutes/blob/master/content/articles/howto-deploy-python-package-on-pypi-with-github-and-travis.md][https://github.com/romgar/5minutes/blob/master/content/articles/howto-deploy-python-package-on-pypi-with-github-and-travis.md]</li>
<li><a href="https://pypi.org">https://pypi.org</a></li>
<li><a href="https://github.com/gusibi/python-weixin">https://github.com/gusibi/python-weixinn</a></li>
<li><a href="https://pypi.org/project/travis-encrypt/">https://pypi.org/project/travis-encrypt/</a></li>
<li><a href="https://docs.travis-ci.com/user/deployment#Conditional-Releases-with-on">https://docs.travis-ci.com/user/deployment#Conditional-Releases-with-on</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾回收算法|GC标记-清除算法]]></title>
        <id>http://blog.gusibi.site/post/gc-mark-sweep/</id>
        <link href="http://blog.gusibi.site/post/gc-mark-sweep/">
        </link>
        <updated>2018-07-20T19:15:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文是《垃圾回收的算法与实现》读书笔记</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/kJ8L52gJq08Mi142RTC-wAwzbMUgwGTKue3rPKNWVrYTlvOMczGlXFvmEt1C1MRM" alt="" loading="lazy"></figure>
<h3 id="什么是gc标记-清除算法mark-sweep-gc">什么是GC标记-清除算法（Mark Sweep GC）</h3>
<p>GC 标记-清除算法由<code>标记阶段</code>和<code>清除阶段</code>构成。在标记阶段会把所有的活动对象都做上标记，然后在清除阶段会把没有标记的对象，也就是<code>非活动</code>对象回收。</p>
<blockquote>
<p><code>名词解释：</code></p>
<p>在 GC 的世界里<code>对象</code>指的是通过应用程序利用的数据的集合。是 GC 的基本单位。一般由头（header）和域（field）构成。</p>
<p><code>活动对象:</code>能通过引用程序引用的对象就被称为活动对象。（可以直接或间接从全局变量空间中引出的对象）</p>
<p><code>非活动对象:</code>不能通过程序引用的对象呗称为非活动对象。（这就是被清除的目标）</p>
</blockquote>
<p>标记-清除算法的伪代码如下所示：</p>
<pre><code class="language-go">func mark_sweep(){
    mark_phase()   // 标记阶段
    sweep_phase()  // 清除阶段
} 
</code></pre>
<h3 id="标记阶段">标记阶段</h3>
<blockquote>
<p>标记阶段就是遍历对象并标记的处理过程。</p>
</blockquote>
<p>标记阶段伪代码如下：</p>
<pre><code class="language-go">func mark_phase(){
    for (r : $roots)  // 在标记阶段，会给所有的活动对象打上标记
        mark(*r)
}

func mark(){
    if (obj.mark == False)
        obj.mark = True            // 先标记找出的活动对象
        for (child: children(obj)) // 然后递归的标记通过指针数组能访问到的对象
            mark(*child)
}
</code></pre>
<blockquote>
<p>这里 <code>$root</code>是指针对象的起点，通过$root 可以遍历全部活动对象。</p>
</blockquote>
<p>下图是标记前和标记后内存中堆的状态</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/E66QEbTr9uxUcn-_4HAJbjhIiPrO_gZ-RQcn6Wiiu8iQnP9wlA5xZ5KACvMLvEK-" alt="执行 GC 前堆的状态" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/7_BEou-9LxGREQm2CyB18NZLRMh43R8g6xY2UwXfHXw7eyYwpaSvSWPndirCzuHv" alt="执行 GC 后堆的状态" loading="lazy"></figure>
<h3 id="清除阶段">清除阶段</h3>
<blockquote>
<p>在清除阶段，collector 会遍历整个堆，回收没有打上标记的对象（垃圾），使其能再次利用。</p>
</blockquote>
<p>sweep_phase() 函数伪代码实现如下：</p>
<pre><code class="language-go">func sweep_phase(){
    sweeping = $heap_start            // 首先将堆的首地址赋值给 sweeping
    while(sweeping &lt; $head_end){
        if(sweeping.mark == TRUE)
            // 如果是标记状态就设为 FALSE，如果是活动对象，还会在标记阶段被标记为 TRUE
            sweeping.mark == FALSE    
        else:
            sweeping.next = $free_list   // 将非活动对象 拼接到 $free_list 头部位置
            $free_list = sweeping
        sweeping += sweeping.size
    }     
}
</code></pre>
<blockquote>
<p><code>size</code> 域指的是存储对象大小的域，在对象头中事先定义。</p>
<p><code>next</code> 域只在生成空闲链表以及从空闲链表中取出分块时才会用到。</p>
<p><code>分块(chunk)</code> 这里是指为利用对象而事先准备出来的空间。</p>
<p>内存中区块的块生路线为 <code>分块--&gt;活动对象--&gt;垃圾—&gt;分块--&gt;...</code></p>
</blockquote>
<p>在清除阶段我们会把非活动回收再利用。回收对象就是把对象作为分块，连接到被称为<code>空闲链表</code>的单向链表。之后再分配空间时只需遍历这个空闲链表就可以了找到分块了。</p>
<p>下图是清除阶段结束后堆的状态：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/S1zEqC5TqtGnlofpDBf-8u_hBaLrtqyMT_vpEePlcVTVwVaJ_zwLFdXnIGbKfGBT" alt="清除阶段结束后堆的状态" loading="lazy"></figure>
<h3 id="分配">分配</h3>
<blockquote>
<p>回收垃圾的目的是为了能再次分配</p>
</blockquote>
<p>当程序申请分块时，怎样才能把大小合适的分块分配给程序呢？</p>
<p>分配伪代码如下：</p>
<pre><code class="language-go">func new_obj(size){  // size 是需要的分块大小
    chunk = pickup_chunk(size, $free_list)  // 遍历 $free_list 寻找大于等于 size 的分块
    if(chunk != NULL)  
        return chunk
    else
        allocation_fail()   // 如果没找到大小合适的分块 提示分配失败
}
</code></pre>
<p><code>pickup_chunk()</code>函数不止返回和 size 大小相同的分块，也会返回大于 size 大小的分块（这时会将其分割成 size 大小的分块和去掉 size 后剩余大小的分块，并把剩余部分还给空闲链表）。</p>
<blockquote>
<p>分配策略有三种 <code>First-fit</code>,<code>Best-fit</code>,<code>Worst-fit</code></p>
<p><code>First-fit</code>：发现大于等于 size的分块立刻返回</p>
<p><code>Best-fit</code>：找到大小和 size 相等的分块再返回</p>
<p>``Worst-fit`：找到最大的分块，然后分割成 size 大小和剩余大小（这种方法容易产生大量小的分块</p>
</blockquote>
<h4 id="合并">合并</h4>
<p>根据分配策略的不同，分配过程中会出现大量小的分块，如果分块是连续的，我们就可以把小分块合并成一个大的分块，<code>合并是在清除阶段完成的</code>，包含了合并策略的清除代码如下：</p>
<pre><code class="language-go">func sweep_phase(){
    sweeping = $heap_start            // 首先将堆的首地址赋值给 sweeping
    while(sweeping &lt; $head_end){
        if(sweeping.mark == TRUE)
            // 如果是标记状态就设为 FALSE，如果是活动对象，还会在标记阶段被标记为 TRUE
            sweeping.mark == FALSE    
        else:
            if(sweeping == $free_list + $free_list.size)  // 堆的地址正好和空闲链表大小相同
                $free_list.size += sweeping.size
            else
                sweeping.next = $free_list   // 将非活动对象 拼接到 $free_list 头部位置
                $free_list = sweeping
        sweeping += sweeping.size
    }     
}
</code></pre>
<blockquote>
<p><code>$heap_end = $heap_start + HEAP_SIZE</code></p>
<p>所以这里<code>sweeping == $free_list + $free_list.size</code>可以理解为需要清除的堆的地址正好和空闲链接相邻</p>
</blockquote>
<h3 id="优缺-点">优/缺 点</h3>
<h4 id="优点">优点</h4>
<ul>
<li>实现简单</li>
<li>与<code>保守式 GC 算法</code>兼容</li>
</ul>
<h4 id="缺点">缺点</h4>
<ul>
<li>碎片化严重（由上面描述的分配算法可知，容易产生大量小的分块</li>
<li>分配速度慢（由于空闲区块是用链表实现，分块可能都不连续，每次分配都需要遍历空闲链表，极端情况是需要遍历整个链表的。</li>
<li>与<code>写时复制技术</code>不兼容</li>
</ul>
<blockquote>
<p>写时复制（copy-on-write）是众多 UNIX 操作系统用到的内存优化的方法。比如在 Linux 系统中使用 fork() 函数复制进程时，大部分内存空间都不会被复制，只是复制进程，只有在内存中内容被改变时才会复制内存数据。</p>
<p>但是如果使用标记清除算法，这时内存会被设置<code>标志位</code>，就会频繁发生不应该发生的复制。</p>
</blockquote>
<h3 id="多个空闲链表">多个空闲链表</h3>
<p>上面所说的标记清除算法只用到了一个空闲链表对大小不一的分块统一处理。但这样做每次都需要遍历一遍来寻找大小合适的分块，非常浪费时间。</p>
<p>这里我们使用多个空闲链表的方法来存储非活动对象。比如：将两个字的分块组成一个空闲链表，三个字的分块组成另一个空闲链表，等等。。</p>
<p>这时，如果需要分配三个字的分块，那我们只需要查询对应的三个字的空闲链表就可以了。</p>
<blockquote>
<p>到底需要制造多少个空闲链表呢？</p>
<p>因为通常程序不会 申请特别大的分块，所以我们通常给分块大小设置一个上限，比如100，大于这个上限的组成一个特殊的空闲链表。这样101 个空闲链表就够了。</p>
</blockquote>
<h3 id="位图标记">位图标记</h3>
<p>在单纯的 GC 标记-清除算法中，用于标记的位是被分配到对象头中的。算法是把对象和头一并处理，但这和写时复制不兼容。</p>
<p><code>位图标记</code>法是只收集各个对象的标志位并表格化，不喝对象一起管理。在标记的时候不在对象的头里设置位置，而是在特定的表格中置位。</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/hEEQsacTXvFE97jV14u-Jc-ghhrDKg6TY_w20Mvizspa1cmEQFvtV5ADazkBAOy0" alt="位图标记" loading="lazy"></figure>
<blockquote>
<p>在位图标记中重要的是，位图表格中位的位置要和堆里的各个对象切实对应。一般来说堆中的一个字会分配到一个位。</p>
</blockquote>
<p>位图标记中 mark() 函数的伪代码实现如下：</p>
<pre><code class="language-go">func mark(obj){
    obj_num = (obj - $heap_start) / WORD_LENGTH  // WORD_LENGTH 是一个常量，表示机器中一个字的位宽
    index = obj_num / WORD_LENGTH
    offset = obj_num % WORD_LENGTH
    
    if ($bitmap_tbl[index] &amp; (1 &lt;&lt; offset)) == 0
        $bitmap_tbl[index] |= (1 &lt;&lt; offset)
        for (child: children(obj)) // 然后递归的标记通过指针数组能访问到的对象
            mark(*child)
}
</code></pre>
<p>这里 obj_num 指的是从位图表格前面数，obj 的标志位在第几个。例如 E 的 obj_num 是8。</p>
<p>obj_num 除以 WORD_LENGTH 得到的商 index 以及余数 offset 来分别表示位图表格的行编号和列编号。</p>
<h4 id="优点-2">优点</h4>
<ul>
<li>和写时复制技术兼容</li>
<li>清除更高效（只需要遍历位图表格就可以，清除的时候也只需要清除表格中的标志位）。</li>
</ul>
<h3 id="延迟清除">延迟清除</h3>
<p>清除操作所花费的时间和堆的大小成正比，堆越大，标记-清除 动作花费的时间越长，也就越影响程序的运行。</p>
<p>延迟清除（lazy sweep）是缩短清除操作花费导致程序最大暂停时间的方法。</p>
<blockquote>
<p><code>最大暂停时间</code>，因执行 GC 而暂停执行程序的最长时间。</p>
</blockquote>
<p>延迟清除中 new_obj() 函数会在分配的时候调用 <code>lazy_sweep()</code>函数，进行清除操作。如果它能用清除操作来分配分块，就会返回分块，如果不能分配分块，就会执行标记操作。然后重复这个步骤，直到找到分块或者<code>allocation_fail</code></p>
<p>通过延迟清除法可以缩减程序的暂停时间，不过延迟效果并不是均衡的。比如下图这种刚标记完堆的情况：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/yOIKeU-sQUx1m4C56IcH__oPcq3aR7zKxokJ0kiaqGfBCT9UNqUGnXUalUmcLM9S" alt="堆里垃圾分布不均的情况" loading="lazy"></figure>
<p>这时，活动对象和非活动对象都是相邻分布，如果程序在活动对象周围开始清除，那它找到的对象都是活动对象不可清除，只能不停遍历，暂停时间就会变长。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://book.douban.com/subject/26821357/">垃圾回收的算法与实现</a></li>
<li><a href="https://mp.weixin.qq.com/s/4aEUixY3cioH2OXTgYX0Mg">画说 Ruby 与 Python 垃圾回收</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 生成便签图片]]></title>
        <id>http://blog.gusibi.site/post/python_text_to_image/</id>
        <link href="http://blog.gusibi.site/post/python_text_to_image/">
        </link>
        <updated>2018-07-07T23:04:52.000Z</updated>
        <content type="html"><![CDATA[<p>最近有文字转图片的需求，但是不太想下载 APP，就使用 Python <strong>Pillow</strong> 实现了一个，效果如下：</p>
<figure data-type="image" tabindex="1"><img src="http://note.gusibi.mobi/oRWAws7M4TDPnm7I8nt6Rp9dbAO8_1531017842.png" alt="文字转图片步骤" loading="lazy"></figure>
<p>PIL 提供了 <code>PIL.ImageDraw.ImageDraw.text</code> 方法，可以方便的把文字写到图片上，简单示例如下：</p>
<pre><code class="language-python">from PIL import Image, ImageDraw, ImageFont
# get an image
base = Image.open('Pillow/Tests/images/hopper.png').convert('RGBA')

# make a blank image for the text, initialized to transparent text color
txt = Image.new('RGBA', base.size, (255,255,255,0))

# get a font
fnt = ImageFont.truetype('Pillow/Tests/fonts/FreeMono.ttf', 40)
# get a drawing context
d = ImageDraw.Draw(txt)

# draw text, half opacity
d.text((10,10), &quot;Hello&quot;, font=fnt, fill=(255,255,255,128))
# draw text, full opacity
d.text((10,60), &quot;World&quot;, font=fnt, fill=(255,255,255,255))

out = Image.alpha_composite(base, txt)

out.show()
</code></pre>
<blockquote>
<p>为什么要计算文字的宽高呢？把文字直接写到背景图不可以么？</p>
</blockquote>
<p><strong>Pillow</strong> <code>PIL.ImageDraw.ImageDraw.text</code>写文字是按换行符<code>\n</code>换行的，如果个字符串特别长，文字部分就会超出背景图的宽度，所以第一步我们需要先把文本按固定的宽度计算出高度。</p>
<p>像图上写的这样，文字转图片分三步：</p>
<ol>
<li>计算文字宽高</li>
<li>生成响应尺寸背景图</li>
<li>把文字写到图片上</li>
</ol>
<h3 id="计算文字宽高">计算文字宽高</h3>
<p>这里背景图宽度是固定的，所以文字的宽可以不用计算。<code>PIL.ImageDraw.ImageDraw.text</code> 是通过<code>\n</code>来换行的，那我们只需要在文字合适的位置加上<code>\n</code>就可以了。</p>
<p>第一个想到的是 <code>textwrap</code> 方法，textwrap 可以实现通过调整换行符的位置来格式化文本。但 textwrap 还有一个问题就是它是根据字符长度来分隔的，但文本中的字符并不是等宽的，通过<code>textwrap</code>格式化后的文字写到图片上效果可能是这样的：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5eyQdzV0RMDigRT1sqQIsxJ6MdhEgaEUEM05yThoGXQmVQAaYiildNJ0N2dDAYep" alt="使用 textwrap 格式化后文字效果" loading="lazy"></figure>
<blockquote>
<p>使用这种方式，如果我们要调整字体大小，每一行的长度都还需要再重新调整。</p>
</blockquote>
<p>为了保证每一行宽度尽可能的一致，这里使用 <code>PIL.ImageDraw.ImageDraw.textsize</code> 获取字符宽高，然后按约定宽度把长文本分隔成文本列表，然后把列表每行文字写到图片上。</p>
<pre><code class="language-python">def get_paragraph(text, note_width):
    # 把每段文字按约定宽度分隔成几行
    txt = Image.new('RGBA', (100, 100), (255, 255, 255, 0))
    # get a drawing context
    draw = ImageDraw.Draw(txt)
    paragraph, sum_width = '', 0
    line_numbers, line_height = 1, 0
    for char in text:
        w, h = draw.textsize(char, font)
        sum_width += w
        if sum_width &gt; note_width:
            line_numbers += 1
            sum_width = 0
            paragraph += '\n'
        paragraph += char
        line_height = max(h, line_height)
    if not paragraph.endswith('\n'):
        paragraph += '\n'
    return paragraph, line_height, line_numbers


def split_text(text):
    # 将文本按规定宽度分组
    max_line_height, total_lines = 0, 0
    paragraphs = []
    for t in text.split('\n'):
        # 先按 \n 把文本分段
        paragraph, line_height, line_numbers = get_paragraph(t)
        max_line_height = max(line_height, max_line_height)
        total_lines += line_numbers
        paragraphs.append((paragraph, line_numbers))
    line_height = max_line_height
    total_height = total_lines * line_height
    # 这里返回分好的段，文本总高度以及行高
    return paragraphs, total_height, line_height
</code></pre>
<p>这是按字符宽度分隔文本写到图片的效果：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/c6HsAdeihOmRnO5WtppOXWOmiiyB3rh5AW82fmUDEg35EjKzt-o5yGWQcJWQaSCq" alt="计算字符宽度后格式化效果" loading="lazy"></figure>
<blockquote>
<p>由于文本长度不固定，生成得到的文本高度也不固定，背景图我们也需要动态生成</p>
</blockquote>
<h3 id="根据文本高度生成背景图">根据文本高度生成背景图</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/OjG3S1KAtlLVG7NYgnaabCQzCLwzSGlVaeSinqc0tzXZNQuzZHAD9ZLRBb8zsL0v" alt="便签图片" loading="lazy"></figure>
<p>通过图片我们可以看到，头部和尾部是固定的，变化的是文字部分，那么背景图片的高度计算公式为</p>
<blockquote>
<p>背景图片高度=头部高度+尾部高度+文本高度</p>
</blockquote>
<p>实现代码如下：</p>
<pre><code class="language-python">NOTE_HEADER_IMG = path.normpath(path.join(
    path.dirname(__file__), 'note_header_660.png'))
NOTE_BODY_IMG = path.normpath(path.join(
    path.dirname(__file__), 'note_body_660.png'))
NOTE_FOOTER_IMG = path.normpath(path.join(
    path.dirname(__file__), 'note_footer_660.png'))
NOTE_WIDTH = 660
NOTE_TEXT_WIDTH = 460
body_height = NOTE_BODY_HEIGHT = 206
header_height = NOTE_HEADER_HEIGHT = 89
footer_height = NOTE_FOOTER_HEIGHT = 145
font = ImageFont.truetype(NOTE_OTF, 24)



def get_images(note_height):
    numbers = note_height // body_height + 1
    images = [(NOTE_HEADER_IMG, header_height)]
    images.extend([(NOTE_BODY_IMG, body_height)] * numbers)
    images.append((NOTE_FOOTER_IMG, footer_height))
    return images


def make_backgroud():
    # 将图片拼接到一起
    images = get_images()
    total_height = sum([height for _, height in images])
    # 最终拼接完成后的图片
    backgroud = Image.new('RGB', (body_width, total_height))
    left, right = 0, 0
    background_img = '/tmp/%s_backgroud.png' % total_height
    # 判断背景图是否存在
    if path.exists(background_img):
        return background_img
    for image_file, height in images:
        image = Image.open(image_file)
        # (0, left, self.body_width, right+height)
        # 分别为 左上角坐标 0, left
        # 右下角坐标 self.body_width, right+height
        backgroud.paste(image, (0, left, body_width, right+height))
        left += height  # 从上往下拼接，左上角的纵坐标递增
        right += height  # 左下角的纵坐标也递增
    backgroud.save(background_img, quality=85)
    return background_img
</code></pre>
<h3 id="将文字写到图片">将文字写到图片</h3>
<p>现在我们得到了背景图以及分隔好的文本，就可以直接将文本写到图片上了</p>
<pre><code class="language-python">def draw_text(paragraphs, height):
    background_img = make_backgroud()
    note_img = Image.open(background_img).convert(&quot;RGBA&quot;)
    draw = ImageDraw.Draw(note_img)
    # 文字开始位置坐标，需要根据背景图的大小做调整
    x, y = 80, 100
    for paragraph, line_numbers in paragraphs:
        for line in paragraph.split('\n')[:-1]:
            draw.text((x, y), line, fill=(110, 99, 87), font=font)
            y += line_height
        # draw.text((x, y), paragraph, fill=(110, 99, 87), font=font)
        # y += self.line_height * line_numbers
    note_img.save(filename, &quot;png&quot;, quality=1, optimize=True)
    return filename
</code></pre>
<p>完整版代码请查看 [https://github.com/gusibi/momo/blob/master/momo/note.py][https://github.com/gusibi/momo/blob/master/momo/note.py]</p>
<p>执行后效果如图：</p>
<figure data-type="image" tabindex="5"><img src="http://note.gusibi.mobi/oRWAws7M4TDPnm7I8nt6Rp9dbAO8_1531033396.png" alt="" loading="lazy"></figure>
<h3 id="遇到的问题">遇到的问题</h3>
<p>为了能方便使用，我把这个做成了公号的一个功能，然后遇到了一个严重问题，<strong>太慢了！</strong></p>
<p>使用 <code>line_profiler</code> 分析可以发现，大部分时间都消耗在了图片保存这一步，</p>
<pre><code class="language-python">note_img.save(filename, &quot;png&quot;, quality=1, optimize=True)
</code></pre>
<blockquote>
<p>性能分析工具也会占用时间，测试完成后需要关闭分析</p>
</blockquote>
<p>解决这个问题可能的方法：</p>
<ol>
<li>减小背景图片大小</li>
<li>减小字体大小</li>
</ol>
<p>通过测试，发现把背景图宽度从990减到660，字体大小从40px 调整到24px，生成的图片大小体积缩小了接近1倍，生成速度也比原来快了2/5。</p>
<blockquote>
<p>相同代码，相同文本，使用 python3 只用了2.3s，而 Python2 用时却是5.3 s，还从来没在其它功能上遇到过 Python2 和 Python3 有这么大的差别。</p>
<blockquote>
<p>具体差异可以使用源码测试一下</p>
</blockquote>
</blockquote>
<h4 id="还是有问题">还是有问题</h4>
<p>优化完图片生成速度后，发现在长文本状态下，公号还是会超时报错。经过检查发现是图片上传到公众平台太慢了（服务器只有1M 带宽，没有办法.）。</p>
<blockquote>
<p>解决方法，把图片上传到腾讯云（文件上传使用的是内网带宽，不受限制），返回图片 url。</p>
</blockquote>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/QoT4slWjqm_MtC910mPpJqhzlRmEpz75vGh1T4Oip_Zj3FrHIeQtZxi2imzLE1ex" alt="" loading="lazy"></figure>
<h2 id="参考链接">参考链接</h2>
<hr>
<p>*<strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python gRPC 入门]]></title>
        <id>http://blog.gusibi.site/post/hello_grpc/</id>
        <link href="http://blog.gusibi.site/post/hello_grpc/">
        </link>
        <updated>2018-06-07T07:49:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>gRPC 一开始由 google 开发，是一款语言中立、平台中立、开源的远程过程调用(RPC)系统。 本文通过一个简单的 Hello World 例子来向您介绍 gRPC 。</p>
</blockquote>
<h3 id="grpc-是什么">gRPC 是什么？</h3>
<p>gRPC 也是基于以下理念：定义一个<em>服务</em>，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个<em>存根</em>能够像服务端一样的方法。</p>
<p>在 gRPC 里<em>客户端</em>应用可以像调用本地对象一样直接调用另一台不同的机器上<em>服务端</em>应用的方法，使得我们能够更容易地创建分布式应用和服务。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/t21KzebjklAAMbWL7Aos4KYZLkkbjrGwZkNLUwxrT7Igz1D5Ea2xCJ0W0EOPrgXK" alt="gPRC" loading="lazy"></figure>
<p>gRPC 客户端和服务端可以在多种环境中运行和交互，并且可以用任何 gRPC 支持的语言来编写。</p>
<blockquote>
<p>gRPC 支持 C++ Java Python Go Ruby C# Node.js PHP Dart 等语言</p>
</blockquote>
<p>gRPC 默认使用 <em>protocol buffers</em>，这是 Google 开源的一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。</p>
<h3 id="安装-google-protocol-buffer">安装 Google Protocol Buffer</h3>
<h4 id="方法一建议使用">方法一（建议使用）</h4>
<p>参考文档：<a href="https://grpc.io/docs/quickstart/python.html">gRPC Python Quickstart</a></p>
<h5 id="1-安装-grpc">1. 安装 gRPC</h5>
<pre><code class="language-bash">
python -m pip install grpcio
# 或者
sudo python -m pip install grpcio

# 在 El Capitan OSX 系统下可能会看到以下报错

$ OSError: [Errno 1] Operation not permitted: '/tmp/pip-qwTLbI-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info'

# 可以使用以下命令
python -m pip install grpcio --ignore-installed
</code></pre>
<h5 id="2-安装-grpc-tools">2. 安装 gRPC tools</h5>
<p>Python gPRC tools 包含 protocol buffer 编译器和用于从 <code>.proto</code> 文件生成服务端和客户端代码的插件</p>
<pre><code class="language-bash">python -m pip install grpcio-tools
</code></pre>
<h4 id="方法二">方法二：</h4>
<p>在 github 页面<a href="https://github.com/google/protobuf/releases">protobuf Buffers</a>可以下载二进制源码，下载后执行以下命令安装：</p>
<pre><code class="language-bash">tar -zxvf protobuf-all-3.5.1.tar
cd protobuf-all-3.5.1
./configure
make
make install

&gt;&gt; protoc --version
libprotoc 3.5.1  # 安装成功
</code></pre>
<p>因为是要使用 Protobuf + Python 测试，所以还要安装 python运行环境。<a href="https://github.com/google/protobuf/tree/master/python">protobuf Buffers python 文档</a></p>
<pre><code class="language-bash"># 打开 python 目录
cd python
python setup.py install  # 安装 python 运行环境
</code></pre>
<h3 id="protobuf-基本使用">Protobuf 基本使用</h3>
<h4 id="定义一个消息类型">定义一个消息类型</h4>
<p>先来看一个非常简单的例子。假设你想定义一个“搜索请求”的消息格式，每一个请求含有一个查询字符串、你感兴趣的查询结果所在的页数，以及每一页多少条查询结果。可以采用如下的方式来定义消息类型的.proto文件了：</p>
<pre><code class="language-protobuf">syntax = &quot;proto3&quot;;  // 声明使用 proto3 语法

message SearchRequest {
  string query = 1;  // 每个字段都要指定数据类型
  int32 page_number = 2; // 这里的数字2 是标识符，最小的标识号可以从1开始，最大到2^29 - 1, or 536,870,911。不可以使用其中的[19000－19999]
  int32 result_per_page = 3; // 这里是注释，使用 //
}
</code></pre>
<ul>
<li>文章的第一行指定了你正在使用 proto3 语法：如果不指定，编译器会使用 proto2。<code>这个指定语法必须是文件的非空非注释的第一行</code>。</li>
<li><code>SearchRequest</code>消息格式有三个字段，在消息中承载的数据分别对应于每一个字段。其中每个字段都有一个名字和一种类型。</li>
<li>向.proto文件添加注释，可以使用C/C++/java风格的<code>双斜杠(//)</code> 语法格式。</li>
<li>在消息体中，每个字段都有唯一的一个数字标识符。这些标识符用来在消息的二进制格式中识别各个字段，一旦开始使用就不能再改变。</li>
</ul>
<blockquote>
<p>[1,15]之内的标识号在编码的时候会占用一个字节。[16,2047]之内的标识号则占用2个字节。所以应该为那些频繁出现的消息元素保留 [1,15]之内的标识号。切记：要为将来有可能添加的、频繁出现的标识号预留一些标识号。</p>
</blockquote>
<h4 id="指定字段规则">指定字段规则</h4>
<p>所指定的消息字段修饰符必须是如下之一：</p>
<ul>
<li>
<p>singular：一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）。</p>
</li>
<li>
<p>repeated：在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留。</p>
<p>在proto3中，repeated的标量域默认情况虾使用packed。</p>
<pre><code class="language-protobuf">message Test4 {
  repeated int32 d = 4 [packed=true];
}
</code></pre>
</li>
</ul>
<h4 id="数值类型">数值类型</h4>
<p>一个标量消息字段可以含有一个如下的类型——该表格展示了定义于.proto文件中的类型，以及与之对应的、在自动生成的访问类中定义的类型：</p>
<table>
<thead>
<tr>
<th>.proto Type</th>
<th>Notes</th>
<th>C++ Type</th>
<th>Java Type</th>
<th>Python Type[2]</th>
<th>Go Type</th>
<th>Ruby Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>double</td>
<td></td>
<td>double</td>
<td>double</td>
<td>float</td>
<td>float64</td>
<td>Float</td>
</tr>
<tr>
<td>float</td>
<td></td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float32</td>
<td>Float</td>
</tr>
<tr>
<td>int32</td>
<td>使用变长编码，对于负值的效率很低，如果你的域有可能有负值，请使用sint64替代</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
</tr>
<tr>
<td>uint32</td>
<td>使用变长编码</td>
<td>uint32</td>
<td>int</td>
<td>int/long</td>
<td>uint32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
</tr>
<tr>
<td>uint64</td>
<td>使用变长编码</td>
<td>uint64</td>
<td>long</td>
<td>int/long</td>
<td>uint64</td>
<td>Bignum</td>
</tr>
<tr>
<td>sint32</td>
<td>使用变长编码，这些编码在负值时比int32高效的多</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
</tr>
<tr>
<td>sint64</td>
<td>使用变长编码，有符号的整型值。编码时比通常的int64高效。</td>
<td>int64</td>
<td>long</td>
<td>int/long</td>
<td>int64</td>
<td>Bignum</td>
</tr>
<tr>
<td>fixed32</td>
<td>总是4个字节，如果数值总是比总是比228大的话，这个类型会比uint32高效。</td>
<td>uint32</td>
<td>int</td>
<td>int</td>
<td>uint32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
</tr>
<tr>
<td>fixed64</td>
<td>总是8个字节，如果数值总是比总是比256大的话，这个类型会比uint64高效。</td>
<td>uint64</td>
<td>long</td>
<td>int/long</td>
<td>uint64</td>
<td>Bignum</td>
</tr>
<tr>
<td>sfixed32</td>
<td>总是4个字节</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
</tr>
<tr>
<td>sfixed64</td>
<td>总是8个字节</td>
<td>int64</td>
<td>long</td>
<td>int/long</td>
<td>int64</td>
<td>Bignum</td>
</tr>
<tr>
<td>bool</td>
<td></td>
<td>bool</td>
<td>boolean</td>
<td>bool</td>
<td>bool</td>
<td>TrueClass/FalseClass</td>
</tr>
<tr>
<td>string</td>
<td>一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本。</td>
<td>string</td>
<td>String</td>
<td>str/unicode</td>
<td>string</td>
<td>String (UTF-8)</td>
</tr>
<tr>
<td>bytes</td>
<td>可能包含任意顺序的字节数据。</td>
<td>string</td>
<td>ByteString</td>
<td>str</td>
<td>[]byte</td>
<td>String (ASCII-8BIT)</td>
</tr>
</tbody>
</table>
<h4 id="默认值">默认值</h4>
<p>当一个消息被解析的时候，如果被编码的信息不包含一个特定的singular元素，被解析的对象锁对应的域被设置位一个默认值，对于不同类型指定如下：</p>
<ul>
<li>
<p>对于strings，默认是一个空string</p>
</li>
<li>
<p>对于bytes，默认是一个空的bytes</p>
</li>
<li>
<p>对于bools，默认是false</p>
</li>
<li>
<p>对于数值类型，默认是0</p>
</li>
<li>
<p>对于枚举，默认是第一个定义的枚举值，必须为0;</p>
</li>
<li>
<p>对于消息类型（message），域没有被设置，确切的消息是根据语言确定的，详见<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn">generated code guide</a></p>
<p>对于可重复域的默认值是空（通常情况下是对应语言中空列表）。</p>
</li>
</ul>
<h4 id="嵌套类型">嵌套类型</h4>
<p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>
<pre><code class="language-protobuf">message SearchResponse {
  message Result {
    string url = 1;
    string title = 2;
    repeated string snippets = 3;
  }
  repeated Result results = 1;
}
</code></pre>
<p>在 message SearchResponse 中，定义了嵌套消息 <code>Result</code>，并用来定义<code>SearchResponse</code>消息中的<code>results</code>域。</p>
<h3 id="protobuf-文件编译">Protobuf 文件编译</h3>
<h4 id="从proto文件生成了什么">从.proto文件生成了什么？</h4>
<p>当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。</p>
<ul>
<li>对C++来说，编译器会为每个.proto文件生成一个.h文件和一个.cc文件，.proto文件中的每一个消息有一个对应的类。</li>
<li>对Java来说，编译器为每一个消息类型生成了一个.java文件，以及一个特殊的Builder类（该类是用来创建消息类接口的）。</li>
<li>对Python来说，有点不太一样——Python编译器为.proto文件中的每个消息类型生成一个含有静态描述符的模块，，该模块与一个元类（metaclass）在运行时（runtime）被用来创建所需的Python数据访问类。</li>
<li>对go来说，编译器会位每个消息类型生成了一个.pd.go文件。</li>
<li>对于Ruby来说，编译器会为每个消息类型生成了一个.rb文件。</li>
<li>javaNano来说，编译器输出类似域java但是没有Builder类</li>
<li>对于Objective-C来说，编译器会为每个消息类型生成了一个pbobjc.h文件和pbobjcm文件，.proto文件中的每一个消息有一个对应的类。</li>
<li>对于C#来说，编译器会为每个消息类型生成了一个.cs文件，.proto文件中的每一个消息有一个对应的类。</li>
</ul>
<h3 id="python-grpc-示例">Python gRPC 示例</h3>
<h4 id="编译">编译</h4>
<p>这里我们用Python 编译一下，看得到什么：</p>
<pre><code class="language-protobuf">// 文件名 hello.proto
syntax = &quot;proto3&quot;;

package hello;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
</code></pre>
<p>使用以下命令编译:</p>
<pre><code class="language-bash">python -m grpc_tools.protoc -I./ --python_out=. --grpc_python_out=. ./hello.proto
</code></pre>
<p>生成了两个文件：</p>
<ul>
<li><code>hello_pb2.py</code> 此文件包含生成的 request(<code>HelloRequest</code>) 和 response(<code>HelloReply</code>) 类。</li>
<li><code>hello_pb2_grpc.py</code> 此文件包含生成的 客户端(<code>GreeterStub</code>)和服务端(<code>GreeterServicer</code>)的类。</li>
</ul>
<p>源码地址为<a href="https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto">https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto</a></p>
<p>虽然现在已经生成了服务端和客户端代码，但是我们还需要手动实现以及调用的方法。</p>
<h4 id="创建服务端代码">创建服务端代码</h4>
<p>创建和运行 <code>Greeter</code> 服务可以分为两个部分：</p>
<ul>
<li>
<p>实现我们服务定义的生成的服务接口：做我们的服务的实际的“工作”的函数。</p>
</li>
<li>
<p>运行一个 gRPC 服务器，监听来自客户端的请求并传输服务的响应。</p>
</li>
</ul>
<p>在当前目录，打开文件 greeter_server.py，实现一个新的函数：</p>
<pre><code class="language-python">from concurrent import futures
import time

import grpc

import hello_pb2
import hello_pb2_grpc

_ONE_DAY_IN_SECONDS = 60 * 60 * 24


class Greeter(hello_pb2_grpc.GreeterServicer):
	# 工作函数
    def SayHello(self, request, context):
        return hello_pb2.HelloReply(message='Hello, %s!' % request.name)


def serve():
    # gRPC 服务器
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    hello_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
    server.add_insecure_port('[::]:50051')
    server.start()  # start() 不会阻塞，如果运行时你的代码没有其它的事情可做，你可能需要循环等待。
    try:
        while True:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)

if __name__ == '__main__':
    serve()
</code></pre>
<h4 id="更新客户端代码">更新客户端代码</h4>
<p>在当前目录，打开文件 greeter_client.py，实现一个新的函数：</p>
<pre><code class="language-python">from __future__ import print_function

import grpc

import hello_pb2
import hello_pb2_grpc


def run():
    channel = grpc.insecure_channel('localhost:50051')
    stub = hello_pb2_grpc.GreeterStub(channel)
    response = stub.SayHello(hello_pb2.HelloRequest(name='goodspeed'))
    print(&quot;Greeter client received: &quot; + response.message)


if __name__ == '__main__':
    run()
</code></pre>
<blockquote>
<p>对于返回单个应答的 RPC 方法（&quot;response-unary&quot; 方法），gRPC Python 同时支持同步（阻塞）和异步（非阻塞）的控制流语义。对于应答流式 RPC 方法，调用会立即返回一个应答值的迭代器。调用迭代器的 <code>next()</code> 方法会阻塞，直到从迭代器产生的应答变得可用。</p>
</blockquote>
<h4 id="运行代码">运行代码</h4>
<ol>
<li>首先运行服务端代码</li>
</ol>
<pre><code class="language-bash">python greeter_server.py
</code></pre>
<ol start="2">
<li>然后运行客户端代码</li>
</ol>
<pre><code class="language-bash">python greeter_client.py
# output

Greeter client received: Hello, goodspeed!
</code></pre>
<blockquote>
<p><a href="https://github.com/grpc/grpc/tree/master/examples/python">源码地址: https://github.com/grpc/grpc/tree/master/examples/python</a></p>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://doc.oschina.net/grpc?t=56831">gRPC 官方文档中文版</a></li>
<li><a href="https://blog.csdn.net/u011518120/article/details/54604615">Protobuf3语言指南</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html">Google Protocol Buffer 的使用和原理</a></li>
<li><a href="https://grpc.io/docs/quickstart/python.html">gRPC Python Quickstart</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[newrelic python agent 源码分析-1]]></title>
        <id>http://blog.gusibi.site/post/newrelic_source_code_1/</id>
        <link href="http://blog.gusibi.site/post/newrelic_source_code_1/">
        </link>
        <updated>2018-05-16T04:17:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Newrelic 是APM（Application Performance Management）（应用性能管理/监控）解决方案提供商。项目中，通常用它来追踪应用的性能。最近看了一下 newrelic-python-agent 源码，这是查看源码过程中的一些记录。</p>
</blockquote>
<h3 id="目录结构">目录结构</h3>
<p>newrelic 目录结构如下：</p>
<pre><code class="language-bash">newrelic
├── admin  # 常用命令
├── api    # 探针
├── bootstrap
├── common  
├── core
├── extras
│   └── framework_django
│       └── templatetags
├── hooks   # 数据库 web 各个库的一些探针
│   ├── framework_tornado
│   ├── framework_tornado_r3
│   └── framework_tornado_r4
├── network
├── packages
│   ├── requests
│   │   └── packages
│   │       ├── chardet
│   │       └── urllib3
│   │           ├── packages
│   │           │   └── ssl_match_hostname
│   │           └── util
│   └── wrapt
└── samplers
</code></pre>
<h3 id="命令">命令</h3>
<p>使用 <code>newrelic-admin help</code> 可以列出所有命令：</p>
<pre><code class="language-bash">$ newrelic-admin help

Usage: newrelic-admin command [options]

Type 'newrelic-admin help &lt;command&gt;'for help on a specific command.

Available commands are:
  generate-config
  license-info
  license-key
  local-config
  network-config
  record-deploy
  run-program
  run-python
  server-config
  validate-config
</code></pre>
<p>通过 setup.py 代码可以知道：</p>
<pre><code class="language-python">if with_setuptools:
    kwargs['entry_points'] = {
            'console_scripts': ['newrelic-admin = newrelic.admin:main'],
            }
</code></pre>
<p><code>newrelic-admin</code> 命令调用的是 <code>newrelic.admin:main</code>，这是代码的入口。首先看一下 <code>newrelic/admin/</code>目录。</p>
<h4 id="admin">admin</h4>
<blockquote>
<p>admin 目录是 newrelic-admin help 列出的命令脚本所在目录。</p>
</blockquote>
<p>包含文件如下：</p>
<pre><code class="language-bash">$ tree
admin
├── __init__.py
├── __main__.py
├── debug_console.py
├── generate_config.py
├── license_info.py
├── license_key.py
├── local_config.py
├── network_config.py
├── record_deploy.py
├── run_program.py
├── run_python.py
├── server_config.py
└── validate_config.py
</code></pre>
<p><code>__init__.py</code> 的 main 函数 是命令执行的入口。</p>
<p><code>__init__.py</code> 文件中代码</p>
<pre><code class="language-python">load_internal_plugins()
load_external_plugins()
</code></pre>
<p>用来加载 <code>_builtin_plugins</code> 中定义的命令。</p>
<h4 id="run_program">run_program</h4>
<p>首先看下 run_program 命令，这个命令使用方式如下：</p>
<pre><code class="language-bash">newrelic-admin run-program your command
</code></pre>
<p><code>newrelic/admin/run_program.py</code> 中 <code>run_program</code> 函数有装饰器 command，用来定义将命令以及相关说明添加到字典 <code>_commands</code>。</p>
<p>在 <code>run_program</code> 中代码：</p>
<pre><code class="language-python">root_directory = os.path.dirname(root_directory)
boot_directory = os.path.join(root_directory, 'bootstrap')

if 'PYTHONPATH' in os.environ:
    path = os.environ['PYTHONPATH'].split(os.path.pathsep)
    if not boot_directory in path:
        python_path = &quot;%s%s%s&quot; % (boot_directory, os.path.pathsep, os.environ['PYTHONPATH'])

os.environ['PYTHONPATH'] = python_path
</code></pre>
<p>可以发现<code>newrelic/bootstrap/sitecustomize.py</code> 文件被加入到了 PYTHONPATH。</p>
<blockquote>
<p>python 解释器初始化的时候会自动 import <code>PYTHONPATH</code> 下存在的 <code>sitecustomize</code> 和 <code>usercustomize</code> 模块。</p>
</blockquote>
<p>之后的功能比较简单，就是调用 os 模块执行命令。</p>
<p>现在看下<code>newrelic/bootstrap/sitecustomize.py</code> 代码。</p>
<p>在 这个文件的最后一行：</p>
<pre><code class="language-python">newrelic.config.initialize(config_file, environment)
</code></pre>
<p>这里用来初始化newrelic，具体代码在 <code>newrelic/config.py</code>文件。</p>
<p>以下是initialize函数：</p>
<pre><code class="language-python">def initialize(config_file=None, environment=None, ignore_errors=None,
            log_file=None, log_level=None):

    if config_file is None:
        config_file = os.environ.get('NEW_RELIC_CONFIG_FILE', None)

    if environment is None:
        environment = os.environ.get('NEW_RELIC_ENVIRONMENT', None)

    if ignore_errors is None:
        ignore_errors = newrelic.core.config._environ_as_bool(
                'NEW_RELIC_IGNORE_STARTUP_ERRORS', True)

    _load_configuration(config_file, environment, ignore_errors,
            log_file, log_level)  # 加载配置

    if _settings.monitor_mode or _settings.developer_mode:
        _settings.enabled = True
        _setup_instrumentation()  # 设置探针
        _setup_data_source()  # TODO
        _setup_extensions()   # TODO
        _setup_agent_console()   # TODO
    else:
        _settings.enabled = False
</code></pre>
<p>其中第14行 <code>_load_configuration</code> 是用来加载 newrelic 的相关配置。比如：日志目录、各种环境变量、秘钥、newrelic host 地址等等。</p>
<p>`_setup_instrumentation() 中 _process_module_builtin() 用来设置探针。</p>
<p>数据库、外部请求 等监控模块都位于 hook 目录下，通过 <code>_process_module_builtin</code> 函数将进程与监控模块进行绑定，包括 django 的主要模块以及常用的数据库等。在核心模块执行的时候触发监控，将数据回传到 <code>api.time_trace</code> 模块进行处理。</p>
<p>而对于硬件信息的检测则由 <code>commo.system_info</code> 进行。</p>
<h3 id="newrelic-run_program-初始化过程">newrelic run_program 初始化过程</h3>
<p>以下为 flask 应用初始化过程，其它应用类似：</p>
<ol>
<li><code>newrelic/admin/__init__.py main()</code></li>
<li><code>newrelic/admin/run_program.py</code> 代码中会把 <code>newrelic/bootstrap/sitecustomize.py</code> 添加到 <code>PYTHONPATH</code>,python 解释器初始化的时候会自动 import <code>PYTHONPATH</code> 下存在的 <code>sitecustomize</code> 和 <code>usercustomize</code> 模块</li>
<li><code>newrelic/bootstrap/sitecustomize.py</code> 调用 <code>newrelic.config.initialize()</code>，<code>_setup_instrumentation()</code> 函数被调用，<code>_process_module_builtin</code>会把需要 wrap 的包先添加到_import_hooks。</li>
<li><code>newrelic/config.py</code> 中  <code>sys.meta_path.insert(0, newrelic.api.import_hook.ImportHookFinder())</code> 执行</li>
<li><code>newrelic/api/import_hook.py ImportHookFinder().find_model()</code></li>
<li><code>newrelic/api/import_hook.py _ImportHookLoader() or _ImportHookChainedLoader()</code></li>
<li><code>newrelic/api/import_hook.py _notify_import_hooks</code>  <code>callable</code> 为 <code>newrelic/config _module_import_hook _instrument</code></li>
<li><code>newrelic/hooks/framework_flask.py instrument_flask_app</code></li>
<li><code>newrelic/api/web_transaction.py wrap_wsgi_application</code></li>
<li><code>newrelic/common/object_wrapper.py wrap_object</code></li>
</ol>
<p>在代码中，使用到了第三方包 <code>wrapt</code>，以下是 wrapt 的官方描述（<a href="https://wrapt.readthedocs.io/en/latest/index.html">文档地址</a>)。</p>
<blockquote>
<p>wrapt模块的目的是为Python提供一个透明的对象代理，它可以作为构建函数包装器和装饰函数的基础。wrapt 提供了一个简单易用的decorator工厂，利用它你可以简单地创建decorator，并且在任何情况下都可以正确地使用它们。</p>
</blockquote>
<p><code>wrapt</code>简单示例如下：</p>
<pre><code class="language-python">import wrapt
# 普通装饰器
@wrapt.decorator
def pass_through(wrapped, instance, args, kwargs):
    return wrapped(*args, **kwargs)

@pass_through
def function():
    pass

# 带参数的装饰器
import wrapt

def with_arguments(myarg1, myarg2):
    @wrapt.decorator
    def wrapper(wrapped, instance, args, kwargs):
        return wrapped(*args, **kwargs)
    return wrapper

@with_arguments(1, 2)
def function():
    pass
</code></pre>
<p>要实现decorator，需要首先定义一个装饰器函数。这将在每次调用修饰函数时调用。装饰器函数需要使用四个位置参数:</p>
<ul>
<li>wrapped - The wrapped function which in turns needs to be called by your wrapper function.</li>
<li>instance - The object to which the wrapped function was bound when it was called.</li>
<li>args - The list of positional arguments supplied when the decorated function was called.</li>
<li>kwargs - The dictionary of keyword arguments supplied when the decorated function was called.</li>
</ul>
<p>具体使用参考文档吧。 <a href="https://wrapt.readthedocs.io/en/latest/index.html">文档地址</a></p>
<hr>
<p>newrelic 源码仔细看下去，太...复杂了。下一篇再分析一个 flask 请求到结束探针工作的完整过程吧。</p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 学习笔记-2：控制流]]></title>
        <id>http://blog.gusibi.site/post/golang-learning-note-2/</id>
        <link href="http://blog.gusibi.site/post/golang-learning-note-2/">
        </link>
        <updated>2018-04-17T07:49:35.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一篇我们了解了golang 的变量、函数和基本类型，这一篇将介绍一下控制流</p>
</blockquote>
<p>现在我们看一个复杂点的例子:</p>
<h3 id="fibonacci递归版">fibonacci(递归版)</h3>
<pre><code class="language-go">package main
import &quot;fmt&quot;

func main() {
    result := 0
    for i := 0; i &lt;= 10; i++ {
	     result = fibonacci(i)
	     fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
	  }
}

func fibonacci(n int) (res int) {
    if n &lt;= 1 {
        res = 1
	   } else {
	       res = fibonacci(n-1) + fibonacci(n-2)
	   }
	return
}

    // outputs

    fibonacci(0) is: 1
    fibonacci(1) is: 1
    fibonacci(2) is: 2
    fibonacci(3) is: 3
    fibonacci(4) is: 5
    fibonacci(5) is: 8
    fibonacci(6) is: 13
    fibonacci(7) is: 21
    fibonacci(8) is: 34
    fibonacci(9) is: 55
    fibonacci(10) is: 89
</code></pre>
<ul>
<li>for i := 0; i &lt;= 10; i++ {} 第7行是一个循环结构 这里for 循环是一个控制流</li>
</ul>
<h2 id="控制流">控制流</h2>
<h3 id="for">For</h3>
<p>Go 只有一种循环接口-- <code>for 循环</code></p>
<p>For 支持三种循环方式,包括类 while 语法</p>
<h4 id="1-基本for循环-支持初始化语句">1 基本for循环 支持初始化语句</h4>
<pre><code class="language-go">s := &quot;abc&quot;
for i, n := 0, len(s); i &lt; n; i++ {
	// i, n 为定义的变量 只在for 循环内作用
    println(s[i])
}
</code></pre>
<p><em>基本的 for 循环包含三个由分号分开的组成部分：</em></p>
<ul>
<li>初始化语句：在第一次循环执行前被执行</li>
<li>循环条件表达式：每轮迭代开始前被求值</li>
<li>后置语句：每轮迭代后被执行</li>
</ul>
<h4 id="2-替代-while-n-0">2 替代 while (n &gt; 0) {}</h4>
<p>C 的 while 在 Go 中叫做 for</p>
<pre><code class="language-go">n := len(s)
// 循环初始化语句和后置语句都是可选的。
for n &gt; 0 { // 等同于 for (; n &gt; 0;) {}
    println(s[n])
    n--
}
</code></pre>
<h4 id="3-死循环">3 死循环</h4>
<pre><code class="language-go">    for { // while true
        println(s)
    }
</code></pre>
<h3 id="ifelse">IF…ELSE</h3>
<blockquote>
<p>就像 for 循环一样，Go 的 if 语句也不要求用 ( ) 将条件括起来，同时， { } 还是必须有的</p>
</blockquote>
<ul>
<li>条件表达式必须是布尔类型，可省略条件表达式括号</li>
<li>支持初始化语句,可定义代码块局部变量</li>
<li>代码块左大括号必须在条件表达式尾部</li>
</ul>
<pre><code class="language-go">x := 0

// if x &gt; 10  // Error: missing condition in if statement(左大括号必须在条件表达式尾部)
// {
// }

if x &gt; 10{
    ...
}else{
    ...
}

if n := &quot;abc&quot;; x &gt; 0 {  // 初始化语句(在这里是定义变量)
	println(n[2])
} else if x &lt; 0 {
	println(n[1])
} else {
    println(n[0])     // 局部变量 n 有效范围是 整个 if/else 块
}
</code></pre>
<blockquote>
<p>if 语句定义的变量作用域仅在if范围之内(包含else语句)<br>
不支持三元操作符 &quot;a &gt; b ? a : b&quot;</p>
</blockquote>
<p>以上是上段代码出现的两个控制流，剩下的控制流还有</p>
<ul>
<li>Switch</li>
<li>Range</li>
<li>Goto, Break, Continue, defer</li>
</ul>
<h3 id="switch">Switch</h3>
<p>switch 语句用于选择执行，语法如下：</p>
<pre><code class="language-go">    switch optionalStatement; optionalExpression{
		case expressionList1: block1
		...
		case expressionListN: blockN
		default: blockD
	}
</code></pre>
<p>先看一个例子:</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;runtime&quot;
)

func main() {
	fmt.Print(&quot;Go runs on &quot;)
	switch os := runtime.GOOS; os { // 将 os 与 case 条件匹配
	case &quot;darwin&quot;:
		fmt.Println(&quot;OS X.&quot;)
	case &quot;linux&quot;:
		fmt.Println(&quot;Linux.&quot;)
	case &quot;plan9&quot;, &quot;openbsd&quot;: // 多个条件命中其一即可(OR)
		fmt.Println(&quot;plan9 | openbsd&quot;)
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf(&quot;%s.&quot;, os)
	}
}

</code></pre>
<ul>
<li>如果有可选语句声明, 分号是必要的, 无论后边的可选表达式语句是否出现(如果可选语句没有出现默认为true)</li>
<li>每一个case 语句必须要有一个表达式列表，多个用分号隔开</li>
<li>switch 语句自上而下执行，当匹配成功后执行case分支的代码块，执行结束后退出switch</li>
</ul>
<pre><code class="language-go">switch i {
case 0: // 空分支，只有当 i == 0 时才会进入分支 相当于 &quot;case 0: break;&quot;
case 1:
    f() // 当 i == 0 时函数不会被调用
}
</code></pre>
<ul>
<li>如果想要在执行完每个分支的代码后还继续执行后续的分支代码，可以使用fallthrough 关键字达到目的</li>
</ul>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func switch1(n int) {
	switch { // 这里用的是没有条件的switch 语句会直接执行
	case n == 0:
		fmt.Println(0)
		fallthrough  // fallthrough 需放在 case 块结尾，可用 break 阻止
	case n == 1: // 如果匹配到0 这里会继续执行
		fmt.Println(1)
	case n == 2: // fallthrough 不会对这里有作用
		fmt.Println(2)
	default:
		fmt.Println(&quot;default&quot;)
	}
}

func main() {
	switch1(0)
}
# output
0
1
</code></pre>
<ul>
<li>用 default 可以指定当其他所有分支都不匹配的时候的行为</li>
</ul>
<pre><code class="language-go">    switch i {
    	case 0:
    	case 1:
    		f()
    	default:
    		g()  // 当i不等于0 或 1 时调用
    }
</code></pre>
<h3 id="range">Range</h3>
<blockquote>
<p>Range 类似迭代器的操作，返回(索引，值)或(健，值)</p>
</blockquote>
<p>它可以迭代任何一个集合（包括字符串、数组、数组指针、切片、字典、通道）</p>
<p>基本语法如下:</p>
<pre><code class="language-go">coll := 3string[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
for ix, val := range coll {
   ...
}

// 允许返回单值

for ix := range coll {
    println(ix, coll[ix])
}

// 也可以使用 _ 忽略

for _, val := range coll {
    println(val)
}

// 也可以只迭代，不返回。可用来执行清空 channel 等操作

for range coll {
    ...
}
</code></pre>
<p>val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（译者注：如果 val 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值<br>
一个字符串是 Unicode 编码的字符（或称之为 rune）集合，因此您也可以用它迭代字符串</p>
<p>下面是每种数据类型使用range时 ix和val 的值</p>
<table>
<thead>
<tr>
<th>date type</th>
<th>ix</th>
<th>value</th>
<th>值类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>index</td>
<td>s[index]</td>
<td>unicode, rune</td>
</tr>
<tr>
<td>array/slice</td>
<td>index</td>
<td>s[index]</td>
<td></td>
</tr>
<tr>
<td>map</td>
<td>key</td>
<td>m[index]</td>
<td></td>
</tr>
<tr>
<td>channel</td>
<td>element</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>range 会复制目标数据。字符串、切片基本结构是个很小的结构体，而字典、通道本身是指针封装，复制成本很小，无需专门优化。</p>
<p>如果是数组，可改成数组指针或者切片类型。</p>
</blockquote>
<h3 id="break-continue">Break continue</h3>
<p>break 和 continue 都可在多级嵌套循环中跳出</p>
<blockquote>
<p>break 可用于 for、switch、select语句，终止整个语句块执行</p>
<p>continue 仅能 于 for 循环，终止后续操作，立即进入下一轮循环。</p>
</blockquote>
<h3 id="goto">goto</h3>
<p>goto 语句可以配合标签（label）形式的标识符使用，即某一行第一个以冒号<code>:</code>结尾的单词，标签区分大小写。</p>
<pre><code class="language-go">package main

func main() {
    i:=0
    HERE:
	    print(i)
		i++
        if i==5 {
	        return
	    }
        goto HERE
}
# output 01234
</code></pre>
<blockquote>
<p>使用标签和 goto 语句是不被鼓励的：它们会很快导致非常糟糕的程序设计，而且总有更加可读的替代方案来实现相同的需求。</p>
</blockquote>
<p>for、switch 或 select 语句都可以配合标签（label）形式的标识符使用</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {

LABEL1:
    for i := 0; i &lt;= 5; i++ {
		for j := 0; j &lt;= 5; j++ {
			if j == 4 {
				continue LABEL1
			}
			fmt.Printf(&quot;i is: %d, and j is: %d\n&quot;, i, j)
		}
	}
}

</code></pre>
<blockquote>
<p>continue 语句指向 LABEL1，当执行到该语句的时候，就会跳转到 LABEL1 标签的位置</p>
</blockquote>
<h3 id="defer">defer</h3>
<p>defer 语句会延迟函数的执行直到上层函数返回</p>
<p>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	defer fmt.Println(&quot;world&quot;)

	fmt.Println(&quot;hello&quot;)
}

// output
hello
world
</code></pre>
<p><em>defer 栈</em></p>
<p>延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。<br>
defer 常用来定义简单的方法</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	fmt.Println(&quot;counting&quot;)

	for i := 0; i &lt; 10; i++ {
			defer fmt.Println(i)
		}

		fmt.Println(&quot;done&quot;)
}
// 可以想一下会输出什么
// 代码执行 https://tour.go-zh.org/flowcontrol/13
</code></pre>
<p><em>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，例如：</em></p>
<ul>
<li>
<p>关闭文件流：</p>
<p>// open a file defer file.Close()</p>
</li>
<li>
<p>解锁一个加锁的资源</p>
<p>mu.Lock() defer mu.Unlock()</p>
</li>
<li>
<p>打印最终报告</p>
<p>printHeader() defer printFooter()</p>
</li>
<li>
<p>关闭数据库链接</p>
<p>// open a database connection defer disconnectFromDB()</p>
</li>
</ul>
<p>合理使用 defer 语句能够使得代码更加简洁。</p>
<p>下面的代码展示了在调试时使用 defer 语句的手法</p>
<pre><code class="language-go">package main

import (
	&quot;io&quot;
    &quot;log&quot;
)

func func1(s string) (n int, err error) {
    defer func() {
	        log.Printf(&quot;func1(%q) = %d, %v&quot;, s, n, err)
	    }()
    return 7, io.EOF
}

func main() {
    func1(&quot;Go&quot;)
}

// 输出
Output: 2016/04/25 10:46:11 func1(&quot;Go&quot;) = 7, EOF
</code></pre>
<p>更多defer 的用法(<a href="https://blog.go-zh.org/defer-panic-and-recover">https://blog.go-zh.org/defer-panic-and-recover</a>)</p>
<h3 id="参考链接">参考链接</h3>
<p><a href="https://tour.go-zh.org/flowcontrol/1">Go 指南</a><br>
<a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/05.0.md">The way to go -- 控制结构</a><br>
<a href="https://golang.org/doc/effective_go.html">Effective Go</a></p>
<p>到这里简单的控制流用法讲解就结束了</p>
<p>下节将会是golang 数据结构部分, 会用到的代码为</p>
<h3 id="fibonacci内存版">fibonacci(内存版)</h3>
<pre><code class="language-go"> package main

 import (
     &quot;fmt&quot;
     &quot;time&quot;
 )

 const LIM = 41

 var fibs [LIM]uint64

 func main() {
     var result uint64 = 0
     start := time.Now()
     for i := 0; i &lt; LIM; i++ {
         result = fibonacci(i)
         fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
     }
     end := time.Now()
     delta := end.Sub(start)
     fmt.Printf(&quot;longCalculation took this amount of time: %s\n&quot;, delta)
 }
 func fibonacci(n int) (res uint64) {
     // memoization: check if fibonacci(n) is already known in array:
     if fibs[n] != 0 {
         res = fibs[n]
         return
     }
     if n &lt;= 1 {
         res = 1
     } else {
         res = fibonacci(n-1) + fibonacci(n-2)
     }
     fibs[n] = res
     return
 }
</code></pre>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《理解 unix 进程》笔记-1]]></title>
        <id>http://blog.gusibi.site/post/understand-unix-process-1/</id>
        <link href="http://blog.gusibi.site/post/understand-unix-process-1/">
        </link>
        <updated>2018-03-25T07:25:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="unix-进程">UNIX 进程</h2>
<h3 id="系统调用">系统调用</h3>
<p>Unix 系统是由用户空间（userland）和内核组成。Unix 内核位于计算机硬件之上，是与硬件交互的中介。这些交互包括通过问卷系统进程读/写、在网络上发送数据、分配内存，以及通过扬声器播放音频。这些都是用户应用程序所不能涉及的，只能通过系统调用来完成。</p>
<blockquote>
<p><code>系统调用</code>为内核和用户空间搭建了桥梁。规定了程序和计算机硬件直接所允许发生的一切交互。</p>
</blockquote>
<p>进程是 Unix 系统的基石，所有的代码都是在进程中运行。</p>
<p>unix 中的进程创建是通过内核系统调用 fork() 实现的。当一个进程产生一个 fork 请求时，操作系统执行以下功能：</p>
<ol>
<li>为新进程在进程表中分配一个空项</li>
<li>为子进程赋一个唯一的进程标识符</li>
<li>为一个父进程上下文的逻辑副本，不包括共享内存区</li>
<li>增加父进程拥有的所有文件的计数器，以表示有一个另外的进程现在也用户这些文件。</li>
<li>把子进程置为就绪态</li>
<li>向父进程返回子进程的进程号；对子进程返回0。</li>
</ol>
<p>所有这些操作都在父进程的内核态下完成。</p>
<h3 id="进程皆有标识">进程皆有标识</h3>
<p>在系统中运行的所有进程都有一个唯一的进程标识符，称为 pid。</p>
<blockquote>
<p>pid 并不传达关于进程本身的任何信息，仅仅是一个数字标识</p>
</blockquote>
<p>在 python 中查看当前进程 pid 可以使用 <code>getpid()</code> 方法。</p>
<pre><code class="language-python">&gt;&gt;&gt; import os

&gt;&gt;&gt; print os.getpid()
26164
</code></pre>
<blockquote>
<p>在实际应用中，pid 可以加入都日志信息中，这样当多个进程向同一个文件写入日志的时候，就可以知道哪一行是由哪个进程写入的。</p>
</blockquote>
<h3 id="进程皆有父">进程皆有父</h3>
<p>系统中运行的每一个进程都有对应的父进程。每个进程都知道它父进程的标识符（ppid）。</p>
<p>在 python 中查看当前进程 pid 可以使用 <code>getppid()</code> 方法。</p>
<pre><code class="language-python">&gt;&gt;&gt; import os

&gt;&gt;&gt; print os.getpid()
26164
&gt;&gt;&gt; print os.getppid()
26125
</code></pre>
<h3 id="进程皆有文件描述符">进程皆有文件描述符</h3>
<p>在 Unix 中，一切都是文件。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/7_BEou-9LxGREQm2CyB18Oeb93T8Pp_shyshaDgE5teiRCA48OatdxhJWq8J07wF" alt="一切皆文件" loading="lazy"></figure>
<p>无论何时在进程中打开一个资源，你都会获得一个文件描述符编号（file description number）。文件描述符并不会在无关进程之间共享，它只存在于其所属的进程之中。</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

import os

p = open('test.txt', 'wb')
print(p.name, p.fileno())

p1 = open('test1.txt', 'wb')
print(p1.name, p1.fileno())

p.close()

p2 = open('test2.txt', 'wb')
print(p2.name, p2.fileno())

print(p.name, p.fileno())
</code></pre>
<p>输出：</p>
<pre><code class="language-shell">test.txt 3
test1.txt 4
test2.txt 3
Traceback (most recent call last):
  File &quot;/Users/gs/Desktop/fdn.py&quot;, line 16, in &lt;module&gt;
    print(p.name, p.fileno())
ValueError: I/O operation on closed file
</code></pre>
<blockquote>
<p>进程打开所有资源都会获得一个用于标识的唯一数字。</p>
<p>打开多个资源所分配的文件描述符编号是尚未使用的最小的数值。</p>
<p>资源一旦关闭，对应的文件描述符编号就会释放又能继续使用了。</p>
<p>文件描述符只是用来跟踪打开的资源，已经关闭的资源是没有文件描述符的。</p>
</blockquote>
<p>标准流</p>
<p>每个 Unix 进程都有三个打开的资源，它们是标准输入（STDIN）、标准输出（STDOUT）和标准错误（STDERR）。</p>
<ul>
<li>STDIN 提供了一种从键盘或管道中读取输入的通用方法</li>
<li>STDOUT 和 STDERR 提供了一种向显示器、文件或打印机等输出写入内容的通用方法。</li>
<li>STDIN、STDOUT、STDERR 也是文件</li>
</ul>
<pre><code class="language-python">import sys

print(sys.stdin.fileno())
print(sys.stdout.fileno())
print(sys.stderr.fileno())
</code></pre>
<p>输出：</p>
<pre><code class="language-shell">0
1
2
</code></pre>
<h3 id="进程皆有资源限制">进程皆有资源限制</h3>
<blockquote>
<p>文件描述符代表已打开的资源，当资源没有被关闭的时候，文件描述符编号会一直递增，那一个进程可以拥有多少个文件描述符呢？</p>
</blockquote>
<p>可以使用<code>getrlimit</code>找出限制：</p>
<pre><code class="language-python">import resource

print(resource.getrlimit(resource.RLIMIT_NOFILE))
</code></pre>
<p>输出：</p>
<pre><code class="language-shell">(10496, 9223372036854775807)
</code></pre>
<p>可以看到输出的结果是一个元组，里边有两个元素，第一个元素是文件描述符的软限制，第二个是文件描述符的硬限制。</p>
<blockquote>
<p><code>软限制</code>：软限制其实不算限制，因为每个进程都可以修改这个值。超出这个值后会抛出一个异常。</p>
<p><code>硬限制</code>: 硬限制只有超级用户才能修改，但是硬限制其实是一个无限大的数字，可以认为是没有限制。</p>
</blockquote>
<p><code>getrlimit</code>还可以查询其它限制，比如：</p>
<ul>
<li><code>RLIMIT_NPROC</code>  用户可拥有的最大进程数</li>
<li><code>RLIMIT_FSIZE</code> 进程可创建的最大文件。如果进程试图超出这一限制时，核心会给其发送SIGXFSZ信号，默认情况下将终止进程的执行。</li>
</ul>
<p>详细信息可以查看 <a href="https://docs.python.org/2/library/resource.html">Recource 文档</a></p>
<p>可以使用 <code>setrlimit</code>来修改软限制：</p>
<pre><code class="language-python">import resource

print(resource.getrlimit(resource.RLIMIT_NOFILE))
resource.setrlimit(resource.RLIMIT_NOFILE, (2048, resource.RLIM_INFINITY))
print(resource.getrlimit(resource.RLIMIT_NOFILE))
</code></pre>
<p>输出：</p>
<pre><code class="language-shell">(10496, 9223372036854775807)
(2048, 9223372036854775807)
</code></pre>
<blockquote>
<p><code>硬限制</code>的大小不建议修改，因为它是不可逆的。</p>
</blockquote>
<p>python 中如果超出了软限制，会抛出 OSError：</p>
<pre><code class="language-python">import resource

resource.setrlimit(resource.RLIMIT_NOFILE, (3, resource.RLIM_INFINITY))
print(resource.getrlimit(resource.RLIMIT_NOFILE))

p = open('test.txt', 'wb')
print(p.name, p.fileno())
</code></pre>
<p>输出：</p>
<pre><code class="language-python">(3, 9223372036854775807)
Traceback (most recent call last):
  File &quot;/Users/gs/Desktop/fdn.py&quot;, line 30, in &lt;module&gt;
OSError: [Errno 24] Too many open files: 'test.txt'
</code></pre>
<blockquote>
<p>多数程序是不需要修改系统资源限制的，但对一些特殊工具，这是必须的步骤。</p>
<p>比如压测工具 httperf：如果我们使用命令 httperf —hog —server www —num-conn 5000 这样的命令，就需要 httperf 创建5000个并发连接，如果这里超出了软限制，就会抛出异常。</p>
<p>所以在压测之前httperf需要先调高软限制。</p>
</blockquote>
<h3 id="进程皆有退出码">进程皆有退出码</h3>
<p>当进程结束时，都会留下数字（0-255）退出码，操作系统根据退出码可以知道进程是否运行正常。</p>
<blockquote>
<p>退出码0被认为是顺利结束，其他退出码表示出现了错误</p>
</blockquote>
<p>python 使用 os.exit() 来退出进程</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

import sys

sys.exit() # 这将使进程携带状态码0退出

try:
    sys.exit(2)
except SystemExit as e:
    print('error', e)  # 这里将打印 exit 中的参数 2
</code></pre>
<blockquote>
<p><code>sys.exit()</code> 会引发一个异常，如果异常没有被捕获，那么 python 解释器将会退出。如果有捕获此异常代码，那么代码继续执行。</p>
</blockquote>
<pre><code class="language-python">#! -*- coding: utf-8 -*-
import sys
import atexit

def test():
    print(&quot;hello exit&quot;)

atexit.register(test)

sys.exit() # 也可以是 raise
</code></pre>
<blockquote>
<p>当 exit 被调用时，在进程结束之前，python 会调用 atexit 所定义的语句。</p>
</blockquote>
<h3 id="进程皆可衍生">进程皆可衍生</h3>
<p>衍生是 Unix 编程中最强大的概念之一。fork 系统调用允许允许中的进程以编程的形式创建新的进程。这个新进程和原始进程一模一样。</p>
<blockquote>
<p>进行衍生时，调用 fork 的进程被称为<code>父进程</code>，新创建的进程被称为<code>子进程</code>。</p>
<p>子进程从父进程处继承了其所占用内存中的所有内容，以及所有属于父进程的已打开的文件描述符。</p>
</blockquote>
<ul>
<li>子进程拥有自己唯一的 pid</li>
<li>子进程的ppid 就是调用 fork 的进程的 pid</li>
<li>fork 调用时，子进程从父进程处继承了所有的文件描述符，也获得了父进程所有的文件描述符编号。这样，两个进程就可以共享打开的文件、套接字等。</li>
<li>子进程继承了父进程内存中所有的数据</li>
<li>子进程可以随意更改其内存内容的副本，而不会对父进程造成影响。</li>
</ul>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

import os, sys

print('current pid:', os.getpid())
pid = os.fork()

print('pid', pid)

if pid == 0:
    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid())) 
else:
    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))
</code></pre>
<p>输出：</p>
<pre><code class="language-python">current pid: 9316
pid 9317
I (9316) just created a child process (9317).
pid 0
I am child process (9317) and my parent is 9316.
</code></pre>
<blockquote>
<p><code>fork()</code>函数是 python 的内建函数，子进程拥有返回0，而父进程返回子进程的 ID。</p>
<p>所以这段代码中，if 语句由子进程执行，而 else 语句由父进程执行。</p>
</blockquote>
<p>考虑一个问题：</p>
<p>由于 fork 的时候创建了一个和父进程一模一样的子进程，它包含了父进程在内存中的一切内容。如果，父进程占用内存特别大怎么办呢？</p>
<blockquote>
<p>Unix 采用的是写时复制（copy-on-write，CoW）的方法，所以 fork 的时候父进程和子进程是共享内存中数据的，直到它们中的一个需要对数据进程修改，才会进行内存复制，使得两个进程保持适当的隔离。</p>
</blockquote>
<h3 id="孤儿进程">孤儿进程</h3>
<blockquote>
<p>当通过终端启动单个进程时，通常只有这个进程向 STDOUT 写入，从键盘获取输入或者侦听 Ctrl+C 已待退出。</p>
<p>但是，如果进程衍生出了子进程，当你按下 Ctrl+C 的时候，哪一个进程应该退出呢？是全部退出还是只有父进程退出？</p>
</blockquote>
<pre><code class="language-python">#! -*- coding: utf-8 -*-
import time
import os, sys

print('current pid:', os.getpid())
pid = os.fork()
print('pid', pid)

if pid == 0:
    for i in range(5):
        time.sleep(1)
        print(&quot;I'm an orphan!&quot;)
else:
    sys.exit('Parent process died...')
</code></pre>
<p>执行代码，打印结果如下：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/kiV8luPm0vIwOTZRnYTlUyVD4zjBKHa03kBjjFeBJHGSUmIVt8ZXZ70JzvpILfhm" alt="" loading="lazy"></figure>
<p>通过打印结果会发现，运行程序父进程结束后，立刻放回到终端命令提示符下，此时终端被子进程输出到 STDOUT 的内容重写了。</p>
<blockquote>
<p>父进程结束后，子进程并不好退出，还是会继续运行。</p>
<p>这种操作适用于希望子进程异步的处理其他事务，而父进程按原计划运行的场景。</p>
</blockquote>
<h3 id="进程皆可待">进程皆可待</h3>
<p>如果想监控子进程的动向，应该怎么操作呢？</p>
<p>Python 提供了 <code>os.wait()</code> 方法。</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-
import time
import os, sys
from subprocess import Popen

print('current pid:', os.getpid())
pid = os.fork()
print('pid', pid)

if pid == 0:
    for i in range(5):
        time.sleep(1)
        print(&quot;I'm an orphan!&quot;)
else:
    os.wait()
    sys.exit('Parent process died...')
</code></pre>
<p>输出如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/W8LmJ8a_SIDIQlOHElCueUTd5v8T8eu6yQTd8x9uHCxcLHyh29mvwJZqk98VkFE0" alt="" loading="lazy"></figure>
<p>这一次，所有输出都打印出来之后，控制才返回给终端。</p>
<p>那么，os.wait() 做了什么呢❓</p>
<blockquote>
<p>os.wait() 是一个阻塞调用，该调用使得父进程一直等到它的子进程退出之后才继续执行。</p>
<p>这个方法会返回一个元组，包含 pid 和退出码。</p>
</blockquote>
<h3 id="僵尸进程">僵尸进程</h3>
<h3 id="进程皆可获得信号">进程皆可获得信号</h3>
<h3 id="进程皆可通信">进程皆可通信</h3>
<h3 id="守护进程">守护进程</h3>
<h2 id="参考链接">参考链接</h2>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>想了解以下内容可以在公号输入相应关键字获取历史文章： <code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<table>
<thead>
<tr>
<th>关注</th>
<th>赞赏</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/kel2L88yf9YXZYecLIn0LPZPSXc7zJfHyGUz5biWsZrGh7xF2JONZT93dgClGdMn" alt="" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/VFjjmZ7cgkIkpieAFHYXcLVBB8f9snm2vAzc0GyLjSmCzok8mL3vqLNMzYVvrDha" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作系统线程描述]]></title>
        <id>http://blog.gusibi.site/post/system-process-3/</id>
        <link href="http://blog.gusibi.site/post/system-process-3/">
        </link>
        <updated>2018-03-23T20:25:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是<code>操作系统进程</code>系列文章第三篇-操作系统线程描述<br>
文章是《操作系统-精髓与设计原理》学习笔记</p>
</blockquote>
<h2 id="线程thread">线程（thread）</h2>
<h3 id="什么是线程">什么是线程</h3>
<p><strong>线程</strong>是操作系统能够进行运算调度的最小单位。它被包含在<a href="http://mp.weixin.qq.com/s/s_um6t-mORit4SDHvEYgpQ">进程</a>之中，是<a href="http://mp.weixin.qq.com/s/s_um6t-mORit4SDHvEYgpQ">进程</a>中的实际运作单位。一条线程指的是<a href="http://mp.weixin.qq.com/s/s_um6t-mORit4SDHvEYgpQ">进程</a>中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<p>关于进程的两个概念：</p>
<ul>
<li>资源所有权：一个进程包括一个存放进程映像的虚拟地址空间（进程映像是程序、数据、栈和进程控制块中定义的属性的集合）。一个进程总是拥有对资源的控制或所有权，这些资源包括内存、I/O 通道，I/O 设备和文件。</li>
<li>调度/执行：一个进程沿着通过一个或多个程序的一条执行路径执行，其执行过程可能与其他进程的执行过程交替执行。一个进程具有一个执行状态和一个分片的优先级，并且是一个可被操作系统调度和分配的实体。</li>
</ul>
<p>这两个概念是独立的，操作系统可以独立的处理。</p>
<blockquote>
<p>现代操作系统通常把分派单位称为线程（或轻量级进程），拥有资源所有权的单位称为进程。</p>
</blockquote>
<h3 id="多线程">多线程</h3>
<p>多线程是指操作系统在单个进程内支持多个并发执行路径的能力。每个进程中只有一个线程在执行的方法称为单线程方法。进程支持多个线程的情况被称作多线程。</p>
<p>在多线程环境中，进程被定义成资源分配的单位和一个被保护的单位，与进程相关联的有：</p>
<ul>
<li>存放进程映像的虚拟地址空间</li>
<li>受保护的对处理器、其他进程、文件和 I/O 资源的访问</li>
</ul>
<p>在一个进程中，可能有一个或多个线程，每个线程有：</p>
<ul>
<li>线程的执行状态（运行，就绪）</li>
<li>在未运行时保存的线程上下文</li>
<li>一个执行栈</li>
<li>用于每个线程局部变量的静态存储空间</li>
<li>与进程内的其他线程共享的对进程的内存和资源的访问</li>
</ul>
<h3 id="进程-vs-线程">进程 VS 线程</h3>
<p>下图说明了进程和线程的区别：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/0KDXx7b4LkTyhJrxat45HK22Hsoz4OQrb_MKZCdsZH9DvqiPlajrDtLd1S_QtHMn" alt="线程和进程的区别" loading="lazy"></figure>
<p>在单线程模型中，进程的标出包括他的进程控制块和用户地址空间，以及在进程执行中管理调用/返回 行为的用户栈和内核栈。当进程被控制时，处理器寄存器被该进程锁控制；当进程不运行时，这些处理器寄存器的内容被保存。</p>
<p>在多线程环境中，进程仍然只有一个与之关联的进程控制块和用户地址空间。但是每个线程都有一个独立的栈，还有独立的控制块用于包含寄存器值、优先级和其他与线程相关的状态信息。</p>
<blockquote>
<p>进程中的所有线程共享该进程的状态和资源，它们驻留在同一块地址空间中，并且可以访问到相同的数据。当一个线程改变了内存中的一个数据项时，其他线程在访问这一数据项时能够看到变化后的结果。</p>
</blockquote>
<h3 id="线程的优点">线程的优点</h3>
<ol>
<li>在一个已有的进程中创建一个新的线程比创建一个全新的进程所需时间要少的多。</li>
<li>终止一个线程比终止一个进程花费的时间少</li>
<li>同一个进程内线程间切换比进程间切换花费的时间要少。</li>
<li>线程提高了不同的执行程序间通信的效率。（大多数操作系统中，独立进程间的通信需要内核的介入，由于同一进程中的线程共享内存和文件，它们间的通信无需调用内核）</li>
</ol>
<h3 id="线程状态">线程状态</h3>
<p>和进程一样，线程的关键状态有运行态、就绪态和阻塞态。挂起是进程级别的概念，一个进程被换出，它的所有线程都被换出。</p>
<p>有4个与线程状态改变相关的操作：</p>
<ul>
<li>派生：当派生一个新进程时，同时也为改进程派生出一个线程。进程中的线程也可以在同一个进程中派生另一个线程，新的线程拥有自己的寄存器上下文和栈空间，且被放置在就绪队列中。</li>
<li>阻塞：当线程需要等待一个事件时，将被阻塞，此时处理器转而执行另一个就绪线程（可能是同一进程，也可能是不同进程）</li>
<li>解除阻塞：当阻塞一个线程的事件发生时，该线程被转移到就绪队列中</li>
<li>结束：当一个线程完成时，其寄存器上下文和栈都被释放。</li>
</ul>
<h3 id="用户级线程和内核级线程">用户级线程和内核级线程</h3>
<p>线程的实现可以分为两大类：<code>用户级线程（User-Level Thread ULT）</code>和<code>内核级线程（Kernel-Level Thread KLT）</code>。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/gaApT9BLo5q0kZG1iOaC5yllVRMtR74cnYNxvAKy-jBDVm122aizcvSB2-ZyxCIp" alt="用户级线程和内核级线程" loading="lazy"></figure>
<p>在用户级线程和内核级线程使用时，通常有以下三种模式：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/gx5Ssn4Taoq-BDMJ0Dty58lVtdWhc5AHnF-3yssLGRzJl2k7HZa-sgq9PP3xAKGA" alt="用户级线程和内核级线程" loading="lazy"></figure>
<p><strong>在一个纯粹的用户级线程程序中，有关线程管理的所有工作都由应用程序完成，内核意识不到线程的存在。</strong></p>
<p>使用用户级线程的优点：</p>
<ol>
<li>线程切换不需要内核态特权，因此，进程不需要为了线程管理而切换到内核态，这节省了两次状态转换（从用户态到内核态，再从内核态返回用户态）的开销。</li>
<li>调度可以是用户程序相关的。（可以为特定的应用使用特定的调度算法）</li>
<li>用户级线程可以在任何操作系统中运行，不需要对底层内核进行修改以支持用户级线程。</li>
</ol>
<p>使用用户级线程的缺点：</p>
<ol>
<li>许多系统调用会被阻塞。因此当用户级线程执行一个系统调用时，不仅这个线程会被阻塞，进程中所有线程都会被阻塞。</li>
<li>不能使用多个处理器。内核一次只把一个进程分配给一个处理器，因此一个进程中只有一个线程可以执行。</li>
</ol>
<blockquote>
<p>解决这两个问题有两种方式：</p>
<ol>
<li>使用多进程代替多线程，但这样消除了多线程的优势</li>
<li>使用 jacketing 技术。把一个产生阻塞的系统调用转换成一个非阻塞的系统调用。</li>
</ol>
</blockquote>
<p>在一个纯粹的内合辑线程程序中，有关线程管理的所有工作都由内核完成。内核为进程及其内部的每个线程维护上下文信息。调度由内核基于线程完成。</p>
<blockquote>
<p>使用内核级线程客服了用户级线程的两个基本缺陷。首先内核可以把同一个进程的多个线程调度到多个处理器；其次一个进程中的线程被阻塞，内核可以调度同一个进程的另一个线程。</p>
<p>主要缺点是：把控制从一个线程传送到同一个进程内的另一个线程是，需要内核的状态切换。</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/iD4lEh-rtxW0iN5EzdzLYtyQr4LZlcFDiMOo06JLNuhC69DKDMjXgGRldy6ELJvV" alt="线程和进程的执行时间" loading="lazy"></figure>
<p>某些操作系统提供了一种组合的用户级/内核级线程设施。在组合的系统中，线程创建完全在用户空间中完成，线程的调度和同步也是在应用程序中进行。一个应用程序中的多个用户级线程被映射到一些（小于或等于用户级线程的数目）内核级线程上。开发者可以为特定的应用程序和处理器调节内核级线程的数目，以达到最佳结果。</p>
<h3 id="linux-的进程和线程管理">Linux 的进程和线程管理</h3>
<p>Linux中的进程或任务由一个 <code>task_struct</code>数据结构表示，这个数据结构包含了以下信息：</p>
<ul>
<li>状态：进程的执行状态</li>
<li>调度信息：Linux 调度进程所需的信息</li>
<li>标识符</li>
<li>进程间通信：Linux 支持 UNIX SVR4中的 IPC 机制。</li>
<li>时间和计时器：包括进程创建的时刻和进程所消耗的处理器时间总量</li>
<li>文件系统：包括指向被该进程打开的任何文件的指针和指向该进程当前和根目录的指针。</li>
<li>地址空间：定义分配给该进程的虚拟空间</li>
<li>处理器专用上下文：构成改进程上下文的寄存器和栈信息</li>
<li>停止：进程被终止，并且只能由来自另一个进程的主动动作恢复</li>
<li>僵死：进程已被终止，但由于某些原因，在进程表中仍然有它的任务结构</li>
</ul>
<p>Linux 提供一种不区分进程和线程的解决方案，用户级线程被映射到内核级进程上。组成一个用户级进程的多个用户级线程被映射到共享同一组 ID 的多个 Linux 内核级进程上。这使得这些进程可以共享文件和内存等资源，使得同一组中的进程调度切换是不需要切换上下文。</p>
<p>在 Linux 中通过复制当前进程的属性可创建一个新进程。新进程被克隆出来，使得它可以共享资源。当两个进程共享相同虚拟内存时，它们可以被当做是一个进程中的线程。因此 Linux 中进程和线程没有区别。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li>《操作系统-精髓与设计原理》</li>
<li><a href="https://applied-programming.github.io/Operating-Systems-Notes/3-Threads-and-Concurrency/">Threads and Concurrency</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>想了解以下内容可以在公号输入相应关键字获取历史文章： <code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<table>
<thead>
<tr>
<th>关注</th>
<th>赞赏</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/kel2L88yf9YXZYecLIn0LPZPSXc7zJfHyGUz5biWsZrGh7xF2JONZT93dgClGdMn" alt="" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/VFjjmZ7cgkIkpieAFHYXcLVBB8f9snm2vAzc0GyLjSmCzok8mL3vqLNMzYVvrDha" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作系统进程描述]]></title>
        <id>http://blog.gusibi.site/post/system-process-2/</id>
        <link href="http://blog.gusibi.site/post/system-process-2/">
        </link>
        <updated>2018-03-20T07:25:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是<code>操作系统进程</code>系列文章第二篇-操作系统进程描述</p>
</blockquote>
<h2 id="进程">进程</h2>
<h3 id="什么是进程">什么是进程</h3>
<p>在给进程下定义前，先考虑以下几个概念：</p>
<ol>
<li>一个计算机平台包括一组硬件资源：比如处理器、内存、I/O 模块、定时器和磁盘驱动器等。</li>
<li>计算机程序是为执行某些任务而开发的。典型情况下，它们接受外来的输入，做一些处理后，输出结果。</li>
<li>直接根据给定的硬件平台写应用程序效率是低下的</li>
<li>开发操作系统是为了给应用程序提供一个方便、安全和一直的接口。操作系统是计算机硬件和应用程序直接的一层软件，对应用程序和工具提供了支持。</li>
<li>可以把操作系统想象为资源的统一抽象表示，可以被应用程序请求和访问。资源包括内存、网络接口和文件系统等。</li>
</ol>
<p>有了上述概念，现在就可以讨论操作系统怎样以一个有序的方式管理应用程序的执行，以达到以下目的：</p>
<ul>
<li>资源对多个应用程序是可用的</li>
<li>物理处理器在多个应用程序间切换以保证所有程序都在执行中</li>
<li>处理器和 I/O 设备能得到充分的利用</li>
</ul>
<p>现代操作系统采用的方法都是<code>依据对应于一个或多个进程存在的应用程序执行的一种模型</code>。</p>
<p>关于进程有很多定义：</p>
<ul>
<li>一个正在执行的程序</li>
<li>计算机中正在运行的程序的一个实例</li>
<li>可以分配给处理器并由处理器执行的一个实体</li>
<li>由单一的顺序的执行线程、一个当前状态和一组相关的系统资源所描述的活动单元</li>
</ul>
<h3 id="进程状态">进程状态</h3>
<p>一个被执行的程序，操作系统会为该程序创建一个进程或任务，并且控制进程的执行。</p>
<p>简单来说，程序只有两种状态：<code>运行态</code>、<code>未运行态</code>。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/OskbbEAvy2Pml-DAIPGNsq73iTnGmEoG61GC1jFK2S7grZpYiIZxN5rYXw1NvA_3" alt="两状态进程模型" loading="lazy"></figure>
<ul>
<li>当操作系统创建一个新进程时，它将该进程以未运行态加入到系统中，操作系统知道进程的存在，并等待执行机会。</li>
<li>当前运行的进程不时中断，操作系统的分派器将选择一个新进程运行。</li>
<li>前一个进程从运行态转换到未运行态，另一个从未运行态转换到运行态。</li>
</ul>
<p>同时，未运行的进程需保持在某种类型的队列中，并等待它们的执行时机。</p>
<p>上图中的排队图可以描述分派器的行为：被中断的进程转移到等待进程队列中，或者，如果进程以及结束或取消，则被销毁。在任何一种情况下，分派器均从队列中选择一个进程来执行。</p>
<p>通过这个模型，可以看出操作系统需要用某种方式来表示每个进程，使得操作系统能够跟踪它，也就是说需要有一些与进程相关的信息，包括进程在内存中的状态和位置，即<code>进程控制块</code>。</p>
<h3 id="进程控制块">进程控制块</h3>
<p>进程在任意时间都可以唯一地被表征为以下元素：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/Nra2ykMZsSS2HqGQjASJUXZ7krpqAhCZPSVKc7_G6CUH_kusdOcZpLL2BddET7oJ" alt="简化的进程控制块" loading="lazy"></figure>
<ul>
<li>标识符：存储在进程控制块中的数字标识符，包括（次进程的标识符-进程 ID，父进程标识符，用户标识符-用户 ID）</li>
<li>状态：进程状态（如运行态，就绪态，等待态等）</li>
<li>优先级：用于描述进程调度优先级的一个或多个域。</li>
<li>程序计数器：程序中即将被执行的下一条指令的地址</li>
<li>内存指针：包括程序代码和进程相关数据的指针，还有和其他进程共享内存块的指针</li>
<li>上下文数据：进程执行时处理器的寄存器的数据</li>
<li>I/O 状态信息：包括显示的 I/O 请求、分配给进程的 I/O 设备和被进程使用的文件列表等</li>
<li>记账信息：可能包括处理器时间总和、使用的时钟数总和、时间限制、记账号等。</li>
</ul>
<p>这些信息被存放在一个叫<code>进程控制块</code>的数据结构中，它由操作系统创建和管理。进程控制块是进程存在的唯一标志，也就是说任何一个进程只要进程创建了它就一定有一个跟它相对应的进程控制块，进程结束了进程控制块就会被操作系统回收，进程在执行的过程对进程的所有操作都是通过进程控制块来实现的。</p>
<h4 id="进程创建和终止">进程创建和终止</h4>
<p>进程除运行和未运行外，在进程的生命周期中，创建和终止都是不可避免的。</p>
<h5 id="进程创建">进程创建</h5>
<p>通常有4个事件会导致创建一个进程：</p>
<ol>
<li>新的批量作业</li>
<li>交互登录。终端用户登录到系统</li>
<li>操作系统因为提供一项服务而创建。操作系统可以创建一个进程，代表用户程序执行一个功能，使用户无需等待。</li>
<li>由现有进程派生。基于模块化的考虑，或者为了开发并行性，用户程序可以指示创建多个进程。</li>
</ol>
<blockquote>
<p>当一个进程派生另一个进程时，前一个称为父进程，被派生的被称为子进程。</p>
</blockquote>
<p>一旦操作系统决定创建一个新进程，它就会按以下步骤进行：</p>
<ol>
<li>给新进程分配一个唯一的进程标识符。</li>
<li>给进程分配空间。</li>
<li>初始化进程控制块。</li>
<li>设置正确的连接。（例如，如果操作系统把每个调度队列都保存成链表，则新进程必须放置在就绪或就绪/挂起链表中）。</li>
<li>创建或扩充其他数据结构。</li>
</ol>
<h5 id="进程终止">进程终止</h5>
<p>有很多事件可以导致进程终止，比如：</p>
<ol>
<li>进程完成</li>
<li>进程超时。进程运行时间超过规定的时限</li>
<li>无可用内存</li>
<li>I/O 失败</li>
<li>算术错误</li>
<li>无效指令</li>
<li>父进程终止</li>
<li>父进程请求<br>
。。。</li>
</ol>
<h4 id="五状态模型">五状态模型</h4>
<p>系统中还存在着一些处于非运行状态但已经就绪等待执行的进程，而且还存在另一些处于阻塞状态等待 I/O 操作结束的进程。</p>
<p>这时，<code>就绪态(ready)</code>和<code>阻塞态(blocked)</code>出现了，两状态模型升级为了5状态模型，5个状态如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/TaAMUjZ0MfiJF65CMJc6Z-q5vVlGvMYOAz5UBsfIOTF_HplbJuYKEc2pyfZj9wwJ" alt="五状态进程模型" loading="lazy"></figure>
<ul>
<li>运行态：该进程正在执行</li>
<li>就绪态：进程做好了准备，等待处理器调度</li>
<li>阻塞/等待态：进程在某些事件发生前不能执行，比如 I/O 操作完成</li>
<li>新建态：刚刚创建的进程，操作系统还没有把它加入到可执行进程组中。通常是进程控制块已经创建但还没有被加载到内存中。</li>
<li>退出态：操作系统从可执行进程组中释放出的进程，或者是因为它自身停止了，或者是因为某种原因被取消。</li>
</ul>
<blockquote>
<p><code>新建-就绪</code>: 操作系统准备好再接纳一个进程时，把一个进程从新建态转换到就绪态。大多数系统基于心有的进程数或分配给现有进程的虚拟内存数量设置一些限制，以确保不会因为活跃进程数量过多而导致系统的性能下降。</p>
<p><code>就绪-退出</code>: 在某些系统中，父进程可以在任何时候终止一个子进程。如果一个父进程终止，与该父进程相关的所有子进程都将被终止。</p>
</blockquote>
<h4 id="挂起">挂起</h4>
<blockquote>
<p><code>就绪态、运行态和阻塞态</code>提供了一种为进程行为建立模型的系统方法，但有个问题需要考虑：每个被执行的进程必须完全载入内存，当一个进程在等待 I/O 操作时，处理器可以转移到另一个进程，但 I/O 活动比CPU 计算速度慢很多，因此大多数情况下处理器在多数时候都是空闲的。但是如果内存中都是阻塞态的进程怎么办呢？</p>
</blockquote>
<ul>
<li>一种办法就是扩充内存已适应更多的进程</li>
<li>另一种方案是把进程中的某个内存的一部分或者全部移到磁盘中。当内存中没有处于就绪态的进程时，操作系统就把被阻塞的进程换出到磁盘中的<code>挂起队列</code>，这是暂时保存从内存中被驱逐出的进程队列，或者说是被挂起的进程队列。操作系统在此之后取出挂起队列中的另一个进程，或者接受一个新进程的请求，将其纳入内存运行。</li>
</ul>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/RERwAhivDCla0-LTO6wylcXfaA0WFJTFS1oDvMIh9EkzsNrTbRVqu9rWuS9fUmMf" alt="有挂起态的进程状态转换图" loading="lazy"></figure>
<blockquote>
<p>这里有两个独立的概念：进程是否在等待一个事件（阻塞与否）以及进程是否已经被换出内存（挂起与否）。这里需要4个状态：</p>
</blockquote>
<ul>
<li><code>就绪态</code>：进程在内存中并可以执行</li>
<li><code>阻塞态</code>：进程在内存中并等待一个事件</li>
<li><code>阻塞/挂起态</code>：进程在外存中并等待一个事件</li>
<li><code>就绪/挂起态</code>：进程在外存中，但是只要被载入内存就可以执行</li>
</ul>
<p>现在状态转换如下：</p>
<blockquote>
<p><code>阻塞</code>-<code>阻塞/挂起</code>：如果没有就绪进程，则至少一个阻塞进程被换出，为另一个没有阻塞的进程让出空间</p>
</blockquote>
<blockquote>
<p><code>阻塞/挂起</code>-<code>就绪/挂起</code>：如果等待事件发生了，比如 I/O 不再阻塞，则处于阻塞/挂起 状态的进程可以转换到 就绪/挂起状态。</p>
</blockquote>
<blockquote>
<p><code>阻塞/挂起</code>-<code>阻塞</code>：比如一个进程终止了，释放了一些内存空间，阻塞/挂起队列中有一个进程比 就绪/挂起队列中的任何任何进程的优先级都要高，并且操作系统有理由相信阻塞进程的时间很快就会发生，这时，把阻塞进程而不是就绪进程调入内存是合理的。</p>
</blockquote>
<h3 id="进程控制">进程控制</h3>
<p>大多数处理器至少支持两种执行模式，某些指令只能在特权态下运行，包括读取或改变诸如程序状态之类控制寄存器的指令，原始 I/O 指令和与内存管理相关的指令。另外有部分内存区域仅在特权态下可以被访问到。</p>
<blockquote>
<p><code>特权态</code>：特权态可称做系统态、控制态或内核态，内核态指的是操作系统的内核。<br>
<code>用户态</code>：用户程序常在该模式下运行</p>
</blockquote>
<p>两种模式可以保护操作系统和重要的操作系统表不受用户程序的干涉。</p>
<p>操作系统内核的典型功能：</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/icSKmpD5WmGdRg1YaqotICAvgAbhxbK7fAzcXE1nhVSzua6LhvbeZJGpQdXiKqX-" alt="操作系统内核的典型功能" loading="lazy"></figure>
<h4 id="进程切换">进程切换</h4>
<p>从表面看，进程切换非常简单。在某一时刻，操作系统中断正在运行的进程，然后指定另一个进程为运行态，并把控制权交给这个进程。但是现在会有几个问题：</p>
<ul>
<li>什么事件触发进程切换</li>
<li>模式切换和进程切换的区别</li>
<li>进程切换时，操作系统要做哪些工作</li>
</ul>
<p><code>何时切换进程</code>？</p>
<p>进程切换可以在操作系统从当前正在运行的进程中获得控制权的任何时刻发生。以下是可能把控制权交给操作系统的事件：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/Jb4HJnGGvdlYgSmF1goSBFTo2sHE8atDcPaO3yw54AHs39xw8PxXiKrpnKZ7frtn" alt="进程执行的中断机制" loading="lazy"></figure>
<p>系统中断通常分为两种，一种是<code>中断</code>，另一种是<code>陷阱</code>。<br>
<code>中断</code>与当前正在运行的进程无关的某种类型的外部事件相关，比如 I/O 操作；<code>陷阱</code>与当前正在运行的进程锁产生的错误或异常条件相关，比如非法的文件访问。</p>
<p>以下是一些常见的中断事件：</p>
<blockquote>
<ul>
<li><code>时钟中断</code>：操作系统确认当前正在运行的进程的执行时间已经超过了最大允许时间段（时间片：即进程在被中断前可以执行的最大时间段），进程必须切换到就绪态，调入另一个进程。</li>
<li><code>I/O 中断</code>：进程等待 I/O 活动。</li>
<li><code>内存失效</code>：处理器访问一个虚拟内存地址，且次地址单元不在内存中，操作系统必须从外存中把包含这个引用的内存块调入内存中。在发出调入内存块的 I/O 请求之后，操作系统可能会执行一个进程切换，以恢复另一个进程的执行，发生内存失效的进程被置为阻塞态，当前的块调入内存中时，该进程被置为就绪态。</li>
</ul>
</blockquote>
<p>对于<code>陷阱</code>,操作系统首先确认错误或者异常是否是致命的。如果是，当前进程被转换到退出态；如果不是，操作系统的动作取决于错误的种类和操作系统的设计（有可能是视图恢复或通知用户）。<br>
操作系统也可能被来自正在执行的程序的<code>系统调用</code>激活，比如打开文件，通常，使用系统调用会导致把当前进程置为阻塞态</p>
<h5 id="系统调用">系统调用</h5>
<p>Unix 系统是由用户空间（userland）和内核组成。Unix 内核位于计算机硬件之上，是与摇篮吗交互的中介。这些交互包括通过问卷系统进程读/写、在网络上发送数据、分配内存，以及通过扬声器播放音频。这些都是用户应用程序所不能涉及的，只能通过系统调用来完成。</p>
<blockquote>
<p><code>系统调用</code>为内核和用户空间搭建了桥梁。规定了程序和计算机硬件直接所允许发生的一切交互。</p>
</blockquote>
<p>模式切换和进程切换是不同的。发生模式切换可以不改变正处于运行态的进程的状态，而进程被转换到另一个状态操作系统必须使其环境产生实质性的变化。</p>
<p>进程切换步骤如下：</p>
<ol>
<li>保存处理器上下文环境，包括程序计数器和其他寄存器</li>
<li>更新当前处于运行态进程的进程控制块</li>
<li>将进程的进程控制块移到相应的队列（就绪、挂起等）</li>
<li>选择另一个进程执行</li>
<li>更新所选择进程的进程控制块，包括将进程的状态变为运行态</li>
<li>更新内存管理的数据结构</li>
<li>恢复处理器在被选择的进程最近一次切换出运行态时的上下文环境。</li>
</ol>
<p>下一篇将介绍 Unix 进程</p>
<h2 id="参考">参考</h2>
<p>《操作系统-精髓与设计原理》</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>想了解以下内容可以在公号输入相应关键字获取历史文章： <code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<table>
<thead>
<tr>
<th>关注</th>
<th>赞赏</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/kel2L88yf9YXZYecLIn0LPZPSXc7zJfHyGUz5biWsZrGh7xF2JONZT93dgClGdMn" alt="" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/VFjjmZ7cgkIkpieAFHYXcLVBB8f9snm2vAzc0GyLjSmCzok8mL3vqLNMzYVvrDha" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作系统发展和进程简介]]></title>
        <id>http://blog.gusibi.site/post/system-process-1/</id>
        <link href="http://blog.gusibi.site/post/system-process-1/">
        </link>
        <updated>2018-03-07T07:25:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是<code>操作系统进程</code>系列文章第一篇-操作系统发展和进程简介</p>
</blockquote>
<h3 id="操作系统的发展">操作系统的发展</h3>
<h4 id="串行处理">串行处理</h4>
<p>对于早期计算机（20世纪40年代后期到20世纪50年代中期），因为没有操作系统，程序员都是直接与计算机硬件打交道。这些机器都在一个控制台上运行，控制台包括显示灯、触发器、某种类型的输入设备和打印机。用机器代码编写的程序通过输入设备载入计算机。如果程序因错误停止，错误原因由指示灯只是。如果程序运行结束，结果将出现在打印机中。</p>
<p><em>早期系统主要有两个问题</em>：</p>
<ul>
<li>调度： 大多数设备使用一个硬拷贝的登记表预定时间。如果用户预定了一个小时，半小时就运行结束，计算机将闲置30分钟，而如果没有在一个小时内运行结束，程序也会被强制停止。</li>
<li>准备时间：一个程序称为一个作业，运行一个程序可能需要往内存中加载编译器和程序语言，保存编译程序，加载目标程序和公用函数变链接在一起。每一步都可能需要安装拆卸硬件，如果这些步骤出现错误，只能重新开始，会占用太多时间。</li>
</ul>
<p>这种模式称为串行处理，用户必须顺序访问计算机。</p>
<h4 id="简单批处理系统">简单批处理系统</h4>
<p>早期计算机非常贵，调度和准备又非常浪费时间和资源，为了最大限度的利用处理器，当时的研究人员开发了批处理操作系统。</p>
<p>第一个批处理操作系统（也是第一个操作系统）是20世纪50年代中期由 General Motors 开发的，用在 IBM 701上。</p>
<p>简单批处理方案的中心思想是使用一个称作<code>监控程序</code>的软件。通过使用这类操作系统，用户不再直接访问机器，相反，用户把卡片或磁带中的作业提交给计算机管理员，由他把这些作业按顺序组织成一批，并将整个批作业放在输入设备上，供监控程序使用。每个程序完成批处理后返回到监控程序，同事监控程序自动加载下一个程序。</p>
<p>我们可以从两个角度分析这个方案是如何工作的：</p>
<p><code>监控程序角度：</code> 监控程序为了能一直控制事件的顺序，需要总是处于内存中并且可以执行。监控程序每次从输入设备中读取一个作业，读入后，当前作业被放置在用户程序区域，并把控制权交给这个作业。作业完成后，控制权交还给监控程序，监控程序再读入下一个作业。</p>
<p><code>处理器角度:</code> 从这个角度看，处理器执行内存中存储的监控程序的指令，这些指令读入下一个作业并存储到内存中的另一个部分。一旦已经读入一个作业，处理器将会遇到监控程序的分支指令，分支指令指导处理器在用户程序开始处继续执行。处理器继而执行用户程序直到执行结束或者遇到错误。无论哪种情况，处理器都将从监控程序读入下一个指令。</p>
<blockquote>
<p><code>控制权交给作业</code>仅仅意味着处理器当前取和执行的都是用户程序中的指令，而<code>控制权交给监控程序</code>的意思是处理器当前从监控程序中取指令并且执行指令。</p>
</blockquote>
<p>监控程序或者批处理操作系统，只是一个简单的计算机程序。它依赖于处理器可以从内存的不同部分取指令的能力，以交替的获取或释放控制权。此外，还要考虑其他硬件功能：</p>
<ul>
<li>内存保护：当用户程序在运行时，不能改变包含监控程序的内存区域</li>
<li>定时器：用户防止一个作业独占系统。作业开始时，设置定时器，时间到，用户程序将被停止</li>
<li>特权指定：某些指令设计成特权指令，只能由监控程序执行。</li>
<li>中断：早期的计算机模型没有中断能力。这个特征使得操作系统在让用户程序放弃控制权或从用户程序获得控制权时具有更大的灵活性。</li>
</ul>
<h4 id="多道程序设计批处理多任务处理系统">多道程序设计批处理（多任务处理）系统</h4>
<p>虽然简单的批处理系统可以提供自动作业序列，但由于 I/O 设备处理速度相对于处理器速度太慢，处理器仍然经常空闲。这个时候多道程序设计/多任务处理方案就被提了出来。</p>
<p>它的工作原理是：基于内存空间可以保存操作系统和一个用户程序，假设内存空间容得下操作系统和两个用户程序，那么当一个作业需要等待 I/O 时，处理器可以切换到另一个可能并不在等待 I/O 的作业。进一步还可以扩展存储器以保存三个、四个或更多的程序，并在它们之间进行切换。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/knNY5bDB-SP5Vn1eOwq1QOBnC6F8SfwZD1ZIw94D_Gs4JXBKidmXYsgnHNpvjUOu" alt="多道程序设计实例" loading="lazy"></figure>
<p>多道程序操作系统比单个程序或单道程序系统相对要复杂一些。对准备运行的多个作业，它们必须保存在内存中，这就需要内存管理。此外，如果多个作业都准备运行，处理器还必须决定运行哪一个，这需要某种调度算法。</p>
<p>多道程序设计是为了让处理器和 I/O 设备同时保持忙状态，以实现最大效率。其关键机制是：在响应表示 I/O 事务结束的信号时，操作系统对内存中驻留的不同程序进行处理器切换。</p>
<h4 id="分时系统">分时系统</h4>
<p>通过使用多道程序设计，可以使批处理更加有效，但是对许多作业来说，需要提供一个交互模式，以使用户可以和计算机交互。</p>
<p>因为当时的计算机特别昂贵且巨大，普通用户也买不起，分时操作系统应运而生。</p>
<p>和多道程序设计允许处理器同时处理多个批作业一样，它还可以用于处理多个交互作业。</p>
<blockquote>
<p>多个用户分享处理器的时间，因而该技术成为分时。</p>
</blockquote>
<p>分时系统中，多个用户可以通过终端同时访问系统，由操作系统控制每个用户程序以很短的时间为单位交替执行。</p>
<blockquote>
<p>如果有 n 个用户同时请求服务，若不计算操作系统的开销，每个用户平均只能得到1/n 计算机的有效速度，但由于人的反应时间相对计算机比较慢，所以一个设计良好的操作系统，其响应时间可以接近于计算机的时间。</p>
</blockquote>
<p>批处理多道程序设计和分时的比较</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>批处理多道程序设计</th>
<th>分时</th>
</tr>
</thead>
<tbody>
<tr>
<td>主要目标</td>
<td>充分使用处理器</td>
<td>减小响应时间</td>
</tr>
<tr>
<td>操作系统指令源</td>
<td>作业提供的作业控制语言命令</td>
<td>从终端键入的命令</td>
</tr>
</tbody>
</table>
<blockquote>
<p>第一个分时操作系统是由麻省理工学院开发的兼容分时系统（CTSS）。系统运行在一台内存为32000个36位字的机器上，常驻程序占用了5000个。当控制权被分配给一个交互用户时，改用户的程序和数据被载入到内存剩余的27000个字的空间中。程序通常在第5000个字单元处开始被载入，系统时钟以大约没0.2秒一个的速度产生中断，在每个中断处，操作系统恢复控制权，并将处理器分配给下一个用户。因此，在固定的时间间隔内，当前用户被剥夺，另一个用户被载入。这项技术称为<code>时间片</code>技术。</p>
</blockquote>
<p>操作系统是最复杂的软件之一，操作系统开发中有5个重要的理论进展：<code>进程</code>、<code>内存管理</code>、<code>信息保护和安全</code>、调度和资源管理、系统结构。</p>
<h3 id="进程">进程</h3>
<p>进程的概念是操作系统结构的基础，这个属于最早在20世纪60年代被提出。</p>
<p>关于进程有很多定义：</p>
<ul>
<li>一个正在执行的程序</li>
<li>计算机中正在运行的程序的一个实例</li>
<li>可以分配给处理器并由处理器执行的一个实体</li>
<li>由单一的顺序的执行线程、一个当前状态和一组相关的系统资源所描述的活动单元</li>
</ul>
<p>系统程序员在开发早期的多道程序（多任务）和多用户交互系统时（分时）使用的主要工具是中断。一个已定义事件的发生可以暂停任何作业的活动。处理器保留某些上下文（如程序计数器和其他寄存器），然后跳转到中断处理程序中，处理中断，然后恢复用户被中断作业或其他作业的处理。</p>
<p>设计出一个能够协调各种不同活动的系统软件非常困难，也容易出错，一般而言，产生这类错误又4个主要原因：</p>
<ol>
<li>不正确的同步：常常会出现这样的情况，一个例程必须挂起，等待系统中其他地方的某一事件。</li>
<li>失败的互斥：常常出现多个用户或程序试图同时使用一个共享资源的情况。（例如两个用户同时试图编辑文件）</li>
<li>不正确的程序操作：一个特定的程序结果只依赖与该程序的输入，而并不依赖于共享系统中其他程序的活动。但当程序共享内存并且处理器控制它们交错执行时，它们可能会因为重写相同的内存区域而发生不可预测的相互干扰</li>
<li>死锁：很可能两个或多个程序相互挂起等待。（单进程 web 应用中相互调用）</li>
</ol>
<p>解决这些问题需要一种系统级的方法监控处理器中不同程序的执行。进程的概念为此提供了基础。进程可以看做是由3部分组成的：</p>
<ul>
<li>一段可执行的程序</li>
<li>程序所需的相关数据（变量、工作空间、缓冲区）</li>
<li>程序的执行上下文</li>
</ul>
<p>最后一部分是根本。执行上下文（execution context）又称做进程状态，是操作系统用来管理和控制进程所需的内部数据。</p>
<blockquote>
<p>这种内部信息和进程是分开的，因为操作系统信息不允许被进程之间访问。</p>
</blockquote>
<p>上下文包括操作系统管理进程以及处理器正确执行进程所需的所有信息。包括了各种处理器寄存器的内容，汝程序计数器和数据寄存器。它还包括操作系统使用的信息，如进程优先级以及进程是否在等待特定 I/O 事件的完成。</p>
<p>操作系统会给每个进程（包含程序、数据和上下文信息）分配一块存储器区域，并在由操作系统建立和维护的进程表中进行记录。进程表包含记录每个进程的表项，表项内容包括指向包含进程的存储块地址的指针，还包括该进程的部分或全部执行上下文。</p>
<ul>
<li>进程索引寄存器包含当前正在控制处理器的进程在进程表中的索引。</li>
<li>程序计数器指向该进程中下一条待执行的指令。</li>
<li>基址寄存器和界限寄存器定义了该进程所占的存储器区域：基址寄存器中保存了该存储区域的开始地址，界限寄存器中保存了该区域的大小。</li>
</ul>
<blockquote>
<p>程序计数器和所有的数据引用相对于基址寄存器被解释，并且不能超过界限寄存器中的值，这就可以保护内部进程间不会相互干涉。</p>
</blockquote>
<p>下图是一种进程管理的方法：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/v4Sj3T22rYA1gqBWodb7F0cYZf2tf4tt7ISgv4sNnSjEw_j2vw1D6l01uvE-TKOG" alt="典型的进程实现方法" loading="lazy"></figure>
<p>在上图中，进程索引寄存器表明进程 B 正在执行。以前执行的进程被临时中断，在 A 中断的同时，所有寄存器的内容被记录在它的执行上下文环境中，以后操作系统就可以执行进程切换，恢复进程 A 的执行。进程切换过程包括保存 B 的上下文和恢复 A 的上下文。当在程序计数器中载入指向 A 的程序区域的值时，进程 A 自动恢复执行。</p>
<blockquote>
<p>进程是被当做数据结构来实现的，一个进程可以是正在执行，也可以是等待执行。任何时候整个进程状态都包含在它的上下文环境中。</p>
</blockquote>
<p>这一篇主要介绍了操作系统的发展，下篇主要介绍进程的概念以及工作原理。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>想了解以下内容可以在公号输入相应关键字获取历史文章： <code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<table>
<thead>
<tr>
<th>关注</th>
<th>赞赏</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/kel2L88yf9YXZYecLIn0LPZPSXc7zJfHyGUz5biWsZrGh7xF2JONZT93dgClGdMn" alt="" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/VFjjmZ7cgkIkpieAFHYXcLVBB8f9snm2vAzc0GyLjSmCzok8mL3vqLNMzYVvrDha" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 学习笔记-1：变量&函数]]></title>
        <id>http://blog.gusibi.site/post/golang-learning-note-1/</id>
        <link href="http://blog.gusibi.site/post/golang-learning-note-1/">
        </link>
        <updated>2018-02-22T04:45:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="变量函数">变量&amp;函数</h2>
<p>最近在学习golang，写下学习笔记提升记忆。<br>
为了看起来不是那么枯燥，本学习笔记采用分析代码的形式。</p>
<p>首先搬出我们最经典的第一段代码:</p>
<h3 id="hello-world">hello world</h3>
<pre><code class="language-go">    package main // 0

    import &quot;fmt&quot; // 1实现格式化的 I/O

    /* Print something */ // 2
    func main() { // 3
    	fmt.Println(&quot;Hello, world; or καλημε ́ρα κóσμε; orこんにちは 世界&quot;) // 4
    }
</code></pre>
<p>首先我们要认识到</p>
<blockquote>
<p>每个Go 程序都是由包组成，程序的运行入口是包main</p>
</blockquote>
<ol>
<li>首行这个是必须的。所有的 Go 文件以 <code>package something</code> 开头,对于独立运行的执行文件必须是 <code>package main</code>;</li>
<li>这是说需要将fmt加入到main。不是main 的包被称为库 末尾以 <code>//</code> 开头的内容是单行注释 Package fmt包含有格式化I/O函数，类似于C语言的printf和scanf</li>
<li>这也是注释，表示多行注释。</li>
<li>package main 必须首先出现,紧跟着是 import。在 Go 中,package 总是首先出现, 然后是 import,然后是其他所有内容。当 Go 程序在执行的时候,首先调用的函数 是 main.main(),这是从 C 中继承而来。这里定义了这个函数</li>
<li>调用了来自于 fmt 包的函数打印字符串到屏幕。字符串由 &quot; 包裹,并且可以包含非 ASCII 的字符。这里使用了希腊文和日文、中文&quot;</li>
</ol>
<h3 id="编译和运行代码">编译和运行代码</h3>
<p>构建 Go 程序的最佳途径是使用 go 工具。 构建 helloworld 只需要:</p>
<pre><code>    1. go build helloworld.go
    # 结果是叫做 helloworld 的可执行文件。
    2. ./helloworld
    # Hello, world; or καλημε ́ρα κóσμε; or こんにちは世界
</code></pre>
<h3 id="变量">变量</h3>
<p>Go 是静态类型语言，不能在运行期改变变量类型。</p>
<p>变量如果不提供初始化值将自动初始化为零值。如果提供初始化值，可省略变量类型，由编译器自动推断。</p>
<pre><code class="language-go">    var x int
    // 使用关键字 var 定义变量, 跟函数的参数列表一样，类型在后面。
    var c, python, java bool
    // 多个相同类型的变量可以写在一行。
    var f float32 = 1.6
    var i, j int = 1, 2
    // 变量定义可以包含初始值，每个变量对应一个。
    var s = &quot;abc&quot;
    // 如果初始化是使用表达式，则可以省略类型；变量从初始值中获得类型。
</code></pre>
<p>变量在定义时没有明确的初始化时会赋值为<em>零值</em> 。</p>
<p>零值是：</p>
<ul>
<li>数值类型为 0 ，</li>
<li>布尔类型为 false ，</li>
<li>字符串为 &quot;&quot; （空字符串）。</li>
</ul>
<p>在函数内部,可用更简略的 &quot;:=&quot;  式定义变量。</p>
<pre><code class="language-go">    func main() {
        n, s := 12, &quot;Hello, World!&quot;
        println(s, n)
    }
</code></pre>
<blockquote>
<p>函数外的每个语句都必须以关键字开始（ var 、 func 、等等）， := 结构不能使用在函数外。</p>
</blockquote>
<p>可一次定义多个变量。</p>
<pre><code class="language-go">    var x, y, z int
    var s, n = &quot;abc&quot;, 123
    var (
    	a int
    	b float32
    )

    func main() {
        n, s := 0x1234, &quot;Hello, World!&quot;
        println(x, s, n)
    }
</code></pre>
<p>一个特殊的变量名是 _(下划线)。任何赋给它的值都被丢弃。在这个例子中,将 35 赋值给 b,同时丢弃 34。</p>
<pre><code class="language-go">    _, b := 34, 35
</code></pre>
<p>Go 的编译器会对声明却未使用的变量报错</p>
<pre><code class="language-go">    var s string // 全局变量没问题。

    func main() {
        i := 0 // Error: i declared and not used。(可使  &quot;_ = i&quot; 规避)
    }
</code></pre>
<p>定义完之后的变量可以被重新赋值 比如第8行，将计算结果赋值给result。</p>
<h3 id="常量">常量</h3>
<blockquote>
<p>常量值必须是编译期可确定的数字、字符串、布尔值。</p>
</blockquote>
<p>常量的定义与变量类似，只不过使用 const 关键字</p>
<pre><code class="language-go">    const x, y int = 1, 2
    const s = &quot;Hello, World!&quot;
    // 多常量初始化 // 类型推断
    // 常量组
    const (
    	a, b = 10, 100
    	c bool = false
    )

    func main() _{
    	const x = 'xxx'      // 未使用局部常量不会引发编译错误
    }
</code></pre>
<p>在常量中，如果不提供类型和初始化值，那么被看作和上一常量相同</p>
<pre><code class="language-go">    const (
		s = &quot;abc&quot;
		x           // x = &quot;abc&quot;
	)
</code></pre>
<h4 id="变量值的引用">变量值的引用</h4>
<p>通常情况下 go 语言的<code>变量持有相应的值</code>。<br>
对于<code>通道</code>、<code>函数</code>、<code>方法</code>、<code>映射</code>以及<code>切片</code>的引用变量，它们持有的都是<code>引用</code>，也既是<code>保存指针的变量</code>。</p>
<p><strong>值在传递给函数或者方法的时候会被复制一次</strong></p>
<p>不同类型参数所占空间如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">占用空间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bool</td>
<td style="text-align:left">类型占1~8个字节</td>
</tr>
<tr>
<td style="text-align:left">传递字符串</td>
<td style="text-align:left">占 16个字节（64位）或者8个字节（32位）</td>
</tr>
<tr>
<td style="text-align:left">传递切片</td>
<td style="text-align:left">占 16个字节（64位）或者12个字节（32位）</td>
</tr>
<tr>
<td style="text-align:left">传递指针</td>
<td style="text-align:left">占 8个字节（64位）或者4个字节（32位）</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>数组</code>是按值传递的，所以传递大数组代价较大 可用切片代替</p>
</blockquote>
<p><code>变量是赋给内存块的名字，该内存块用于保存特定的数据类型</code>。</p>
<p><code>指针是指保存了另一个变量内存地址的变量</code>。创建的指针用来指向另一个某种类型的变量。<br>
为了便于理解，我们看以下两段代码。</p>
<pre><code class="language-go">x := 3    y := 22
// 变量 x, y 为int型 分别赋值 3   22  内存地址 0xf840000148   0xf840000150
x == 3  &amp;&amp;  y == 22
</code></pre>
<pre><code class="language-go">pi := &amp;x

// 变量pi 为 *int(指向int型变量的指针)   在这里我们将变量x的内存地址赋值给pi，即pi 保存了另一个变量的内存地址（这也是指针定义）

pi == 3 &amp;&amp; x == 3 &amp;&amp; y == 22  
x++

// x + 1 此时 x==4 pi 指向x的内存地址 所以

pi == 4 &amp;&amp; x == 4 &amp;&amp; y == 22

*pi++

// *pi ++ 意为着pi指向的值增加
*pi == 5 &amp; x == 5 &amp;&amp; y == 22

pi := &amp;y

//pi 指向y的内存地址
*pi == 22 &amp;&amp; x == 5 &amp;&amp; y == 22

*pi++

// *pi++ 意为着pi指向的值增加

*pi == 23 &amp;&amp; x == 5 &amp;&amp; y == 23
</code></pre>
<h3 id="基本类型">基本类型</h3>
<p>Go 有明确的数字类型命名, 支持 Unicode, 支持常用数据结构</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">长度</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bool</td>
<td style="text-align:left">1</td>
<td style="text-align:left">false</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">unit8</td>
</tr>
<tr>
<td style="text-align:left">rune</td>
<td style="text-align:left">4</td>
<td style="text-align:left">0</td>
<td style="text-align:left">int32 的别名 代表一个Unicode 码</td>
</tr>
<tr>
<td style="text-align:left">int, unit</td>
<td style="text-align:left">4 或 8</td>
<td style="text-align:left">0</td>
<td style="text-align:left">32 或 64</td>
</tr>
<tr>
<td style="text-align:left">int8, unit8</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-128 ~ 127, 0~255</td>
</tr>
<tr>
<td style="text-align:left">int16, unit16</td>
<td style="text-align:left">2</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-32768 ~ 32767, 0 ~ 65535</td>
</tr>
<tr>
<td style="text-align:left">int32, unit32</td>
<td style="text-align:left">4</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-21亿~ 21亿, 0 ~ 42亿</td>
</tr>
<tr>
<td style="text-align:left">int64, unit64</td>
<td style="text-align:left">8</td>
<td style="text-align:left">0</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">float32</td>
<td style="text-align:left">4</td>
<td style="text-align:left">0.0</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">float64</td>
<td style="text-align:left">8</td>
<td style="text-align:left">0.0</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">complex64</td>
<td style="text-align:left">8</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">complex128</td>
<td style="text-align:left">16</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">unitptr</td>
<td style="text-align:left">4或8</td>
<td style="text-align:left"></td>
<td style="text-align:left">足以存储指针的unit32 或unit64 整数</td>
</tr>
<tr>
<td style="text-align:left">array</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">值类型</td>
</tr>
<tr>
<td style="text-align:left">struct</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">值类型</td>
</tr>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left"></td>
<td style="text-align:left">&quot;&quot;</td>
<td style="text-align:left">UTF-8 字符串</td>
</tr>
<tr>
<td style="text-align:left">slice</td>
<td style="text-align:left"></td>
<td style="text-align:left">nil</td>
<td style="text-align:left">引用类型</td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:left"></td>
<td style="text-align:left">nil</td>
<td style="text-align:left">引用类型</td>
</tr>
<tr>
<td style="text-align:left">channel</td>
<td style="text-align:left"></td>
<td style="text-align:left">nil</td>
<td style="text-align:left">引用类型</td>
</tr>
<tr>
<td style="text-align:left">interface</td>
<td style="text-align:left"></td>
<td style="text-align:left">nil</td>
<td style="text-align:left">接口</td>
</tr>
<tr>
<td style="text-align:left">function</td>
<td style="text-align:left"></td>
<td style="text-align:left">nil</td>
<td style="text-align:left">函数</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>int</code>，<code>uint</code> 和 <code>uintptr</code> 类型在32位的系统上一般是32位，而在64位系统上是64位。当你需要使用一个整数类型时，你应该首选 <code>int</code>，仅当有特别的理由才使用定长整数类型或者无符号整数类型。<br>
引用类型包括 <code>slice</code>、<code>map</code> 和 <code>channel</code>。它们有复杂的内部结构,除了申请内存外,还需要初始化相关属性</p>
</blockquote>
<h3 id="类型转换">类型转换</h3>
<p><strong>go <code>不支持</code> 隐式的类型转换</strong></p>
<blockquote>
<p>使用表达式 T(v) 将值 v 转换为类型 T 。</p>
</blockquote>
<pre><code class="language-go">var b byte = 100
// var n int = b // Error: cannot use b (type byte) as type int in assignment
var n int = int(b) // 显式转换

</code></pre>
<p><strong>不能将其他类型当 bool 值使用</strong></p>
<pre><code class="language-go">a := 100
if a {                  // Error: non-bool a (type int) used as if condition
    println(&quot;true&quot;)
}
</code></pre>
<h3 id="函数">函数</h3>
<p>首先看下面这段代码</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func add(x int, y int) int {
    	return x + y
    }

    func main() {
    	fmt.Println(add(42, 13))
    }
</code></pre>
<h4 id="函数定义">函数定义</h4>
<blockquote>
<p>使用关键字 func 定义函数,左大括号不能另起一行</p>
</blockquote>
<p>golang中符合规范的函数一般写成如下的形式：</p>
<pre><code class="language-go">    func functionName(parameter_list) (return_value_list) {
       …
    }

    // parameter_list 是参数列表
    // return_value_list 是返回值列表 下边有详细的讲解
</code></pre>
<h4 id="函数的特性">函数的特性</h4>
<ul>
<li>无需声明原型。 (1)</li>
<li>支持不定长变参。</li>
<li>支持多返回值。</li>
<li>支持命名返回参数。</li>
<li>支持匿名函数和闭包。</li>
<li>不支持 嵌套 (nested)、重载 (overload) 和 默认参数 (default parameter)</li>
</ul>
<pre><code class="language-go">    func test(x int, y int, s string) (r int, s string) { // 类型相同的相邻参数可合并
        n := x + y                                    // 多返回值必须用括号。
        return n, fmt.Sprintf(s, n)
    }
</code></pre>
<blockquote>
<p>关键字 <code>func</code> 用于定义一个函数<br>
<code>test</code> 是你函数的名字<br>
int 类型的变量 x, y 和 string 类型的变量 s 作为<code>输入参数</code>参数用<code>pass-by-value</code>方式传递,意味着它们会被复制<br>
当<code>两个或多个连续的函数命名参数是同一类型</code>，则除了最后一个类型之外，其他都可以省略。</p>
</blockquote>
<p>在这个例子中：</p>
<pre><code class="language-go">x int, y int
</code></pre>
<p>被缩写为</p>
<pre><code class="language-go">x, y int
</code></pre>
<p><code>变量</code> r 和 s 是这个函数的<code>命名返回值</code>。在 Go 的函数中可以返回多个值。<br>
如果不想对返回的参数命名,只需要提供类型:(int, string)。 如果<code>只有一个返回值</code>，可以省略圆括号。如果函数是一个子过程,并且没有任何返回值,也可以省略这些内容。<br>
函数体。注意 return 是一个语句,所以包裹参数的括号是可选的。<br>
不定长参数其实就是slice，只能有一个，且必须是最后一个。</p>
<pre><code class="language-go">    func test(s string, n ...int) string {
        var x int
    		for _, i := range n {
    			 x += i
    		}
    	return fmt.Sprintf(s, x)
    }
    // 使用slice 做变参时，必须展开
    func main() {
        s := []int{1, 2, 3}
        println(test(&quot;sum: %d&quot;, s...))
    }
</code></pre>
<blockquote>
<p>函数是第一类对象,可作为参数传递</p>
</blockquote>
<p>就像其他在 Go 中的其他东西一样,函数也是值而已。它们可以像下面这样赋值给变量:</p>
<pre><code class="language-go">    func main() {
        a := func() {                  // 定义一个匿名函数,并且赋值给 a
    		println(&quot;Hello&quot;)
    	}                              // 这里没有 ()
        a()                            // 调用函数
    }
</code></pre>
<p>如果使用 fmt.Printf(&quot;%T\n&quot;, a) 打印 a 的类型,输出结果是 func()</p>
<h4 id="返回值">返回值</h4>
<p>函数可以返回任意数量返回值</p>
<p>Go 函数的返回值或者结果参数可以指定一个名字,并且像原始的变量那样使用,就像 输入参数那样。如果对其命名,在函数开始时,它们会用其类型的零值初始化</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func swap(x, y string) (string, string) {
    	return y, x
    }

    func main() {
    	a, b := swap(&quot;hello&quot;, &quot;world&quot;)
    	fmt.Println(a, b)
    }

    /*
       函数可以返回任意数量返回值
       swap 函数返回了两个字符串
    */

</code></pre>
<p>Go 的返回值可以被命名，并且就像在函数体开头声明的变量那样使用。</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func split(sum int) (x, y int) { // 初始化返回值为 x,y
    	x = sum * 4 / 9              // x,y 已经初始化，可以直接赋值使用
    	y = sum - x
    	return                       // 隐式返回x,y(裸返回)
    }

    func main() {
    	fmt.Println(split(17))
    }

    /*
       在长的函数中这样的裸返回会影响代码的可读性。
    */
</code></pre>
<blockquote>
<p>有返回值的函数,必须有明确的return 语句,否则会引发编译错误</p>
</blockquote>
<h3 id="名词解释">名词解释</h3>
<p>函数原型</p>
<blockquote>
<p><code>函数声明</code>由函数返回类型、函数名和形参列表组成。形参列表必须包括形参类型,但是不必对形参命名。这三个元素被称为函数原型,函数原型描述了函数的接口<br>
<code>函数原型</code>类似函数定义时的函数头，又称函数声明。为了能使函数在定义之前就能被调用，C++规定可以先说明函数原型，然后就可以调用函数。函数定义可放在程序后面。 由于函数原型是一条语句，因此函数原型必须以分号结束。函数原型由函数返回类型、函数名和参数表组成，它与函数定义的返回类型、函数名和参数表必须一致。函数原型必须包含参数的标识符（对函数声明而言是可选的）<br>
注意：<code>函数原型与函数定义</code>必须一致，否则会引起连接错误。</p>
</blockquote>
<h2 id="下节预告">下节预告</h2>
<p>变量和函数部分暂时这些，有更新还会补充。下一篇将会是控制流。<br>
将会用到的代码为:</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func main() {
        result := 0
        for i := 0; i &lt;= 10; i++ {
          result = fibonacci(i)
          fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
       }
    }

    func fibonacci(n int) (res int) {
        if n &lt;= 1 {
            res = 1
    	   } else {
    	       res = fibonacci(n-1) + fibonacci(n-2)
    	   }
    	return
    }
</code></pre>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://tour.go-zh.org/basics/4">Go 指南</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.4.md">The way to go -- 变量</a></li>
<li><a href="https://golang.org/doc/effective_go.html">Effective Go</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS-Lambda 使用入门]]></title>
        <id>http://blog.gusibi.site/post/Amazon-Lambda-Start/</id>
        <link href="http://blog.gusibi.site/post/Amazon-Lambda-Start/">
        </link>
        <updated>2018-01-13T01:23:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>场景：</code>现在需要开发一个前后端分离的应用，后端采用 RESTful API 最为方便，但是如果这个后端服务会在一天中的某些时候有高并发的情况，使用什么样的架构最为简单呢？</p>
</blockquote>
<p>刚思考这个问题的时候我想到的解决方案可能有以下几种：</p>
<ul>
<li>
<p>使用CDN内容分发网络，减少主服务器的压力</p>
</li>
<li>
<p>使用LVS服务器负载均衡</p>
</li>
<li>
<p>使用缓存</p>
</li>
<li>
<p>硬件层 提高带宽，使用SSD 硬盘，使用更好的服务器</p>
</li>
<li>
<p>代码层，优化代码（使用性能更好的语言等</p>
<p>​</p>
</li>
</ul>
<p>但以上的几个方法都需要关注服务器的存储和计算资源，以便随时调整以满足更高的性能，并且高并发的请求也是分时段的，配置了更高性能的服务器在访问量变低的时候也是资源浪费。</p>
<p>这个时候可以使用 FaaS（Functions as a Service） 架构，跟传统架构不同在于，他们运行于无状态的容器中，可以由事件触发，短暂的，完全被第三方管理，功能上FaaS就是不需要关心后台服务器或者应用服务，只需关心自己的代码即可。其中AWS Lambda是目前最佳的FaaS实现之一。</p>
<h2 id="aws-lambda">AWS Lambda</h2>
<p>AWS Lambda 是一项计算服务，使用时无需预配置或管理服务器即可运行代码。AWS Lambda 只在需要时执行代码并自动缩放。借助 AWS Lambda，几乎可以为任何类型的应用程序或后端服务运行代码，而且无需执行任何管理。现在 AWS Lambda 支持 Node.js、Java、C# 和 Python。</p>
<h3 id="使用场景">使用场景</h3>
<p>Lambda 常见的应用场景有以下几种：</p>
<ul>
<li>将Lambda 作为事件源用于 AWS 服务（比如音频上传到 s3后，触发 Lambda 音频转码服务，转码音频文件</li>
<li>通过 HTTPS (Amazon API Gateway) 实现的按需 Lambda 函数调用（配合 API Gateway创建简单的微服务</li>
<li>按需 Lambda 函数调用（使用自定义应用程序构建您自己的事件源）</li>
<li>计划的事件（比如每天晚上12点生成报表发送到指定邮箱</li>
</ul>
<p>下图是将Lambda 作为事件源用于 AWS 服务案例的一个执行流程图：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/oXCMUsm_ZNoPkU5g5aa0OcXvvBo9_-TAB3xqUFlB4ktJlzakD_E9IA-3gQu85_QO" alt="" loading="lazy"></figure>
<ol>
<li>用户将对象上传到 S3 存储桶（对象创建事件）。</li>
<li>Amazon S3 检测到对象创建事件。</li>
<li>Amazon S3 调用在存储桶通知配置中指定的 Lambda 函数。</li>
<li>AWS Lambda 通过代入您在创建 Lambda 函数时指定的执行角色来执行 Lambda 函数。</li>
<li>Lambda 函数执行。</li>
</ol>
<p>这篇文章主要介绍 将 Lambda 作为事件源用于 AWS 服务 和 配合 API Gateway 创建简单的微服务。</p>
<h3 id="如何使用-lambda">如何使用 Lambda</h3>
<p>接下来将使用一个案例介绍如何使用 Lambda。</p>
<h4 id="将-aws-lambda-与-amazon-api-gateway-结合使用按需并通过-https">将 AWS Lambda 与 Amazon API Gateway 结合使用（按需并通过 HTTPS）</h4>
<h5 id="步骤-1设置-aws-账户和-aws-cli">步骤 1：设置 AWS 账户和 AWS CLI</h5>
<ul>
<li><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/setting-up.html">注册 AWS 账户并在该账户中创建管理员用户</a></li>
<li><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/setup-awscli.html">设置 AWS Command Line Interface (AWS CLI)</a></li>
</ul>
<h5 id="步骤-2创建-helloworld-lambda-函数和探索控制台">步骤 2：创建 HelloWorld Lambda 函数和探索控制台</h5>
<h6 id="创建-hello-world-lambda-函数">创建 Hello World Lambda 函数</h6>
<ol>
<li>登录 AWS 管理控制台并打开 AWS Lambda 控制台。</li>
<li>选择 <strong>Get Started Now</strong>。（仅当未创建任何 Lambda 函数时，控制台才显示 <strong>Get Started Now</strong> 页面。如果您已创建函数，则会看到 <strong>Lambda &gt; Functions</strong> 页面。在该列表页面上，选择 <strong>Create a Lambda function</strong> 转到 <strong>Lambda &gt; New function</strong> 页面。下图是这种情况</li>
</ol>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/jgJKvz3ArQBbZqp5-F78j_2jmUThAsViZBWtLhIUcPigMyNrfP40RfLpYTsPzKyw" alt="" loading="lazy"></figure>
<ol start="3">
<li>这里选择从头开始创作，填写函数名、选择角色，点击创建函数</li>
<li>配置创建好的Lambda函数</li>
</ol>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/uxR1UPvYab9pvHs3lCMGBeih8kHopl1pkm5zvDbSBSZCczcufvzaTHmh1lI7O_rU" alt="" loading="lazy"></figure>
<blockquote>
<p>需要注意的是：处理程序填写部分为  代码文件名+文件中函数名，这里我们文件名lambda_function， 函数名是 lambda_handler，处理程序部分填写为 lambda_function.lambda_handler。</p>
</blockquote>
<ol start="5">
<li>添加触发器，这里我们选择API Gateway ，在配置部分选择之前配置好的 API，点击添加。然后保存函数</li>
</ol>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/qJ8heUNoZuUw_Qkt3uw1q2ZYFlzGAneB6AdBnyV7TKrQFTsCI79buo2WnhwGCcjH" alt="" loading="lazy"></figure>
<h5 id="测试aws-lambda-amazon-api-gateway">测试AWS Lambda + Amazon API Gateway</h5>
<p>登录 aws 控制台，打开 API Gateway，选择我们刚刚选用的 API，点击测试，我们将会看到以下输出</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/S3dppxZIKbOf83UOPNEiEwKEvMw7n_Mng0Wk3PTrA8REa1lv-CPnRBg6BM8HkxMw" alt="" loading="lazy"></figure>
<p>详细信息可以参考 官方文档（https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/getting-started.html）</p>
<p>通过上面的步骤，我们了解了如何使用一个 Lambda 函数，现在我们看下如何构建 Lambda 函数。</p>
<h3 id="如何构建lambda">如何构建Lambda</h3>
<h4 id="创建-lambda-函数">创建 Lambda 函数</h4>
<p>在创建 Lambda 函数时，需要指定一个<em>处理程序</em>（此处理程序是代码中的函数），AWS Lambda 可在服务执行代码时调用它。在 Python 中创建处理程序函数时，使用以下一般语法结构。</p>
<pre><code class="language-python">def handler_name(event, context): 
    ...
    return some_value
</code></pre>
<p>在该语法中，需要注意以下方面：</p>
<ul>
<li>
<p><code>event</code> - AWS Lambda 使用此参数将事件数据传递到处理程序。此参数通常是 Python <code>dict</code> 类型。它也可以是 <code>list</code>、<code>str</code>、<code>int</code>、<code>float</code> 或 <code>NoneType</code> 类型。</p>
</li>
<li>
<p><code>context</code> - AWS Lambda 使用此参数向处理程序提供运行时信息。此参数为 <code>LambdaContext</code> 类型。</p>
</li>
<li>
<p>（可选）处理程序可返回值。返回的值所发生的状况取决于调用 Lambda 函数时使用的调用类型：</p>
<ul>
<li>
<p>如果使用 <code>RequestResponse</code> 调用类型（同步执行），AWS Lambda 会将 Python 函数调用的结果返回到调用 Lambda 函数的客户端（在对调用请求的 HTTP 响应中，序列化为 JSON）。例如，AWS Lambda 控制台使用 <code>RequestResponse</code> 调用类型，因此当您使用控制台调用函数时，控制台将显示返回的值。</p>
<p>如果处理程序返回 <code>NONE</code>，AWS Lambda 将返回 null。</p>
</li>
<li>
<p>如果使用 <code>Event</code> 调用类型（异步执行），则丢弃该值。</p>
</li>
</ul>
</li>
</ul>
<h4 id="context对象">context对象</h4>
<p>在执行 Lambda 函数时，它可以与 AWS Lambda 服务进行交互以获取有用的运行时信息，例如：</p>
<ul>
<li>AWS Lambda 终止您的 Lambda 函数之前的剩余时间量（超时是 Lambda 函数配置属性之一）。</li>
<li>与正在执行的 Lambda 函数关联的 CloudWatch 日志组和日志流。</li>
<li>返回到调用了 Lambda 函数的客户端的 AWS 请求 ID。可以使用此请求 ID 向 AWS Support 进行任何跟进查询。</li>
<li>如果通过 AWS 移动软件开发工具包调用 Lambda 函数，则可了解有关调用 Lambda 函数的移动应用程序的更多信息。</li>
</ul>
<h5 id="context-对象方法-python">Context 对象方法 (Python)</h5>
<p>context 对象提供了以下方法：</p>
<h6 id="get_remaining_time_in_millis">get_remaining_time_in_millis()</h6>
<p>返回在 AWS Lambda 终止函数前剩余的执行时间（以毫秒为单位）。</p>
<h5 id="context-对象属性-python">Context 对象属性 (Python)</h5>
<p>context 对象提供了以下属性：</p>
<h6 id="function_name">function_name</h6>
<p>正在执行的 Lambda 函数的名称。</p>
<h6 id="function_version">function_version</h6>
<p>正在执行的 Lambda 函数版本。如果别名用于调用函数，<code>function_version</code> 将为别名指向的版本。</p>
<h6 id="invoked_function_arn">invoked_function_arn</h6>
<p>ARN 用于调用此函数。它可以是函数 ARN 或别名 ARN。非限定的 ARN 执行 <code>$LATEST</code> 版本，别名执行它指向的函数版本。</p>
<h6 id="memory_limit_in_mb">memory_limit_in_mb</h6>
<p>为 Lambda 函数配置的内存限制（以 MB 为单位）。您在创建 Lambda 函数时设置内存限制，并且随后可更改此限制。</p>
<h6 id="aws_request_id">aws_request_id</h6>
<p>与请求关联的 AWS 请求 ID。这是返回到调用了 <code>invoke</code> 方法的客户端的 ID。 注意如果 AWS Lambda 重试调用（例如，在处理 Kinesis 记录的 Lambda 函数引发异常的情况下）时，请求 ID 保持不变。</p>
<h6 id="log_group_name">log_group_name</h6>
<p>CloudWatch 日志组的名称，可从该日志组中查找由 Lambda 函数写入的日志。</p>
<h6 id="log_stream_name">log_stream_name</h6>
<p>CloudWatch 日志流的名称，可从该日志流中查找由 Lambda 函数写入的日志。每次调用 Lambda 函数时，日志流可能会更改，也可能不更改。如果 Lambda 函数无法创建日志流，则该值为空。当向 Lambda 函数授予必要权限的执行角色未包括针对 CloudWatch Logs 操作的权限时，可能会发生这种情况。</p>
<h6 id="identity">identity</h6>
<p>通过 AWS 移动软件开发工具包进行调用时的 Amazon Cognito 身份提供商的相关信息。它可以为空。identity.cognito_identity_ididentity.cognito_identity_pool_id</p>
<h6 id="client_context">client_context</h6>
<p>通过 AWS 移动软件开发工具包进行调用时的客户端应用程序和设备的相关信息。它可以为空。</p>
<ul>
<li>client.installation_id</li>
<li>client.app_title</li>
<li>client.app_version_name</li>
<li>client.app_version_code</li>
<li>client.app_package_name</li>
<li>custom – 由移动客户端应用程序设置的自定义值的 dict。</li>
<li>env – 由 AWS 开发工具包提供的环境信息的 dict。</li>
</ul>
<h5 id="示例">示例</h5>
<p>查看以下 Python 示例。它有一个函数，此函数也是处理程序。处理程序通过作为参数传递的 <code>context</code> 对象接收运行时信息。</p>
<pre><code class="language-python">from __future__ import print_function

import time
def get_my_log_stream(event, context):       
    print(&quot;Log stream name:&quot;, context.log_stream_name)
    print(&quot;Log group name:&quot;,  context.log_group_name)
    print(&quot;Request ID:&quot;,context.aws_request_id)
    print(&quot;Mem. limits(MB):&quot;, context.memory_limit_in_mb)
    # Code will execute quickly, so we add a 1 second intentional delay so you can see that in time remaining value.
    time.sleep(1) 
    print(&quot;Time remaining (MS):&quot;, context.get_remaining_time_in_millis())
</code></pre>
<p>此示例中的处理程序代码只打印部分运行时信息。每个打印语句均在 CloudWatch 中创建一个日志条目。如果您使用 Lambda 控制台调用函数，则控制台会显示日志。</p>
<h4 id="日志记录">日志记录</h4>
<p>您的 Lambda 函数可包含日志记录语句。AWS Lambda 将这些日志写入 CloudWatch。如果您使用 Lambda 控制台调用 Lambda 函数，控制台将显示相同的日志。</p>
<p>以下 Python 语句生成日志条目：</p>
<ul>
<li><code>print</code> 语句。</li>
<li><code>logging</code> 模块中的 <code>Logger</code> 函数（例如，<code>logging.Logger.info</code> 和 <code>logging.Logger.error</code>）。</li>
</ul>
<p><code>print</code> 和 <code>logging.*</code> 函数将日志写入 CloudWatch Logs 中，而 <code>logging.*</code> 函数将额外信息写入每个日志条目中，例如时间戳和日志级别。</p>
<h5 id="查找日志">查找日志</h5>
<p>可查找 Lambda 函数写入的日志，如下所示：</p>
<ul>
<li>
<p>在 AWS Lambda 控制台中 - AWS Lambda 控制台中的 ** Log output**  部分显示这些日志。</p>
</li>
<li>
<p>在响应标头中，当您以编程方式调用 Lambda 函数时 - 如果您以编程方式调用 Lambda 函数，则可添加 <code>LogType</code>参数以检索已写入 CloudWatch 日志的最后 4 KB 的日志数据。AWS Lambda 在响应的 <code>x-amz-log-results</code> 标头中返回该日志信息。有关更多信息，请参阅<a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/API_Invoke.html">Invoke</a>。</p>
<p>如果您使用 AWS CLI 调用该函数，则可指定带有值 <code>Tail</code> 的 <code>--log-type parameter</code> 来检索相同信息。</p>
</li>
<li>
<p>在 CloudWatch 日志中 - 要在 CloudWatch 中查找您的日志，您需要知道日志组名称和日志流名称。可以使用代码中的 <code>context.logGroupName</code> 和 <code>context.logStreamName</code> 属性来获取此信息。在运行 Lambda 函数时，控制台或 CLI 中生成的日志将会向您显示日志组名称和日志流名称。</p>
</li>
</ul>
<h4 id="函数错误">函数错误</h4>
<p>如果 Lambda 函数引发异常，AWS Lambda 会识别失败，将异常信息序列化为 JSON 并将其返回。考虑以下示例：</p>
<pre><code class="language-python">def always_failed_handler(event, context):
    raise Exception('I failed!')
</code></pre>
<p>在调用此 Lambda 函数时，它将引发异常，并且 AWS Lambda 返回以下错误消息：</p>
<pre><code class="language-json">{
  &quot;errorMessage&quot;: &quot;I failed!&quot;,
  &quot;stackTrace&quot;: [
    [
      &quot;/var/task/lambda_function.py&quot;,
      3,
      &quot;my_always_fails_handler&quot;,
      &quot;raise Exception('I failed!')&quot;
    ]
  ],
  &quot;errorType&quot;: &quot;Exception&quot;
}
</code></pre>
<p>详细信息参考官方文档：https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-app.html</p>
<h3 id="注意事项">注意事项</h3>
<h4 id="aws-lambda-限制">AWS Lambda 限制</h4>
<p>AWS Lambda 在使用中会强加一些限制，例如，程序包的大小或 Lambda 函数在每次调用中分得的内存量。</p>
<p><strong>每个调用的 AWS Lambda 资源限制</strong></p>
<table>
<thead>
<tr>
<th>资源</th>
<th>限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>内存分配范围</td>
<td>最小值 = 128 MB/最大值 = 1536 MB (增量为 64 MB). 如果超过最大内存使用量，则函数调用将会终止。</td>
</tr>
<tr>
<td>临时磁盘容量（“/tmp”空间）</td>
<td>512MB</td>
</tr>
<tr>
<td>文件描述符数</td>
<td>1024</td>
</tr>
<tr>
<td>过程和线程数（合并总数量）</td>
<td>1024</td>
</tr>
<tr>
<td>每个请求的最大执行时长</td>
<td>300 秒</td>
</tr>
<tr>
<td><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/API_Invoke.html">Invoke</a> 请求正文有效负载大小 (RequestResponse/同步调用)</td>
<td>6MB</td>
</tr>
<tr>
<td><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/API_Invoke.html">Invoke</a> 请求正文有效负载大小 (Event/异步调用)</td>
<td>128 K</td>
</tr>
</tbody>
</table>
<p><strong>每个区域的 AWS Lambda 账户限制</strong></p>
<table>
<thead>
<tr>
<th>资源</th>
<th>默认限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>并发执行数</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>并发执行是指在任意指定时间对您的函数代码的执行数量。您可以估计并发执行计数，但是，根据 Lambda 函数是否处理来自基于流的事件源的事件，并发执行计数会有所不同。</p>
<ul>
<li>
<p><strong>基于流的事件源</strong> - 如果您创建 Lambda 函数处理来自基于流的服务（Amazon Kinesis Data Streams 或 DynamoDB 流）的事件，则每个流的分区数量是并发度单元。如果您的流有 100 个活动分区，则最多会有 100 个 Lambda 函数调用并发运行。然后，每个 Lambda 函数按照分区到达的顺序处理事件。</p>
</li>
<li>
<p><strong>并非基于流的事件源</strong> - 如果您创建 Lambda 函数处理来自并非基于流的事件源（例如，Amazon S3 或 API 网关）的事件，则每个发布的事件是一个工作单元。因此，这些事件源发布的事件数（或请求数）影响并发度。</p>
<p>您可以使用以下公式来估算并发 Lambda 函数调用数。</p>
<pre><code>events (or requests) per second * function duration
</code></pre>
<p>例如，考虑一个处理 API Gateway 的 Lambda 函数。假定 Lambda 函数平均用时 0.3 秒，API Gateway 每秒请求 1000 次。因此，Lambda 函数有 300 个并发执行。</p>
<p>​</p>
</li>
</ul>
<p>具体信息参考<a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/concurrent-executions.html">Lambda 函数并行执行</a></p>
<p>**AWS Lambda 部署限制 **</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>默认限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lambda 函数部署程序包大小 (压缩的 .zip/.jar 文件)</td>
<td>50 MB</td>
</tr>
<tr>
<td>每个区域可以上传的所有部署程序包的总大小</td>
<td>75GB</td>
</tr>
<tr>
<td>可压缩到部署程序包中的代码/依赖项的大小 (未压缩的 .zip/.jar 大小).注意每个 Lambda 函数都会在其的 <code>/tmp</code> 目录中接收到额外的 500 MB 的非持久性磁盘空间。该 <code>/tmp</code> 目录可用于在函数初始化期间加载额外的资源，如依赖关系库或数据集。</td>
<td>250MB</td>
</tr>
<tr>
<td>环境变量集的总大小</td>
<td>4 KB</td>
</tr>
</tbody>
</table>
<blockquote>
<p>本文内容主要参考 AWS Lambda 官方文档，详细信息请访问 https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/welcome.html</p>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<p><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/getting-started.html">AWS Lambda 开发入门</a></p>
<p><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html">创建部署程序包 (Python)</a></p>
<p><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/concurrent-executions.html">Lambda 函数并行执行</a></p>
<p><a href="http://blog.csdn.net/chichengit/article/details/49078525">高并发解决方案</a></p>
<p><a href="https://www.zhihu.com/question/22002547">如何优化网站高并发访问?</a></p>
<p><a href="https://www.jianshu.com/p/e6de7020d627">高并发的解决方案</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/28079865">Serverless开发编程思想</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/26761180">一个简单的 Serverless 架构例子</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/20297696">使用lambda带来的架构优势</a></p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-命令模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-command/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-command/">
        </link>
        <updated>2018-01-09T07:16:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="命令模式">命令模式</h3>
<blockquote>
<p><code>题目：</code> 现在要做一个智能家居控制遥控器，功能如下图所示。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/UPqlqNDZ-vRoQN65O3JhR8egeJyz2zIVfbPRV7V47ZhMsWp0aT6awTJoplv_XQbw" alt="智能家居遥控器" loading="lazy"></figure>
<blockquote>
<p>下图是家电厂商提供的类，接口各有差异，并且以后这种类可能会越来越多。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/vcUsidbuki8NvnE6GIQ4V-UtyVMw5I3B1C3GkIceIETTGiMuYdTYnD2NSFaJOzTn" alt="家电厂商类" loading="lazy"></figure>
<p>观察厂商提供的类，你会发现，好多类提供了 on()、off() 方法，除此之外，还有一些方法像 dim()、setTemperature()、setVolumn()、setDirection()。由此我们可以想象，之后还会有更多的厂商类，每个类还会有各式各样的方法。</p>
<p>如果我们把这些类都用到遥控器代码中，代码就会多一大堆的 if 语句，例如</p>
<pre><code class="language-python">if slot1 == Light:
    light.on()
elif slot1 == Hottub:
    hottob.jetsOn()
</code></pre>
<p>并且更严重的是，每次有新的厂商类加进来，遥控器的代码都要做相应的改动。</p>
<p>这个时候我们就要把<code>动作的请求者（遥控器）</code>从<code>动作的执行者（厂商类）</code>对象中解耦。</p>
<blockquote>
<p>如何实现解耦呢？</p>
</blockquote>
<p>我们可以使用<code>命令对象</code>。利用命令对象，把请求（比如打开电灯）封装成一个特定对象。所以，如果对每个按钮都存储一个命令对象，那么当按钮按下的时候，就可以请求命令对象做相关的工作。此时，遥控器并不需要知道工作的内容是什么，只要有个命令对象能和正确的对象沟通，把事情做好就可以了。</p>
<p>下面我们拿餐厅点餐的操作来介绍下命令模式。</p>
<p>餐厅通常是这样工作的：</p>
<ol>
<li>顾客点餐，把订单交给服务员</li>
<li>服务员拿了订单，把订单交给厨师。</li>
<li>厨师拿到订单后根据订单准备餐点。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/yzFfIqvBPf9WmHIashy3smiDYBsJbsr-pT5d7I9JnFVoLLron_ZVyXhot3-VufIT" alt="" loading="lazy"></figure>
<p>这里我们把订单想象成一个用来请求准备餐点的对象，</p>
<ul>
<li>和一般对象一样，订单对象可以被传递：从服务员传递到订单柜台，订单的接口只包含一个方法 orderUp()。这个方法封装了准备餐点所需的动作。</li>
<li>服务员的工作就是接受订单，然后调用订单的 orderUp() 方法，她不需要知道订单内容是什么。</li>
<li>厨师是一个对象，他知道如何准备准备餐点，是任务真正的执行者。</li>
</ul>
<blockquote>
<p>如果我们把餐厅想象成OO 设计模式的一种模型，这个模型允许将”发出请求的对象“和”接受与执行这些请求的对象“分隔开来。比如对于遥控器 API，我们要分隔开”发出请求的按钮代码“和”执行请求的厂商特定对象”。</p>
</blockquote>
<p><code>回到命令模式</code>我们把餐厅的工作流程图转换为命令模式的流程图：这里 client 对应上一张图的顾客，command 对应订单，Invoker 对应服务员，Receiver 对应的是厨师。</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/xnRDNC6NqVbMnXzD66vzgCAICcb3tKcXDGyBDxZuERwAwI0TnUQACv6MhFEezDAO" alt="" loading="lazy"></figure>
<h2 id="命令模式-2">命令模式</h2>
<p>先来看下命令模式的定义：</p>
<blockquote>
<p><code>命令模式</code>将”请求“封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>
</blockquote>
<p>通过上边的定义我们知道，一个命令对象通过在特定接收者上绑定一组动作来封装一个请求。要达到这一点，命令对象将动作和接收者包进对象中。这个对象只暴露一个 execute() 方法，当此方法被调用时，接收者就会进行这些动作。</p>
<p>命令模式类图如下：</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/BehmMRbLQ_w7RbvRD7q0DIu78jUvQ07v9zSVqFp79D8COVe6VL2UxtZjgw_C10fr" alt="命令模式类图" loading="lazy"></figure>
<blockquote>
<p>回到遥控器的设计：我们打算将遥控器的每个插槽，对应到一个命令，这样就让遥控器变成了<code>调用者</code>。当按下按钮，相应命令对象的 execute() 方法就会被调用，其结果就是接收者(例如：电灯、风扇、音响)的动作被调用。</p>
</blockquote>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/ddLNmiEJXUuiKe7rChshd-mPX-ycVAJGYFw3MLv8M24D_A0pOSGfDwBWPxK5ZMgT" alt="" loading="lazy"></figure>
<p>命令模式还支持撤销，该命令提供和 execute() 方法相反的 undo() 方法。不管 execute() 做了什么，undo() 都会倒转过来。</p>
<h2 id="代码实现">代码实现</h2>
<h3 id="遥控器的实现">遥控器的实现</h3>
<pre><code class="language-python">class RemoteControl(object):

    def __init__(self):
        # 遥控器要处理7个开与关的命令
        self.on_commands = [NoCommand() for i in range(7)] 
        self.off_commands = [NoCommand() for i in range(7)]
        self.undo_command = None  # 将前一个命令记录在这里

    def set_command(self, slot, on_command, off_command):
        # 预先给每个插槽设置一个空命令的命令
        # set_command 命令必须要有三个参数(插槽的位置、开的命令、关的命令)
        self.on_commands[slot] = on_command
        self.off_commands[slot] = off_command

    def on_button_was_pressed(self, slot):
        command = self.on_commands[slot]
        command.execute()
        self.undo_command = command
        
    # 当按下开或关的按钮，硬件就会负责调用对应的方法
    def off_button_was_pressed(self, slot):
        command = self.off_commands[slot]
        command.execute()
        self.undo_command = command

    def undo_button_was_pressed(self):
        self.undo_command.undo()

    def __str__(self):
        # 这里负责打印每个插槽和它对应的命令
        for i in range(7):
            print('[slot %d] %s %s' % (i,
                                       self.on_commands[i].__class__.__name__,
                                       self.off_commands[i].__class__.__name__))
        return ''

</code></pre>
<h3 id="命令的实现">命令的实现</h3>
<p>这里实现一个基类，这个基类有两个方法，execute 和 undo，命令封装了某个特定厂商类的一组动作，遥控器可以通过调用 execute() 方法，执行这些动作，也可以使用 undo() 方法撤销这些动作：</p>
<pre><code class="language-python">class Command(object):

    def execute(self):
        # 每个需要子类实现的方法都会抛出NotImplementedError
        # 这样的话，这个类就是真正的抽象基类
        raise NotImplementedError()

    def undo(self):
        raise NotImplementedError()


# 在遥控器中，我们不想每次都检查是否某个插槽都加载了命令，
# 所以我们给每个插槽预先设定一个NoCommand 对象
# 所以没有被明确指定命令的插槽，其命令将是默认的 NoCommand 对象
class NoCommand(Command):

    def execute(self):
        print('Command Not Found')

    def undo(self):
        print('Command Not Found')
</code></pre>
<p>以下是电灯类，利用 Command 基类，每个动作都被实现成一个简单的命令对象。命令对象持有对一个厂商类的实例的引用，并实现了一个 execute()。这个方法会调用厂商类实现的一个或多个方法，完成特定的行为，在这个例子中，有两个类，分别打开电灯与关闭电灯。</p>
<pre><code class="language-python">class Light(object):

    def __init__(self, name):
        # 因为电灯包括 living room light 和 kitchen light
        self.name = name

    def on(self):
        print('%s Light is On' % self.name)

    def off(self):
        print('%s Light is Off' % self.name)


# 电灯打开的开关类
class LightOnCommand(Command):

    def __init__(self, light):
        self.light = light

    def execute(self):
        self.light.on()

    def undo(self):
        # undo 是关闭电灯
        self.light.off()

        
class LightOffCommand(Command):

    def __init__(self, light):
        self.light = light

    def execute(self):
        self.light.off()

    def undo(self):
        self.light.on()
</code></pre>
<p>执行代码，这里创建多个命令对象，然后将其加载到遥控器的插槽中。每个命令对象都封装了某个家电自动化的一项请求：</p>
<pre><code class="language-python">def remote_control_test():
    remote = RemoteControl()

    living_room_light = Light('Living Room')
    kitchen_light = Light('Kitchen')

    living_room_light_on = LightOnCommand(living_room_light)
    living_room_light_off = LightOffCommand(living_room_light)
    kitchen_light_on = LightOnCommand(kitchen_light)
    kitchen_light_off = LightOffCommand(kitchen_light)

    remote.set_command(0, living_room_light_on, living_room_light_off)
    remote.set_command(1, kitchen_light_on, kitchen_light_off)

    print(remote)

    remote.on_button_was_pressed(0)
    remote.off_button_was_pressed(0)
    remote.undo_button_was_pressed()
    remote.on_button_was_pressed(1)
    remote.off_button_was_pressed(1)
    remote.undo_button_was_pressed()
</code></pre>
<p>执行后输出为：</p>
<pre><code class="language-bash">[slot 0] LightOnCommand LightOffCommand
[slot 1] LightOnCommand LightOffCommand
[slot 2] NoCommand NoCommand
[slot 3] NoCommand NoCommand
[slot 4] NoCommand NoCommand
[slot 5] NoCommand NoCommand
[slot 6] NoCommand NoCommand

Living Room Light is On
Living Room Light is Off
Living Room Light is On
Kitchen Light is On
Kitchen Light is Off
Kitchen Light is On
</code></pre>
<h2 id="集合多个命令">集合多个命令</h2>
<p>通常，我们还希望能有一个开关一键打开所有的灯，然后也可以一键关闭所有的灯，这里我们使用 <code>MacroCommand</code>:</p>
<pre><code class="language-python">class MacroCommand(Command):

    def __init__(self, commands):
        # 首先创建一个 commands 的 list，这里可以存放多个命令
        self.commands = commands

    def execute(self):
        # 执行时，依次执行多个开关
        for command in self.commands:
            command.execute()

    def undo(self):
        # 撤销时，给所有命令执行 undo 操作
        for command in self.commands:
            command.undo()
</code></pre>
<p>测试开关集合：</p>
<pre><code class="language-python">def remote_control_test():
    remote = RemoteControl()
    
    living_room_light = Light('Living Room')
    kitchen_light = Light('Kitchen')
    garage_door = GarageDoor()

    living_room_light_on = LightOnCommand(living_room_light)
    living_room_light_off = LightOffCommand(living_room_light)
    kitchen_light_on = LightOnCommand(kitchen_light)
    kitchen_light_off = LightOffCommand(kitchen_light)

    garage_door_open = GarageDoorOpenCommand(garage_door)
    garage_door_close = GarageDoorCloseCommand(garage_door)
    
    # 测试开关集合
    party_on_macro = MacroCommand([living_room_light_on, kitchen_light_on])
    party_off_macro = MacroCommand([living_room_light_off, kitchen_light_off])
    remote.set_command(3, party_on_macro, party_off_macro)
    print('--pushing macro on--')
    remote.on_button_was_pressed(3)
    print('--pushing macro off--')
    remote.off_button_was_pressed(3)
    print('--push macro undo--')
    remote.undo_button_was_pressed()
</code></pre>
<p>当然，我们也可以使用一个列表来记录命令的记录，实现多层次的撤销操作。</p>
<h2 id="命令模式的用途">命令模式的用途</h2>
<h3 id="1-队列请求">1. 队列请求</h3>
<p>命令可以将运算块打包（一个接收者和一组动作），然后将它传来传去，就像是一般的对象一样。即使在命令对象被创建许久以后，运算依然可以被调用。我们可以利用这些特性衍生一些应用，例如：日程安排、线程池、工作队列等。</p>
<blockquote>
<p><code>想象一个工作队列:</code>你在某一端添加命令，然后在另一端则是线程。线程进行下面的动作：从队列中取出一个命令，调用它的 execute() 方法，等待这个调用完成，然后将次命令对象丢弃，再取下一个命令</p>
</blockquote>
<p>此时的工作队列和计算的对象之间是完全解耦的，此刻线程可能进行的是音频转码，下一个命令可能就变成了用户评分计算。</p>
<h3 id="2-日志请求">2.  日志请求</h3>
<p>某些应用需要我们将所有的动作都记录在日志中，并能在系统死机之后，重新调用这些动作恢复到之前的状态。通过新增两个方法（store()、load()），命令模式能够支持这一点。这些数据最好是持久化到硬盘。</p>
<blockquote>
<p><code>要怎么做呢?</code> 当我们执行命令时，将历史记录存储到磁盘，一旦系统死机，我们就将命令对象重新加载，并成批的依次调用这些对象的 execute() 方法。</p>
</blockquote>
<p>比如对于excel，我们可能想要实现的错误恢复方式是将电子表格的操作记录在日志中，而不是每次电子表格一有变化就记录整个电子表格。数据库的事务（transaction）也是使用这个技巧，也就是说，一整群操作必须全部进行完成，或者没有任何操作。</p>
<h2 id="参考链接">参考链接</h2>
<p><a href="https://gist.github.com/gusibi/e66134218fdecff59e5690298d657c26">命令模式完整代码-https://gist.github.com/gusibi/e66134218fdecff59e5690298d657c26</a></p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 字典]]></title>
        <id>http://blog.gusibi.site/post/python-data-structures-dict/</id>
        <link href="http://blog.gusibi.site/post/python-data-structures-dict/">
        </link>
        <updated>2017-12-03T07:05:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这一篇是<code>《流畅的 python》</code>读书笔记。主要介绍：</p>
<ul>
<li>常见的字典方法</li>
<li>如何处理查不到的键</li>
<li>标准库中 dict 类型的变种</li>
<li>散列表的工作原理</li>
</ul>
</blockquote>
<h2 id="泛映射类型">泛映射类型</h2>
<p>collections.abc 模块中有 Mapping 和 MutableMapping 这两个抽象基类，它们的作用是为 dict 和其他类似的类型定义形式接口。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/VP8Xn1-MImX7FFIVi1kyiBms-WIPy5ccIXinstWWn0bL8knd7vbCOK-9RpPwNaQN" alt="" loading="lazy"></figure>
<p>标准库里所有映射类型都是利用 dict 来实现的，它们有个共同的限制，即只有可散列的数据类型才能用做这些映射里的键。</p>
<blockquote>
<p><code>问题：</code> 什么是可散列的数据类型？</p>
</blockquote>
<p>在 python 词汇表（<a href="https://docs.python.org/3/glossary.html#term-hashable">https://docs.python.org/3/glossary.html#term-hashable</a>）中，关于可散列类型的定义是这样的：</p>
<blockquote>
<p>如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现 <code>__hash__()</code> 方法。另外可散列对象还要有 <code>__eq__()</code> 方法，这样才能跟其他键做比较。如果两个可散列对象是相等的，那么它们的散列只一定是一样的</p>
</blockquote>
<p>根据这个定义，原子不可变类型（str，bytes和数值类型）都是可散列类型，frozenset 也是可散列的（因为根据其定义，frozenset 里只能容纳可散列类型），如果元组内都是可散列类型的话，元组也是可散列的（元组虽然是不可变类型，但如果它里面的元素是可变类型，这种元组也不能被认为是不可变的）。</p>
<blockquote>
<p>一般来讲，用户自定义的类型的对象都是可散列的，散列值就是它们的 id() 函数的返回值，所以这些对象在比较的时候都是不相等的。（如果一个对象实现了 <strong>eq</strong> 方法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都是不可变的情况下，这个对象才是可散列的。）</p>
</blockquote>
<p>根据这些定义，字典提供了很多种构造方法，<a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a> 这个页面有个例子来说明创建字典的不同方式。</p>
<pre><code class="language-python">&gt;&gt;&gt; a = dict(one=1, two=2, three=3)
&gt;&gt;&gt; b = {'one': 1, 'two': 2, 'three': 3}
&gt;&gt;&gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
&gt;&gt;&gt; d = dict([('two', 2), ('one', 1), ('three', 3)])
&gt;&gt;&gt; e = dict({'three': 3, 'one': 1, 'two': 2})
&gt;&gt;&gt; a == b == c == d == e
True
</code></pre>
<p>除了这些方法以外，还可以用字典推导的方式来建造新 dict。</p>
<h3 id="字典推导">字典推导</h3>
<p>自 Python2.7 以来，列表推导和生成器表达式的概念就移植到了字典上，从而有了字典推导。字典推导（dictcomp）可以从任何以键值对作为元素的可迭代对象中构建出字典。</p>
<p>比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; data = [(1, 'a'), (2, 'b'), (3, 'c')]
&gt;&gt;&gt; data_dict = {num: letter for num, letter in data}
&gt;&gt;&gt; data_dict
{1: 'a', 2: 'b', 3: 'c'}
</code></pre>
<h3 id="常见的映射方法">常见的映射方法</h3>
<p>下表为我们展示了 dict、defaultdict 和 OrderedDict 的常见方法（后两种是 dict 的变种，位于 collections模块内）。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/Ofx-MtfIphm8ceCJlP3tMi5IwYMuLT8DUem1ANIjR2n2NwYFZ6JFTIJJntdaZFNF" alt="" loading="lazy"></figure>
<ul>
<li>
<p>default_factory 并不是一个方法，而是一个可调用对象，它的值 defaultdict 初始化的时候由用户设定。</p>
</li>
<li>
<p>OrderedDict.popitem() 会移除字典最先插入的元素（先进先出）；可选参数 last 如果值为真，则会移除最后插入的元素（后进先出）。</p>
</li>
<li>
<p>用 setdefault 处理找不到的键<br>
当字典 d[k] 不能找到正确的键的时候，Python 会抛出异常，平时我们都使用<code>d.get(k, default)</code> 来代替 d[k]，给找不到的键一个默认值，还可以使用效率更高的 <code>setdefault</code></p>
</li>
</ul>
<pre><code class="language-python">my_dict.setdefault(key, []).append(new_value)
# 等同于
if key not in my_dict:
    my_dict[key] = []
my_dict[key].append(new_value)
</code></pre>
<p>这两段代码的效果一样，只不过，后者至少要进行两次键查询，如果不存在，就是三次，而用 <code>setdefault</code> 只需一次就可以完成整个操作。</p>
<p>那么，我们取值的时候，该如何处理找不到的键呢？</p>
<h3 id="映射的弹性查询">映射的弹性查询</h3>
<blockquote>
<p>有时候，就算某个键在映射里不存在，我们也希望在通过这个键读取值的时候能得到一个默认值。有两个途径能帮我们达到这个目的，<code>一个是通过 defaultdict</code> 这个类型而不是普通的 dict，<code>另一个是给自己定义一个 dict</code> 的子类，然后在子类中实现 <code>__missing__</code> 方法。</p>
</blockquote>
<h4 id="defaultdict处理找不到的键的一个选择">defaultdict：处理找不到的键的一个选择</h4>
<p>首先我们看下如何使用 defaultdict ：</p>
<pre><code class="language-python">import collections

index = collections.defaultdict(list)
index[new_key].append(new_value)
</code></pre>
<p>这里我们新建了一个字典 index，如果键 <code>new_key</code> 在 index 中不存在，表达式 <code>index[new_key]</code> 会按以下步骤来操作：</p>
<ol>
<li>调用 list() 来建立一个新的列表</li>
<li>把这个新列表作为值，'new_key' 作为它的键，放入 index 中</li>
<li>返回这个列表的引用。</li>
</ol>
<p>而这个用来生成默认值的可调用对象存放在名为 <code>default_factory</code> 的实例属性中。</p>
<blockquote>
<p>defaultdict 中的 default_factory 只会在 <strong>getitem</strong> 里调用，在其他方法中不会发生作用。比如 index[k] 这个表达式会调用 default_factory 创造的某个默认值，而 index.get(k) 则会返回 None。（这是因为特殊方法 <strong>missing</strong> 会在 defaultdict 遇到找不到的键的时候调用 default_factory，实际上，这个特性所有映射方法都可以支持）。</p>
</blockquote>
<h4 id="特殊方法-missing">特殊方法 <strong>missing</strong></h4>
<p>所有映射在处理找不到的键的时候，都会牵扯到 <strong>missing</strong> 方法。但基类 dict 并没有提供 这个方法。不过，如果有一个类继承了 dict ，然后这个继承类提供了 <strong>missing</strong> 方法，那么在 <strong>getitem</strong> 碰到找不到键的时候，Python 会自动调用它，而不是抛出一个 KeyError 异常。</p>
<blockquote>
<p><code>__missing__</code> 方法只会被 <code>__getitem__</code> 调用。提供 <strong>missing</strong> 方法对 get 或者 <strong>contains</strong>(in 运算符会用到这个方法)这些方法的是有没有影响。</p>
</blockquote>
<p>下面这段代码实现了 StrKeyDict0 类，StrKeyDict0 类在查询的时候把非字符串的键转化为字符串。</p>
<pre><code class="language-python">class StrKeyDict0(dict): # 继承 dict
    def __missing__(self, key):
        if isinstance(key, str):
            # 如果找不到的键本身就是字符串，抛出 KeyError    
            raise KeyError(key)
        # 如果找不到的键不是字符串，转化为字符串再找一次
        return self[str(key)]
    def get(self, key, default=None):
        # get 方法把查找工作用 self[key] 的形式委托给 __getitem__，这样在宣布查找失败钱，还能通过 __missing__ 再给键一个机会
        try:
            return self[key]
        except KeyError:
            # 如果抛出 KeyError  说明 __missing__ 也失败了，于是返回 default    
            return default
    def __contains__(self, key):
        # 先按传入的键查找，如果没有再把键转为字符串再找一次
        return key in self.keys() or str(key) in self.keys()
</code></pre>
<p><strong>contains</strong> 方法存在是为了保持一致性，因为 k in d 这个操作会调用它，但我们从 dict 继承到的 <strong>contains</strong> 方法不会在找不到键的时候用 <strong>missing</strong> 方法。</p>
<blockquote>
<p>my_dict.keys() 在 Python3 中返回值是一个 &quot;视图&quot;,&quot;视图&quot;就像是一个集合，而且和字典一样速度很快。但在 Python2中，my_dict.keys() 返回的是一个列表。 所以 k in my_dict.keys() 操作在 python3中速度很快，但在 python2 中，处理效率并不高。</p>
</blockquote>
<blockquote>
<p>如果要自定义一个映射类型，合适的策略是继承 <code>collections.UserDict</code> 类。这个类就是把标准 dict 用 python 又实现了一遍，UserDict 是让用户继承写子类的，改进后的代码如下：</p>
</blockquote>
<pre><code class="language-python">import collections

class StrKeyDict(collections.UserDict):
    
    def __missing__(self, key):
        if isinstance(key, str):
            raise KeyError(key)
        return self[str(key)]
        
    def __contains__(self, key):
        # 这里可以放心假设所有已经存储的键都是字符串。因此只要在 self.data 上查询就好了
        return str(key) in self.data
        
    def __setitem__(self, key, item):
        # 这个方法会把所有的键都转化成字符串。
        self.data[str(key)] = item
</code></pre>
<p>因为 UserDict 继承的是 MutableMapping，所以 StrKeyDict 里剩下的那些映射类型都是从 UserDict、MutableMapping 和 Mapping 这些超类继承而来的。</p>
<p>Mapping 中提供了 get 方法，和我们在 StrKeyDict0 中定义的一样，所以我们在这里不需要定义 get 方法。</p>
<h2 id="字典的变种">字典的变种</h2>
<p>在 collections 模块中，除了 defaultdict 之外还有其他的映射类型。</p>
<ul>
<li>collections.OrderedDict</li>
<li>collections.ChainMap</li>
<li>collections.Counter</li>
</ul>
<h2 id="不可变的映射类型">不可变的映射类型</h2>
<blockquote>
<p><code>问题：</code>标准库中所有的映射类型都是可变的，如果我们想给用户提供一个不可变的映射类型该如何处理呢？</p>
</blockquote>
<p>从 Python3.3 开始 types 模块中引入了一个封装类名叫 <code>MappingProxyType</code>。如果给这个类一个映射，它会返回一个只读的映射视图（如果原映射做了改动，这个视图的结果页会相应的改变）。例如</p>
<pre><code class="language-python">&gt;&gt;&gt; from types import MappingProxy Type
&gt;&gt;&gt; d = {1: 'A'}
&gt;&gt;&gt; d_proxy = MappingProxyType(d)
&gt;&gt;&gt; d_proxy
mappingproxy({1: 'A'})
&gt;&gt;&gt; d_proxy[1]
'A'
&gt;&gt;&gt; d_proxy[2] = 'x'
Traceback(most recent call last):
    File &quot;&lt;stdin&quot;, line 1, in &lt;module&gt;
TypeError: 'MappingProxy' object does not support item assignment
&gt;&gt;&gt; d[2] = 'B'
&gt;&gt;&gt; d_proxy[2]  # d_proxy 是动态的，d 的改动会反馈到它上边
'B'
</code></pre>
<h2 id="字典中的散列表">字典中的散列表</h2>
<p>散列表其实是一个稀疏数组（总有空白元素的数组叫稀疏数组），在 dict 的散列表中，每个键值都占用一个表元，每个表元都有两个部分，<code>一个是对键的引用，另一个是对值的引用</code>。因为所有表元的大小一致，所以可以通过<code>偏移量来读取某个表元</code>。<br>
python 会设法保证大概有1/3 的表元是空的，所以在快要达到这个阈值的时候，原有的散列表会被复制到一个更大的空间。</p>
<p>如果要把一个对象放入散列表，那么首先要计算这个元素的散列值。<br>
Python内置的 hash() 方法可以用于计算所有的内置类型对象。</p>
<blockquote>
<p>如果两个对象在比较的时候是相等的，那么它们的散列值也必须相等。例如 1==1.0 那么，hash(1) == hash(1.0)</p>
</blockquote>
<h3 id="散列表算法">散列表算法</h3>
<p>为了获取 my_dict[search_key] 的值，Python 会首先调用 hash(search_key) 来计算 search_key 的散列值，把这个值的最低几位当做偏移量在散列表中查找元。<code>若表元为空，抛出 KeyError 异常。若不为空，则表元会有一对 found_key:found_value</code>。<br>
这时需要校验 search_key == found_key，如果相等，返回 found_value。<br>
如果不匹配（散列冲突），再在散列表中再取几位，然后处理一下，用处理后的结果当做索引再找表元。 然后重复上面的步骤。</p>
<p>取值流程图如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/oppfxsnS5Fx_KOpd054J2yer_K_wee7WphoUzDN6z8H_R5rtONXr6x3Bb2J3tcBd" alt="字典取值流程图" loading="lazy"></figure>
<p>添加新值和上述的流程基本一致，只不过对于前者，在发现空表元的时候会放入一个新元素，而对于后者，在找到相应表元后，原表里的值对象会被替换成新值。</p>
<blockquote>
<p>另外，在插入新值是，Python 可能会按照散列表的拥挤程度来决定是否重新分配内存为它扩容，<code>如果增加了散列表的大小，那散列值所占的位数和用作索引的位数都会随之增加</code></p>
</blockquote>
<h3 id="字典的优势和限制">字典的优势和限制</h3>
<h4 id="1-键必须是可散列的">1、键必须是可散列的</h4>
<p>可散列对象要求如下：</p>
<ul>
<li>支持 hash 函数，并且通过__hash__() 方法所得的散列值不变</li>
<li>支持通过 <strong>eq</strong>() 方法检测相等性</li>
<li>若 a == b 为真， 则 hash(a) == hash(b) 也为真</li>
</ul>
<h4 id="2-字典开销巨大">2、字典开销巨大</h4>
<p>因为字典使用了散列表，而散列表又必须是稀疏的，这导致它在空间上效率低下。</p>
<h4 id="3-键查询很快">3、键查询很快</h4>
<p>dict 的实现是典型的空间换时间：字典类型由着巨大的内存开销，但提供了无视数据量大小的快速访问。</p>
<h4 id="4-键的次序决定于添加顺序">4、键的次序决定于添加顺序</h4>
<p>当往 dict 里添加新键而又发生散列冲突时，新建可能会被安排存放在另一个位置。</p>
<h4 id="5-往字典里添加新键可能会改变已有键的顺序">5、往字典里添加新键可能会改变已有键的顺序</h4>
<p>无论何时向字典中添加新的键，Python 解释器都可能做出为字典扩容的决定。扩容导致的结果就是要新建一个更大的散列表，并把原有的键添加到新的散列表中，这个过程中可能会发生新的散列冲突，导致新散列表中次序发生变化。<br>
因此，不要对字典同时进行迭代和修改。</p>
<h2 id="总结">总结</h2>
<p>这一篇主要介绍了：</p>
<ul>
<li>常见的字典方法</li>
<li>如何处理查不到的键</li>
<li>标准库中 dict 类型的变种</li>
<li>散列表的工作原理</li>
<li>散列表带来的潜在影响</li>
</ul>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://docs.python.org/3/glossary.html#term-hashable">https://docs.python.org/3/glossary.html#term-hashable</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-单例模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-singleton/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-singleton/">
        </link>
        <updated>2017-11-25T20:59:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>问题：</code>现代化的巧克力工厂具备计算机控制的巧克力锅炉。锅炉做的事情就是把巧克力和牛奶融在一起，然后送到下一个阶段，以制成巧克力棒。下边是一个巧克力公司锅炉控制器的代码，仔细观察一下，这段代码有什么问题？</p>
</blockquote>
<pre><code class="language-python">class ChocolateBoiler(object):

    def __init__(self):
        self.empty = True
        self.boiled = False

    def fill(self):
        # 向锅炉填充巧克力和牛奶混合物
        # 在锅炉内填充原料时，锅炉必须是空的。
        # 一旦填入原料，就要把empty 和 boiled 标志设置好
        if self.empty:
            self.empty = False
            self.boiled = False

    def drain(self):
        # 排出煮沸的巧克力和牛奶
        # 锅炉排出时，必须是满的且煮沸的。
        # 排出完毕empty 设置为 true
        if not self.empty and self.boiled:
            self.empty = True

    def boil(self):
        # 将颅内物煮沸
        # 煮混合物时，锅炉内必须是满的且没有煮沸过
        # 一旦煮沸，就把 boiled 设置为 true
        if not self.empty and not self.boiled:
            self.boiled = True
</code></pre>
<p>从代码可以看出，他们加入了多种判断，以防止不好的事情发生。如果同时存在两个<code>ChocolateBoiler</code>实例，那这么多判断岂不是失去作用了。那我们改如何实现这个需求呢？这个问题的核心是，我们要先判断实例是不是已经存在，如果存在就不再创建。</p>
<pre><code class="language-python">_chocolate_boiler_instance = None  # 声明实例

def chocolate_boiler():
    global _chocolate_boiler_instance  # 使用全局变量

    if _chocolate_boiler_instance is not None: # 判断是否存在，如果存在，直接返回
        return _chocolate_boiler_instance
    else:
        # 如果不存在，创建一个新的
        _chocolate_boiler_instance = ChocolateBoiler()
        return _chocolate_boiler_instance
</code></pre>
<p>现在我们需要获取 <code>ChocolateBoiler</code> 实例的时候只需要调用 chocolate_boiler 方法获取实例即可保证同时只有一个 <code>ChocolateBoiler</code>实例。</p>
<p>这种保证 <code>ChocolateBoiler</code>类只有一个实例，并提供一个全局访问点的模式，就是<code>单例模式</code>。</p>
<h2 id="单例模式">单例模式</h2>
<h3 id="定义">定义</h3>
<blockquote>
<p><code>单例模式：</code>确保一个类只有一个实例，并提供一个全局访问点。</p>
</blockquote>
<ul>
<li>也就是说，我们使用单例模式要把某个类设计成自己管理的一个单独实例，同时也避免其他类再自行产生实例。并且只允许通过单例类获取单例的实例。</li>
<li>我们也提供对这个实例的全局访问点：当你需要实例时，像类查询，它会返回单个实例。</li>
</ul>
<h3 id="实现">实现</h3>
<p>python 实现单例模式有多种方案：</p>
<h4 id="使用-metaclass">使用 metaclass</h4>
<p>《python cookbook》提供了非常易用的 <code>Singleton</code> 类，只要继承它，就会成为单例。</p>
<pre><code class="language-python"># python 3 代码实现
class Singleton(type):

    def __init__(self, *args, **kwargs):
        self.__instance = None
        super().__init__(*args, **kwargs)

    def __call__(self, *args, **kwargs):
        if self.__instance is None:
            # 如果 __instance 不存在，创建新的实例
            self.__instance = super().__call__(*args, **kwargs)
            return self.__instance
        else:
            # 如果存在，直接返回
            return self.__instance


class Spam(metaclass=Singleton):

    def __init__(self):
        print('Creating Spam')

a = Spam()
b = Spam()

print(a is b)  # 这里输出为 True
</code></pre>
<p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类</li>
</ul>
<p>例子中我们构造了一个Singleton元类，并使用__call__方法使其能够模拟函数的行为。构造类 Spam 时，将其元类设为Singleton，那么创建类对象 Spam 时，行为发生如下：</p>
<p>Spam = Singleton(name,bases,class_dict)，Spam 其实为Singleton类的一个实例。</p>
<p>创建 Spam 的实例时，Spam()=Singleton(name,bases,class_dict)()=Singleton(name,bases,class_dict).<strong>call</strong>()，这样就将 Spam 的所有实例都指向了 Spam 的属性 __instance上。</p>
<h4 id="使用-new">使用 <strong>new</strong></h4>
<p>我们可以使用 <strong>new</strong> 来控制实例的创建过程，代码如下:</p>
<pre><code class="language-python">class Singleton(object):

    __instance = None

    def __new__(cls, *args, **kw):
        if not cls.__instance:
            cls.__instance = super().__new__(cls, *args, **kw)
        return cls.__instance

class Foo(Singleton):
    a = 1

one = Foo()
two = Foo()
assert one == two
assert one is two
assert id(one) == id(two)
</code></pre>
<p>通过 <strong>new</strong> 方法，将类的实例在创建的时候绑定到类属性 __instance 上。如果cls.__instance 为None，说明类还未实例化，实例化并将实例绑定到cls.<strong>instance 以后每次实例化的时候都返回第一次实例化创建的实例。注意从Singleton派生子类的时候，不要重载__new</strong>。</p>
<h4 id="使用装饰器">使用装饰器</h4>
<pre><code class="language-python">import functools

def singleton(cls):
    ''' Use class as singleton. '''
    # 首先将 __new__ 方法赋值给 __new_original__
    cls.__new_original__ = cls.__new__

    @functools.wraps(cls.__new__)
    def singleton_new(cls, *args, **kw):
        # 尝试从 __dict__ 取 __it__
        it =  cls.__dict__.get('__it__')
        if it is not None: # 如果有值，说明实例已经创建，返回实例
            return it
        # 如果实例不存在，使用 __new_original__ 创建实例，并将实例赋值给 __it__
        cls.__it__ = it = cls.__new_original__(cls, *args, **kw)
        it.__init_original__(*args, **kw)
        return it
    # class 将原有__new__ 方法用 singleton_new 替换
    cls.__new__ = singleton_new
    cls.__init_original__ = cls.__init__
    cls.__init__ = object.__init__

    return cls

#
# 使用示例
#
@singleton
class Foo:
    def __new__(cls):
        cls.x = 10
        return object.__new__(cls)

    def __init__(self):
        assert self.x == 10
        self.x = 15


assert Foo().x == 15
Foo().x = 20
assert Foo().x == 20
</code></pre>
<p>这种方法的内部实现和使用 <code>__new__</code> 类似：</p>
<ul>
<li>首先，将 <strong>new</strong> 方法赋值给 <strong>new_original</strong>，原有 <strong>new</strong> 方法用 singleton_new 替换，定义  <strong>init_original</strong> 并将 cls.<strong>init</strong> 赋值给 <strong>init_original</strong></li>
<li>在 singleton_new 方法内部，尝试从 <strong>dict</strong> 取 <strong>it</strong>（实例）</li>
<li>如果实例不存在，使用 <strong>new_original</strong> 创建实例，并将实例赋值给 <strong>it</strong>，然后返回实例</li>
</ul>
<h4 id="最简单的方式">最简单的方式</h4>
<p>将名字singleton绑定到实例上，singleton就是它自己类的唯一对象了。</p>
<pre><code class="language-python">class singleton(object):
    pass
singleton = singleton()
</code></pre>
<p><a href="https://github.com/gusibi/Metis/blob/master/apis/v1/schemas.py#L107">https://github.com/gusibi/Metis/blob/master/apis/v1/schemas.py#L107</a> 使用的就是这种方式，用来获取全局的 request</p>
<blockquote>
<p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。</p>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/6760685/creating-a-singleton-in-python#">Creating a singleton in Python</a></li>
<li><a href="https://www.cnblogs.com/linxiyue/p/3902256.html">Python单例模式</a></li>
<li><a href="https://stackoverflow.com/questions/674304/why-is-init-always-called-after-new">Why is <strong>init</strong>() always called after <strong>new</strong>()?</a></li>
</ul>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-建造者模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-builder/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-builder/">
        </link>
        <updated>2017-11-12T05:16:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>问题：</code>在上一篇<a href="https://mp.weixin.qq.com/s/mdulFWnTUiNvitNb2A5ZOQ">python设计模式：抽象工厂模式</a>中，我们尝试用抽象工厂模式规范化了 Pizza 原材料的供应以及 Pizza 的创建。但是我们忽略了一个问题，那就是每种 Pizza 的烘焙时间依赖于生面团的厚度和使用的配料，它们所需的时间是不一样的。那这时我们改如何处理呢？</p>
</blockquote>
<p>Pizza 的制作流程包括：准备（擀面皮、加佐料），然后烘烤、切片、装盒。这些有特定的顺序，不能错乱。</p>
<p>为了保证 生产 Pizza 的步骤不会出错，我们打算指派一个创建者，创建者用于控制 Pizza 的制作流程。</p>
<h2 id="创建-pizza-创建者">创建 Pizza 创建者</h2>
<p>首先我们定义一个 Pizza</p>
<pre><code class="language-python">class Pizza:

    def __init__(self, name):
        self.name = name
        self.dough = None
        self.sauce = None
        self.toppings = []

    def prepare_dough(self, dough):
        self.dough = dough
        print(self.dough)
        print('preparing the {} dough of your {}...'.format(self.dough, self))
        time.sleep(STEP_DELAY)
        print('Done with the {} dough'.format(self.dough))

    def __str__(self):
        return self.name
</code></pre>
<p>然后我们抽象出一个创建者：</p>
<pre><code class="language-python">class PizzaBuilder(object):

    name = None

    def __init__(self):
        self.progress = PIZZA_PROGRESS
        self.baking_time = 5

    def prepare_dough(self):
        raise NotImplementedError()

    def add_sauce(self):
        raise NotImplementedError()

    def add_topping(self):
        raise NotImplementedError()

    def bake(self):
        raise NotImplementedError()

    def cut(self):
        raise NotImplementedError()

    def box(self):
        raise NotImplementedError()

    @property
    def pizza(self):
        return Pizza(self.name)

</code></pre>
<h3 id="创建具体建造者">创建具体建造者</h3>
<pre><code class="language-python">class NYStyleCheeseBuilder(PizzaBuilder):

    name = 'NY Style Sauce and Cheese Pizza'

    def prepare_dough(self):
        self.progress = PIZZA_PROGRESS[0]
        self.pizza.prepare_dough('thin')

    def add_sauce(self):
        print('adding the tomato sauce to your pizza..')
        self.pizza.sauce = 'tomato'
        time.sleep(STEP_DELAY)
        print('done with the tomato sauce')

    def add_topping(self):
        print('adding the topping (grated reggiano cheese) to your pizza')
        self.pizza.toppings.append([&quot;Grated&quot;, &quot;Reggiano&quot;, &quot;Cheese&quot;])
        time.sleep(STEP_DELAY)
        print('done with the topping (grated reggiano cheese)')

    def bake(self):
        self.progress = PIZZA_PROGRESS[1]
        print('baking your pizza for {} seconds'.format(self.baking_time))
        time.sleep(self.baking_time)

    def cut(self):
        self.progress = PIZZA_PROGRESS[2]
        print(&quot;Cutting the pizza into diagonal slices&quot;)

    def box(self):
        self.progress = PIZZA_PROGRESS[3]
        print(&quot;Place pizza in official PizzaStore box&quot;)
</code></pre>
<h3 id="创建指挥者">创建指挥者</h3>
<pre><code class="language-python">class Waiter:
    # 指挥者

    def __init__(self):
        self.builder = None

    def construct_pizza(self, builder):
        self.builder = builder
        #  一旦我们有了一个 pizza，需要做一些准备（擀面皮、加佐料），然后烘烤、切片、装盒
        [step() for step in (builder.prepare_dough, builder.add_sauce,
                             builder.add_topping, builder.bake,
                             builder.cut, builder.box)]

    @property
    def pizza(self):
        return self.builder.pizza
</code></pre>
<p>完整代码参考：<a href="https://gist.github.com/gusibi/8f84ec29e6b9d42ad2de224dc731a6bf">python-design-patter-builder</a></p>
<p>从这个例子我可以看出，建造者模式包含如下角色：</p>
<ul>
<li>Builder：抽象建造者(Builder)（引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来返回产品。）</li>
<li>ConcreteBuilder：具体建造者(CommonBuilder、SuperBuilder)（实现抽象类的所有未实现的方法，具体来说一般是两项任务：组建产品；返回组建好的产品。）</li>
<li>Director：指挥者(Director)（负责调用适当的建造者来组建产品，指挥者类一般不与产品类发生依赖关系，与指挥者类直接交互的是建造者类。一般来说，指挥者类被用来封装程序中易变的部分。）</li>
<li>Product：产品角色(Role)</li>
</ul>
<h2 id="建造者模式">建造者模式</h2>
<p>造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。也可以说，每个产品的建造会遵循同样的流程，不过流程内的每一个步骤都不尽相同。</p>
<blockquote>
<p>建造者模式又可以称为生成器模式。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/XYQwmOYBhmsCsm3_Tg9UDoZD50j-X6CS9_ywASYrKXUKBhx5Qokk9Y7w3B9EDWbc" alt="建造者模式类图" loading="lazy"></figure>
<h3 id="建造者模式在软件中的应用">建造者模式在软件中的应用</h3>
<ul>
<li>
<p>django-widgy是一个 Django的第三方树编辑器扩展，可用作内容管理系统(Content Management System，CMS)。它包含一个网页构建器，用来创建具有不同布局的HTML页面。</p>
</li>
<li>
<p>django-query-builder是另一个基于建造者模式的Django第三方扩展库，该扩展库可用于动态 地构建SQL查询。使用它，我们能够控制一个查询的方方面面，并能创建不同种类的查询，从简 单的到非常复杂的都可以</p>
</li>
</ul>
<h2 id="建造者模式和工厂模式的区别">建造者模式和工厂模式的区别</h2>
<p>看上边这个例子，你可能会疑惑，为什么明明可以使用工厂方法模式可以解决的问题，要换成建造者模式呢？</p>
<p>通过代码可以看出，建造者模式和工厂方法模式最大的区别是，建造者模式多了一个指挥者的角色。<code>建造者负责创建复杂对象的各个组成部分。而指挥者使用一个建造者实例控制建造的过程</code>。</p>
<p><code>与工厂模式相比，建造者模式一般用来创建更为复杂的对象</code>，因为对象的创建过程更为复杂，因此将对象的创建过程独立出来组成一个新的类——指挥者类。</p>
<p>建造者模式通常用于补充工厂模式的不足，尤其是在如下场景中：</p>
<ul>
<li>要求一个对象有不同的表现，并且希望将对象的构造与表现解耦</li>
<li>要求在某个时间点创建对象，但在稍后的时间点再访问</li>
</ul>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.importnew.com/6841.html">讲故事，学（Java）设计模式—建造者模式</a></li>
<li><a href="http://www.hollischuang.com/archives/1477">设计模式（九）——建造者模式</a></li>
<li><a href="http://blog.csdn.net/zhengzhb/article/details/7375966">23种设计模式（4）：建造者模式</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-抽象工厂模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-abstract-factory/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-abstract-factory/">
        </link>
        <updated>2017-10-28T05:23:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>问题：</code>在上一篇 <a href="https://mp.weixin.qq.com/s/3HtKVCzPOmuk5uFpfoBsqA">python设计模式：工厂方法模式</a>我们尝试使用工厂方法创建了披萨店，现在为了保证披萨加盟店也能有良好的声誉，我们需要<code>统一原材料</code>，这个该如何做呢？</p>
</blockquote>
<p>为了确保每家加盟店都是用高质量的原材料，我们打算建造一加原材料工厂，并将原材料运送到各个加盟店。<code>每个加盟店会对原材料有不同的需求</code>，这里我们就可以用上上一篇介绍的工厂方法模式了。</p>
<ol>
<li>首先，建造原料工厂</li>
<li>然后建造区域的原料工厂（继承自原料工厂）</li>
<li>在区域的原料工厂中实现原料的创建方法。</li>
<li>将原料工厂组合起来，加入到 PizzaStore（上一篇中由工厂方法实现）代码中。</li>
</ol>
<p>按照这个思路，我们先创建原料工厂</p>
<h2 id="创建原料工厂">创建原料工厂</h2>
<p>创建原料工厂的实现代码如下：</p>
<pre><code class="language-python"># 原料
class FreshClams:

    def __str__(self):
        return 'Fresh Clams'

class MarinaraSauce:

    def __str__(self):
        return &quot;Marinara Sauce&quot;

class ThickCrustDough:

    def __str__(self):
        return &quot;Thick Crust Dough&quot;

class ReggianoCheese:

    def __str__(self):
        return &quot;Reggiano Cheese&quot;

class SlicedPepperoni:

    def __str__(self):
        return &quot;Sliced Pepperoni&quot;

class Garlic:

    def __str__(self):
        return &quot;Garlic&quot;

class Onion:

    def __str__(self):
        return &quot;Onion&quot;

class RedPepper:

    def __str__(self):
        return &quot;Red Pepper&quot;

# 披萨店原料工厂
class PizzaIngredientFactory:

    '''
    定义原料工厂
    '''

    def create_dough(self):
        raise NotImplementedError()

    def create_sauce(self):
        raise NotImplementedError()

    def create_cheese(self):
        raise NotImplementedError()

    def create_pepperoni(self):
        raise NotImplementedError()

    def create_clam(self):
        raise NotImplementedError()

    def create_veggies(self):
        raise NotImplementedError()
</code></pre>
<p>在这个工厂中，每个原料都是一个方法，原料的实现需要在具体的原料工厂中实现。<br>
这里每个原料方法没有做任何工作，只是抛出了<code>NotImplementedError</code> 这样做是为了强制子类重新实现相应的方法，如果不重新实现用到时就会抛出 NotImplementedError。</p>
<blockquote>
<p>当然也可以把 PizzaIngredientFactory 的 metaclass 设置成 abc.ABCMeta 这样的话，这个类就是真正的抽象基类。</p>
</blockquote>
<h3 id="创建纽约原料工厂">创建纽约原料工厂</h3>
<pre><code class="language-python">class NYPizzaIngredientFactory(PizzaIngredientFactory):
    def create_dough(self):
        print(&quot;Tossing %s&quot; % ThickCrustDough())
        return ThickCrustDough()

    def create_sauce(self):
        print(&quot;Adding %s...&quot; % MarinaraSauce())
        return MarinaraSauce()

    def create_cheese(self):
        print(&quot;Adding %s...&quot; % ReggianoCheese())
        return ReggianoCheese()

    def create_pepperoni(self):
        print(&quot;Adding %s...&quot; % SlicedPepperoni())
        return SlicedPepperoni()

    def create_clam(self):
        print(&quot;Adding %s...&quot; % FreshClams())
        return FreshClams()

    def create_veggies(self):
        # 蔬菜可能有多种，这里使用列表
        veggies = [Garlic(), Onion(), RedPepper()]
        for veggie in veggies:
            print(&quot;  %s&quot; % veggie)
        return veggies
</code></pre>
<p>对于原料家族的每一种原料，我们都提供了原料的纽约版本。</p>
<h3 id="重做-pizza-类">重做 Pizza 类</h3>
<pre><code class="language-python">class Pizza:
    
    name = None
    dough = None
    sauce = None
    cheese = None
    veggies = []
    pepperoni = None
    clam = None

    def prepare(self):
        raise NotImplementedError()

    def bake(self):
        print(&quot;Bake for 25 minutes at 350&quot;)

    def cut(self):
        print(&quot;Cutting the pizza into diagonal slices&quot;)

    def box(self):
        print(&quot;Place pizza in official PizzaStore box&quot;)

    def __str__(self):
        return self.name
</code></pre>
<p>上述代码和工厂方法的代码相比，只是把 <code>prepare()</code> 方法抽象出来，需要相应的 具体的 pizza 类来实现 <code>prepare()</code>。</p>
<h3 id="实现-芝加哥芝士披萨">实现 芝加哥芝士披萨</h3>
<pre><code class="language-python">class NYStyleCheesePizza(Pizza):

    def prepare(self):
        dough = self.ingredient_factory.create_dough()
        sauce = self.ingredient_factory.create_sauce()
        cheese = self.ingredient_factory.create_cheese()
        clam = self.ingredient_factory.create_clam()
        veggies = self.ingredient_factory.create_veggies()
</code></pre>
<p>从上述代码可以发现，Pizza 的原料也是从原料工厂直接获取，现在我们控制了原料。</p>
<blockquote>
<p>现在，Pizza 类不需要关心原料，只需要负责制作 pizza 就好。Pizza 和原料被解耦。</p>
</blockquote>
<h3 id="重新实现-pizzastore">重新实现 PizzaStore</h3>
<pre><code class="language-python">class PizzaStore:
    
    # 需要声明原料工厂
    ingredient_factory = None

    def create_pizza(self, pizza_type):
        # 每个需要子类实现的方法都会抛出NotImplementedError
        # 我们也可以把 PizzaStore 的 metaclass 设置成 abc.ABCMeta
        # 这样的话，这个类就是真正的抽象基类
        raise NotImplementedError()

    def order_pizza(self, pizza_type):  # 现在把 pizza 的类型传入 order_pizza()

        pizza = self.create_pizza(pizza_type)

        #  一旦我们有了一个 pizza，需要做一些准备（擀面皮、加佐料），然后烘烤、切片、装盒
        pizza.prepare()
        pizza.bake()
        pizza.cut()
        pizza.box()
        return pizza

class NYStylePizzStore(PizzaStore):
    
    # 将需要用到的原料工厂赋值给变量 ingredient_factory
    ingredient_factory = NYPizzaIngredientFactory()

    def create_pizza(self, pizza_type):
        # 根据 pizza 类型，我们实例化正确的具体类，然后将其赋值给 pizza 实例变量
        if pizza_type == 'cheese':
            pizza = NYStyleCheesePizza('NY Style Sauce and Cheese Pizza',
                                       self.ingredient_factory)
        elif pizza_type == 'clam':
            pizza = NYStyleClamPizza('NY Style Clam Pizza',
                                     self.ingredient_factory)
        return pizza
</code></pre>
<p>通过上述代码可以看到我们做了以下工作：</p>
<ol>
<li>引入了新类型的工厂（抽象工厂）来创建原料家族</li>
<li>通过抽象工厂提供的接口，我们创建了原料家族。</li>
<li>我们的原料代码从实际的 Pizza 工厂中成功解耦，可以应用到不同地方，响应的，我们可以方便的替换原料工厂来生产不同的 pizza。</li>
</ol>
<h3 id="来看下下单的代码">来看下下单的代码</h3>
<pre><code class="language-python">def main():
    nystore = NYStylePizzStore()
    pizza = nystore.order_pizza('cheese')
    print('*' * 10)
    print(&quot;goodspeed ordered a %s&quot; % pizza)
    print('*' * 10)
</code></pre>
<p>和工厂方法的代码相比，没有任何改变。</p>
<p><code>[源码参考python-design-patter-abstract-factory.py](https://gist.github.com/gusibi/5e0797f5458678322486f999ca87a180)</code></p>
<h2 id="抽象工厂模式">抽象工厂模式</h2>
<blockquote>
<p><code>抽象工厂模式</code>提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。</p>
</blockquote>
<p>也就是说，抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产出的具体产品是什么，这样依赖，客户就从具体产品中被解耦。</p>
<p>概括来说就是，抽象工厂是逻辑上的一组工厂方法，每个工厂方法各司其职，负责生产不同种类的对象。</p>
<p>我们来看下 抽象工厂模式 的类图：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/WXTX-aCeU8DaFhBXBHy1D8pqiLDUJggw-XqCGgYTmigQOdi8dly0Z-ujsJVgq7T5" alt="抽象工厂模式类图" loading="lazy"></figure>
<p>抽象工厂在 django_factory 中应用比较多，有兴趣的可以看下源码。</p>
<h2 id="抽象工厂模式-和-工厂方法模式-的比较">抽象工厂模式 和 工厂方法模式 的比较</h2>
<p>抽象工厂模式 和 工厂方法模式 都是负责创建对象，但</p>
<ul>
<li><code>工厂方法模式使用的是继承</code></li>
<li><code>抽象工厂模式使用的是对象的组合</code></li>
</ul>
<p>这也就意味着利用<code>工厂方法</code>创建对象需要扩展一个类，并覆盖它的工厂方法（负责将客户从具体类中解耦）。<br>
<code>抽象工厂</code>提供一个用来创建产品家族的抽象类型，这个类型的子类定义了产品被产生的方法。要想使用这个工厂（<code>NYPizzaIngredientFactory</code>），必须先实例化它（<code>ingredient_factory = NYPizzaIngredientFactory()</code>），然后将它传入一些针对抽象类型所写的代码中（也做到了将客户从具体产品中解耦），同时还把一群相关的产品集合起来。</p>
<h4 id="工厂方法模式和抽象工厂模式如何选择">工厂方法模式和抽象工厂模式如何选择</h4>
<p>开始的时候，可以选择工厂方法模式，因为他很简单（只需要继承，并实现工厂方法即可）。如果后来发现应用需要用到多个工厂方法，那么是时候使用<code>抽象工厂模式</code>了，它可以把相关的工厂方法组合起来。</p>
<h3 id="抽象工厂模式优点和缺点">抽象工厂模式优点和缺点</h3>
<h4 id="优点">优点</h4>
<ul>
<li>可以将客户从具体产品中解耦</li>
<li>抽象工厂可以让对象创建更容易被追踪</li>
<li>同时将对象创建与使用解耦</li>
<li>也可以优化内存占用提升应用性能</li>
</ul>
<h4 id="缺点">缺点</h4>
<p>因为抽象工厂是将一组相关的产品集合起来，如果需要扩展这组产品，就需要<code>改变接口</code>，而改变接口则意味着需要改变<code>每个子类的接口</code></p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/3HtKVCzPOmuk5uFpfoBsqA">python设计模式：工厂方法模式</a></li>
<li><a href="https://gist.github.com/gusibi/5e0797f5458678322486f999ca87a180">python-design-patter-abstract-factory.py https://gist.github.com/gusibi/5e0797f5458678322486f999ca87a180</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用腾讯云配置小程序Python开发环境]]></title>
        <id>http://blog.gusibi.site/post/wxapp-server-config/</id>
        <link href="http://blog.gusibi.site/post/wxapp-server-config/">
        </link>
        <updated>2017-10-21T06:11:35.000Z</updated>
        <content type="html"><![CDATA[<p>最近做小程序服务器的配置，这一篇是服务器配置的记录，方便以后安装配置。</p>
<h2 id="购买服务器">购买服务器</h2>
<p>之所以选腾讯云的原因很简单，那就是便宜，<code>选用成都区</code>，最低配置每月只需29￥。<br>
在 <a href="https://cloud.tencent.com">腾讯云</a> 官网注册登录就可以直接购买服务器了。<br>
服务器系统我选择的是 ubuntu。</p>
<h2 id="服务器配置">服务器配置</h2>
<p>启动服务后使用新用户（此步骤不是必须）。</p>
<h3 id="新建用户">新建用户</h3>
<p>首先确认使用的是 root 用户登录如果不是使用以下命令切换</p>
<pre><code class="language-bash">sudo su
</code></pre>
<p>使用 <code>adduser</code> 命令创建用户</p>
<pre><code class="language-bash">adduser username # username替换为你自己的用户名
</code></pre>
<p>接下来的步骤会让你输入密码和个人信息，自己设置就好。</p>
<p>使用<code>usermod</code> 命令将新建的用户添加到 <code>sudo</code> 组。</p>
<pre><code class="language-go">usermod -aG sudo username
</code></pre>
<h3 id="关闭ssh密码登录使用密钥登录">关闭ssh密码登录使用密钥登录</h3>
<h4 id="安装openssh">安装openssh</h4>
<p>因为是新系统，先执行一下 apt-get update</p>
<pre><code class="language-bash">sudo apt-get update
sudo apt-get install openssh-server
</code></pre>
<h4 id="启动ssh服务">启动ssh服务</h4>
<p>可以通过sudo su命令来临时切换到root权限(不是所有的账号都可以切换到root权限,只有在/etc/sudoers文件中符合规则的用户能切换root身份)</p>
<pre><code class="language-bash">sudo su
/etc/init.d/ssh start
</code></pre>
<h4 id="使用密钥登录">使用密钥登录</h4>
<ul>
<li>服务器端生成密钥对：</li>
</ul>
<pre><code class="language-bash">cd /home/gs # 打开新建的用户目录
mkdir .ssh
cd .ssh
ssh-keygen -b 2048 -t rsa
</code></pre>
<blockquote>
<p>ssh-keygen的基本用法：<br>
-b后面是指定加密后的字符串长度<br>
-t后面是指定加密算法，常用的加密算法有rsa,dsa等</p>
</blockquote>
<p>默认生成的文件如下：</p>
<pre><code class="language-bash">id_rsa.pub  # 公钥文件
id_rsa      # 私钥文件
</code></pre>
<ul>
<li>新建 authorized_keys 文件</li>
</ul>
<p>将本地机器的 id_rsa.pub 文件内容复制到 authorized_keys 文件</p>
<ul>
<li>测试使用公钥是否可以登录</li>
</ul>
<pre><code class="language-bash">ssh name@host  # name 是机器的用户名 host 是机器的地址
</code></pre>
<h4 id="关闭ssh密码登录">关闭ssh密码登录</h4>
<p>确认可以通过私钥进行登录后，关闭ssh密码登录。</p>
<pre><code class="language-bash">sudo su
vim /etc/ssh/sshd_config
</code></pre>
<p>将 PasswordAuthentication yes修改成PasswordAuthentication no</p>
<p>重启系统</p>
<pre><code class="language-bash">sudo su
reboot
</code></pre>
<h2 id="搭建开发环境">搭建开发环境</h2>
<h3 id="安装-zsh">安装 zsh</h3>
<p>在终端中输入下面命令进行安装：</p>
<pre><code class="language-bash">sudo apt-get install zsh
</code></pre>
<p>输入下面命令进行替换zsh替换为你的默认shell：</p>
<pre><code class="language-bash">chsh -s /bin/zsh
</code></pre>
<p>重启终端使用 zsh</p>
<h3 id="安装oh-my-zsh">安装oh-my-zsh</h3>
<ul>
<li>通过curl安装</li>
</ul>
<pre><code class="language-bash">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
</code></pre>
<ul>
<li>通过wget安装</li>
</ul>
<pre><code class="language-bash">wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh
</code></pre>
<h3 id="安装-pip">安装 pip</h3>
<pre><code class="language-bash">sudo apt-get install python-pip  # 安装 pip
pip install --upgrade pip
sudo apt-get install python3-pip  # 安装 pip3
pip3 install --upgrade pip
</code></pre>
<h3 id="安装-virtualenv">安装 virtualenv</h3>
<p>因为我使用 python3 作为开发环境，所以这里使用 <code>pip3</code></p>
<pre><code class="language-bash">sudo pip3 install virtualenv
sudo pip3 install virtualenvwrapper
</code></pre>
<p>在 .zshrc 添加以下内容</p>
<pre><code class="language-bash">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
</code></pre>
<p>然后执行命令：</p>
<pre><code class="language-bash">source .zshrc
</code></pre>
<p>现在可以输入 <code>workon</code> 测试 virtualenvwrapper 是否已经安装成功。</p>
<h4 id="创建虚拟环境">创建虚拟环境</h4>
<pre><code class="language-bash">mkvirtualenv py3 -p python3  # -p 参数指定 python 版本
</code></pre>
<p>测试虚拟环境</p>
<pre><code class="language-bash">workon py3
</code></pre>
<h3 id="安装-ipython">安装 ipython</h3>
<p>首先进入 py3 虚拟环境</p>
<pre><code class="language-bash">workon py3
</code></pre>
<p>使用 pip 安装 ipython</p>
<pre><code class="language-bash">pip install ipython # 安装 ipython 
</code></pre>
<h3 id="配置-vim">配置 vim</h3>
<p>python vim 配置使用的是 <a href="https://github.com/gusibi/py-vim">py-vim</a></p>
<p>需要先安装 ctags和 cmake</p>
<pre><code class="language-bash">sudo apt-get install ctags
sudo apt-get install cmake
</code></pre>
<p>然后将 py-vim clone 到服务器</p>
<pre><code class="language-bash">git clone https://github.com/gusibi/py-vim
cd py-vim
sh setup.sh 
</code></pre>
<h2 id="使用-caddy-配置-https">使用 Caddy 配置 https</h2>
<blockquote>
<p>Caddy是一种新的Web服务器，由 go 编写，默认使用 https 协议。caddy 配置简单，容易上手。</p>
</blockquote>
<h3 id="安装-caddy-二进制文件">安装 caddy 二进制文件</h3>
<p>Caddy项目提供了一个安装脚本，可以检索和安装Caddy服务器的二进制文件。 可以执行以下命令直接安装：</p>
<pre><code class="language-bash">curl -s https://getcaddy.com | bash
</code></pre>
<p>在安装过程中，脚本将使用sudo获取管理权限，以便将Caddy文件放在系统范围的目录中，因此可能会提示您输入密码。</p>
<h3 id="配置-caddy-必要的目录">配置 caddy 必要的目录</h3>
<p>Caddy的自动TLS支持和unit文件需要特定的目录和文件权限。 我们将在这一步中创建它们。</p>
<p>首先，创建一个目录，该目录将容纳主要的配置文件Caddyfile 。</p>
<pre><code class="language-bash"># 创建一个目录，该目录将容纳主要的配置文件Caddyfile
sudo mkdir /etc/caddy
# 将此目录的所有者更改为root用户及其组到www-data ，以便Caddy可以读取它
sudo chown -R root:www-data /etc/caddy
# 创建一个空的Caddyfile
sudo touch /etc/caddy/Caddyfile
# 在/etc/ssl创建另一个目录用来存储自动获得的SSL私钥和证书
sudo mkdir /etc/ssl/caddy
# 将此目录的所有者更改为root用户及其组到www-data
sudo chown -R www-data:root /etc/ssl/caddy
# 确保没有人可以通过删除其他人的所有访问权限来读取这些文件。
sudo chmod 0770 /etc/ssl/caddy
# 创建的最终目录是网站的发布目录
sudo mkdir /var/www
# 该目录应由www-data完全拥有。
sudo chown www-data:www-data /var/www
# 创建日志目录
sudo mkdir /var/log/caddy
# 将此目录的所有者更改为root用户及其组到www-data
sudo chown -R www-data:root /var/log/caddy
</code></pre>
<h3 id="将-caddy-配置为系统服务">将 caddy 配置为系统服务</h3>
<p>从官方的Caddy存储库下载文件。 curl命令的附加-o参数会将该文件保存在/etc/systemd/system/目录中，并使其对systemd可见。</p>
<pre><code class="language-bash">sudo curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service
</code></pre>
<p>reload 系统服务</p>
<pre><code class="language-bash">sudo systemctl daemon-reload
</code></pre>
<p>将caddy 设置为开机启动</p>
<pre><code class="language-bash">sudo systemctl enable caddy.service
</code></pre>
<p>检查 caddy 服务是否已正式加载</p>
<pre><code class="language-bash">sudo systemctl status caddy.service
</code></pre>
<h3 id="允许http和https连接">允许HTTP和HTTPS连接</h3>
<p>Caddy使用HTTP和HTTPS协议提供网站，因此我们需要允许访问相应的端口，以便使网路可以从网路获取</p>
<pre><code class="language-bash">sudo ufw allow http
sudo ufw allow https
</code></pre>
<p>现在修改caddy 配置 /etc/caddy/Caddyfile</p>
<pre><code class="language-bash">https://your.domain {  # 启用 https
    gzip
    log /var/log/caddy/access.log  # 指定日志目录
    proxy / http://127.0.0.1:8888 {
        header_upstream Host {host}
        header_upstream X-Real-IP {remote}
        header_upstream X-Forwarded-For {remote}
        header_upstream X-Forwarded-Proto {scheme}
    }
}
</code></pre>
<p>保存文件，启动 caddy</p>
<pre><code class="language-bash">sudo systemctl start caddy    # 启动 caddy
sudo systemctl restart caddy  # 重启 caddy
sudo systemctl stop caddy     # 关闭 caddy
</code></pre>
<p>现在启动服务，访问 <code>https://your.domain</code> 应该就能看到数据。<br>
日志文件在 <code>/var/log/caddy/</code> 目录下。</p>
<h2 id="总结">总结</h2>
<p>小程序开发需要 https，这里我们使用了 caddy 作为 web 服务器。服务器配置好后可以直接存储为镜像，以后可以直接从镜像开启服务，就不再需要配置环境。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart">How To Create a Sudo User on Ubuntu </a></li>
<li><a href="http://blog.csdn.net/ii1245712564/article/details/45843657">zsh安装和配置</a></li>
<li><a href="https://virtualenvwrapper.readthedocs.io/en/latest/">virtualenvwrapper</a></li>
<li><a href="https://github.com/gusibi/py-vim">py-vim</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">Install MongoDB Community Edition on Ubuntu</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26839519">使用 Caddy 替代 Nginx，全站升级 https，配置更加简单</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-host-a-website-with-caddy-on-ubuntu-16-04">how-to-host-a-website-with-caddy-on-ubuntu-16-04</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python设计模式-观察者模式]]></title>
        <id>http://blog.gusibi.site/post/python-design-pattern-observer/</id>
        <link href="http://blog.gusibi.site/post/python-design-pattern-observer/">
        </link>
        <updated>2017-09-24T06:29:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>题目</code>：现在你有一个数字，默认格式化程序是以十进制格式展示此数值，但需要提供一个功能，这个程序要支持添加/注册更多的格式化程序（比如：添加一个十六进制格式化程序和一个二进制格式化程序）。每次数值更新时，已注册的程序就会收到通知，并显示更新后的值。</p>
</blockquote>
<p>我们看下需求：</p>
<ol>
<li>NumberFormatter 有一个 number 属性</li>
<li>当 number 值修改时，相关的格式化方式展示结果要改变</li>
<li>此系统必须可扩展已适应其他格式化方式的使用。</li>
</ol>
<p>一个错误的实现可能是这样的：</p>
<pre><code class="language-python">class NumberFormatter(object):
    def __init__(self, number):
        self.number = number
        
    def show_data(self):
        self.default_formatter()
        self.hex_formatter()
        self.binary_formatter()
        
    def default_formatter(self):
        pass
        
    def hex_formatter(self):
        pass
        
    def binary_formatter(self):
        pass
</code></pre>
<p>我们可以这么使用：</p>
<pre><code class="language-python">number = NumberFormatter(10)
number.show_data()
</code></pre>
<p>但是这样会有一个问题：<code>这种针对实现的编程会导致我们在增加或者删除需要格式化方式时必须修改代码。</code>比如我们现在不再需要十六进制数字格式的显示，就需要把 <code>hex_formatter</code> 相关的代码删除或者注释掉。</p>
<p>要解决这个问题，就可以用到我们这次要介绍的<code>观察者模式</code>了。</p>
<h2 id="什么是观察者模式">什么是观察者模式</h2>
<h3 id="认识观察者模式">认识观察者模式</h3>
<p>我们先看看报纸和杂志的订阅是怎么回事：</p>
<ol>
<li>报社的业务就是出版报纸</li>
<li>向某家报社订阅报纸，只要他们有新报纸，就会给你送来，只要你是他们的订户，你就会一直受到新报纸。</li>
<li>当你不再想看的时候，取消订阅，他们就不会在送新报纸给你</li>
<li>只要报社还在运营，就会一直有人向他们订阅报纸或取消订阅。</li>
</ol>
<p>我们用图表示一下，这里<code>出版者</code> 改称为<code>主题(Subject)</code>，<code>订阅者</code>改称为<code>观察者(Observer)</code>：</p>
<p><code>1.</code> 开始的时候，鸭子对象不是观察者<br>
<img src="http://media.gusibi.mobi/FfEgRxfZ2c7lzOINxR1JJ9uarNvN0AjO15HBfKxEBoVdr4GANZIFjFmAwq6L9fM-" alt="" loading="lazy"><br>
<code>2.</code> 鸭子对象过来告诉主题，它想当一个观察者（鸭子其实想说的是：我对你的数据改变感兴趣，一有变化请通知我）<br>
<img src="http://media.gusibi.mobi/2KE6cyN1-K24iLlk-l_WWxjAC894wqhqDWMrfk780kRArv1QQMD7AU66WabDnHZ4" alt="" loading="lazy"><br>
<code>3.</code> 鸭子对象已经是观察者了（鸭子静候通知，一旦接到通知，就会得到一个整数）。<br>
<img src="http://media.gusibi.mobi/si9qkWv1-wgocRkh8v1gXPbZJlfqpJCsYqXZaQX-8WnY-DbTHGqv_eVLGyy3yfab" alt="" loading="lazy"><br>
<code>4.</code> 主题有了新的数据（现在鸭子和其他所有观察者都会受到通知：<code>主题已经改变</code>）<br>
<img src="http://media.gusibi.mobi/9HhHmLzCUctRb46Te5j1A3OUosE-1f_qp37gC7pLJfQI-OFdxpFgosEfIjV9K8I4" alt="" loading="lazy"><br>
<code>5.</code> 老鼠对象要求从观察者中把自己除名（老鼠已经观察次主题太久，决定不再当观察者了）。<br>
<img src="http://media.gusibi.mobi/3crIE4jTaaDE3bUWrp3tHL0jb2cKI0pQhaZeJPKh0HTYl_lY7D30uTeaybry0bRZ" alt="" loading="lazy"><br>
<code>6.</code> 老鼠离开了（主题知道老鼠的请求后，把它从观察者中移除了）。<br>
<img src="http://media.gusibi.mobi/lnPq4IXxYH1fZURcPK2SiLXXbndcgA3f31F9UZ6BSi9QyWO5ZrkswwZ-cxI9_xL5" alt="" loading="lazy"><br>
<code>7.</code> 主题有了一个新的整数（除了老鼠之外，每个观察者都会收到通知，如果老鼠又想当观察者了，它还可以再回来）<br>
<img src="http://media.gusibi.mobi/_PeyLBIegB7aBqh7oLad5fUs8l1ANeqEEd1zEBkcrY02cN768EIDD33rL75YopbU" alt="" loading="lazy"></p>
<h3 id="定义观察者模式">定义观察者模式</h3>
<p>当你试图勾勒观察者模式时，可以利用报纸订阅服务，以及出版这和订阅者比你这一切。在程序设计中，观察者模式通常被定义为：</p>
<blockquote>
<p><code>观察者模式</code>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态是，它的所有依赖者都会收到通知并自动更新。</p>
</blockquote>
<p>我们和之前的例子做个对比：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/5ictzh2edjji9GITg0JJXtR9bLqEmPN6XDytKrevXzKKdhtpLbZLRFElxRR3GOo3" alt="" loading="lazy"></figure>
<p>主题和观察者定义了一对多的关系。观察者依赖于此主题，只要主题状态一有变化，观察者就会被通知。根据通知的风格，观察者可能因此新值而更新。</p>
<p><code>现在你可能有疑问，这和一对多的关系有何关联？</code></p>
<blockquote>
<p>利用观察者模式，主题是具有状态的对象，并且可以控制这些状态。也就是说，有<code>一个</code>具有状态的主题。另一方面，观察者使用这些状态，虽然这些状态不属于他们。有许多观察者，依赖主题告诉他们状态何时改变了。这就产生了一个关系：<code>一个主题对多个观察者的关系</code>。</p>
</blockquote>
<p><code>观察者和主题之间的依赖关系是如何产生的？</code></p>
<blockquote>
<p>主题是真正拥有数据的人，观察者是主题的依赖者，在数据变化时更新，这样比起让许多对象控制同一份数据来，可以得到更干净的 OO 设计。</p>
</blockquote>
<h3 id="观察者模式的应用案例">观察者模式的应用案例</h3>
<p>观察者模式在实际应用中有许多的案例，比如信息的聚合。无论格式为 RSS、Atom 还是其它，思想多事一样的：你追随某个信息源，当它每次更新时，你都会收到关于更新的通知。<br>
事件驱动系统是一个可以使用观察者模式的例子。在这种系统中，监听者被用于监听特定的事件。监听者的事件被创建出来时就会触发它们。这个事件可以使键入某个特定的键、移动鼠标或者其他。事件扮演发布者的角色，监听者则扮演观察者的角色。</p>
<h2 id="python-实现">Python 实现</h2>
<p>现在，让我们回到文章开始的那个问题。</p>
<p>这里我们可以实现一个基类 Publisher，包括添加、删除及通知观察者这些公用功能。DefaultFormatter 类继承自 Publisher，并添加格式化程序特定的功能。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/pRyxskK89xODXjfsCdPVnnPiJhyP2iyYmYHryZb3taKTnpZxtZZ8TINFsCroP0Y_" alt="文章开头问题的类图" loading="lazy"></figure>
<p>Publisher 的代码如下：</p>
<pre><code class="language-python">import itertools

'''
观察者模式实现
'''

class Publisher:

    def __init__(self):
        self.observers = set()

    def add(self, observer, *observers):
        for observer in itertools.chain((observer, ), observers):
            self.observers.add(observer)
            observer.update(self)
        else:
            print('Failed to add: {}'.format(observer))

    def remove(self, observer):
        try:
            self.observers.discard(observer)
        except ValueError:
            print('Failed to remove: {}'.format(observer))

    def notify(self):
        [observer.update(self) for observer in self.observers]
</code></pre>
<p>现在，打算使用观察者模式的模型或类都应该继承 Publisher 类。该类用 set 来保存观察者对象。当用户向 Publisher 注册新的观察者对象时，观察者的 update() 方法会执行，这使得它能够用模型当前的状态初始化自己。模型状态发生变化时，应该调用继承而来的 notify() 方法，这样的话，就会执行每个观察者对象的 update() 方法，以确保他们都能反映出模型的最新状态。</p>
<blockquote>
<p><code>add()</code> 方法的写法值得注意，这里是为了支持可以接受一个或多个观察者对象。这里我们采用了<code>itertools.chain()</code> 方法，它可以接受任意数量的  <code>iterable</code>，并返回单个<code>iterable</code>。遍历这个 iterable，也就相当于依次遍历参数里的那些 iterable。</p>
</blockquote>
<p>接下来是 <code>DefaultFomatter</code> 类。<code>__init__()</code> 做的第一件事就是调用基类的<code>__init__()</code> 方法，因为这在 Python 中没法自动完成。<code>DefaultFormatter</code> 实例有自己的名字，这样便于我们跟踪其状态。对于<code>_data</code> 变量，我们使用了名称改编来声明不能直接访问该变量。<code>DefaultFormatter</code> 把<code>_data</code> 变量用作一个整数，默认值为0。</p>
<pre><code class="language-python">class DefaultFormatter(Publisher):

    def __init__(self, name):
        Publisher.__init__(self)
        self.name = name
        self._data = 0

    def __str__(self):
        return &quot;{}: '{}' has data = {}&quot;.format(type(self).__name__, self.name, self._data)

    @property
    def data(self):
        return self._data

    @data.setter
    def data(self, new_value):
        try:
            self._data = int(new_value)
        except ValueError as e:
            print('Error: {}'.format(e))
        else:
            self.notify()
</code></pre>
<ul>
<li>
<p><code>__str__()</code> 方法返回关于发布者名称和 <code>_data</code> 值的信息。type(self).__name 是一种获取类名的方便技巧，避免硬编码类名。（不过这会降低代码的可读性）</p>
</li>
<li>
<p><code>data()</code> 方法有两个，第一个使用了 <code>@property</code> 装饰器来提供_data 变量的读访问方式。这样，我们就能使用 <code>object.data</code> 来代替 <code>object._data</code>。第二个 data() 方法使用了<code>@setter</code> 装饰器，改装饰器会在每次使用赋值操作符(=)为<code>_data</code> 变量赋值时被调用。该方法也会尝试把新值强制转换为一个整数，并在转换失败时处理异常。</p>
</li>
</ul>
<p>接下来是添加观察者。<code>HexFormatter</code> 和 <code>BinaryFormatter</code> 功能基本相似。唯一的不同在于如何格式化从发布者那获取到的数据值，即十六进制和二进制格式化。</p>
<pre><code class="language-python">class HexFormatter:

    def update(self, publisher):
        print(&quot;{}: '{}' has now hex data= {}&quot;.format(type(self).__name__,
                                                     publisher.name, hex(publisher.data)))

class BinaryFormatter:

    def update(self, publisher):
        print(&quot;{}: '{}' has now bin data= {}&quot;.format(type(self).__name__,
                                                     publisher.name, bin(publisher.data)))
</code></pre>
<p>接下来我们添加一下测试数据，运行代码观察一下结果：</p>
<pre><code class="language-python">def main():
    df = DefaultFormatter('test1')
    print(df)

    print()
    hf = HexFormatter()
    df.add(hf)
    df.data = 3
    print(df)

    print()
    bf = BinaryFormatter()
    df.add(bf)
    df.data = 21
    print(df)

    print()
    df.remove(hf)
    df.data = 40
    print(df)

    print()
    df.remove(hf)
    df.add(bf)

    df.data = 'hello'
    print(df)

    print()
    df.data = 4.2
    print(df)


if __name__ == '__main__':
    main()

</code></pre>
<p>完整代码参考：<a href="https://gist.github.com/gusibi/93a000c79f3d943dd58dcd39c4b547f1">https://gist.github.com/gusibi/93a000c79f3d943dd58dcd39c4b547f1</a></p>
<p>运行代码：</p>
<pre><code class="language-shell">python observer.py    
## output
DefaultFormatter: 'test1' has data = 0

HexFormatter: 'test1' has now hex data= 0x0
Failed to add: &lt;__main__.HexFormatter object at 0x10277da20&gt;
HexFormatter: 'test1' has now hex data= 0x3
DefaultFormatter: 'test1' has data = 3

BinaryFormatter: 'test1' has now bin data= 0b11
Failed to add: &lt;__main__.BinaryFormatter object at 0x10277da90&gt;
BinaryFormatter: 'test1' has now bin data= 0b10101
HexFormatter: 'test1' has now hex data= 0x15
DefaultFormatter: 'test1' has data = 21

BinaryFormatter: 'test1' has now bin data= 0b101000
DefaultFormatter: 'test1' has data = 40

BinaryFormatter: 'test1' has now bin data= 0b101000
Failed to add: &lt;__main__.BinaryFormatter object at 0x10277da90&gt;
Error: invalid literal for int() with base 10: 'hello'
DefaultFormatter: 'test1' has data = 40

BinaryFormatter: 'test1' has now bin data= 0b100
DefaultFormatter: 'test1' has data = 4

</code></pre>
<p>在输出中我们看到，添加额外的观察者，就会出现更多的输出；一个观察者被删除后就不再被通知到。</p>
<h2 id="总结">总结</h2>
<p>这一篇我们介绍了观察者模式的原理以及 Python 代码的实现。在实际的项目开发中，观察者模式广泛的运用于 GUI 编程，而且在仿真及服务器等其他时间处理架构中也能用到，比如：<code>数据库触发器</code>、<code>Django 的信号系统</code>、<code>Qt GUI 应用程序框架的信号（signal）与槽（slot）机智</code>以及<code>WebSocket</code>的许多用例。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.giantflyingsaucer.com/blog/?p=5117">The 10 Minute Guide to the Observer Pattern in Python：http://www.giantflyingsaucer.com/blog/?p=5117</a></li>
<li><a href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Observer.html">Observer：http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Observer.html</a></li>
</ul>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis 学习笔记]]></title>
        <id>http://blog.gusibi.site/post/redis-note/</id>
        <link href="http://blog.gusibi.site/post/redis-note/">
        </link>
        <updated>2017-09-17T06:41:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这篇 redis 学习笔记主要介绍 redis 的数据结构和数据类型，并讨论数据结构的选择以及应用场景的优化。</p>
</blockquote>
<h3 id="redis-是什么">redis 是什么</h3>
<blockquote>
<p>Redis是一种面向“键/值”对类型数据的分布式NoSQL数据库系统，特点是高性能，持久存储，适应高并发的应用场景。</p>
</blockquote>
<h3 id="redis-数据结构">Redis 数据结构</h3>
<ul>
<li>动态字符串 (Sds)</li>
<li>双端列表   (LINKEDLIST)</li>
<li>字典</li>
<li>跳跃表    (SKIPLIST)</li>
<li>整数集合  (INTSET)</li>
<li>压缩列表  (ZIPLIST)</li>
</ul>
<p>HUGOMORE42</p>
<h4 id="动态字符串"><a href="http://origin.redisbook.com/internal-datastruct/sds.html">动态字符串</a></h4>
<p>Sds (Simple Dynamic String,简单动态字符串)是 Redis 底层所使用的字符串表示,它被用 在几乎所有的 Redis 模块中</p>
<p>Redis 是一个键值对数据库(key-value DB),数据库的值可以是字符串、集合、列表等多种类 型的对象,而数据库的键则总是字符串对象</p>
<p>在 Redis 中, 一个字符串对象除了可以保存字符串值之外,还可以保存 long 类型的值当字符串对象保存的是字符串时,它包含的才是 sds 值,否则的话,它就 是一个 long 类型的值</p>
<h5 id="动态字符串主要有两个作用">动态字符串主要有两个作用:</h5>
<ol>
<li>实现字符串对象(StringObject)</li>
<li>在 Redis 程序内部用作 char * 类型的替代品</li>
</ol>
<h4 id="双端列表-httporiginredisbookcominternal-datastructadlisthtml">[双端列表] (http://origin.redisbook.com/internal-datastruct/adlist.html)</h4>
<p>双端链表还是 Redis 列表类型的底层实现之一，当对列表类型的键进行操作——比如执行 RPUSH 、LPOP 或 LLEN 等命令时,程序在底层操作的可能就是双端链表</p>
<h5 id="双端链表主要有两个作用">双端链表主要有两个作用:</h5>
<ul>
<li>作为 Redis 列表类型的底层实现之一;</li>
<li>作为通用数据结构,被其他功能模块所使用;</li>
</ul>
<h4 id="字典"><a href="http://origin.redisbook.com/internal-datastruct/dict.html">字典</a></h4>
<p>字典(dictionary),又名映射(map)或关联数组(associative array), 它是一种抽象数据结 构,由一集键值对(key-value pairs)组成,各个键值对的键各不相同,程序可以将新的键值对 添加到字典中,或者基于键进行查找、更新或删除等操作</p>
<h5 id="字典的应用">字典的应用</h5>
<ol>
<li>实现数据库键空间(key space);</li>
<li>用作 Hash 类型键的其中一种底层实现;</li>
</ol>
<blockquote>
<p>Redis 是一个键值对数据库,数据库中的键值对就由字典保存:每个数据库都有一个与之相对应的字典,这个字典被称之为键空间(key space)。</p>
</blockquote>
<p>Redis 的 Hash 类型键使用<strong>字典和压缩列表</strong>两种数据结构作为底层实现</p>
<h4 id="跳跃表"><a href="http://origin.redisbook.com/internal-datastruct/skiplist.html">跳跃表</a></h4>
<p>跳跃表(skiplist)是一种随机化的数据,由 William Pugh 在论文《Skip lists: a probabilistic alternative to balanced trees》中提出,这种数据结构以有序的方式在层次化的链表中保存元素,它的效率可以和平衡树媲美——查找、删除、添加等操作都可以在对数期望时间下完成, 并且比起平衡树来说,跳跃表的实现要简单直观得多</p>
<p>和字典、链表或者字符串这几种在 Redis 中大量使用的数据结构不同,跳跃表在 Redis 的唯一作用,就是实现有序集数据类型<br>
跳跃表将指向有序集的 score 值和 member 域的指针作为元素,并以 score 值为索引,对有序集元素进行排序。</p>
<h4 id="整数集合"><a href="http://origin.redisbook.com/compress-datastruct/intset.html">整数集合</a></h4>
<p>整数集合(intset)用于有序、无重复地保存多个整数值,它会根据元素的值,自动选择该用什么长度的整数类型来保存元素</p>
<p>Intset 是集合键的底层实现之一,如果一个集合:</p>
<ol>
<li>只保存着整数元素;</li>
<li>元素的数量不多;<br>
那么 Redis 就会使用 intset 来保存集合元素。</li>
</ol>
<h4 id="压缩列表"><a href="http://origin.redisbook.com/compress-datastruct/ziplist.html">压缩列表</a></h4>
<p>Ziplist 是由一系列特殊编码的内存块构成的列表,一个 ziplist 可以包含多个节点(entry),每个节点可以保存一个长度受限的字符数组(不以 \0 结尾的 char 数组)或者整数</p>
<h3 id="redis-数据类型">Redis 数据类型</h3>
<h4 id="redisobject"><a href="http://origin.redisbook.com/datatype/object.html#redisobject-redis">RedisObject</a></h4>
<p>redisObject 是 Redis 类型系统的核心,数据库中的每个键、值,以及 Redis 本身处理的参数,都表示为这种数据类型</p>
<p>redisObject 的定义位于 redis.h :</p>
<pre><code class="language-c">/*
* Redis 对象
*/
typedef struct redisObject {
    // 类型
    unsigned type:4;
    // 对齐位
    unsigned notused:2;
    // 编码方式
    unsigned encoding:4;
    // LRU 时间(相对于 server.lruclock)
    unsigned lru:22;
    // 引用计数
    int refcount;
    // 指向对象的值
    void *ptr;
} robj;
</code></pre>
<p>type 、encoding 和 ptr 是最重要的三个属性。</p>
<p>type 记录了对象所保存的值的类型,它的值可能是以下常量的其中一个</p>
<pre><code class="language-c">/*
* 对象类型
*/
#define REDIS_STRING 0 // 字符串
#define REDIS_LIST 1   // 列表
#define REDIS_SET 2    // 集合
#define REDIS_ZSET 3   // 有序集
#define REDIS_HASH 4   // 哈希表
</code></pre>
<p>encoding 记录了对象所保存的值的编码,它的值可能是以下常量的其中一个</p>
<pre><code class="language-c">/*
* 对象编码
*/
#define REDIS_ENCODING_RAW 0    // 编码为字符串
#define REDIS_ENCODING_INT 1    // 编码为整数
#define REDIS_ENCODING_HT 2     // 编码为哈希表
#define REDIS_ENCODING_ZIPMAP 3 // 编码为 zipmap(2.6 后不再使用)
#define REDIS_ENCODING_LINKEDLIST 4 // 编码为双端链表
#define REDIS_ENCODING_ZIPLIST 5    // 编码为压缩列表
#define REDIS_ENCODING_INTSET 6     // 编码为整数集合
#define REDIS_ENCODING_SKIPLIST 7    // 编码为跳跃表
</code></pre>
<p>ptr 是一个指针,指向实际保存值的数据结构,这个数据结构由 type 属性和 encoding 属性决定。</p>
<p>当执行一个处理数据类型的命令时,Redis 执行以下步骤:</p>
<ol>
<li>根据给定key,在数据库字典中查找和它像对应的redisObject,如果没找到,就返回 NULL 。</li>
<li>检查redisObject的type属性和执行命令所需的类型是否相符,如果不相符,返回类 型错误。</li>
<li>根据redisObject的encoding属性所指定的编码,选择合适的操作函数来处理底层的 数据结构。</li>
<li>返回数据结构的操作结果作为命令的返回值。</li>
</ol>
<h4 id="字符串"><a href="http://redisdoc.com/string/index.html">字符串</a></h4>
<p>REDIS_STRING (字符串)是 Redis 使用得最为广泛的数据类型,它除了是 SET 、GET 等命令 的操作对象之外,数据库中的所有键,以及执行命令时提供给 Redis 的参数,都是用这种类型 保存的。</p>
<p>字符串类型分别使用 REDIS_ENCODING_INT 和 REDIS_ENCODING_RAW 两种编码</p>
<blockquote>
<p>只有能表示为 long 类型的值,才会以整数的形式保存,其他类型 的整数、小数和字符串,都是用 sdshdr 结构来保存</p>
</blockquote>
<h4 id="哈希表"><a href="http://redisdoc.com/hash/index.html">哈希表</a></h4>
<p>REDIS_HASH (哈希表)是HSET 、HLEN 等命令的操作对象</p>
<p>它使用 REDIS_ENCODING_ZIPLIST和REDIS_ENCODING_HT 两种编码方式</p>
<p>Redis 中每个hash可以存储232-1键值对（40多亿）</p>
<h4 id="列表"><a href="http://redisdoc.com/list/index.html">列表</a></h4>
<p>REDIS_LIST(列表)是LPUSH 、LRANGE等命令的操作对象</p>
<p>它使用 REDIS_ENCODING_ZIPLIST和REDIS_ENCODING_LINKEDLIST 这两种方式编码</p>
<p>一个列表最多可以包含232-1 个元素(4294967295, 每个列表超过40亿个元素)。</p>
<h4 id="集合"><a href="http://redisdoc.com/set/index.html">集合</a></h4>
<p>REDIS_SET (集合) 是 SADD 、 SRANDMEMBER 等命令的操作对象</p>
<p>它使用 REDIS_ENCODING_INTSET 和 REDIS_ENCODING_HT 两种方式编码</p>
<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</p>
<h4 id="有序集"><a href="http://redisdoc.com/sorted_set/index.html">有序集</a></h4>
<p>REDIS_ZSET (有序集)是ZADD 、ZCOUNT 等命令的操作对象</p>
<p>它使用 REDIS_ENCODING_ZIPLIST和REDIS_ENCODING_SKIPLIST 两种方式编码</p>
<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</p>
<h4 id="redis各种数据类型_以及它们的编码方式">Redis各种数据类型_以及它们的编码方式</h4>
<figure data-type="image" tabindex="1"><img src="http://hangjia.qiniudn.com/Fj2h6yEVRaDHEshO9OC5mVzm9Sht" alt="Redis各种数据类型_以及它们的编码方式" loading="lazy"></figure>
<h3 id="过期时间">过期时间</h3>
<p>在数据库中,所有键的过期时间都被保存在 redisDb 结构的 expires 字典里:</p>
<pre><code class="language-c">typedef struct redisDb {
	// ...
	dict *expires;
	// ...
} redisDb;
</code></pre>
<p>expires 字典的键是一个指向 dict 字典(键空间)里某个键的指针,而字典的值则是键所指 向的数据库键的到期时间,这个值以 long long 类型表示</p>
<h4 id="过期时间设置">过期时间设置</h4>
<p>Redis 有四个命令可以设置键的生存时间(可以存活多久)和过期时间(什么时候到期):</p>
<ul>
<li>EXPIRE 以秒为单位设置键的生存时间;</li>
<li>PEXPIRE 以毫秒为单位设置键的生存时间;</li>
<li>EXPIREAT 以秒为单位,设置键的过期 UNIX 时间戳;</li>
<li>PEXPIREAT 以毫秒为单位,设置键的过期 UNIX 时间戳。</li>
</ul>
<blockquote>
<p>虽然有那么多种不同单位和不同形式的设置方式,但是 expires 字典的值只保存“以毫秒为单位的过期 UNIX 时间戳” ,这就是说,通过进行转换,所有命令的效果最后都和 PEXPIREAT 命令的效果一样。</p>
</blockquote>
<p><strong>如果一个键是过期的,那它什么时候会被删除?</strong></p>
<p>下边是参考答案</p>
<ol>
<li>定时删除:在设置键的过期时间时,创建一个定时事件,当过期时间到达时,由事件处理 器自动执行键的删除操作。</li>
<li>惰性删除:放任键过期不管,但是在每次从 dict 字典中取出键值时,要检查键是否过 期,如果过期的话,就删除它,并返回空;如果没过期,就返回键值。</li>
<li>定期删除:每隔一段时间,对expires字典进行检查,删除里面的过期键</li>
</ol>
<p>Redis 使用的过期键删除策略是惰性删除加上定期删除</p>
<h3 id="应用场景">应用场景</h3>
<ul>
<li>缓存</li>
<li>队列</li>
<li>需要精准设定过期时间的应用</li>
</ul>
<blockquote>
<p>比如你可以把上面说到的sorted set的score值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把Redis里这个过期时间当成是对数据库中数据的索引，用Redis来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录</p>
</blockquote>
<ul>
<li>排行榜应用，取TOP N操作</li>
</ul>
<blockquote>
<p>这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的sorted set出马了，将你要排序的值设置成sorted set的score，将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可</p>
</blockquote>
<ul>
<li>统计页面访问次数</li>
</ul>
<blockquote>
<p>使用 incr 命令 定时使用 getset 命令 读取数据 并设置新的值 0</p>
</blockquote>
<ul>
<li>使用set 设置标签</li>
</ul>
<p>例如假设我们的话题D 1000被加了三个标签tag 1,2,5和77，就可以设置下面两个集合：</p>
<pre><code class="language-shell">$ redis-cli sadd topics:1000:tags 1
(integer) 1
$ redis-cli sadd topics:1000:tags 2
(integer) 1
$ redis-cli sadd topics:1000:tags 5
(integer) 1
$ redis-cli sadd topics:1000:tags 77
(integer) 1
$ redis-cli sadd tag:1:objects 1000
(integer) 1
$ redis-cli sadd tag:2:objects 1000
(integer) 1
$ redis-cli sadd tag:5:objects 1000
(integer) 1
$ redis-cli sadd tag:77:objects 1000
(integer) 1
</code></pre>
<p>要获取一个对象的所有标签：</p>
<pre><code class="language-bash">$ redis-cli smembers topics:1000:tags
1. 5
2. 1
3. 77
4. 2
</code></pre>
<p>获得一份同时拥有标签1, 2,10和27的对象列表。<br>
这可以用SINTER命令来做，他可以在不同集合之间取出交集</p>
<h3 id="内存优化">内存优化</h3>
<p><code>问题</code>:  Instagram的照片数量已经达到3亿，而在Instagram里，我们需要知道每一张照片的作者是谁，下面就是Instagram团队如何使用Redis来解决这个问题并进行内存优化的。</p>
<p>具体方法，参考下边这篇文章：<a href="http://blog.nosqlfan.com/html/3379.html">节约内存：Instagram的Redis实践</a>。</p>
<h4 id="参考链接">参考链接</h4>
<ul>
<li><a href="http://redisdoc.com/index.html">Redis 文档：http://redisdoc.com/index.html</a></li>
<li><a href="http://origin.redisbook.com/">Redis 设计与实践：http://origin.redisbook.com/</a></li>
<li><a href="http://get.jobdeer.com/523.get">Redis 数据结构使用场景：http://get.jobdeer.com/523.get</a></li>
<li><a href="http://blog.nosqlfan.com/html/2235.html">Redis作者谈Redis应用场景：http://blog.nosqlfan.com/html/2235.html</a></li>
<li><a href="http://www.restran.net/2015/02/17/redis-practice/">一次使用 Redis 优化查询性能的实践：http://www.restran.net/2015/02/17/redis-practice/</a></li>
<li><a href="http://blog.nosqlfan.com/html/3379.html">节约内存：Instagram的Redis实践：http://blog.nosqlfan.com/html/3379.html</a></li>
</ul>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 元组和分片]]></title>
        <id>http://blog.gusibi.site/post/python-data-structures-tuple-and-slice/</id>
        <link href="http://blog.gusibi.site/post/python-data-structures-tuple-and-slice/">
        </link>
        <updated>2017-09-09T22:05:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这一篇是<code>《流畅的 python》</code>读书笔记。主要介绍元组、分片、序列赋值以及引用了大师 Edsger W.Dijkstra<code>为什么序列从0开始计数</code>的解释。</p>
</blockquote>
<h2 id="元组">元组</h2>
<p>在有些python 的介绍中，元组被称为<code>不可变列表</code>，这其实是不准确的，没有完全概括元组的特点。元组除了用作不可变列表，还可以用于<code>没有字段名的记录</code>。</p>
<h3 id="元组和记录">元组和记录</h3>
<p>元组其实是对数据的记录：元组中的每个元素都存放了记录中一个字段的数据，外加这个数据的位置。</p>
<p>如果把元组当作一些字段的集合，数量和位置信息会变得非常重要。比如以下几条用元组表示的记录：</p>
<pre><code class="language-python"> &gt;&gt;&gt; lax_coordinates = (33.9425, -118.408056) # 洛杉矶国际机场的经纬度
 # 东京的一些信息：市名、年份、人口、人口变化和面积
 &gt;&gt;&gt; city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)
</code></pre>
<p>以上这两个元组每个位置都对应一个数据记录。</p>
<h3 id="元组拆包">元组拆包</h3>
<pre><code class="language-python">&gt;&gt;&gt; city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)
</code></pre>
<p>这个例子中，我们把元组的数据用一条语句分别赋值给 city, year, pop, chg, area，这就是元组拆包的一个具体应用。</p>
<blockquote>
<p>元组拆包可以应用到任何可迭代对象上，但是被迭代的对象窄的元素的数量必须跟接受这些元素的元组的空档数一致。</p>
</blockquote>
<p>比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; lax_coordinates = (33.9425, -118.408056)
&gt;&gt;&gt; latitude, longitude = lax_coordinates
&gt;&gt;&gt; latitude
33.9425
&gt;&gt;&gt; longitude
-118.408056
</code></pre>
<p>还可以用 <code>*</code> 运算符把一个可迭代对象拆开作为函数的参数：</p>
<pre><code class="language-python">&gt;&gt;&gt; divmod(20, 8)
(2, 4)
&gt;&gt;&gt; t = (20, 8)
&gt;&gt;&gt; divmode(*t)
(2, 4)
&gt;&gt;&gt; quotient, remainder = divmode(*t)
&gt;&gt;&gt; quotient, remainder
(2, 4)
</code></pre>
<p>在进行拆包是，我们可能对元组的某些值并不感兴趣，这时可以用 <code>_</code> 占位符处理。比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; divmode(20, 8)
(2, 4)
&gt;&gt;&gt; _, remainder = divmode(20, 8)  # 这里我们只关心第二个值
&gt;&gt;&gt; remainder
4
</code></pre>
<p>在处理函数参数时，我们经常用<code>*args</code> 来表示不确定数量的参数。在<code>python3</code>中，这个概念被扩展到了平行赋值中：</p>
<pre><code class="language-python"># python 3 代码示例
&gt;&gt;&gt; a, b, *rest = range(5)
&gt;&gt; a, b, rest
(0, 1, [2, 3, 4])
# * 前缀只能用在一个变量名前，这个变量可以在其他位置
&gt;&gt;&gt; a, *rest, c, d = range(5) 
&gt;&gt; a, rest, c, d
(0, [1, 2], 3, 4)
&gt;&gt;&gt; a, b, *rest = range(2)
&gt;&gt; a, b, rest
(0, 1, [])
</code></pre>
<p>元组也支持嵌套拆包，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; l = (1, 2, 3, (4, 5))
&gt;&gt;&gt; a, b, c, (d, e) = l
&gt;&gt;&gt; d
4
&gt;&gt;&gt; 5
4
</code></pre>
<h3 id="具名元组">具名元组</h3>
<p>元组作为记录除了位置以外还少一个功能，那就是无法给字段命名，<code>namedtuple</code>解决了这个问题。</p>
<p>namedtuple 使用方式实例：</p>
<pre><code class="language-python">&gt;&gt;&gt; from collecitons import namedtuple
&gt;&gt;&gt; city = namedtuple('City', 'name country population coordinates')
&gt;&gt;&gt; tokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))
&gt;&gt;&gt; tokyo.population  # 可以使用字段名获取字段信息
36.933
&gt;&gt;&gt; tokyo[1] # 也可以使用位置获取字段信息
'JP'
&gt;&gt;&gt; City._fields # _fields 属性是一个包含这个类所有字段名的元组 
('name', 'country', 'population', 'coordinates')
&gt;&gt;&gt; tokyo_data = ('Tokyo', 'JP', 36.933, (35.689722, 139.691667))
&gt;&gt;&gt; tokyo = City._make(tokyo_data) # _make() 方法接受一个可迭代对象生成这个类的实例，和 City(*tokyo_data) 作用一致
&gt;&gt;&gt;  tokyo._asdict() # _asdict() 把具名元组以 collections.OrderedDict 的形式呈现
OrderedDict([('name', 'Tokyo'), ('country', 'JP'), ('population', 36.933), ('coordinates', (35.689722, 139.691667))])
</code></pre>
<blockquote>
<p><code>collections.namedtuple</code> 是一个工厂函数，它可以用来构建一个带字段名的元组和一个有名字的类。<br>
<code>namedtuple</code> 构建的类的实例锁消耗的内存和元组是一样的，因为字段名都被存放在对应的类里。这个实例和普通的对象实例相比也更小一些，因为 在这个实例中，Python 不需要用 <code>__dict__</code> 来存放这些实例的属性</p>
</blockquote>
<h2 id="切片">切片</h2>
<p>Python 中列表、元组、字符串都支持切片操作。</p>
<p>在切片和区间操作里不包含区间范围的最后一个元素是 Python 的风格。这样做的好处如下：</p>
<ul>
<li>当只有最后一个位置信息时，我们可以快速看出切片和区间里有几个元素：range(3) 和 mylist[:3] 都只返回三个元素</li>
<li>当气质位置可见时，可以快速计算出切片和区间的长度，用后一个数减去第一个下标（stop-start）即可。</li>
<li>这样还可以让我们利用任意一个下标来把序列分割成不重复的两部分，只要写成 mylist[:x] 和 mylist[x:] 就可以。</li>
</ul>
<p>切片除了开始和结束的下标之外还可以有第三个参数，比如：<code>s[a:b:c]</code>，这里 c 表示取值的间隔，c 还可以为负值，负值意味着反向取值。</p>
<pre><code class="language-python">&gt;&gt;&gt; s = 'bicycle'
&gt;&gt;&gt; s[::3]
'bye'
&gt;&gt;&gt; s[::-1]
'elcycib'
&gt;&gt;&gt; s[::2]
'eccb'
</code></pre>
<p>a🅱️c 这种用法只能作为索引或者下标在[] 中返回一个切片对象：slice(a, b, c)。对 seq[start:stop:step] 进行求值的时候，Python 会调用 seq.<strong>getitem</strong>(slice(start:stop:step)]。</p>
<h3 id="给切片赋值">给切片赋值</h3>
<p>如果把切片放在赋值语句的左边，或者把它作为 del 操作的对象，我们就可以对序列进行嫁接、切除或修改操作，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; l = list(range(10))
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; l[2:5] = [20, 30]
&gt;&gt;&gt; l
[0, 1, 20, 30, 5, 6, 7, 8, 9]
&gt;&gt;&gt; del l[5:7]
[0, 1, 20, 30, 5, 8, 9]
&gt;&gt;&gt; l[3::2] = [11, 22]
&gt;&gt;&gt; l
[0, 1, 20, 11, 5, 22, 9]
&gt;&gt;&gt; l[2:5] = 100
Traceback (most recent call last):
      file &quot;&lt;stdin&gt;&quot;, line 1 in &lt;moduld&gt;
TypeError: can only assign an iterable
</code></pre>
<blockquote>
<p>如果赋值的对象是一个切片，那么赋值语句的右侧必须是一个可迭代对象。</p>
</blockquote>
<h3 id="给切片命名">给切片命名</h3>
<p>如果代码中已经出现了大量的无法直视的硬编码切片下标，可以使用给切片命名的方式清理代码。比如你有一段代码要从一个记录字符串中几个固定位置提取出特定的数据字段  比如文件或类似格式 :</p>
<pre><code class="language-python">### 01234567890123456789012345678901234567890123456789012345678901234
record = '............100....513.25........'
cost = int(record[20:23]) * float(record[31:37])
# 这时，可以先给切片命名,以避免大量无法理解的硬编码下标，使代码可读性更强
SHARES= slice(20, 23)
PRICE = slice(31, 37)
cost = int(record[SHARES]) * float(record[PRICE])
</code></pre>
<p>slice() 函数创建了一个<code>切片对象</code>，可以被用在任何切片允许使用的地方，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; items = [0, 1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; a = slice(2, 4)
&gt;&gt;&gt; items[2:4]
[2, 3]
&gt;&gt;&gt; items[a]
[2, 3]
&gt;&gt;&gt; items[a] = [10, 11]
&gt;&gt;&gt; items
[0, 1, 10, 11, 4, 5, 6]
</code></pre>
<p>如果你有一个切片对象 a，还可以调用 a.start, a.stop, a.step 来获取更多信息，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; a = slice(5, 50, 2)
&gt;&gt;&gt; a.start
5
&gt;&gt;&gt; a.step
2
</code></pre>
<h2 id="扩展阅读-为什么下标要从0开始">扩展阅读 为什么下标要从0开始</h2>
<p>Python 里的范围（range）和切片都不会反悔第二个下标所指的元素，计算机科学领域的大师 Edsger W.Dijkstra 在一个很短的备忘录 <a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html">Why numbering should start at zero</a> 里对这一惯例做了说明。以下是部分关键说明：</p>
<p>为了表示出自然数的子序列，2, 3, ... , 12，不使用省略记号那三个点号，我们可以选择4种约定方式：</p>
<ul>
<li>a) 2 ≤ i &lt; 13</li>
<li>b) 1 &lt; i ≤ 12</li>
<li>c) 2 ≤ i ≤ 12</li>
<li>d) 1 &lt; i &lt; 13</li>
</ul>
<p>是否有什么理由，使选择其中一种约定比其它约定要好呢？是的，确实有理由。可以观察到，a) 和 b)有个优点，<code>上下边界的相减得到的差，正好等于子序列的长度</code>。另外，作为推论，下面观察也成立：在 a)，b)中，<code>假如两个子序列相邻的话，其中一个序列的上界，就等于另一个序列的下界</code>。但上面观察，并不能让我们从a), b)两者中选出更好的一个。让我们重新开始分析。</p>
<p>一定存在最小的自然数。假如像b)和d)那样，子序列并不包括下界，那么当子序列从最小的自然数开始算起的时候，会使得下界进入非自然数的区域。这就比较丑陋了。所以对于下界来说，我们更应该采用≤，正如a)或c)那样。<br>
现在考虑，假如子序列包括上界，那么当子序列从最小的自然数开始算起，并且序列为空的时候，上界也会进入非自然数的区域。这也是丑陋的。所以，对于上界，我们更应该采用 &lt;, 正如a)或b)那样。因此我们得出结论，约定a)是更好的选择。</p>
<blockquote>
<ul>
<li>比如要表示 <code>0, 1, 2, 3</code> 如果用 b) d) 的方式，下界就要表示成 <code>-1 &lt; i</code></li>
<li>如果一个空序列用 c) 其实是无法表示的,用 a) 则可以表示成 0 ≤ i &lt; 0</li>
</ul>
</blockquote>
<h2 id="总结">总结</h2>
<p>这一篇主要介绍元组、分片、序列赋值以及对<code>为什么序列从0开始计数</code>做了摘录。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html">Why numbering should start at zero</a></li>
<li><a href="http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF">Why numbering should start at zero: http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python容器和控制语句]]></title>
        <id>http://blog.gusibi.site/post/python-container-and-control/</id>
        <link href="http://blog.gusibi.site/post/python-container-and-control/">
        </link>
        <updated>2017-09-05T01:44:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="容器">容器</h2>
<p>Python 内置了丰富的容器类型：list、tuple、set、dict和 collections 中的namedtuple()、deque、ChainMap、Counter、OrderedDict、defaultdict。<br>
collections 相关的数据结构暂时先不介绍，这一篇先介绍 list、tuple、set 和 dict。</p>
<blockquote>
<p><code>解释：</code>容器类型相对应的是扁平的数据类型，容器存放的是它们所包含的任意类型的对象的引用，而扁平的数据结构存放的是值而不是引用。<br>
换句话说，扁平的数据结构其实是一段连续的内存空间，它里边只能存放字符、字节和数值这种基础类型，并且只能是其中的一种。<br>
<code>可能越解释越不清楚了</code></p>
</blockquote>
<h3 id="list列表">list（列表）</h3>
<h4 id="初始化列表">初始化列表</h4>
<pre><code class="language-python">empty_list = []  # 初始化一个空列表
nums = [1]  # 初始化只有一个值的列表
numbers = [1, 2, 3, 4]  # 初始化一个有四个数字的列表
strings = ['a', 'b', 'c', 'd']  # 初始化一个有四个字符的列表
</code></pre>
<p>列表中的元素可以是任意数据类型，比如：</p>
<pre><code class="language-python">list1 = ['1', 2, 'c', 'hello' ['world']] 
</code></pre>
<p>列表 list1 中包含了数字、字符串以及一个列表。</p>
<h4 id="访问列表">访问列表</h4>
<p>可以使用 len() 方法获取 list 元素的个数。</p>
<p>列表用索引来访问 list 中每个位置的元素，索引从0开始</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [1, 2, 3, 4, 5]
&gt;&gt;&gt; nums[0]  # 索引从0开始
1
&gt;&gt;&gt; nums[3]
4
&gt;&gt;&gt; nums[5]
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<p>当索引超出了范围时，Python会报一个IndexError错误。</p>
<p>索引还可以是负值，比如</p>
<pre><code class="language-python">&gt;&gt;&gt; nums[-1]  # 最后一个是-1 倒数第二个是 -2 依次类推 
5
&gt;&gt;&gt; nums[-3]
3
&gt;&gt;&gt; nums[-6]  # 负值的索引超出了范围时，也会报一个IndexError错误。
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<p>如果列表中的元素也是列表：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [1, 2, [3, 4, 5]]
&gt;&gt;&gt; nums
[1, 2, [3, 4, 5]]
# 要访问内部列表的中的值可以这样
&gt;&gt;&gt; nums[2][2]
5
</code></pre>
<h4 id="分片">分片</h4>
<p>列表可以使用索引获取特定位置的元素，也可以传入两个索引获取索引之间的元素，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; nums
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; nums[0:1]
[0]
&gt;&gt;&gt; nums[0:5]
[0, 1, 2, 3, 4]
&gt;&gt;&gt; nums[1:7]
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>通过上边的例子可以看出，分片的语法结构为</p>
<pre><code class="language-python">list[start_index:end_index]
</code></pre>
<p>意思是 取列表中从 start_index 位置开始取，取值个数为 end_index-start_index，也就是取 list[start_index] 到 list[end_index-1] 的元素。</p>
<h4 id="列表常用方法">列表常用方法</h4>
<h5 id="append">append</h5>
<p>列表是可变的，可以往list中追加元素到末尾：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = []
&gt;&gt;&gt; nums
[]
&gt;&gt;&gt; nums.append(1)  # 使用 append 方法往列表的末尾追加元素
&gt;&gt;&gt; nums
[1]
</code></pre>
<h5 id="insert">insert</h5>
<p>把元素插入到指定位置：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [0, 2, 3]
&gt;&gt;&gt; nums
[0, 2, 3]
&gt;&gt;&gt; nums.insert(1, 10)  # 向索引位置1 处插入数字10
&gt;&gt;&gt; nums
[0, 10, 2, 3]
# 如果指定的索引超过了列表的长度，会把元素插入到最后
&gt;&gt;&gt; nums.insert(10, 5)
&gt;&gt;&gt; nums
[0, 10, 2, 3, 5]
</code></pre>
<h5 id="pop">pop</h5>
<p>删除末尾的元素：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [1, 2, 3, 4]
&gt;&gt;&gt; nums.pop()
4
&gt;&gt;&gt; nums
[1, 2, 3]
</code></pre>
<p>删除指定位置的元素：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums.pop(1)
2
&gt;&gt;&gt; nums
[1, 3]
&gt;&gt;&gt; nums.pop(3)  # 指定的位置超出了列表的大小
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<h5 id="sorted">sorted</h5>
<p>排序列表：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [1, 4, 2, 3]
&gt;&gt;&gt; sorted(nums)
[1, 2, 3, 4]
</code></pre>
<p>sorted() 函数会把传入的列表作为参数，返回一个排序后的列表（<code>注意</code>：sorted 返回一个新的列表，并不会改变当前列表）</p>
<pre><code class="language-python"># 接上一段代码
&gt;&gt;&gt; nums
[1, 4, 2, 3]
</code></pre>
<p>修改指定位置的值：</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; nums[1]
2
&gt;&gt;&gt; nums[1] = 10
&gt;&gt;&gt; nums
[1, 10, 3, 4, 5, 6]
</code></pre>
<h3 id="tuple">tuple</h3>
<p>元组和列表类似，这里主要说一下不同：</p>
<h4 id="1初始化方式不同">1：初始化方式不同</h4>
<p>元组使用半角小括号<code>()</code>，列表使用方括号<code>[]</code></p>
<pre><code class="language-python">&gt;&gt;&gt; nums = ()  # 声明一个没有元素的空元组
&gt;&gt;&gt; nums
()
&gt;&gt;&gt; nums = (1, 2, 3)
&gt;&gt;&gt; nums
(1, 2, 3)
</code></pre>
<p>如果元组中只有一个值，声明的时候要在第一个元素后加逗号(,):</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = (1,)
&gt;&gt;&gt; nums
(1, )
&gt;&gt;&gt; nums = (1)  # 不加逗号python 认为这里的括号是数学运算符
&gt;&gt;&gt; nums
1
</code></pre>
<blockquote>
<p>不加逗号python 认为这里的括号是<code>数学运算符</code>，对数字1 进行单独运算结果还是 1，所以返回1</p>
</blockquote>
<h4 id="2-元组不可变">2： 元组不可变</h4>
<p>元组一旦声明，它的元素是不可变的，不能使用 append、pop、insert 等方法。</p>
<pre><code class="language-python">&gt;&gt;&gt; nums = (1, 2, 3)
&gt;&gt;&gt; nums.append()
Traceback (most recent call last)
&lt;ipython-input-23-926c4dd5b5cb&gt; in &lt;module&gt;()
----&gt; 1 nums.append(1)
AttributeError: 'tuple' object has no attribute 'append'
</code></pre>
<p>其它获取元素的方法和列表的一致。</p>
<h3 id="练习">练习</h3>
<p>请用索引取出下面list的指定元素：</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-

L = [
    ['Apple', 'Google', 'Microsoft'],
    ['Java', 'Python', 'Ruby', 'PHP'],
    ['Adam', 'Bart', 'Lisa']
]
 
# 打印Apple:
print ?
# 打印Python:
print ?
# 将 PHP 修改为 JavaScript
</code></pre>
<h3 id="dict字典">dict（字典）</h3>
<p>dict 是使用键-值（key-value）存储，具有极快查询速度的一种数据结构。</p>
<h4 id="初始化字典">初始化字典</h4>
<p>比如我们可以用一个dict 存储一个用户信息：</p>
<pre><code class="language-python">user = {
    'nickname': 'goodspeed',
    'avatar': 'http://url.jpg',
}
</code></pre>
<h4 id="访问字典里的数据">访问字典里的数据</h4>
<p>如果我们想查找字典里的某个值，可以根据 key 读取。比如</p>
<pre><code class="language-python">&gt;&gt;&gt; user = {
    'nickname': 'goodspeed',
    'avatar': 'http://url.jpg',
}
&gt;&gt;&gt; nickname = user['nickname']
&gt;&gt;&gt; nickname
goodspeed
</code></pre>
<p>如果我们使用了一个不存在的 <code>key</code>，dict 会报错：</p>
<pre><code class="language-python">&gt;&gt;&gt; user = {}
&gt;&gt;&gt; user['nickname']
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
KeyError: 'nickname'
</code></pre>
<p>上边这个例子是因为 dict <code>user</code> 不存在<code>key</code> nickname，所以抛出<code>KeyError</code> 异常。</p>
<blockquote>
<p>如何避免KeyError 错误呢？</p>
</blockquote>
<ol>
<li>使用之前充分了解 dict 结构（不靠谱，程序总是存在各种各样的可能，谁知道到底有没有）</li>
<li>取值之前先判断 <code>key</code> 是否存在（使用 <code>in</code> 判断)</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; user = {
    'nickname': 'goodspeed',
    'age': 8
}
&gt;&gt;&gt; 'nickname' in user  # user 有 nickname 这个 key
True
&gt;&gt;&gt; 'avatar' in user # user 没有 nickname 这个 key
False
</code></pre>
<p>如果我们使用这种方式取值代码可能是这样的：</p>
<pre><code class="language-python">user = {
    'nickname': 'goodspeed',
    'age': 8
}
if 'nickname' in user:
    nickname = user['nickname']
else:
    nickanme = '默认值'     
</code></pre>
<p>这显然太啰嗦了，python 有更好的办法：</p>
<ol start="3">
<li>使用 <code>get()</code> 方法，比如：</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; user = {
    'nickname': 'goodspeed',
    'age': 8
}

&gt;&gt;&gt; nickname = user.get('nickname', '如果nickname 不存在，我是默认值')
&gt;&gt;&gt; nickname
goodspeed

&gt;&gt;&gt; avatar = user.get('avatar', 'avatar 不存在，取到的值就是我')
&gt;&gt;&gt; avatar
avatar 不存在，取到的值就是我
</code></pre>
<blockquote>
<p>简单多了吧 🙄🙃</p>
</blockquote>
<h4 id="更新-dict">更新 dict</h4>
<p>dict 是可变容器，它的数据可以增加修改，比如</p>
<pre><code class="language-python">&gt;&gt;&gt; user = { # 初始化一个字典 只有一个 nickname key
    'nickname': 'goodspeed',
}
&gt;&gt;&gt; user['age'] = 8
&gt;&gt;&gt; user
{
    'nickname': 'goodspeed',
    'age': 8
}
# 我说我8岁大家都不信，非让我写真实年龄，没办法我只能改了🤷‍♀️
&gt;&gt;&gt; user['age'] = 9 # 这下满意了吧
&gt;&gt;&gt; user
{
    'nickname': 'goodspeed',
    'age': 9
}
</code></pre>
<blockquote>
<p>那如果想一次更新多个值呢? 使用<code>update</code> 方法</p>
</blockquote>
<pre><code class="language-python">&gt;&gt;&gt; user = {} # 初始化一个空字典
&gt;&gt;&gt; user.update({'nickname': 'goodspeed', 'age': 8}) # 使用 update 更新字典
&gt;&gt;&gt; user
{
    'nickname': 'goodspeed',
    'age': 8
}
</code></pre>
<h4 id="字典-key-注意事项">字典 key 注意事项</h4>
<ol>
<li>key 必须是不可变对象（可以暂时限制为，字符，数字等值）</li>
<li>key 不能重复，如果重复设置，后边的值会覆盖前一次的值</li>
</ol>
<h3 id="set">set</h3>
<p>set 和 dict 类似，也是一组 key 的集合，但是 set 只有 key 没有对应的 value。</p>
<blockquote>
<p>set 中也没有重复的 key</p>
</blockquote>
<h4 id="初始化一个set">初始化一个set</h4>
<pre><code class="language-python">&gt;&gt;&gt; s = set() # 初始化一个空的集合
# 也可以把一个序列作为初始化参数
&gt;&gt;&gt; sl = set([1, 2, 3])  # 把列表作为参数
&gt;&gt;&gt; sl
{1, 2, 3}
&gt;&gt;&gt; st = set((1, 2, 3)) # 把元组作为参数
&gt;&gt;&gt; st
{1, 2, 3}
&gt;&gt;&gt; ss = set('hello') # 把字符串作为参数
&gt;&gt;&gt; ss
{'e', 'h', 'l', 'o'}
</code></pre>
<blockquote>
<p>set 中的 key 是无序的（顺序如何，看 set 心情）</p>
</blockquote>
<h4 id="set-常用方法">set 常用方法</h4>
<h5 id="add">add</h5>
<p>使用 add 向 set 添加一个 元素。</p>
<pre><code class="language-python">&gt;&gt;&gt; s = set()
&gt;&gt;&gt; s.add(1)
&gt;&gt;&gt; s
{1}
&gt;&gt;&gt; s.add(2)
&gt;&gt;&gt; s
{2, 1}
</code></pre>
<p>set 中的 key 是不可重复的所以，使用 add 添加相同的 key，会自动去重，比如</p>
<pre><code class="language-python">&gt;&gt;&gt; s = set()
&gt;&gt;&gt; for i in range(10): # 向集合添加10次字符 'a'
        s.add('a')
&gt;&gt;&gt; s 
{'a'} #  set 自动去重，所以仍然只有一个元素
</code></pre>
<h5 id="remove">remove</h5>
<p>set 可是已使用 <code>remove()</code> 方法删除集合中的一个 key，比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; s = set([1, 2, 3])
&gt;&gt;&gt; s.remove(1)
&gt;&gt;&gt; s
{2, 3}
&gt;&gt;&gt; s.remove(4)  # 如果使用 remove 删除一个不存在的 key，会抛出 KeyError 错误
Traceback (most recent call last)
&lt;ipython-input-20-737bdeaad795&gt; in &lt;module&gt;()
----&gt; 1 s.remove(4)
KeyError: 4
</code></pre>
<h2 id="流程控制">流程控制</h2>
<h3 id="条件判断-if">条件判断 if</h3>
<p>条件判断是程序的一个基本流程控制。语法结构如下：</p>
<pre><code class="language-python">if 条件:
    条件成立执行语句
elif 第二个条件:
    条件成立执行语句
else:
    上述条件都不成立，执行的语句
</code></pre>
<h4 id="if-语句注意事项">if 语句注意事项</h4>
<ul>
<li>条件语句后要加冒号<code>:</code></li>
<li>if 语句是从上向下依次执行的，如果在某个判断上是 True，剩下的语句就不会执行了。</li>
<li>通过布尔运算得到结果为 True，条件就算成立</li>
</ul>
<blockquote>
<p>空列表，空字典，空元组，空集合，空字符串，0都不为真</p>
</blockquote>
<pre><code class="language-python">&gt;&gt;&gt; s = set()
&gt;&gt;&gt; if s:
        print '这不是一个空集合'
    else:
        print 's 为空集合'    
</code></pre>
<h4 id="boolean">boolean</h4>
<p>布尔值只有两个值 True、False。在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>
<pre><code class="language-python">&gt;&gt;&gt; True
True
&gt;&gt;&gt; False
False
&gt;&gt;&gt; 3 &gt; 2
True
&gt;&gt;&gt; 3 &gt; 5
False
</code></pre>
<p>布尔值和条件运算是条件判断的基本条件，比如：</p>
<pre><code class="language-python">age = 4
if age &gt; 3:
    print '成熟点，你已经不是3岁的孩子了'
elif age &gt; 20:
    print '你都是中年人了，可怜🤕'
else:
    print '你3岁小孩懂什么'
</code></pre>
<blockquote>
<p>我们上边说过，if 语句是从上向下依次执行的，如果某个判断为 True，剩下的就会忽略不在执行，那么，这个代码中第二个判断 <code>age &gt; 20</code> 永远不会执行，因为 <code>&gt; 20</code> 肯定也 大于 3，会执行第一个条件</p>
</blockquote>
<h3 id="循环">循环</h3>
<p>要打印2次 <code>hello world</code> 我们可以直接写：</p>
<pre><code class="language-python">print 'hello world'
print 'hello world'
</code></pre>
<p>但是如果我们要打印100 次、1000次就需要用到循环语句了。<br>
Python 循环有两种方式：计数循环和条件循环。</p>
<h4 id="计数循环forin">计数循环（for...in）</h4>
<p>计数循环的示例如下：</p>
<pre><code class="language-python">for i in [1, 2, 3, 4]:
    print i
</code></pre>
<ul>
<li>变量 i 从1开始</li>
<li>对应列表的每一个值，循环会把指令块中所有代码执行一遍</li>
<li>每次执行循环时，变量 i 会赋值为列表中的下一个值</li>
<li>每次循环称为一次迭代</li>
</ul>
<blockquote>
<p><code>for 循环</code> 不仅仅可以用在 list 上，还可以作用在其他可迭代对象上（元组、字典、集合、字符串等）</p>
</blockquote>
<h4 id="range-函数">range() 函数</h4>
<ul>
<li>range() 会创建一个列表，其中包含某个范围内的数</li>
<li>range(5) —&gt; [0, 1, 2, 3, 4]</li>
<li>range(1, 6) —&gt; [1, 2, 3, 4, 5, 6]</li>
<li>range(x, y) 默认从0计数，循环次数为 y-x</li>
</ul>
<p>range 函数不仅仅只是可以每次增加一个数，还可以指定步长，比如：</p>
<ul>
<li>range(1, 10, 2) —&gt; [1, 3, 5, 7, 9]<br>
这个意思是，生成一个列表，从1开始，到10结束，每个数字间隔为2（后一个数字减前一个数字值为2）</li>
</ul>
<h5 id="range-还可以反向计数">range() 还可以反向计数</h5>
<ul>
<li>range(5, 1, -1) —&gt; [5, 4, 3, 2]</li>
</ul>
<h5 id="练习-2">练习</h5>
<p>使用 for 循环 计算 1到100 的和。</p>
<h4 id="条件循环while">条件循环（while）</h4>
<p>条件循环基本语法为：</p>
<pre><code class="language-python">while 条件:
    语句块
</code></pre>
<p>只要满足条件，就会不断循环：</p>
<pre><code class="language-python">while True:
    print 'hello' 
</code></pre>
<p>这个循环因为 True 一直为真，所以条件一直满足，所以如果运行代码，会一直打印 hello 字符串。</p>
<p>所以使用 while 循环要在代码块中设定可以跳出的条件，比如：</p>
<pre><code class="language-python">a = 0
while a&lt; 100:
    print a
    a = a + 1 # a 不停自加
</code></pre>
<p>可以执行下上述代码，看下效果。</p>
<h5 id="练习-3">练习</h5>
<p>使用 while 循环，计算1，2， 3...100 的和。</p>
<h3 id="跳出循环">跳出循环</h3>
<p>跳出循环有两种形式，使用 <code>break</code> 或着使用 <code>continue</code>。</p>
<h4 id="break">break</h4>
<p>如果在循环中使用 <code>break</code> 循环会直接结束，之后的循环就不再执行</p>
<pre><code class="language-python">&gt;&gt;&gt; for i in range(100):
        if i &gt; 2: # 当i = 3 时 循环就直接退出
            break
        print i
0
1
2
</code></pre>
<p>这段代码执行之会打印 0 1 2 因为大于2后循环会直接终结。</p>
<h4 id="continue">continue</h4>
<p>在循环中使用 <code>continue</code>，此次循环会被跳过，直接执行下一次循环</p>
<pre><code class="language-python">&gt;&gt;&gt; for i in range(5):
        if i == 3:
            continue
        print i
0
1
2
4
</code></pre>
<p>上边这段代码，当 i 值等于3时，我们跳过当前循环，直接执行下一次，所以执行的结果为</p>
<p>0, 1, 2, 4</p>
<h4 id="练习-4">练习</h4>
<p>使用 continue 计算 1 到 3245 间所有数字中奇数的和。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000">使用list和tuple</a></li>
<li><a href="http://blog.csdn.net/qq_30490125/article/details/50916268">python基础数据类型及内置容器详解</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001374738281887b88350bd21544e6095d55eaf54cac23f000">条件判断和循环</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 列表推导及优先级队列的实现]]></title>
        <id>http://blog.gusibi.site/post/python-data-structures-an-array-of-sequences/</id>
        <link href="http://blog.gusibi.site/post/python-data-structures-an-array-of-sequences/">
        </link>
        <updated>2017-09-02T22:05:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这一篇是<code>《流畅的 python》</code>读书笔记。主要介绍列表、列表推导有关的话题，最后演示如何用列表实现一个优先级队列。</p>
</blockquote>
<h2 id="python-内置序列类型">Python 内置序列类型</h2>
<p>Python 标准库用 C 实现了丰富的序列类型：</p>
<h4 id="容器序列">容器序列：</h4>
<p>list、tuple 和 collections.deque 这些序列能存放不同类型的数据。</p>
<h4 id="扁平序列">扁平序列：</h4>
<p>str、bytes、bytearray、memoryview 和 array.array，这类序列只能容纳一种类型。</p>
<blockquote>
<p>容器序列存放的是它们所包含的任意类型的对象的引用，而扁平序列里存放的是值而不是引用（也可以说扁平序列其实存放的是一段连续的内存空间）。</p>
</blockquote>
<p>如果按序列是否可被修改来分类，序列分为<code>可变序列</code> 和 <code>不可变序列</code>:</p>
<h4 id="可变序列">可变序列</h4>
<p>list、bytearray、array.array、collections.deque 和 memoryview。</p>
<h4 id="不可变序列">不可变序列</h4>
<p>tuple、str和 bytes。</p>
<p>下图显示了可变序列（MutableSequence）和不可变序列（sequence）的差异：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/Wlrr9jXCMsTupf03pVmVSkCb4ObKTI8g7QWycfjJS80UJ7tHptjZsHLLCz3evCZM" alt="可变序列(MutableSequence)和不可变序列（sequence）的差异" loading="lazy"></figure>
<p>从这个图可以看出，可变序列从不可变序列那里继承了一些方法。</p>
<h2 id="列表推导和生成器表达式">列表推导和生成器表达式</h2>
<p>列表（list）是 Python 中最基础的序列类型。list 是一个可变序列，并且能同时存放不同类型的元素。<br>
列表的基础用法这里就不再介绍了，这里主要介绍一下列表推导。</p>
<h3 id="列表推导和可读性">列表推导和可读性</h3>
<p>列表推导是构建列表的快捷方式，并且有更好的可读性。<br>
先看下面两段代码：</p>
<p><code>#1. 把一个字符串变成 unicode 码位的列表</code></p>
<pre><code class="language-python">&gt;&gt;&gt; symbols = '$&amp;@#%^&amp;*'
&gt;&gt;&gt; codes = []
&gt;&gt;&gt; for symbol in symbols:
        codes.append(ord(symbol))

&gt;&gt;&gt; codes
[36, 38, 64, 35, 37, 94, 38, 42]
</code></pre>
<p><code>#2. 把一个字符串变成 unicode 码位的列表 使用列表推导</code></p>
<pre><code class="language-python">&gt;&gt;&gt; symbols = '$&amp;@#%^&amp;*'
&gt;&gt;&gt; codes = [ord(s) for s in symbols]
&gt;&gt;&gt; codes
[36, 38, 64, 35, 37, 94, 38, 42]
</code></pre>
<p>对比发现，如果理解列表推导的话，第二段代码比第一段更简洁可读性也更好。<br>
当然，列表推导也不应该被滥用，通常的原则是<code>只用列表推导来创建新的列表，并且尽量保持简短。</code><br>
如果列表推导超过两行，就应该考虑要不要使用 <code>for</code> 循环重写了。</p>
<h4 id="note">NOTE</h4>
<blockquote>
<p>在 Python2 中列表推导有变量泄露的问题</p>
</blockquote>
<p><code>#Python2 的例子</code></p>
<pre><code class="language-python">&gt;&gt;&gt; x = 'my precious'
&gt;&gt;&gt; dummy = [x for x in 'ABC']
&gt;&gt;&gt; x
'C'
</code></pre>
<p>这里 x 原来的值被取代了，变成了列表推导中的最后一个值，需要避免这个问题。好消息是 Python3解决了这个问题。</p>
<p><code>#Python3 的例子</code></p>
<pre><code class="language-python">&gt;&gt;&gt; x = 'ABC'
&gt;&gt;&gt; dummy = [ord(x) for x in x]
&gt;&gt;&gt; x 
'ABC'
&gt;&gt;&gt; dummy
[65, 66, 67]
</code></pre>
<p>可以看到，这里 x 原有的值被保留了，列表推导也创建了正确的列表。</p>
<h3 id="笛卡尔积">笛卡尔积</h3>
<p>列表推导还可以生成两个或以上的可迭代类型的笛卡尔积。</p>
<blockquote>
<p>笛卡尔积是一个列表，列表里的元素是由输入的可迭代类型的元素对构成的元组，因此笛卡尔积列表的长度等于输入变量的长度的成绩，如图所示：</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/Ug5fo3x6f2sM4pGOavCxHcmMpLbEnw6sCyZ6_9HMMHSbbrKQXahYQDsZC1bhxpp2" alt="笛卡尔积" loading="lazy"></figure>
<p><code># 使用列表推导计算笛卡尔积代码如下</code></p>
<pre><code class="language-python">&gt;&gt;&gt; suits = ['spades', 'diamonds', 'clubs', 'hearts']
&gt;&gt;&gt; nums = ['A', 'K', 'Q']
&gt;&gt;&gt; cards = [(num, suit) for num in nums for suit in suits]
&gt;&gt;&gt; cards
[('A', 'spades'),
 ('A', 'diamonds'),
 ('A', 'clubs'),
 ('A', 'hearts'),
 ('K', 'spades'),
 ('K', 'diamonds'),
 ('K', 'clubs'),
 ('K', 'hearts'),
 ('Q', 'spades'),
 ('Q', 'diamonds'),
 ('Q', 'clubs'),
 ('Q', 'hearts')]
</code></pre>
<p>这里得到的结果是先按数字排列，再按图案排列。如果想先按图案排列再按数字排列，只需要调整 for 从句的先后顺序。</p>
<h3 id="过滤序列元素">过滤序列元素</h3>
<blockquote>
<p><code>问题</code>：你有一个数据序列，想利用一些规则从中提取出需要的值或者是缩短序列</p>
</blockquote>
<p>最简单的过滤序列元素的方法是使用列表推导。比如：</p>
<pre><code class="language-python">&gt;&gt;&gt; mylist = [1, 4, -5, 10, -7, 2, 3, -1]
&gt;&gt;&gt; [n for n in mylist if n &gt;0]
[1, 4, 10, 2, 3]
</code></pre>
<p>使用列表推导的一个潜在缺陷就是若干输入非常大的时候会产生一个非常大的结果集，占用大量内存。这个时候，使用生成器表达式迭代产生过滤元素是一个好的选择。</p>
<h3 id="生成器表达式">生成器表达式</h3>
<p>生成器表达式遵守了迭代器协议，可以逐个产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。</p>
<blockquote>
<p>生成器表达式的语法跟列表推导差不多，只需要把方括号换成圆括号。</p>
</blockquote>
<p><code># 使用生成器表达式创建列表</code></p>
<pre><code class="language-python">&gt;&gt;&gt; pos = (n for n in mylist if n &gt; 0)
&gt;&gt;&gt; pos
&lt;generator object &lt;genexpr&gt; at 0x1006a0eb0&gt;
&gt;&gt;&gt; for x in pos:
... print(x) 
...
1
4
10 
2 
3
</code></pre>
<p><em>如果生成器表达式是一个函数调用过程中唯一的参数，那么不需要额外再用括号把它围起来。例如：</em></p>
<pre><code class="language-python">tuple(n for n in mylist)
</code></pre>
<p><em>如果生成器表达式是一个函数调用过程中其中一个参数，此时括号是必须的。比如：</em></p>
<pre><code class="language-python">&gt;&gt;&gt; import array
&gt;&gt;&gt; array.array('list', (n for n in mylist))
array('list', [1, 4, 10, 2, 3])
</code></pre>
<h2 id="实现一个优先级队列">实现一个优先级队列</h2>
<h3 id="问题">问题</h3>
<p>怎么实现一个按优先级排序的队列？并在这个队列上每次 pop 操作总是返回优先级最高的那个元素</p>
<h3 id="解决方法">解决方法</h3>
<blockquote>
<p>利用 <code>heapq</code> 模块</p>
</blockquote>
<p><code>heapq</code> 是 python 的内置模块，源码位于 Lib/heapq.py ，该模块提供了基于堆的优先排序算法。</p>
<blockquote>
<p>堆的逻辑结构就是完全二叉树，并且二叉树中父节点的值小于等于该节点的所有子节点的值。这种实现可以使用 heap[k] &lt;= heap[2k+1] 并且 heap[k] &lt;= heap[2k+2] （其中 k 为索引，从 0 开始计数）的形式体现，对于堆来说，最小元素即为根元素 heap[0]。</p>
</blockquote>
<p>可以通过 list 对 heap 进行初始化，或者通过 api 中的 heapify 将已知的 list 转化为 heap 对象。</p>
<p>heapq 提供的一些方法如下：</p>
<ul>
<li>heap = [] #创建了一个空堆</li>
<li>heapq.heappush(heap, item)：向 heap 中插入一个元素</li>
<li>heapq.heappop(heap)：返回 root 节点，即 heap 中最小的元素</li>
<li>heapq.heappushpop(heap, item)：向 heap 中加入 item 元素，并返回 heap 中最小元素</li>
<li>heapq.heapify(x)</li>
<li>heapq.nlargest(n, iterable, key=None)：返回可枚举对象中的 n 个最大值，并返回一个结果集 list，key 为对该结果集的操作</li>
<li>heapq.nsmallest(n, iterable, key=None)：同上相反</li>
</ul>
<p>实现如下：</p>
<pre><code class="language-python">import heapq
class PriorityQueue: 
    def __init__(self):
        self._queue = []
        self._index = 0
        
    def push(self, item, priority):
        heapq.heappush(self._queue, (-priority, self._index, item)) 
        self._index += 1
        
    def pop(self):
        return heapq.heappop(self._queue)[-1]
</code></pre>
<p>下面是它的使用方法：</p>
<pre><code class="language-python">&gt;&gt;&gt; class Item:
        def __init__(self, name):
            self.name = name
        def __repr__(self):
            return 'Item({!r})'.format(self.name)
            
&gt;&gt;&gt; q = PriorityQueue()
&gt;&gt;&gt; q.push(Item('foo'), 1)
&gt;&gt;&gt; q.push(Item('bar'), 5)
&gt;&gt;&gt; q.push(Item('spam'), 4)
&gt;&gt;&gt; q.push(Item('grok'), 1)
&gt;&gt;&gt; q.pop()
Item('bar') 
&gt;&gt;&gt; q.pop() 
Item('spam') 
&gt;&gt;&gt; q.pop() 
Item('foo') 
&gt;&gt;&gt; q.pop() 
Item('grok')
</code></pre>
<p>通过执行结果我们可以发现，第一个 pop() 操作返回优先级最高的元素。两个优先级相同的元素（foo 和 grok），pop 操作按照它们被插入到队列的顺序返回。</p>
<p>函数 heapq.heappush() 和 heapq.heappop() 分别在队列 queue 上插入和删除第一个元素，并且队列 queue 保证 第一个元素拥有最小优先级。 heappop() 函数总是返回 <em><code>最小的</code></em> 的元素，这就是保证队列 pop 操作返回正确元素的关键。另外，由于 push 和 pop 操作<code>时间复杂度为 O(log N)，其中 N 是堆的大小</code>，因此就算是 N 很大的时候它们 运行速度也依旧很快。<br>
<em><code>在上面代码中，队列包含了一个 (-priority, index, item) 的元组。优先级为负 数的目的是使得元素按照优先级从高到低排序。这个跟普通的按优先级从低到高排序的堆排序恰巧相反。</code></em><br>
index 变量的作用是保证同等优先级元素的正确排序。通过保存一个不断增加的 index 下标变量，可以确保元素按照它们插入的顺序排序。而且， index 变量也在相 同优先级元素比较的时候起到重要作用。</p>
<p>实现上边排序的关键是 元组是支持比较的：</p>
<pre><code class="language-python">&gt;&gt;&gt; a = (1, Item('foo')) 
&gt;&gt;&gt; b = (5, Item('bar')) 
&gt;&gt;&gt; a &lt; b
True
&gt;&gt;&gt; c = (1, Item('grok'))
&gt;&gt;&gt; a &lt; c
Traceback (most recent call last):
File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; 
TypeError: unorderable types: Item() &lt; Item()
</code></pre>
<p>当第一个值大小相等时，由于<code>Item</code> 并不支持比较会抛出 <code>TypeError</code>。为了避免上述错误，我们引入了<code>index</code>（不可能用两个元素有相同的 index 值）， 变量组成了(priority, index, item) 三元组。现在再比较就不会出现上述问题了：</p>
<pre><code class="language-python">&gt;&gt;&gt; a = (1, 0, Item('foo')) 
&gt;&gt;&gt; b = (5, 1, Item('bar')) 
&gt;&gt;&gt; c = (1, 2, Item('grok')) 
&gt;&gt;&gt; a &lt; b
True
&gt;&gt;&gt; a &lt; c 
True
</code></pre>
<blockquote>
<p>主要介绍列表、列表推导有关的话题，最后演示如何用<code>heapq</code>和<code>列表</code>实现一个优先级队列。下一篇介绍<code>元组</code></p>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://docs.python.org/2/library/heapq.html">Heap queue algorithm</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小程序开发：上传图片到腾讯云]]></title>
        <id>http://blog.gusibi.site/post/metis-2-weapp-upload-file-to-cos/</id>
        <link href="http://blog.gusibi.site/post/metis-2-weapp-upload-file-to-cos/">
        </link>
        <updated>2017-08-26T20:17:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是小程序开发第二篇，主要介绍如何上传图片到腾讯云，之所以选择腾讯云，是因为腾讯云免费空间大😂</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<p>上传图片主要是将图片上传到腾讯云对象存储（COS）。</p>
<p>要使用对象存储 API，需要先执行以下步骤：</p>
<ol>
<li>购买腾讯云对象存储（COS）服务</li>
<li>在腾讯云 <a href="https://console.qcloud.com/cos4/index">对象存储控制台</a> 里创建一个 Bucket</li>
<li>在控制台 <a href="https://console.qcloud.com/capi">个人 API 密钥</a> 页面里获取 AppID、SecretID、SecretKey 内容</li>
<li>编写一个请求签名算法程序（或使用任何一种服务端 SDK）</li>
<li>计算签名，调用 API 执行操作</li>
</ol>
<p>所以我们要做的准备工作有：</p>
<ul>
<li>进入<a href="https://www.qcloud.com">腾讯云官网</a>，注册帐号</li>
<li>登录<a href="https://console.qcloud.com/cos4">云对象存储服务（COS）控制台</a>，开通COS服务，创建资源需要上传的Bucket</li>
<li>在小程序官网上配置域名信息（否则无法在小程序中发起对该域名的请求）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/dloLMnRv8lJosOZt_gv9apWHmFRKfBcUtw0bgXR-Q_uSnmuQK5uP822b6lrYqlxq" alt="image" loading="lazy"></figure>
<p>这些配置过程这里就不做说明了，接下来主要介绍步骤4、5。</p>
<p>小程序上传图片到 cos 流程如下图：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/LC4VsGph5WEJrKEGK7pbyaJGRpshIMx9H4qh804WDJNiInrIirAmNMvQPXMltb0a" alt="图片上传流程图" loading="lazy"></figure>
<p>在这个过程中我们需要实现的是，鉴权服务器返回签名的步骤以及小程序的相关步骤。</p>
<h2 id="cos鉴权服务">COS鉴权服务</h2>
<p>使用对象存储服务 COS 时，可通过 RESTful API 对 COS 发起 HTTP 匿名请求或 HTTP 签名请求，对于签名请求，COS 服务器端将会进行对请求发起者的身份验证。</p>
<ul>
<li>匿名请求：HTTP 请求不携带任何身份标识和鉴权信息，通过 RESTful API 进行 HTTP 请求操作。</li>
<li>签名请求：HTTP 请求时添加签名，COS服务器端收到消息后，进行身份验证，验证成功则可接受并执行请求，否则将会返回错误信息并丢弃此请求。<br>
腾讯云COS对象存储，基于密钥 HMAC (Hash Message Authentication Code) 的自定义 HTTP 方案进行身份验证。</li>
</ul>
<p>上传图片是一个签名请求，需要进行签名验证。之所以我们</p>
<h3 id="签名流程">签名流程</h3>
<p>客户通过对 HTTP 请求进行签名，并将签名后的请求发送至腾讯云进行签名验证，具体流程如下图所示。</p>
<figure data-type="image" tabindex="3"><img src="https://mc.qcloudimg.com/static/img/4a1eb29033caa977c648cb84d9398fdd/image.png" alt="签名流程" loading="lazy"></figure>
<p>我们使用 sdk 开发，这个流程大致了解下就行，签名的实现 sdk 已经包含，只需要调用方法即可。</p>
<p>通过签名流程我们可以知道，签名需要 SecretId 和 SecretKey，这两个信息不适合存放在客户端中，这也是我们单独部署一个鉴权服务器的主要原因。</p>
<h3 id="签名生成-api">签名生成 API</h3>
<p>上一篇<a href="">小程序开发：python sanic 实现小程序登录注册</a> 我们介绍过，服务端使用 <a href="https://github.com/channelcat/sanic"><code>sanic</code></a> 框架 + <a href="https://github.com/guokr/swagger-py-codegen"><code>swagger_py_codegen</code></a> 生成 rest-api。</p>
<p>添加签名生成 api 我们需要先在文档中添加 API 的相关描述。<a href="https://github.com/gusibi/Metis/blob/master/docs/v1.yml">文档代码：https://github.com/gusibi/Metis/blob/master/docs/v1.yml</a></p>
<pre><code class="language-yml">    /qc_cos/config:
        get:
            summary: 腾讯云配置
            description: 腾讯云配置
            tags: [Config]
            operationId: get_qc_cos_config
            parameters:
                - $ref: '#/parameters/AccessToken'
                - $ref: '#/parameters/qcos_path_in_query'
            responses:
                200:
                    schema:
                        $ref: '#/definitions/QCOSConfig'
                default:
                    description: Unexpected error
                    schema:
                        $ref: '#/definitions/Error'
            security:
                - OAuth2: [open]
</code></pre>
<blockquote>
<p>这个接口我们要求登录才能调用。<br>
文档定义完成之后，调用</p>
</blockquote>
<pre><code class="language-sh">swagger_py_codegen -s  docs/v1.yml . -p apis -tlp sanic
</code></pre>
<p>生成代码模板，API 代码实现如下：</p>
<pre><code class="language-python">    from qcloud_cos.cos_auth import Auth
    
    async def get(self, request):
        auth = Auth(appid=Config.QCOS_APPID,
                    secret_id=Config.QCOS_SECRET_ID,
                    secret_key=Config.QCOS_SECRET_KEY)
        expired = time() + 3600 # 签名有效时间 3600 秒
        # 上传到 cos bucket 的目录
        dir_name = request.raw_args.get('cos_path', '/xrzeti')
        # 生成签名
        sign = auth.sign_more(Config.QCOS_BUCKET_NAME,
                              cos_path=dir_name,
                              expired=expired)
        return {&quot;sign&quot;: sign}, 200
</code></pre>
<blockquote>
<p>由于 腾讯云COSv4 的Python SDK 只支持 python2，而 sanic 需要 python3.5+ 所以，这里我 fork 出来一份添加了 python3 的支持。<br>
<a href="https://github.com/gusibi/cos-python-sdk-v4">https://github.com/gusibi/cos-python-sdk-v4</a>。使用 python3 环境的可以使用这个版本。</p>
</blockquote>
<h2 id="上传图片到-cos">上传图片到 cos</h2>
<h3 id="选择图片">选择图片</h3>
<blockquote>
<p><code>wx.chooseImage(OBJECT)</code><br>
从本地相册选择图片或使用相机拍照。</p>
</blockquote>
<p>调用这个方法，小程序会把选择的图片放到临时路径（在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用 wx.saveFile，在小程序下次启动时才能访问得到），我们只能将临时路径的文件上传。</p>
<p>核心代码如下：</p>
<pre><code class="language-js">    uploadToCos: function () {
        var that = this;

        // 选择上传的图片
        wx.chooseImage({
            sizeType: ['original', 'compressed'], // 图片类型 original 原图，compressed 压缩图，默认二者都有
            success: function (res) {

                // 获取文件路径
                var file = res.tempFiles[0];
                console.log(file.size);

                // 获取文件名
                var fileName = file.path.match(/(wxfile:\/\/)(.+)/)
                fileName = fileName[2]

                // 获取到图片临时路径后，指定文件名 上传到cos
                upload(file.path, fileName, that);
            }
        })
    }
    
</code></pre>
<p>这里图片选择成功后，我们取原图上传到 cos。</p>
<h3 id="上传图片">上传图片</h3>
<p>cos 上传图片的URL由 cos_region，appid，bucket_name和 cos_dir_name 拼接而成。<br>
把以下字段配置成自己的cos相关信息，详情可看<a href="https://www.qcloud.com/document/product/436/6066">API文档</a></p>
<pre><code class="language-js">cosUrl = &quot;https://&quot; + REGION + &quot;.file.myqcloud.com/files/v2/&quot; + APPID + &quot;/&quot; + BUCKET_NAME + DIR_NAME;
</code></pre>
<blockquote>
<p><code>REGION</code>: cos上传的地区<br>
<code>APPID</code>: 账号的appid<br>
<code>BUCKET_NAME</code>: cos bucket的名字<br>
<code>DIR_NAME</code>: 上传的文件目录</p>
</blockquote>
<pre><code class="language-js">var config = require('../config.js');
// 先确定上传的 URL
var cosUrl = &quot;https://&quot; + config.cos_region + &quot;.file.myqcloud.com/files/v2/&quot; + config.cos_appid + &quot;/&quot; + config.cos_bucket_name + config.cos_dir_name;

//填写自己的鉴权服务器地址
var cosSignatureUrl = config.host + '/v1/qc_cos/config?cos_path=' + config.cos_dir_name;

/**
 * 上传方法
 * filePath: 上传的文件路径
 * fileName： 上传到cos后的文件名
 * that: 小程序所在当前页面的 object
 */
function upload(filePath, fileName, that) {
    var data;

    // 鉴权获取签名
    wx.request({
        url: cosSignatureUrl,
        header: {
            Authorization: 'JWT' + ' ' + that.data.jwt.access_token
        },
        success: function (cosRes) {
            // 获取签名
            var signature = cosRes.data.sign;

            // 头部带上签名，上传文件至COS
            var uploadTask = wx.uploadFile({
                url: cosUrl + '/' + fileName,
                filePath: filePath,
                header: {
                    'Authorization': signature
                },
                name: 'filecontent',
                formData: {
                    op: 'upload'
                },
                success: function (uploadRes) {
                    // 上传成功后的操作
                    var upload_res = JSON.parse(uploadRes.data)
                    var files = that.data.files;
                    files.push(upload_res.data.source_url);
                    that.setData({
                        upload_res: upload_res,
                        files: files,
                        test_image: upload_res.data.source_url
                    })
                },
                fail: function (e) {
                    console.log('e', e)
                }
            });
            // 上传进度条
            uploadTask.onProgressUpdate((res) =&gt; {
                that.setData({
                    upload_progress: res.progress
                })
                if (res.progress === 100){
                    that.setData({
                        upload_progress: 0
                    })
                }
            })
        }
    })
    return data
}
</code></pre>
<p>小程序提供了 <code>uploadTask.onProgressUpdate()</code> 来获取图片的上传进度，这里我将图片的上传进度显示了出来。</p>
<p>完整代码参考：<a href="https://github.com/gusibi/Metis-wxapp/tree/master/dist">metis-wxapp: https://github.com/gusibi/Metis-wxapp</a></p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://github.com/tencentyun/wecos-ugc-upload-demo/blob/master/README.md">WeCOS-UGC-DEMO——微信小程序用户资源上传COS示例</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 装饰器使用指南]]></title>
        <id>http://blog.gusibi.site/post/python-decorator/</id>
        <link href="http://blog.gusibi.site/post/python-decorator/">
        </link>
        <updated>2017-08-15T06:41:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。</p>
</blockquote>
<h2 id="装饰器基础知识">装饰器基础知识</h2>
<p>首先看一下这段代码</p>
<pre><code class="language-python">def deco(fn):
    print &quot;I am %s!&quot; % fn.__name__

@deco
def func():
    pass

# output
I am func!

# 没有执行func 函数 但是 deco 被执行了
</code></pre>
<p>HUGOMORE42</p>
<p>在用某个@decorator来修饰某个函数func时</p>
<pre><code class="language-python">@decorator
def func():
    pass

</code></pre>
<p>其解释器会解释成下面这样的语句：</p>
<p><code>func = decorator(func)</code></p>
<blockquote>
<p>其实就是把一个函数当参数传到另一个函数中，然后再回调，但是值得注意的是装饰器必须返回一个函数给func</p>
</blockquote>
<p>装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二大特性是，装饰器在加载模块时立即执行。</p>
<h3 id="装饰器何时执行">装饰器何时执行</h3>
<p>装饰器的一个关键特性是，它们在被装饰的函数定义后立即运行。这通常在导入是（python 加载模块时）。</p>
<p>看下下面的示例：</p>
<pre><code class="language-python">registry = []  # registry 保存被@register 装饰的函数的引用

def register(func):  # register 的参数是一个函数
    print('running register(%s)' % func)  # 打印被装饰的函数
    registry.append(func)  # 把 func 存入 `registery`
    return func  # 返回 func：必须返回函数，这里返回的函数与通过参数传入的一样

@register  # `f1` 和 `f2`被 `@register` 装饰
def f1():
    print('running f1()')

@register
def f2():
    print('running f2()')

def f3():  # &lt;7&gt;
    print('running f3()')

def main():  # main 打印 `registry`，然后调用 f1()、f2()和 f3()
    print('running main()')
    print('registry -&gt;', registry)
    f1()
    f2()
    f3()

if __name__=='__main__':
    main()  # &lt;9&gt;
</code></pre>
<p>运行代码结果如下：</p>
<pre><code class="language-python">running register(&lt;function f1 at 0x1023fb378&gt;)
running register(&lt;function f2 at 0x1023fb400&gt;)
running main()
registry -&gt; [&lt;function f1 at 0x1023fb378&gt;, &lt;function f2 at 0x1023fb400&gt;]
running f1()
running f2()
running f3()
</code></pre>
<p>从结果可以发现<code>register</code> 在模块中其他函数之前运行了两次。调用 register 时，传给它的参数是被装饰的函数（例如&lt;function f1 at 0x1023fb378&gt;）。</p>
<p>看完上边的示例我们知道，函数被装饰器装饰后会变成装饰器函数的一个参数，那这时就不得不说变量的作用域了。</p>
<h2 id="变量作用域">变量作用域</h2>
<p>先看下下边这段代码：</p>
<pre><code class="language-python">def f1(a):
    print(locals())
    print(a)
    print(b)
    
    
f1(3)
# output
{'a': 3}
3
Traceback(most recent call last):
    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
    File &quot;&lt;stdin&gt;&quot;, line 3, in f1
NameError: global name 'b' is not defined
</code></pre>
<p>这里的错误是因为全局变量 <code>b</code> 没有定义，如果我们先在函数外部给 b 赋值，再调用这个方法就不会报错了。</p>
<blockquote>
<p>函数运行时会创建一个新的作用域（命名空间）。函数的命名空间随着函数调用开始而开始，结束而销毁。<br>
这个例子中 f1 的命名空间中只有 {'a': 3}，所以 <code>b</code> 会被认为是全局变量。</p>
</blockquote>
<p>再看一个例子：</p>
<pre><code class="language-python">b = 6
def f2(a):
    print(a)
    print(globals())
    print(locals())
    print(b)
    b = 9
    
f2(3)
# output
3
{
    '__name__': '__main__',
    '__doc__': None, 
    '__package__': None, 
    '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x10c7f2dd8&gt;, 
    '__spec__': None, 
    '__annotations__': {}, 
    '__builtins__': &lt;module 'builtins' (built-in)&gt;, 
    '__file__': '~/var_local.py', 
    '__cached__': None, 
    'b': 6, 
    'f2': &lt;function f2 at 0x10c7e7598&gt;
}
{'a': 3}
3
Traceback(most recent call last):
    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
    File &quot;&lt;stdin&gt;&quot;, line 3, in f1
UnboundLocalError: local variable 'b' referenced before assignment
</code></pre>
<p>这个例子和上一个例子不同是，我现在函数外部定义了全局变量<code>b</code>，但是执行<code>f2</code> 这个方法并没有打印6，这是为什么呢？<br>
这是因为执行函数时 Python 会尝试从局部变量中获取 <code>b</code>，函数对于已经引用但未赋值的变量并不会自动声明为局部变量，所以解释器发现后边的赋值之前有引用就会抛出 <code>UnboundLocalError</code> 错误。</p>
<blockquote>
<p>Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。</p>
</blockquote>
<p>如果要让解释器把<code>b</code>当做全局变量，要使用<code>global</code>声明：</p>
<pre><code class="language-python">b = 6
def f3(a):
    global b
    print(a)
    print(b)
    b = 9
    
f2(3)
# output
3
6
</code></pre>
<h2 id="闭包">闭包</h2>
<blockquote>
<p><code>闭包</code>是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用，但仍能使用那些绑定。</p>
</blockquote>
<p>介绍闭包前先要说明一下 Python 的函数参数</p>
<h3 id="函数的两种参数">函数的两种参数</h3>
<p>函数有两种参数</p>
<ol>
<li>位置参数</li>
<li>命名参数</li>
</ol>
<pre><code class="language-python">def foo(x, y=0):
	return x - y
</code></pre>
<h3 id="python-中一切都是对象">python 中一切都是对象</h3>
<p>函数和python中其他一样都是对象</p>
<pre><code class="language-python">In [7]: class A(object):
   ...:     pass


In [8]: A
Out[8]: __main__.A
In [9]: type(A)
Out[9]: type
In [10]: def foo():
   ....:     pass


In [11]: type(foo)
Out[11]: function

In [12]: A.__class__
Out[12]: type

In [13]: foo.__class__
Out[13]: function

In [14]: a = 1
In [15]: a.__class__
Out[15]: int

# 类 是对象
In [16]: issubclass(A.__class__, object)
Out[16]: True

# 变量 是对象
In [17]: issubclass(a.__class__, object)
Out[17]: True

# 函数 是对象
In [18]: issubclass(foo.__class__, object)
Out[18]: True
</code></pre>
<p>所以函数也可以作为参数传递给其它函数，也可以被当做返回值返回</p>
<pre><code class="language-python">def add(x, y):
	return x + y

def apply(func):
	return func

&gt;&gt; a = apply(add)
&gt;&gt; type(a)
&lt;type 'function'&gt;

&gt;&gt; a(1, 2)
&gt;&gt; 3
</code></pre>
<h3 id="闭包的使用">闭包的使用</h3>
<p>先来看一个示例：假设有个名为 avg 的函数，它的作用是计算不断增加的系列值的均值；<br>
它是这么使用的：</p>
<pre><code class="language-python">&gt;&gt;&gt; avg(10)
10
&gt;&gt;&gt; avg(11)
10.5
&gt;&gt;&gt; avg(12)
11
</code></pre>
<p>那么我们考虑下，avg 从何而来，它又在哪里保存历史值呢，这个用闭包如何实现呢？<br>
下边的代码是闭包的实现：</p>
<pre><code class="language-python">def make_averager():
    series = []

    def averager(new_value):
        series.append(new_value)
        total = sum(series)
        return total/len(series)

    return averager
</code></pre>
<p>调用  <code>make_averager</code> 时，返回一个 averager 函数对象。每次调用 averager 时，它都会把参数添加到系列值中，然后计算当前平均值。</p>
<pre><code class="language-python">avg = make_averager()

&gt;&gt;&gt; avg(10)
10
&gt;&gt;&gt; avg(11)
10.5
&gt;&gt;&gt; avg(12)
11
</code></pre>
<blockquote>
<p><code>series</code> 是<code>make_averager</code> 函数的局部变量，因为那个函数的定义体中初始化了<code>series: series=[]</code>。但在<code>averager</code> 函数中，<code>series</code> 是自由变量（指未在本地作用域中绑定的变量）。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/wNM0i84JsmsgldhxUjV1TP1M43awUXzWTWU8YY7goHgKOjrZCW8l5qxeo6bYSY46" alt="变量示意图" loading="lazy"></figure>
<blockquote>
<p><code>averager</code> 的闭包延伸到那个函数的作用域之外，包含自由变量<code>series</code>的绑定。</p>
</blockquote>
<ul>
<li>avg 就是一个闭包</li>
<li>也可以说 make_averager 指向一个闭包</li>
<li>或者说 make_averager 是闭包的工厂函数</li>
</ul>
<blockquote>
<p>闭包可以认为是一个内层函数(averager)，由一个变量指代，而这个变量相对于外层包含它的函数而言，是本地变量<br>
嵌套定义在非全局作用域里面的函数能够记住它在被定义的时候它所处的封闭命名空间</p>
</blockquote>
<blockquote>
<p><code>闭包</code> 只是在形式和表现上像函数，但实际上不是函数。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化，所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p>
</blockquote>
<h2 id="装饰器">装饰器</h2>
<h3 id="实现一个简单的装饰器">实现一个简单的装饰器</h3>
<p>对一个已有的模块做一些“修饰工作”，所谓修饰工作就是想给现有的模块加上一些小装饰（一些小功能，这些小功能可能好多模块都会用到），但又不让这个小装饰（小功能）侵入到原有的模块中的代码里去</p>
<pre><code class="language-python">def my_decorator(func):
    def wrapper():
        print &quot;Before the function runs&quot;
        func() # 这行代码可用，是因为 wrapper 的闭包中包含自由变量 func
        print &quot;After the function runs&quot;
    return wrapper

def my_func():
    print &quot;I am a stand alone function&quot;


&gt;&gt; my_func()

# output
I am a stand alone function

# 然后，我们在这里装饰这个函数
# 将函数传递给装饰器，装饰器将动态地将其包装在任何想执行的代码中，然后返回一个新的函数

&gt;&gt; my_func = my_decorator(my_func)
&gt;&gt; my_func()
#output
Before the function runs
I am a stand alone function
After the function runs

# 也可以这么写

@ my_decorator
def my_func():
    print &quot;I am a stand alone function&quot;

&gt;&gt; my_func()
#output
Before the function runs
I am a stand alone function
After the function runs
</code></pre>
<p>装饰器是设计模式中<a href="https://zh.wikipedia.org/wiki/%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F">装饰器模式</a>（<a href="https://en.wikipedia.org/wiki/Decorator_pattern">英文版</a>）的python实现。</p>
<h3 id="多个装饰器">多个装饰器</h3>
<p><strong>装饰器可以嵌套使用</strong></p>
<pre><code class="language-python">def bread(func):
    def wrapper():
        print &quot;&lt;/''''''\&gt;&quot;
        func()
        print &quot;&lt;\______/&gt;&quot;
    return wrapper

def ingredients(func):
    def wrapper():
        print &quot;#tomatoes#&quot;
        func()
        print &quot;~salad~&quot;
    return wrapper

def sandwich(food=&quot;--ham--&quot;):
    print food

#### outputs:
</code></pre>
<h3 id="嵌套两个装饰器">嵌套两个装饰器</h3>
<pre><code class="language-python">&gt;&gt; sandwich = bread(ingredients(sandwich))
&gt;&gt; sandwich()

#### outputs
&lt;/''''''\&gt;
 #tomatoes#
 --ham--
 ~salad~
&lt;\______/&gt;
</code></pre>
<p>更简单的写法</p>
<pre><code class="language-python">@bread
@ingredients
def sandwich(food=&quot;--ham--&quot;):
    print food

</code></pre>
<p><strong>装饰器的顺序是很重要的</strong></p>
<p>如果我们换下顺序就会发现，三明治变成了披萨。。</p>
<pre><code class="language-python">@ingredients
@bread
def sandwich(food=&quot;--ham--&quot;):
    print food

# outputs:
    
 #tomatoes#
 &lt;/' ' ' ' ' '\&gt;
   --ham--
 &lt;\______/&gt;
 ~salad~
</code></pre>
<h3 id="decorator-的工作原理">Decorator 的工作原理</h3>
<p>首先看一下这段代码</p>
<pre><code class="language-python">def deco(fn):
    print &quot;I am %s!&quot; % fn.__name__

@deco
def func():
    pass

# output
I am func!

# 没有执行func 函数 但是 deco 被执行了
</code></pre>
<p>在用某个@decorator来修饰某个函数func时</p>
<pre><code class="language-python">@decorator
def func():
    pass

</code></pre>
<p>其解释器会解释成下面这样的语句：</p>
<p><code>func = decorator(func)</code></p>
<blockquote>
<p>其实就是把一个函数当参数传到另一个函数中，然后再回调<br>
但是值得注意的是装饰器必须返回一个函数给func</p>
</blockquote>
<p>回到刚才的例子</p>
<pre><code class="language-python">
def my_decorator(func):
    def wrapper():
        print &quot;Before the function runs&quot;
        func()
        print &quot;After the function runs&quot;
    return wrapper

def my_func():
    print &quot;I am a stand alone function&quot;

&gt;&gt; my_func = my_decorator(my_func)
&gt;&gt; my_func()
#output
Before the function runs
I am a stand alone function
After the function runs

</code></pre>
<p>my_decorator(my_func)返回了wrapper()函数，所以，my_func其实变成了wrapper的一个变量，而后面的my_func()执行其实变成了wrapper()</p>
<p>比如：多个decorator</p>
<pre><code class="language-python">@decorator_one
@decorator_two
def func():
    pass
</code></pre>
<p>相当于：</p>
<pre><code class="language-python">func = decorator_one(decorator_two(func))
</code></pre>
<p>比如：带参数的decorator：</p>
<pre><code class="language-python">@decorator(arg1, arg2)
def func():
    pass
# 相当于：

func = decorator(arg1,arg2)(func)
</code></pre>
<h3 id="带参数的装饰器">带参数的装饰器</h3>
<p>首先看一下， 如果被装饰的方法有参数</p>
<pre><code class="language-python">def a_decorator(method_to_decorate):
    def wrapper(self, x):
        x -= 3
        print 'x is %s' % x
        method_to_decorate(self, x)
    return wrapper


class A(object):

    def __init__(self):
        self.b = 42

    @a_decorator
    def number(self, x):
        print &quot;b is %s&quot; % (self.b + x)


a = A()
a.number(-3)

# output
x is -6
b is 36
</code></pre>
<p>通常我们都使用更加通用的装饰器，可以作用在任何函数或对象方法上，而不必关心其参数使用</p>
<pre><code class="language-python">def a_decorator(method_to_decorate):
    def wrapper(*args, **kwargs):
        print '****** args ******'
        print args
        print kwargs
        method_to_decorate(*args, **kwargs)
    return wrapper

@a_decorator
def func():
    pass

func()
#output
****** args ******
()
{}

@a_decorator
def func_with_args(a, b=0):
    pass
    return a + b

func_with_args(1, b=2)

#output
****** args ******
(1,)
{'b': 2}

</code></pre>
<p>上边的示例是带参数的被装饰函数</p>
<p>现在我们看一下向装饰器本身传递参数</p>
<h3 id="向装饰器本身传递参数">向装饰器本身传递参数</h3>
<p><strong>装饰器必须使用函数作为参数</strong>，你不能直接传递参数给装饰器本身<br>
如果想传递参数给装饰器，可以 <strong>声明一个用于创建装饰器的函数</strong></p>
<pre><code class="language-python"># 我是一个创建装饰器的函数
def decorator_maker():
    print &quot;I make decorators!&quot;

    def my_decorator(func):
        print &quot;I am a decorator!&quot;

        def wrapped():
            print &quot;I am the wrapper around the decorated function. &quot;
            return func()

        print &quot;As the decorator, I return the wrapped function.&quot;
        return wrapped

    print &quot;As a decorator maker, I return a decorator&quot;
    return my_decorator

# decorator_maker()返回的是一个装饰器
new_deco = decorator_maker()

#outputs
I make decorators!
As a decorator maker, I return a decorator

# 使用装饰器
def decorated_function():
    print &quot;I am the decorated function&quot;

decorated_function = new_deco(decorated_function)   
decorated_function()

# outputs
I make decorators!
As a decorator maker, I return a decorator
I am a decorator!
As the decorator, I return the wrapped function.
I am the wrapper around the decorated function.
I am the decorated  function

</code></pre>
<p><strong>使用@修饰</strong></p>
<pre><code class="language-python">decorated_function = new_deco(decorated_function)

# 等价于下面的方法

@new_deco
def func():
    print &quot;I am the decorated function&quot;


@decorator_maker()
def func():
    print &quot;I am the decorated function&quot;

</code></pre>
<blockquote>
<p>my_decorator（装饰器函数）是decorator_maker（装饰器生成函数）的内部函数<br>
所以可以使用把参数加在decorator_maker（装饰器生成函数）的方法像装饰器传递参数</p>
</blockquote>
<pre><code class="language-python"># 我是一个创建带参数装饰器的函数
def decorator_maker_with_arguments(darg1, darg2):
    print &quot;I make decorators! And I accept arguments:&quot;, darg1, darg2

    def my_decorator(func):
        print &quot;I am a decorator! Somehow you passed me arguments:&quot;, darg1, darg2

        def wrapped(farg1, farg2):
            print &quot;I am the wrapper around the decorated function.&quot;
            print &quot;I can access all the variables&quot;, darg1, darg2, farg1, farg2
            return func(farg1, farg2)

        print &quot;As the decorator, I return the wrapped function.&quot;
        return wrapped

    print &quot;As a decorator maker, I return a decorator&quot;
    return my_decorator

@decorator_maker_with_arguments(&quot;deco_arg1&quot;, &quot;deco_arg2&quot;)
def decorated_function_with_arguments(function_arg1, function_arg2):
    print (&quot;I am the decorated function and only knows about my arguments: {0}&quot;
           &quot; {1}&quot;.format(function_arg1, function_arg2))


decorated_function_with_arguments('farg1', 'farg2')

# outputs

I make decorators! And I accept arguments: deco_arg1 deco_arg2
As a decorator maker, I return a decorator
I am a decorator! Somehow you passed me arguments: deco_arg1 deco_arg2
As the decorator, I return the wrapped function.
I am the wrapper around the decorated function.
I can access all the variables deco_arg1 deco_arg2 farg1 farg2
I am the decorated function and only knows about my arguments: farg1 farg2    

</code></pre>
<p>这里装饰器生成函数内部传递参数是闭包的特性</p>
<h3 id="使用装饰器需要注意">使用装饰器需要注意</h3>
<ul>
<li>装饰器是Python2.4的新特性</li>
<li>装饰器会降低代码的性能</li>
<li>装饰器仅在Python代码导入时被调用一次,之后你不能动态地改变参数.当你使用&quot;import x&quot;,函数已经被装饰</li>
</ul>
<h4 id="使用-functoolswraps">使用 <code>functools.wraps</code></h4>
<p>最后Python2.5解决了最后一个问题，它提供<code>functools</code>模块，包含<code>functools.wraps</code>，这个函数会将被装饰函数的名称、模块、文档字符串拷贝给封装函数</p>
<pre><code class="language-python">def foo():
    print &quot;foo&quot;

print foo.__name__
#outputs: foo

# 但当你使用装饰器
def bar(func):
    def wrapper():
        print &quot;bar&quot;
        return func()
    return wrapper

@bar
def foo():
    print &quot;foo&quot;

print foo.__name__
#outputs: wrapper

</code></pre>
<p><strong>&quot;functools&quot; 可以修正这个错误</strong></p>
<pre><code class="language-python">
import functools

def bar(func):
    # 我们所说的 &quot;wrapper&quot;, 封装 &quot;func&quot;
    @functools.wraps(func)
    def wrapper():
        print &quot;bar&quot;
        return func()
    return wrapper

@bar
def foo():
    print &quot;foo&quot;

# 得到的是原始的名称, 而不是封装器的名称
print foo.__name__
#outputs: foo
</code></pre>
<h3 id="类装饰器">类装饰器</h3>
<pre><code class="language-python">class myDecorator(object):

    def __init__(self, func):
        print &quot;inside myDecorator.__init__()&quot;
        self.func = func

    def __call__(self):
        self.func()
        print &quot;inside myDecorator.__call__()&quot;

@myDecorator
def aFunction():
    print &quot;inside aFunction()&quot;

print &quot;Finished decorating aFunction()&quot;

aFunction()

# output：
# inside myDecorator.__init__()
# Finished decorating aFunction()
# inside aFunction()
# inside myDecorator.__call__()
</code></pre>
<p>我们可以看到这个类中有两个成员：</p>
<ol>
<li>一个是__init__()，这个方法是在我们给某个函数decorator时被调用，所以，需要有一个func的参数，也就是被decorator的函数。</li>
<li>一个是__call__()，这个方法是在我们调用被decorator函数时被调用的</li>
</ol>
<p><strong>如果decorator有参数的话，<strong>init</strong>() 就不能传入func了，而fn是在__call__的时候传入</strong></p>
<pre><code class="language-python">class myDecorator(object):

    def __init__(self, arg1, arg2):
        self.arg1 = arg2

    def __call__(self, func):
        def wrapped(*args, **kwargs):
            return self.func(*args, **kwargs)
        return wrapped
</code></pre>
<h2 id="装饰器示例">装饰器示例</h2>
<p>Python 内置了三个用于装饰方法的函数：property、classmethod和 staticmethod。<br>
另一个常见的装饰器是 functools.wraps，它的作用是协助构建行为良好的装饰器。</p>
<h4 id="functoolslru_cache">functools.lru_cache</h4>
<p><code>functools.lru_cache</code> 实现了内存缓存功能，它可以把耗时长的函数结果保存起来，避免传入相同参数时重复计算。</p>
<p>我们自己的实现代码如下：</p>
<pre><code class="language-python">
from functools import wraps
def memo(fn):
    cache = {}
    miss = object()

    @wraps(fn)
    def wrapper(*args):
        result = cache.get(args, miss)
        if result is miss:
            result = fn(*args)
            print &quot;{0} has been used: {1}x&quot;.format(fn.__name__, wrapper.count)
            cache[args] = result
        return result

    return wrapper

@memo
def fib(n):
    if n &lt; 2:
        return n
    return fib(n - 1) + fib(n - 2)
</code></pre>
<h4 id="统计函数执行次数的装饰器">统计函数执行次数的装饰器</h4>
<pre><code class="language-python">def counter(func):
    &quot;&quot;&quot;
    记录并打印一个函数的执行次数
    &quot;&quot;&quot;
    def wrapper(*args, **kwargs):
        wrapper.count = wrapper.count + 1
        res = func(*args, **kwargs)
        print &quot;{0} has been used: {1}x&quot;.format(func.__name__, wrapper.count)
        return res
    wrapper.count = 0
    return wrapper
</code></pre>
<ul>
<li>装饰器做缓存</li>
</ul>
<h4 id="带有过期时间的内存缓存">带有过期时间的内存缓存</h4>
<pre><code class="language-python">def cache_for(duration):
    def deco(func):
        @wraps(func)
        def fn(*args, **kwargs):
            key = pickle.dumps((args, kwargs))
            value, expire = func.func_dict.get(key, (None, None))
            now = int(time.time())
            if value is not None and expire &gt; now:
                return value
            value = func(*args, **kwargs)
            func.func_dict[key] = (value, int(time.time()) + duration)
            return value
        return fn
    return deco
</code></pre>
<h4 id="统计代码运行时间">统计代码运行时间</h4>
<pre><code class="language-python">def timeit(fn):

    @wraps(fn)
    def real_fn(*args, **kwargs):
        if config.common['ENVIRON'] == 'PRODUCTION':
            return fn(*args, **kwargs)

        _start = time.time()
        #app.logger.debug('Start timeit for %s' % fn.__name__)
        result = fn(*args, **kwargs)
        _end = time.time()
        _last = _end - _start
        app.logger.debug('End timeit for %s in %s seconds.' %
                         (fn.__name__, _last))
        return result

    return real_fn
</code></pre>
<h3 id="参考链接">参考链接</h3>
<ol>
<li><a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484">How can I make a chain of function decorators in Python?</a></li>
<li><a href="http://www.wklken.me/posts/2013/07/19/python-translate-decorator.html#_1">理解PYTHON中的装饰器</a></li>
<li><a href="http://coolshell.cn/articles/11265.html">Python修饰器的函数式编程</a></li>
<li><a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Understanding Python Decorators in 12 Easy Steps!</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0318/">PEP 0318 -- Decorators for Functions and Methods</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3129/">PEP 3129 -- Class Decorators</a></li>
<li><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs">*args and **kwargs? [duplicate]</a></li>
<li><a href="http://stackoverflow.com/questions/1281184/why-cant-i-set-a-global-variable-in-python">why-cant-i-set-a-global-variable-in-python</a></li>
<li><a href="https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1040">【flask route】</a></li>
<li><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">PythonDecoratorLibrary</a></li>
<li><a href="https://wiki.python.org/moin/PythonDecoratorProposals">关于Python Decroator的各种提案</a></li>
</ol>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS入门指南-4：页面布局]]></title>
        <id>http://blog.gusibi.site/post/css-learing-4-page-layout/</id>
        <link href="http://blog.gusibi.site/post/css-learing-4-page-layout/">
        </link>
        <updated>2017-08-10T06:36:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是《CSS设计指南》的读书笔记，用于加深学习效果。</p>
</blockquote>
<h2 id="display-属性">display 属性</h2>
<p><code>display</code>是 CSS 中最重要的用于控制布局的属性。每个元素都有一个默认的 display 值。对于大多数元素它们的默认值通常是 block 或 inline 。一个 block 元素通常被叫做块级元素。一个 inline 元素通常被叫做行内元素。</p>
<h4 id="block">block</h4>
<p><code>div</code> 是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满容器。其他常用的块级元素包括 <code>p</code> 、 <code>form</code> 和HTML5中的新元素： <code>header</code> 、 <code>footer</code> 、 <code>section</code> 等等。</p>
<h4 id="inline">inline</h4>
<p><code>img</code> 是一个标准的行内元素。你可以把两个 <code>&lt;img&gt;</code> 标签写在两行，但这并不影响图片再浏览器中的显示效果，它们会并列出现在一行上。而且标签直接的空白（标记中的两个<img>标签虽然分别位于两行，但这并不影响图片在浏览器中显示时的效果。图片是行内元素，所以它们显示的时候就会并列出现在一行上。而且，标签之间的空白（包括制表、回车和空格）都会被浏览器忽略。</p>
<p><code>a</code> 元素是最常用的行内元素，它可以被用作链接。</p>
<h4 id="none">none</h4>
<p>另一个常用的 display 值是 none。一些特殊元素的默认 display 值是它，例如<code>script</code>。display:none 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。<br>
把display设置为 none，该元素及所有包含在其中的元素，都不会在页面中显示。它们原来占据的空间也会被回收。</p>
<blockquote>
<p>相对的属性是 <code>visibility</code>，这个属性常用的值是 visible（默认）和 hidden。把元素的 visibility 设定为 hidden，元素会隐藏，但它占据的空间仍然存在。</p>
</blockquote>
<h4 id="其他-display-值">其他 display 值</h4>
<p>还有很多的更有意思的 display 值，几乎所有HTML元素的display属性值要么为block，要么为inline。最明显的一个例外是table元素，它有自己特殊的display属性值。<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">这里有一份详细的列表</a>。</p>
<p>块级元素（比如标题和段落）会相互堆叠在一起沿页面向下排列，每个元素分别占一行。而行内元素（比如链接和图片）则会相互并列，只有在空间不足以并列的情况下才会折到下一行显示 。</p>
<p>块级元素和行内元素是可以互相转化的：</p>
<pre><code class="language-css">/*默认为块级元素*/
p {display: inline;}
/*默认为行内元素*/
a {display: block;}
</code></pre>
<p>属性了 display 属性之后，我们来看下页面布局：</p>
<h2 id="布局的基本概念">布局的基本概念</h2>
<p>多栏布局有三种基本的实现方案：<code>固定宽度</code>、<code>流动</code>、 <code>弹性</code>。</p>
<ul>
<li>
<p>固定宽度布局的大小不会随用户调整浏览器窗口大小而变化，一般是900到1100像素宽。其中960像素是最常见的，因为这个宽度适合所有现代显示器，而且能够被16、12、10、8、6、5、4和3整除，不仅容易计算等宽分栏的数量，而且计算结果也能得到没有小数的像素数。</p>
</li>
<li>
<p>流动布局的大小会随用户调整浏览器窗口大小而变化。这种布局能够更好地适应大屏幕，但同时也意味着放弃对页面某些方面的控制，比如随着页面宽度变化，文本行的长度和页面元素之间的位置关系都可能变化。Amazon.com的页面采用的就是流动中栏布局，在各栏宽度加大时通过为内容元素周围添加空白来保持内容居中，而且现在的导航条会在布局变窄到某个宽度时收缩进一个下拉菜单中，从而为内容腾出空间。</p>
</li>
<li>
<p>弹性布局与流动布局类似，在浏览器窗口变宽时，不仅布局变宽，而且所有内容元素的大小也会变化，让人产生一种所有东西都变大了的感觉。</p>
</li>
</ul>
<h3 id="布局的高度">布局的高度</h3>
<p>多数情况下，布局中结构化元素（乃至任何元素）的高度是不必设定的。事实上，我甚至想告诉你根本不应该给元素设定高度。除非你确实需要这样做，比如在页面中创造一个绝对定位的元素。</p>
<blockquote>
<p>为什么正常情况下都应该保持元素height属性的默认值auto不变呢？很简单，只有这样元素才能随自己包含内容的增加而在垂直方向上扩展。这样扩展的元素会把下方的元素向下推，而布局也能随着内容数量的增减而垂直伸缩。假如你明确设定了元素的高度，那么超出的内容要么被剪掉，要么会跑到容器之外——取决于元素overflow属性的设定。</p>
</blockquote>
<h3 id="布局的宽度">布局的宽度</h3>
<p>与高度不同，我们需要更精细地控制布局宽度，以便随着浏览器窗口宽度的合理变化，布局能够作出适当的调整，确保文本行不会过长或过短。如果随意给元素添加内边距、边框，或者元素本身过大，导致浮动元素的宽度超过包含元素的布局宽度，那浮动元素就可能“躲”到其他元素下方。应该让这些内容元素自动扩展到填满栏的宽度。(这是块级元素的默认行为)</p>
<h2 id="三栏-固定宽度布局">三栏-固定宽度布局</h2>
<p>我们先从一个简单的居中的单栏布局开始吧。看下面 HTML 代码，主要标记的 ID 是 wrapper：</p>
<pre><code class="language-html">&lt;div id=&quot;wrapper&quot;&gt;
	&lt;article&gt;
        &lt;h1&gt;Single-Column Layout&lt;/h1&gt;
        &lt;p&gt;这是第一段&lt;/p&gt;
        &lt;h2&gt;This is a Second-Level Heading&lt;/h2&gt;
        &lt;p&gt;这是第二段&lt;/p&gt;
    &lt;/article&gt;
&lt;/div&gt;
</code></pre>
<p>布局相关 css 如下：</p>
<pre><code class="language-css">#wrapper {
	width:960px; margin:0 auto; border:1px solid;
}
article {
	background:#ffed53;	
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/ehJIyepJP3ARTLkMYIDfndpryupJA8PrXFP1MlcUdPiDuX0gfMZo8r15dRn35M9l" alt="效果图" loading="lazy"></figure>
<blockquote>
<p>如图所示，通过给外包装设定宽度值，并将其水平外边距设定为 auto，这个单栏布局在页面上居中了。随着向里添加内容，这一栏的高度会相应增加。外包装中的article元素本质上就是一个没有宽度的块级盒子（关于“没有宽度的盒子”，请参见3.2节），它水平扩展填满了外包装。</p>
</blockquote>
<p>下面，我们再向外包装里添加一个导航元素，让它作为第二栏。</p>
<p>HTML 代码如下：</p>
<pre><code class="language-html">&lt;div id=&quot;wrapper&quot;&gt;
	&lt;nav&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 1&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;article&gt;
        &lt;h1&gt;Single-Column Layout&lt;/h1&gt;
        &lt;p&gt;这是第一段&lt;/p&gt;
        &lt;h2&gt;This is a Second-Level Heading&lt;/h2&gt;
        &lt;p&gt;这是第二段.&lt;/p&gt;
    &lt;/article&gt;
&lt;/div&gt;
</code></pre>
<p>这里我们将两栏都添加<code>float: left</code>，以让它们并排显示。</p>
<pre><code class="language-css">#wrapper {
	width:960px; 
	margin:0 auto; 
	border:1px solid; 
	overflow:hidden;
}
nav {
	width:150px;
	float:left; /*浮动*/
	background:#dcd9c0;
	}
nav li {
    /*去掉列表项目符号*/
	list-style-type:none;
	}
article {
	width:810px;
	float:left; /*浮动*/
	background:#ffed53;	
	}
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/FJAogkzMENomRRtTqAobo1o3EiGsSSMBjhdz-4NZc2NOP0vaEjUF6br4TeZvH943" alt="效果图" loading="lazy"></figure>
<blockquote>
<p>这里我们把两栏的总宽度设定为外包装的宽度（150+810=960），并浮动它们，就可以创造出并肩排列的两栏来。每一栏的长度取决于内容多少。</p>
</blockquote>
<p>接下来我们添加第三栏。</p>
<pre><code class="language-html">&lt;div id=&quot;wrapper&quot;&gt;
	&lt;nav&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 1&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;article&gt;
        &lt;h1&gt;Single-Column Layout&lt;/h1&gt;
        &lt;p&gt;这是第一段&lt;/p&gt;
        &lt;h2&gt;This is a Second-Level Heading&lt;/h2&gt;
        &lt;p&gt;这是第二段.&lt;/p&gt;
    &lt;/article&gt;
    &lt;aside&gt;
        &lt;h3&gt;This is the Sidebar&lt;/h3&gt;
        &lt;p&gt;这是侧边栏.&lt;/p&gt;
    &lt;/aside&gt;
&lt;/div&gt;
</code></pre>
<p>接下来我们调整一下 article 这一栏的宽度，为第三栏腾出空间</p>
<pre><code class="language-css">#wrapper {
	width:960px; margin:0 auto; border:1px solid; overflow:hidden;
}
nav {
	width:150px;
	float:left;
	background:#dcd9c0;
}
article {
	width:600px;
	float:left;
	background:#ffed53;	
}
aside {
	width:210px;
	float:left;
	background:#3f7ccf;
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/ih7NWCcRAtvH4fHkIJ26zbdTl0K378Ew4oKFbVu1y8TCUrQsqvFFruceGWPdPoaP" alt="三栏的示意图" loading="lazy"></figure>
<blockquote>
<p>如图所示，通过把三个浮动容器的总宽度设定为恰好等于外包装的宽度（150+600+210=960），就有了三栏布局的框架。</p>
</blockquote>
<p>现在我们再添加一个页眉和页脚：</p>
<pre><code class="language-html">&lt;div id=&quot;wrapper&quot;&gt;
	&lt;header&gt;
		&lt;h1&gt;A Fixed-Width Layout&lt;/h1&gt;
	&lt;/header&gt;
	&lt;nav&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 1&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;article&gt;
        &lt;h1&gt;Single-Column Layout&lt;/h1&gt;
        &lt;p&gt;这是第一段&lt;/p&gt;
        &lt;h2&gt;This is a Second-Level Heading&lt;/h2&gt;
        &lt;p&gt;这是第二段.&lt;/p&gt;
    &lt;/article&gt;
    &lt;aside&gt;
        &lt;h3&gt;This is the Sidebar&lt;/h3&gt;
        &lt;p&gt;这是侧边栏.&lt;/p&gt;
    &lt;/aside&gt;
   	&lt;footer&gt;
        &lt;p&gt;This is the footer. Phasellus pretium gravida interdum. Nam interdum posuere tempus. Ut commodo laoreet dolor, non hendrerit mi dictum vitae. Nam nec egestas libero.&lt;/p&gt;
    &lt;/footer&gt;
&lt;/div&gt;
</code></pre>
<p>为了让页脚在最下一栏不浮动到 <code>aside</code> 后边，我们为页脚应用<code>clear:both</code>，以组织它向上移动。<br>
css 样式如下：</p>
<pre><code class="language-css">* {margin:0; padding:0;} 
#wrapper {
    width:960px;
    margin:0 auto;
    border:1px solid;
} 
header {
    background:#f00;
} 
nav {
    width:150px;
    float:left;
    background:#dcd9c0;
} 
nav li {
    list-style-type:none;
} 
article {
    width:600px;
    float:left;
    background:#ffed53;
}
aside {
    width:210px;
    float:left;
    background:#3f7ccf;
} 
footer {
    clear:both;
    background:#000;
}
</code></pre>
<p>现在效果如图：<br>
<img src="http://media.gusibi.mobi/qGmwPd79PzMw_N-UcZFSj8teXyQ11LnBN_r5aeExPp44vtBtZ4YGYRNor_Pp2bfq" alt="三栏+页眉+页脚的效果图" loading="lazy"></p>
<p>现在各栏太拥挤，每栏的高度也都由文本内容决定，我们现在修改一下，为内容间加上空白。</p>
<h3 id="为栏设定内边距和边距">为栏设定内边距和边距</h3>
<p>为了让内容与栏边界空开距离，为栏添加水平外边距和内边距，但这样会导致布局宽度增大，进而浮动栏下滑。<br>
比如，我们给 article 增加内边距：</p>
<pre><code class="language-css">article {
    width: 600px;
    float: left;
    background: #ffed53;
    padding: 10px 20px;
}
</code></pre>
<p>效果如图：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/rjwewoLYNvkPSRnwJYZJTCUqZLYpsDr6P1oFgWe0X3fdQDdApeNcrKvb07jQw4AR" alt="article 增加内边距后的效果图" loading="lazy"></figure>
<p>由于增加了内边距导致<code>article</code>的总宽度增加，导致右边的栏不能再与前两排并列在一起。有三种方法来预防改问题发生：</p>
<ul>
<li>从设定的元素宽度中减去添加的水平外边距、边框和内边距的宽度和。</li>
<li>在容器内部的元素上添加内边距或外边距。</li>
<li>使用CSS3的box-sizing属性切换盒子缩放方式，比如section {box-sizing:border-box;} 。 应用box-sizing属性后，给section添加边框和内边距都不会增大盒子，相反会导致内容变窄。</li>
</ul>
<h3 id="重设宽度以抵消内边距和边框">重设宽度以抵消内边距和边框</h3>
<p>一个代代相传的解决方案是通过数学计算。CSS开发者需要用比他们实际想要的宽度小一点的宽度，需要减去内边距和边框的宽度。<code>比如我们给600像素宽的中间栏增加了20像素的内边距，为了抵消增加的内边距，可以把栏减少40像素而设定为560像素。</code>值得庆幸地是你不需要再这么做了...</p>
<h3 id="给容器内部元素应用内边距和边框">给容器内部元素应用内边距和边框</h3>
<p>把外边距和内边距应用到内容元素上确实有效，不过这样的前提是这些元素没有明确的设定宽度，这样内容才会随内外边距的增加而缩小。<br>
与其为容器中的元素添加外边距，不如在栏中再添加一个没有宽度的div，让它包含所有内容元素，然后再给这个div应用边框和内边距。如此一来，只要为内部div设定一次样式，就可以把让所有内容元素与栏边界保持一致的距离。而且，将来再需要调整时也会很方便。任何新增内容元素的宽度都由这个内部div决定。</p>
<p>下面我们用这种方法修复上面第三栏浮动到下边的问题。</p>
<pre><code class="language-html">&lt;article&gt;
    &lt;div class=&quot;inner&quot;&gt;
    &lt;!-- 这里是各种内容 --&gt;
    &lt;/div&gt;
&lt;/article&gt;
</code></pre>
<p>接下来，我们不仅要给内部 div 应用内边距，还要给她应用外边距和边框。</p>
<pre><code class="language-css">/*更新 css*/
article {
	width:600px;
	float:left;
	background:#ffed53;
}
article .inner {
	margin:10px; 
	border:2px solid red;
	padding:20px; 
}
</code></pre>
<p>效果如图：<br>
<img src="http://media.gusibi.mobi/rQINy0ZYV9tT-nU7LJPlfY-RqwcDLA7n5PdZzdEEa-eGPz43J0G40nnLbbYvycAa" alt="给容器内部元素应用内边距和边框的示例图" loading="lazy"></p>
<p>以上措施使布局有了明显改观。就这么简单的几下，布局就显得更专业了。处理栏及其内部div的关键在于，浮动栏并设定栏宽，但不给任何内容元素设定宽度。要让内容元素扩展以填充它们的父元素——内部div。这样，只要简单地设定内部div的外边距和内边距，就可以让它们以及它们包含的内容与栏边界保持一定距离。</p>
<h3 id="使用-box-sizingborder-box">使用 box-sizing:border-box</h3>
<p>人们慢慢的意识到传统的盒子模型不直接，所以他们新增了一个叫做 box-sizing 的CSS属性。当你设置一个元素为 box-sizing: border-box; 时，此元素的内边距和边框不再会增加它的宽度。这里有一个与前一页相同的例子，唯一的区别是两个元素都设置了 box-sizing: border-box;</p>
<pre><code class="language-css">nav {
	-webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
	box-sizing:border-box;
	width:150px;
	float:left;
	background:#dcd9c0;
	padding:10px 10px;
	}
article {
	-webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
	box-sizing:border-box;
	width:600px;
	float:left;
	background:#ffed53;	
	padding:10px 20px;
}
aside {
    -webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
	box-sizing:border-box;
	width:210px;
	float:left;
	background:#3f7ccf;
	padding:10px 10px;
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/W72nR0pZ9isuBunBOxwMX5O1fnacmxEZdNSTQkT0uDPm_87znZleYhehw83kslGH" alt="使用 box-sizing: border-box; 的效果图" loading="lazy"></figure>
<p>这是目前为止最好的解决方法了，那最简单有效的方法就是在 css 里添加这样一条规则：</p>
<pre><code class="language-css">* {
    -webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
    box-sizing:border-box;        
    }
</code></pre>
<h2 id="三栏-中栏流动布局">三栏-中栏流动布局</h2>
<p>中栏流动布局的目的是在屏幕变窄时，中栏变窄，左栏和右栏宽度不变。<br>
这里我们使用<code>负外边距</code>实现。</p>
<h3 id="用负外边距实现">用负外边距实现</h3>
<p>实现三栏布局且让中栏内容区流动（不固定）的核心问题是处理右栏的定位，并在中栏内容区大小改变时控制右栏与布局的关系。</p>
<p>这里我们使用<code>Ryan Brill</code>给出的控制两个外包装容器的外边距的解决方案。其中一个外包装包围三栏，另一个外保障包围左栏和中栏。</p>
<p>html代码示例如下：</p>
<pre><code class="language-html">&lt;div id=&quot;main_wrapper&quot;&gt;
    &lt;header&gt;
        &lt;!-- 页眉--&gt;
    &lt;/header&gt;
    &lt;div id=&quot;threecolwrap&quot;&gt;/*三栏外包装（包围全部三栏）*/
        &lt;div id=&quot;twocolwrap&quot;&gt;/*两栏外包装（包围左栏和中栏）*/ /*左栏*/
            &lt;nav&gt;
                &lt;!-- 导航 --&gt;
            &lt;/nav&gt; /*中栏*/
            &lt;article&gt;
                &lt;!-- 区块 --&gt;
            &lt;/article&gt;
        &lt;/div&gt;/*结束两栏外包装（twocolwrap）*/ /*右栏*/
        &lt;aside&gt;
            &lt;!-- 侧栏 --&gt;
        &lt;/aside&gt;
    &lt;/div&gt;/*结束三栏外包装（threecolwrap）*/
    &lt;footer&gt;
        &lt;!-- 页脚 --&gt;
    &lt;/footer&gt;
&lt;/div&gt; 
</code></pre>
<p>css规则如下：</p>
<pre><code class="language-css">* {
    margin: 0;
    padding: 0;
}

body {
    font: 1em helvetica, arial, sans-serif;
}

div#main_wrapper {
    min-width: 600px;
    max-width: 1100px;
    /*超过最大宽度时，居中布局*/
    margin: 0 auto;
    /*背景图片默认从左上角开始拼接*/
    background: url(images/bg_tile_150pxw.png) repeat-y #eee;
}

header {
    padding: 5px 10px;
    background: #3f7ccf;
}

div#threecolwrap {
    /*浮动强制它包围浮动的栏*/
    float: left;
    width: 100%;
    /*背景图片右对齐*/
    background: url(images/bg_tile_210pxw.png) top right repeat-y;
}

div#twocolwrap {
    /*浮动强制它包围浮动的栏*/
    float: left;
    width: 100%;
    /*把右栏拉到区块外边距腾出的位置上*/
    margin-right: -210px;
}

nav {
    float: left;
    width: 150px;
    background: #f00;
    padding: 20px 0;
}

/*让子元素与栏边界保持一定距离*/

nav&gt;* {
    margin: 0 10px;
}

article {
    width: auto;
    margin-left: 150px;
    /*在流动居中的栏右侧腾出空间*/
    margin-right: 210px;
    background: #eee;
    padding: 20px 0;
}

/*让子元素与栏边界保持一定距离*/ 
article&gt;* {
    margin: 0 20px;
}

aside {
    float: left;
    width: 210px;
    background: #ffed53;
    padding: 20px 0;
}

/*让子元素与栏边界保持一定距离*/ 
aside&gt;* {
    margin: 0 10px;
}

footer {
    clear: both;
    width: 100%;
    text-align: center;
    background: #000;
}
</code></pre>
<p><img src="http://media.gusibi.mobi/DMdD7nQ_BMk1Q8tQMwYgnu6BJDVM_BZMRx5C1sUUVj1AtFFb5EkD9aEshr-qDEhb" alt="宽屏效果" loading="lazy"><br>
<img src="http://media.gusibi.mobi/9S7ij-86f1AF6eV7jOziitveLNrUpbO_untKwE4uofOXyvE5UrVvxY_1DEnVzp50" alt="窄屏效果" loading="lazy"></p>
<blockquote>
<p><code>基本原理：</code>上面两幅图展示了流动中栏布局。三栏中的右栏是210像素宽。为了给右栏腾出空间，中栏article元素有一个210像素的右外边距。包围左栏和中栏的两栏外包装上210像素的负右外边距，会把右栏拉回article元素右外边距（在两栏外包装内部右侧）创造的空间内。中栏aticle元素的宽度是auto，因此它仍然会力求占据浮动左栏剩余的所有空间。可是，一方面它自己的右外边距在两栏外包装内为右栏腾出了空间，另一方面两栏外包装的负右外边距又把右栏拉到了该空间内。</p>
</blockquote>
<h3 id="百分比宽度">百分比宽度</h3>
<p>上面的例子中，我们用到了<code>百分比宽度</code>，百分比是一种相对于包含块的计量单位。你还能同时使用 min-width 和 max-width 来限制最大或最小宽度！</p>
<p>你可以用百分比做布局，但是这需要更多的工作。如果我们上边的例子中 nav 用百分比宽度做布局，当窗口宽度很窄时 nav 的内容会以一种不太友好的方式被包裹起来。</p>
<h2 id="inline-block-布局">inline-block 布局</h2>
<p>上面的例子我们实现多栏并列的方式是使用<code>float</code>，不过我们也可以使用<code>inline-block</code>。下边是我们把 float 替换为<code>inline-block</code> 的例子。</p>
<pre><code class="language-css">nav {
	width:150px;
    display: inline-block;
    vertical-align: top;
	background:#dcd9c0;
	}
article {
    word-spacing:0;
	width:600px;
    display: inline-block;
    vertical-align: top;
	background:#ffed53;	
	}
aside {
    word-spacing:0;
	width:210px;
    display: inline-block;
    vertical-align: top;
	background:#3f7ccf;
	}
</code></pre>
<p>使用<code>inline-block</code>，有一些事情需要你牢记：</p>
<ul>
<li>vertical-align 属性会影响到 inline-block 元素，你可能会把它的值设置为 top 。</li>
<li>你需要设置每一列的宽度</li>
<li>如果HTML源代码中元素之间有空格，那么列与列之间会产生空隙</li>
</ul>
<p>特别是第三条，如果我们不做任何修改，两个 block 之间会存在空格，像这样：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/8uHhpJiVoVCzg007mXBb2vHjceIB8Ja4Irws_AvxpE07QhjH360KZhiFniFMpmzr" alt="列与列之间有空格" loading="lazy"></figure>
<p>因为列与列之间产生了空格，所以 aside 跑到了下边。这里最简单的解决办法是：</p>
<pre><code class="language-html">&lt;nav&gt;
导航
&lt;/nav&gt;&lt;article&gt;
内容
&lt;/article&gt;&lt;aside&gt;
第三栏
&lt;/aside&gt;
</code></pre>
<p>其他解决方案可以参考这篇文章 <a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/">Fighting the Space Between Inline Block Elements</a></p>
<h2 id="其他布局方式">其他布局方式</h2>
<p>初次之外，css 还提供了 <code>column</code>、<code>flexbox</code>等布局方式，这些以后有机会再介绍吧。</p>
<h2 id="总结">总结</h2>
<p>这篇文章我们介绍了用浮动的有宽度的元素来创建多栏布局、如何让固定布局在页面上居中以及让它们在一定范围内可以伸缩。同时也了解了如何使用内部div在浮动元素中生成间距，而又不会改变布局的总宽度。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752018&amp;idx=1&amp;sn=6915e4f11ba08fa196a64375224cd92e&amp;chksm=80b0b878b7c7316e1a065ae991c534cc11ca5fe72b33690a98fb1c3f6f53f8c98c4c8744cd3a#rd">CSS入门指南-2：盒子模型、浮动和清除</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752022&amp;idx=1&amp;sn=a37d1ec3bab1d8188ae6ae45b1b1a211&amp;chksm=80b0b87cb7c7316ac3dcf29669d83f84300f1d85f8262848519ab1a37d754846b8eb482be436#rd">CSS入门指南-3：定位元素</a></li>
<li><a href="http://zh.learnlayout.com">学习CSS布局</a></li>
<li><a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/">Fighting the Space Between Inline Block Elements</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 Sanic Exception]]></title>
        <id>http://blog.gusibi.site/post/sanic-custom-exception/</id>
        <link href="http://blog.gusibi.site/post/sanic-custom-exception/">
        </link>
        <updated>2017-08-04T18:23:35.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>Sanic</code> 是一个和类Flask 的基于Python3.5+的web框架，它使用了 Python3 异步特性，有远超 flask 的性能。</p>
</blockquote>
<p>编写 RESTful API 的时候，我们会定义特定的异常错误类型，比如我定义的错误返回值格式为：</p>
<pre><code class="language-json">{
  &quot;error_code&quot;: 0,
  &quot;message&quot;: &quot;string&quot;,
  &quot;text&quot;: &quot;string&quot;
}
</code></pre>
<p>不同的错误信息指定不同的 http 状态码。</p>
<p>sanic 提供了几种常用的 exception：</p>
<ul>
<li>NotFound(404)</li>
<li>Forbidden(403)</li>
<li>ServerError(500)</li>
<li>InvalidUsage(400)</li>
<li>Unauthorized(401)</li>
<li>RequestTimeout(408)</li>
<li>PayloadTooLarge(413)</li>
</ul>
<p>这些 exception 继承自 SanicException 类：</p>
<pre><code class="language-python">class SanicException(Exception):

    def __init__(self, message, status_code=None):
        super().__init__(message)

        if status_code is not None:
            self.status_code = status_code
</code></pre>
<p>从上述代码可以看出，这些异常只能指定 message 和 status_code 参数，那我们可不可以自定义 exception 然后在自定义的 exception 中增加参数呢？下面的代码是按照这个思路修改后的代码：</p>
<pre><code class="language-python">class ApiException(SanicException):

    def __init__(self, code, message=None, text=None, status_code=None):
        super().__init__(message)
        self.error_code = code
        self.message = message
        self.text = text

        if status_code is not None:
            self.status_code = status_code
</code></pre>
<p>使用后我得到一个结果如下：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/2VpVk8OPGxBl7oZ4qzyU7pBroeXXUslZ5vWiHRPnq0cZ1fFUsGDd23o5Gk7knIUa" alt="错误结果示例" loading="lazy"></figure>
<p>从结果可以发现，除了 http 状态码使我想要的其它全错，连 <code>content-type</code> 都是 <code>text/plain; charset=utf-8</code>，为什么会这样呢，我们定义的参数code 和 text 去了哪里？</p>
<p>翻开 sanic handler 的代码<a href="https://github.com/channelcat/sanic/blob/master/sanic/handlers.py">https://github.com/channelcat/sanic/blob/master/sanic/handlers.py</a>我找到了答案：</p>
<pre><code class="language-python">def default(self, request, exception):
        self.log(format_exc())
        if issubclass(type(exception), SanicException):
            # 如果是 SanicException 类，返回格式是定义好的，
            # response 处理方法用的是 text
            return text(
                'Error: {}'.format(exception),
                status=getattr(exception, 'status_code', 500),
                headers=getattr(exception, 'headers', dict())
            )
        elif self.debug:
            html_output = self._render_traceback_html(exception, request)

            response_message = (
                'Exception occurred while handling uri: &quot;{}&quot;\n{}'.format(
                    request.url, format_exc()))
            log.error(response_message)
            return html(html_output, status=500)
        else:
            return html(INTERNAL_SERVER_ERROR_HTML, status=500)
</code></pre>
<blockquote>
<p>从源码可以看出，如果response 结果是 SanicException 类，response 处理方法会改用text，响应内容格式为 <code>Error: status_code</code>。</p>
</blockquote>
<p>看来直接使用自定义异常类的方法不能满足我们上边定义的 json 格式（需要有 error_code、message 和 text）数据的要求。那我们能不能自定义 异常处理方法呢？<code>答案当然是可以。</code></p>
<p>下面介绍两种自定义异常处理的方法：</p>
<h2 id="使用-responsejson">使用 response.json</h2>
<p>这种方法比较简单，既然 sanic 异常处理是把错误信息使用 response.text() 方法返回，那我们改成 response.json() 不就可以了么。sanic response 提供了 json 的响应对象。可以使用 response.json 定义一个错误处理方法：</p>
<pre><code class="language-python">def json_error(error_code, message, text, status_code):
    return json(
        {
            'error_code': error_code,
            'message': message,
            'text': text
        },
        status=status_code)
</code></pre>
<p>这样我们只需要在需要抛出异常的地方 <code>return json_error(code, msg, text, status_code)</code>。</p>
<p>使用这种方法有一点需要注意：</p>
<pre><code class="language-python">
def get_account():
    ...
    if account:
        return account
    else:
        # 如果用户没找到 返回错误信息
        return json_error(code, msg, text, status_code)
    
@app.route(&quot;/&quot;)
async def test(request):
    account = get_account()
    return text('Hello world!')
</code></pre>
<p>这段代码中，如果我们没有找到用户信息，json_error 的返回结果会赋值给 account，并不会抛出异常，如果需要抛出异常，我们需要在 test 方法中检查 account 的结果，如果包含 account 是 response.json 对象， 直接 return， 更正后的代码如下：</p>
<pre><code class="language-python">@app.route(&quot;/&quot;)
async def test(request):
    account = get_account()
    if isinstance(account, response.json):
        return account
    return text('Hello world!')
</code></pre>
<p>这样虽然简单，但是会增加很多不必要的判断，那有没有方法可以直接抛出异常呢？这时就可以使用 sanic 提供的 <code>@app.exception</code> 装饰器了。</p>
<h2 id="使用-handling-exceptions">使用 Handling exceptions</h2>
<p>sanic 提供了一个 <code>@app.exception</code>装饰器，使用它可以覆盖默认的异常处理方法。它的使用方法也很简单：</p>
<pre><code class="language-python">from sanic.response import text
from sanic.exceptions import NotFound

@app.exception(NotFound)
def ignore_404s(request, exception):
    return text(&quot;Yep, I totally found the page: {}&quot;.format(request.url))
</code></pre>
<p>这个装饰器允许我们传入一个需要捕获的异常的列表，然后，就可以在自定义方法中返回任意的响应数据了。</p>
<p>以下自定义的异常处理类：</p>
<pre><code class="language-python">error_codes = {
    'invalid_token': ('Invalid token', '无效的token'),
}

def add_status_code(code):
    &quot;&quot;&quot;
    Decorator used for adding exceptions to _sanic_exceptions.
    &quot;&quot;&quot;
    def class_decorator(cls):
        cls.status_code = code
        return cls
    return class_decorator


class MetisException(SanicException):

    def __init__(self, code, message=None, text=None, status_code=None):
        super().__init__(message)
        self.error_code = code
        _message, _text = error_codes.get(code, (None, None))
        self.message = message or _message
        self.text = text or _text

        if status_code is not None:
            self.status_code = status_code

@add_status_code(404)
class NotFound(MetisException):
    pass

@add_status_code(400)
class BadRequest(MetisException):
    pass

# 使用 app.exception 捕获异常，返回自定义响应数据
@app.exception(Unauthorized, NotFound, BadRequest)
def json_error(request, exception):
    return json(
        {
            'error_code': exception.error_code,
            'message': exception.message,
            'text': exception.text
        },
        status=exception.status_code)
</code></pre>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://sanic.readthedocs.io/en/latest/sanic/exceptions.html">Sanic Exceptions：http://sanic.readthedocs.io/en/latest/sanic/exceptions.html</a></li>
<li><a href="https://github.com/gusibi/Metis">Metis：https://github.com/gusibi/Metis</a></li>
</ul>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小程序开发：python sanic 实现小程序登录注册]]></title>
        <id>http://blog.gusibi.site/post/metis-1-wxapp-login/</id>
        <link href="http://blog.gusibi.site/post/metis-1-wxapp-login/">
        </link>
        <updated>2017-07-29T20:17:13.000Z</updated>
        <content type="html"><![CDATA[<p>开发微信小程序时，接入小程序的授权登录可以快速实现用户注册登录的步骤，是快速建立用户体系的重要一步。这篇文章将介绍 python + sanic + 微信小程序实现用户快速注册登录全栈方案。</p>
<p><strong>微信小程序登录时序图如下：</strong></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/_5HFdz7B13G7D1rN0hnqAvRwE_tLPZCQc_7YHkBID_zHVzVxzLClBPr9DPnufdSf" alt="登录时序图" loading="lazy"></figure>
<p>这个流程分为两大部分：</p>
<ol>
<li>小程序使用 wx.login() API 获取 code，调用 wx.getUserInfo() API 获取 encryptedData 和 iv，然后将这三个信息发送给第三方服务器。</li>
<li>第三方服务器获取到 code、encryptedData和 iv 后，使用 code 换取 session_key，然后将 session_key 利用 encryptedData 和 iv 解密在服务端获取用户信息。根据用户信息返回 jwt 数据，完成登录。</li>
</ol>
<p>下面我们先看一下小程序提供的 API。</p>
<h2 id="小程序登录-api">小程序登录 API</h2>
<p>在这个授权登录的过程中，用到的 API 如下：</p>
<ul>
<li>wx.login</li>
<li>wx.getUserInfo</li>
</ul>
<p><code>wx.chekSession</code> 是可选的，这里并没有用到。</p>
<h3 id="wxloginobject">wx.login(OBJECT)</h3>
<p>调用此接口可以获取登录凭证（code），以用来换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）。</p>
<p>如果接口调用成功，返回结果如下：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>errMsg</td>
<td>String</td>
<td>调用结果</td>
</tr>
<tr>
<td>code</td>
<td>String</td>
<td>用户允许登录后，回调内容会带上 code（有效期五分钟），开发者需要将 code 发送到开发者服务器后台，使用code 换取 session_key api，将 code 换成 openid 和 session_key</td>
</tr>
</tbody>
</table>
<h4 id="code-换取-session_key">code 换取 session_key</h4>
<p>开发者服务器使用登录凭证 code 获取 session_key 和 openid。其中 session_key 是对用户数据进行加密签名的密钥。为了自身应用安全，session_key 不应该在网络上传输。所以这一步应该在服务器端实现。</p>
<h3 id="wxgetuserinfo">wx.getUserInfo</h3>
<p>此接口用来获取用户信息。</p>
<blockquote>
<p>当 <code>withCredentials</code> 为 true 时，要求此前有调用过 wx.login 且登录态尚未过期，此时返回的数据会包含 encryptedData, iv 等敏感信息；当 withCredentials 为 false 时，不要求有登录态，返回的数据不包含 encryptedData, iv 等敏感信息。</p>
</blockquote>
<p>接口success 时返回参数如下：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>userInfo</td>
<td>OBJECT</td>
<td>用户信息对象，不包含 openid 等敏感信息</td>
</tr>
<tr>
<td>rawData</td>
<td>String</td>
<td>不包括敏感信息的原始数据字符串，用于计算签名。</td>
</tr>
<tr>
<td>signature</td>
<td>String</td>
<td>使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息，参考文档 signature。</td>
</tr>
<tr>
<td>encryptedData</td>
<td>String</td>
<td>包括敏感数据在内的完整用户信息的加密数据，详细见加密数据解密算法</td>
</tr>
<tr>
<td>iv</td>
<td>String</td>
<td>加密算法的初始向量，详细见加密数据解密算法</td>
</tr>
</tbody>
</table>
<p><code>encryptedData</code> 解密后为以下 json 结构，详见加密数据解密算法</p>
<pre><code class="language-json">{
    &quot;openId&quot;: &quot;OPENID&quot;,
    &quot;nickName&quot;: &quot;NICKNAME&quot;,
    &quot;gender&quot;: GENDER,
    &quot;city&quot;: &quot;CITY&quot;,
    &quot;province&quot;: &quot;PROVINCE&quot;,
    &quot;country&quot;: &quot;COUNTRY&quot;,
    &quot;avatarUrl&quot;: &quot;AVATARURL&quot;,
    &quot;unionId&quot;: &quot;UNIONID&quot;,
    &quot;watermark&quot;:
    {
        &quot;appid&quot;:&quot;APPID&quot;,
    &quot;timestamp&quot;:TIMESTAMP
    }
}
</code></pre>
<blockquote>
<p>由于解密 encryptedData 需要 session_key 和 iv 所以，在给服务器端发送授权验证的过程中需要将 code、encryptedData 和 iv 一起发送。</p>
</blockquote>
<h2 id="服务器端提供的-api">服务器端提供的 API</h2>
<p>服务器端授权需要提供两个 API：</p>
<ol>
<li>/oauth/token 通过小程序提供的验证信息获取服务器自己的 token</li>
<li>/accounts/wxapp 如果登录用户是未注册用户，使用此接口注册为新用户。</li>
</ol>
<h3 id="换取第三方-tokenoauthtoken">换取第三方 token（/oauth/token）</h3>
<p>开始授权时，小程序调用此 API 尝试换取jwt，如果用户未注册返回401，如果用户发送参数错误，返回403。</p>
<p>接口 获取 jwt 成功时返回参数如下：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>account_id</td>
<td>string</td>
<td>当前授权用户的用户 ID</td>
</tr>
<tr>
<td>access_token</td>
<td>string</td>
<td>jwt（登录流程中的第三方 session_key</td>
</tr>
<tr>
<td>token_type</td>
<td>string</td>
<td>token 类型（固定Bearer）</td>
</tr>
</tbody>
</table>
<p>小程序授权后应该先调用此接口，如果结果是用户未注册，则应该调用新用户注册的接口先注册新用户，注册成功后再调用此接口换取 jwt。</p>
<h3 id="新用户注册accountswxapp">新用户注册（/accounts/wxapp）</h3>
<p>注册新用户时，服务器端需要存储当前用户的 openid，所以和授权接口一样，请求时需要的参数为 code、encryptedData 和 iv。</p>
<p>注册成功后，将返回用户的 ID 和注册时间。此时，应该再次调用获取 token 的接口去换取第三方 token，以用来下次登录。</p>
<h2 id="实现流程">实现流程</h2>
<p>接口定义好之后，来看下前后端整体的授权登录流程。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/epM1xSYKuQ84VNnsNMH88km6edqNdkLLNcqYyWxs8UYMsUqlasLvYkmb14FtZF9K" alt="小程序授权登录流程" loading="lazy"></figure>
<p>这个流程需要注意的是，在 C 步（使用 code 换取 session ）之后我们得到 session_key，然后需要用 session_key 解密得到用户数据。</p>
<p>然后使用 openid 判断用户是否已经注册，如果用户已经注册，生成  jwt 返回给小程序。<br>
如果用户未注册返回401， 提示用户未注册。</p>
<blockquote>
<p><code>jwt(3rd_session)</code> 用于第三方服务器和小程序之间做登录态校验，为了保证安全性，jwt 应该满足：</p>
<ol>
<li>足够长。建议有 2^128 组合</li>
<li>避免使用 srand(当前时间)，然后 rand() 的方法，而是采用操作系统提供的真正随机数机制。</li>
<li>设置一定的有效时间，</li>
</ol>
</blockquote>
<p>当然，在小程序中也可以使用手机号登录，不过这是另一个功能了，就不在这里叙述了。</p>
<h2 id="代码实现">代码实现</h2>
<p>说了这么多，接下来看代码吧。</p>
<h3 id="小程序端代码">小程序端代码</h3>
<p>代码逻辑为：</p>
<ol>
<li>用户在小程序授权</li>
<li>小程序将授权消息发送到服务器，服务器检查用户是否已经注册，如果注册返回 jwt，如果没注册提示用户未注册，然后小程序重新请求注册接口，注册用户，注册成功后重复这一步。</li>
</ol>
<p>为了简便，这里在小程序 启动的时候就请求授权。代码实现如下。</p>
<pre><code class="language-javascript">// app.js
var config = require('./config.js')

App({
  onLaunch: function () {
    // 调用API从本地缓存中获取数据
    var jwt = wx.getStorageSync('jwt')
    var that = this
    if (!jwt.access_token) { // 检查 jwt 是否存在 如果不存在调用登录
      that.login()
    } else {
      console.log(jwt.account_id)
    }
  },
  login: function () {
    // 登录部分代码
    var that = this
    wx.login({
      // 调用 login 获取 code
      success: function (res) {
        var code = res.code
        wx.getUserInfo({
          // 调用 getUserInfo 获取 encryptedData 和 iv
          success: function (res) {
            // success
            that.globalData.userInfo = res.userInfo
            var encryptedData = res.encryptedData || 'encry'
            var iv = res.iv || 'iv'
            console.log(config.basic_token)
            wx.request({ // 发送请求 获取 jwt
              url: config.host + '/auth/oauth/token?code=' + code,
              header: {
                Authorization: config.basic_token
              },
              data: {
                username: encryptedData,
                password: iv,
                grant_type: 'password',
                auth_approach: 'wxapp'
              },
              method: 'POST',
              success: function (res) {
                if (res.statusCode === 201) {
                  // 得到 jwt 后存储到 storage，
                  wx.showToast({
                    title: '登录成功',
                    icon: 'success'
                  })
                  wx.setStorage({
                    key: 'jwt',
                    data: res.data
                  })
                  that.globalData.access_token = res.data.access_token
                  that.globalData.account_id = res.data.sub
                } else if (res.statusCode === 401) {
                  // 如果没有注册调用注册接口
                  that.register()
                } else {
                  // 提示错误信息
                  wx.showToast({
                    title: res.data.text,
                    icon: 'success',
                    duration: 2000
                  })
                }
              },
              fail: function (res) {
                console.log('request token fail')
              }
            })
          },
          fail: function () {
            // fail
          },
          complete: function () {
            // complete
          }
        })
      }
    })
  },
  register: function () {
    // 注册代码
    var that = this
    wx.login({ // 调用登录接口获取 code
      success: function (res) {
        var code = res.code
        wx.getUserInfo({
          // 调用 getUserInfo 获取 encryptedData 和 iv
          success: function (res) {
            // success
            that.globalData.userInfo = res.userInfo
            var encryptedData = res.encryptedData || 'encry'
            var iv = res.iv || 'iv'
            console.log(iv)
            wx.request({ // 请求注册用户接口
              url: config.host + '/auth/accounts/wxapp',
              header: {
                Authorization: config.basic_token
              },
              data: {
                username: encryptedData,
                password: iv,
                code: code
              },
              method: 'POST',
              success: function (res) {
                if (res.statusCode === 201) {
                  wx.showToast({
                    title: '注册成功',
                    icon: 'success'
                  })
                  that.login()
                } else if (res.statusCode === 400) {
                  wx.showToast({
                    title: '用户已注册',
                    icon: 'success'
                  })
                  that.login()
                } else if (res.statusCode === 403) {
                  wx.showToast({
                    title: res.data.text,
                    icon: 'success'
                  })
                }
                console.log(res.statusCode)
                console.log('request token success')
              },
              fail: function (res) {
                console.log('request token fail')
              }
            })
          },
          fail: function () {
            // fail
          },
          complete: function () {
            // complete
          }
        })
      }
    })
  },

  get_user_info: function (jwt) {
    wx.request({
      url: config.host + '/auth/accounts/self',
      header: {
        Authorization: jwt.token_type + ' ' + jwt.access_token
      },
      method: 'GET',
      success: function (res) {
        if (res.statusCode === 201) {
          wx.showToast({
            title: '已注册',
            icon: 'success'
          })
        } else if (res.statusCode === 401 || res.statusCode === 403) {
          wx.showToast({
            title: '未注册',
            icon: 'error'
          })
        }

        console.log(res.statusCode)
        console.log('request token success')
      },
      fail: function (res) {
        console.log('request token fail')
      }
    })
  },

  globalData: {
    userInfo: null
  }
})

</code></pre>
<h3 id="服务端代码">服务端代码</h3>
<p>服务端使用 <a href="https://github.com/channelcat/sanic"><code>sanic</code></a> 框架 + <a href="https://github.com/guokr/swagger-py-codegen"><code>swagger_py_codegen</code></a> 生成 rest-api。<br>
数据库使用 MongoDB，<a href="https://github.com/gusibi/python-weixin"><code>python-weixin</code></a> 实现了登录过程中 code 换取 session_key 以及 encryptedData 解密的功能，所以使用python-weixin 作为 python 微信 sdk 使用。</p>
<blockquote>
<p>为了过滤无效请求，服务器端要求用户在获取 token 或授权时在 header 中带上 <code>Authorization</code> 信息。 <code>Authorization</code> 在登录前使用的是 Basic 验证（格式 (Basic hashkey) 注 hashkey为client_id + client_secret 做BASE64处理），只是用来校验请求的客户端是否合法。不过Basic 基本等同于明文，并不能用它来进行严格的授权验证。</p>
</blockquote>
<blockquote>
<p>jwt 原理及使用参见 <a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752020&amp;idx=1&amp;sn=b5e56989a57e9b8067eb6614381a04fd&amp;chksm=80b0b87eb7c73168d7eb1d7f1a95e759b9b0934318571de4f6d2455402e654e6c09d9b022f25">理解JWT（JSON Web Token）认证及实践</a></p>
</blockquote>
<p>使用 swagger 生成代码结构如下：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/BOj58PeS7fLB1FzEivAQA07SYkXPy3ajaajEXKYDUo05rGTfZSThiPg5Mqi7janu" alt="" loading="lazy"></figure>
<p>由于代码太长，这里只放获取 jwt 的逻辑：</p>
<pre><code class="language-python">def get_wxapp_userinfo(encrypted_data, iv, code):
    from weixin.lib.wxcrypt import WXBizDataCrypt
    from weixin import WXAPPAPI
    from weixin.oauth2 import OAuth2AuthExchangeError
    appid = Config.WXAPP_ID
    secret = Config.WXAPP_SECRET
    api = WXAPPAPI(appid=appid, app_secret=secret)
    try:
        # 使用 code  换取 session key    
        session_info = api.exchange_code_for_session_key(code=code)
    except OAuth2AuthExchangeError as e:
        raise Unauthorized(e.code, e.description)
    session_key = session_info.get('session_key')
    crypt = WXBizDataCrypt(appid, session_key)
    # 解密得到 用户信息
    user_info = crypt.decrypt(encrypted_data, iv)
    return user_info


def verify_wxapp(encrypted_data, iv, code):
    user_info = get_wxapp_userinfo(encrypted_data, iv, code)
    # 获取 openid
    openid = user_info.get('openId', None)
    if openid:
        auth = Account.get_by_wxapp(openid)
        if not auth:
            raise Unauthorized('wxapp_not_registered')
        return auth
    raise Unauthorized('invalid_wxapp_code')
    
    
def create_token(request):
    # verify basic token
    approach = request.json.get('auth_approach')
    username = request.json['username']
    password = request.json['password']
    if approach == 'password':
        account = verify_password(username, password)
    elif approach == 'wxapp':
        account = verify_wxapp(username, password, request.args.get('code'))
    if not account:
        return False, {}
    payload = {
        &quot;iss&quot;: Config.ISS,
        &quot;iat&quot;: int(time.time()),
        &quot;exp&quot;: int(time.time()) + 86400 * 7,
        &quot;aud&quot;: Config.AUDIENCE,
        &quot;sub&quot;: str(account['_id']),
        &quot;nickname&quot;: account['nickname'],
        &quot;scopes&quot;: ['open']
    }
    token = jwt.encode(payload, 'secret', algorithm='HS256')
    # 由于 account 中 _id 是一个 object 需要转化成字符串
    return True, {'access_token': token, 'account_id': str(account['_id'])}
</code></pre>
<p>具体代码可以在 <a href="https://github.com/gusibi/Metis">Metis：https://github.com/gusibi/Metis</a> 查看。</p>
<blockquote>
<p><code>Note</code>: 如果试用代码，请先设定 oauth2_client，使用自己的配置。</p>
<blockquote>
<p>不要将私密配置信息提交到 github。</p>
</blockquote>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.cnblogs.com/ihardcoder/p/6279602.html">《微信小程序七日谈》- 第五天：你可能要在登录功能上花费大力气：http://www.cnblogs.com/ihardcoder/p/6279602.html</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752020&amp;idx=1&amp;sn=b5e56989a57e9b8067eb6614381a04fd&amp;chksm=80b0b87eb7c73168d7eb1d7f1a95e759b9b0934318571de4f6d2455402e654e6c09d9b022f25">理解JWT（JSON Web Token）认证及实践</a></li>
<li><a href="http://blog.gusibi.site/post/weixin-python-login/">网站微信登录－python 实现：http://blog.gusibi.site/post/weixin-python-login/</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库基础：创建表]]></title>
        <id>http://blog.gusibi.site/post/sql-start-1-how-to-create-table/</id>
        <link href="http://blog.gusibi.site/post/sql-start-1-how-to-create-table/">
        </link>
        <updated>2017-07-29T16:02:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="数据库基础">数据库基础</h2>
<h3 id="数据库">数据库</h3>
<p>数据库是保存有组织的数据的容器（通常是一个文件或一组文件）。</p>
<p>一个 excel 文件。</p>
<p><strong>这里是一个 excel 文件图片</strong></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/WzFaDj_ugK7JLrtKzU-L9oTWY5qSXEHa0FszhV8gQicJWSZtHsXFss34r-TkRUJQ" alt="这里是一个 excel 文件图片" loading="lazy"></figure>
<p><strong>这里是一个数据库图片</strong></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/GtovdBEGv1VzGyeGImgE45jrJuakyx9-Bmkltwm5kNgKpKrgBB00sk_1yPC_IgnC" alt="这里是一个数据库图片" loading="lazy"></figure>
<blockquote>
<p>通常人们用数据库代表他们使用的数据库软件。不过确切的说，数据库软件应称作数据库管理系统。</p>
</blockquote>
<h3 id="表">表</h3>
<p>表是某种特定数据的结构化清单。</p>
<p>excel 中的 sheet。</p>
<p>数据库中每个表都有一个自己的名字来标识自己，这个名字是唯一的，即数据库中没有其他表具有相同的名字。（不同的数据库可以有不同的名字）</p>
<p><strong>这里是一个 sheet结构</strong></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/NCnjCS_QjOinK0X1e1p5uTvx7iYjTfFGZE_rn8CRk-m_mNZbrsqzq2kaUYqpTSCT" alt="这里是一个 sheet结构" loading="lazy"></figure>
<p><strong>这里是一个表结构</strong></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/AOjmnriLW8FxYAQqBUcZJSw-9NrzJ3rZPrqjfJf0MGBLQjTfhp1urWCRc9PRxIF5" alt="这里是一个表结构" loading="lazy"></figure>
<blockquote>
<p>表具有一些特性，这些特性定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。描述表的这组信息就是所谓的模式，模式可以用来描述数据库中特定的表，也可以描述整个数据库。</p>
</blockquote>
<h3 id="列和数据类型">列和数据类型</h3>
<p>表由列组成。列存储表中某部分的信息。</p>
<blockquote>
<p>列是表中的一个字段。所有表都是由一个或多个列组成。</p>
</blockquote>
<p><strong>这是表结构</strong></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/iUwFYgJyLqZoJ88D0AWfHHKS3aOtPrK7q_l98-PUyeMQ2DJrHAkUjOdrYhcagOe2" alt="这是表结构，指出哪些是列" loading="lazy"></figure>
<p>每一列存储着某种特定的信息。例如在顾客表中，一列存储顾客编号，另一列存储顾客姓名，而地址、城市、州以及邮编全都存储在各自的列中。</p>
<p>数据库中每个列都有相应的数据类型。数据类型(datatype)定义了列可以存储哪些数据种类。例如，如果列中存储的是数字(或许是订单中的物品数)，则相应的数据类型应该为数值类型。如果列中存储的是日期、文本、注释、金额等，则应该规定好恰当的数据类型。</p>
<blockquote>
<p>数据类型是每列所允许的类型。每个列都有相应的数据类型，它限制该列中存储的数据。<br>
数据类型限定了可存储在列中的数据种类(例如，防止在数值字段中录入字符值)。数据类型还帮助正确地分类数据。因此，在创建表时必须特别关注所用的数据类型。</p>
</blockquote>
<h3 id="行">行</h3>
<blockquote>
<p>行是表中的一个记录。</p>
</blockquote>
<p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。</p>
<h3 id="主键">主键</h3>
<p>一列(或一组列)，其值能够唯一标识表中每一行。（用户表的用户 ID，问题表的问题 ID）</p>
<blockquote>
<p>表可以不创建主键，正常情况下，我们都会给每个表创建一个主键，以便以后的数据操作和管理。</p>
</blockquote>
<p>每个列都可以做主键，需要的条件：</p>
<ul>
<li>任意两行都不具有相同的主键值;</li>
<li>每一行都必须具有一个主键值(主键列不允许NULL值);</li>
<li>主键列中的值不允许修改或更新;</li>
<li>主键值不能重用(如果某行从表中删除，它的主键不能赋给以后的新行)</li>
</ul>
<h2 id="操作表">操作表</h2>
<h3 id="创建表">创建表</h3>
<p>创建表用到的命令是 <code>CREATE TABLE</code>，需要注意的点为：</p>
<ol>
<li>给表起一个独特（不能和其它表重名）的名字</li>
<li>然后在括号内来定义每一列的列表，在表中是什么样的数据类型以及要加的限制（比如，不能重复，最长多少字符..)</li>
</ol>
<pre><code class="language-sql">CREATE TABLE account(
 user_id integer PRIMARY KEY, 
 username VARCHAR (50) UNIQUE NOT NULL,
 password VARCHAR (50) NOT NULL,
 created_on TIMESTAMP NOT NULL DEFAULT now(),
 last_login TIMESTAMP
);
</code></pre>
<p>表名： account<br>
列名： user_id, username, password, created_on, last_login<br>
PRIMARY KEY: 表明这是主键。<br>
UNIQUE: 表明这个字段值不能重复。<br>
NOT NULL: 表明该列不能为空。<br>
DEFAULT: 用来指定默认值。</p>
<h3 id="删除表">删除表</h3>
<pre><code class="language-sql">DROP TABLE account;
</code></pre>
<h3 id="更新表">更新表</h3>
<blockquote>
<p>更新操作</p>
</blockquote>
<h2 id="插入数据">插入数据</h2>
<h3 id="数据插入">数据插入</h3>
<p>语法格式：</p>
<pre><code class="language-sql">INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)  
VALUES (value1, value2, value3,...valueN);
</code></pre>
<blockquote>
<p><code>column1</code>, <code>column2</code>, <code>column3</code>,...<code>columnN</code> 是要插入数据的表中的列的名称。</p>
</blockquote>
<h4 id="插入完整的行">插入完整的行</h4>
<pre><code class="language-sql">INSERT INTO account (user_id, username, password, created_on, last_login)  
VALUES (1, 'fenda', 'fenda123', now(), now());
</code></pre>
<blockquote>
<p>重复执行会报错，因为 user_id 和 username 不能重复。</p>
</blockquote>
<h4 id="插入部分行">插入部分行</h4>
<p>可为空的，设置了默认值的字段可以不设定值。</p>
<pre><code class="language-sql">INSERT INTO account (user_id, username, password)  
VALUES (2, 'zaihang', 'fenda123');
</code></pre>
<p>这里，created_on 和 last_login 并没有指定值。</p>
<h2 id="检索数据">检索数据</h2>
<p>SQL语句是由简单的英语单词构成的。这些单词称为关键字，每个SQL语句都是由一个或多个关键字构成的。最经常使用的SQL语句大概就是SELECT语句了SELECT语句了。它的用途是从一个或多个表中检索信息。</p>
<blockquote>
<p>为了使用SELECT检索表数据，必须至少给出两条信息——想选择什么，以及从什么地方选择</p>
</blockquote>
<h3 id="检索单个列">检索单个列</h3>
<pre><code class="language-sql">select user_id from account;
</code></pre>
<blockquote>
<p>上述语句利用SELECT语句从 account 表中检索一个名为 user_id 的列。所需的列名写在SELECT关键字之后，FROM关键字指出从哪个表中检索。</p>
</blockquote>
<p>这条SELECT语句将返回表中的所有行。数据没有过滤(过滤将得出结果集的一个子集)，也没有排序。</p>
<p><strong>注意</strong></p>
<ul>
<li>多条SQL语句必须以分号(;)分隔。多数DBMS不需要在单条SQL语句后加分号，但Postgresql必须在单条SQL语句后加上分号。当然，如果愿意可以总是加上分号。事实上，即使不一定需要，加上分号也肯定没有坏处。</li>
<li><code>SQL语句不区分大小写</code>，因此SELECT与select是相同的。</li>
<li>在处理SQL语句时，其中所有空格都被忽略。SQL语句可以写成长长的一行，也可以分写在多行。下面这三种写法的作用是一样的。</li>
</ul>
<pre><code class="language-sql">-- 1
select user_id from account;

-- 2
select user_id
from account;

-- 3
select
user_id
from
account;
</code></pre>
<blockquote>
<p>SQL 使用 <code>双横线（--）</code> 注释</p>
</blockquote>
<h3 id="什么时候需要注释">什么时候需要注释</h3>
<ul>
<li>SQL语句变长，复杂性增加时，你就会想添加一些描述性的注释，这便于你自己今后参考，或者供项目后续参与人员参考；</li>
<li>在SQL文件开始处添加程序员的联系方式、程序描述以及一些说明的内容。</li>
<li>暂时停止要执行的SQL代码。如果你碰到一个长SQL语句，而只想测试它的一部分，那么应该注释掉一些代码， 以便数据库将其视为注释而加以忽略。</li>
</ul>
<pre><code class="language-sql">select user_id  -- 这是注释（可是试试把 -- 去掉看会发生什么）
from account;

/* SELECT user_id,  FROM account; */
SELECT username
FROM account;
</code></pre>
<h3 id="检索多个列">检索多个列</h3>
<pre><code class="language-sql">select user_id, username from account;
</code></pre>
<h3 id="检索所有列">检索所有列</h3>
<pre><code class="language-sql">select * from account;
</code></pre>
<h3 id="限制结果">限制结果</h3>
<pre><code class="language-sql">select * from account limit 1;

select * from account where user_id&gt; 1 limit 1;
</code></pre>
<h2 id="排序检索数据">排序检索数据</h2>
<p><code>ORDER BY</code> 对产生的输出排序。</p>
<h3 id="排序数据">排序数据</h3>
<pre><code class="language-sql">select * from trade where operate_type='recharge' order by operate_fee; -- 按充值金额从小到大

select * from trade where operate_type='recharge' order by operate_fee desc; -- 按充值金额从大到小
</code></pre>
<h3 id="按多个列排序">按多个列排序</h3>
<pre><code class="language-sql">-- 按充值金额从小到大 金额相同的按充值时间从大到小
select * from trade where operate_type='recharge' order by operate_fee, date_created desc; 

-- 按充值金额从大到小 金额相同的按充值金额从小到大
select * from trade where operate_type='recharge' order by operate_fee desc, date_created; 
</code></pre>
<h2 id="过滤数据">过滤数据</h2>
<h3 id="使用-where-子句">使用 where 子句</h3>
<pre><code class="language-sql">select * from trade where where operate_type='recharge' and operate_fee &gt; 1000 limit 1;
</code></pre>
<h3 id="where-子句操作符">where 子句操作符</h3>
<pre><code class="language-sql">select * from trade where operate_fee = 1000;

select * from trade where operate_fee &gt; 1000;

select * from trade where operate_fee &gt;= 1000;

select * from trade where operate_fee &lt; 1000;

select * from trade where operate_fee &lt;= 1000;
</code></pre>
<h3 id="组合-where-子句">组合 where 子句</h3>
<pre><code class="language-sql">select * from trade where operate_fee &lt;= 1000 and date_created &gt; '2017-04-05';

select * from trade where date_created &lt; '2017-08-05' and date_created &gt; '2017-04-05';

select * from trade where date_created &gt; '2017-07-05' or date_created &lt; '2017-04-05';
</code></pre>
<h4 id="求值顺序">求值顺序</h4>
<pre><code class="language-sql">-- 先组合 date_created &lt; '2017-04-05' and operate_fee &gt; 1000 
-- 再判断 date_created &gt; '2017-07-05'
-- 意思是 查询创建时间大于 2017-07-05 和 创建于 2017-04-05 之前的
-- 金额大于1000的充值数据。
select * from trade 
    where date_created &gt; '2017-07-05' 
    or date_created &lt; '2017-04-05' 
    and operate_fee &gt; 1000 
    and operate_type='recharge';

-- 查询 创建时间在 2017-04-05 之前 
-- 或者 2017-07-05之后的 充值金额大于1000的订单
select * from trade 
    where (date_created &gt; '2017-07-05' 
        or date_created &lt; '2017-04-05') 
    and operate_fee &gt; 1000
    and operate_type='recharge';
</code></pre>
<h3 id="in-操作">in 操作</h3>
<p><strong>查询充值金额为1000 或者 600 的订单</strong></p>
<pre><code class="language-sql">select * from trade where operate_fee in (600, 1000) and operate_type='recharge';

-- 等同于 

select * from trade where (operate_fee = 600 or operate_fee = 1000) and operate_type='recharge';
</code></pre>
<p>为什么要使用IN操作符?其优点为:</p>
<ul>
<li>在有很多合法选项时，IN操作符的语法更清楚，更直观。</li>
<li>在与其他AND和OR操作符组合使用IN时，求值顺序更容易管理。</li>
<li>IN操作符一般比一组OR操作符执行得更快(在上面这个合法选项很少的例子中，你看不出性能差异)。</li>
<li>IN的最大优点是可以包含其他SELECT语句，能够更动态地建立WHERE子句。</li>
</ul>
<h3 id="not-操作符">not 操作符</h3>
<p>WHERE子句中的NOT操作符有且只有一个功能，那就是否定其后所跟的任何条件。因为NOT从不单独使用(它总是与其他操作符一起使用)，<br>
所以它的语法与其他操作符有所不同。NOT关键字可以用在要过滤的列前，而不仅是在其后。</p>
<blockquote>
<p><code>NOT</code><br>
WHERE子句中用来否定其后条件的关键字。</p>
</blockquote>
<pre><code class="language-sql">select * from trade where not operate_fee in (600, 1000) and operate_type='recharge' LIMIT 10;

SELECT * FROM trade WHERE operate_fee NOT IN (600, 1000) AND operate_type='recharge' LIMIT 10;

SELECT * FROM trade WHERE NOT (operate_fee IN (600, 1000) AND operate_type='recharge') LIMIT 10;
</code></pre>
<h2 id="like-操作符">like 操作符</h2>
<p>前面介绍的所有操作符都是针对已知值进行过滤的。不管是匹配一个值还是多个值，检验大于还是小于已知值，或者检查某个范围的值，其共<br>
同点是过滤中使用的值都是已知的。</p>
<p>但是，这种过滤方法并不是任何时候都好用。例如，我们想找出 <code>account</code> 表中 username 以 <code>fenda</code> 开头的数据。</p>
<p>这时，就必须使用通配符了。</p>
<blockquote>
<p><code>通配符(wildcard)</code> 用来匹配值的一部分的特殊字符。<br>
<code>搜索模式(search pattern)</code> 由字面值、通配符或两者组合构成的搜索条件。</p>
</blockquote>
<p>SQL支持几种通配符。为在搜索子句中使用通配符，必须使用LIKE操作符。LIKE指示数据库，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较。</p>
<blockquote>
<p><code>注意：</code>通配符搜索只能用于文本字段(串)，非文本数据类型字段不能使用通配符搜索。</p>
</blockquote>
<h3 id="百分号通配符">百分号(%)通配符</h3>
<p>最常使用的通配符是百分号(%)。在搜索串中，%表示任何字符出现任意次数。</p>
<pre><code class="language-sql">select * from account where username like 'fenda%';
</code></pre>
<p>此例子使用了搜索模式'fenda%'。在执行这条子句时，将检索任意以 <code>fenda</code> 起头的词。<code>%``告诉数据库接受</code>fenda` 之后的任意字符，不管它有多少字符。</p>
<blockquote>
<p>搜索模式区分大小写。 <code>'Fenda%'</code> 和 <code>'fenda%'</code> 是不同的。</p>
</blockquote>
<p><code>%</code> 不仅可以放在最后，也可以放在其他位置，比如</p>
<pre><code class="language-sql">select * from account where username like '%enda%';
</code></pre>
<h3 id="下划线_通配符">下划线(_)通配符</h3>
<p>下划线的用途与%一样，但它只匹配单个字符，而不是多个字符。</p>
<pre><code class="language-sql">select * from account where username like 'fenda-_bc-9';
</code></pre>
<h3 id="方括号-通配符">方括号([ ])通配符</h3>
<p>方括号([])通配符用来指定一个字符集，它必须匹配指定位置(通配符的位置)的一个字符。</p>
<pre><code class="language-sql">-- bc 前边的字符只能是 a 或 b
select * from account where username like 'fenda-[ab]bc-9';

-- bc 前边的字符不能是 a 或 b
select * from account where username like 'fenda-[^ab]bc-9';
</code></pre>
<h3 id="通配符转义">通配符转义</h3>
<pre><code class="language-sql">-- abc 前只能是 下划线(_)
select * from account where username like 'fenda[_]abc-9';

-- 使用转义字符声明下划线是一个字符而不是通配符
select * from account where username like 'fenda\_abc-9';
</code></pre>
<h3 id="使用通配符的技巧">使用通配符的技巧</h3>
<p>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时间。这里给出一些使用通配符时要记住的技巧。</p>
<ul>
<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>
<li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li>
<li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li>
</ul>
<h2 id="汇总数据">汇总数据</h2>
<p>我们经常需要汇总数据而不用把它们实际检索出来，为此SQL提供了专门的函数。使用这些函数，SQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有:</p>
<ul>
<li>确定表中行数(或者满足某个条件或包含某个特定值的行数);</li>
<li>获得表中某些行的和;</li>
<li>找出表列(或所有行或某些特定的行)的最大值、最小值、平均值。</li>
</ul>
<p>SQL 提供的常用的聚集函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT()</td>
<td>返回某列的行数</td>
</tr>
<tr>
<td>AVG()</td>
<td>返回某列的平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>返回某列的最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>返回某列的最小值</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回某列的和</td>
</tr>
</tbody>
</table>
<h3 id="avg-函数">AVG() 函数</h3>
<p>AVG()通过对表中行数计数并计算其列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p>
<p>下面的例子使用AVG()返回 trade 表中所有充值数据的均值:</p>
<pre><code class="language-sql">-- 充值金额的均值
select avg(operate_fee) from trade 
    where operate_type='recharge';
</code></pre>
<blockquote>
<p>AVG()函数忽略列值为NULL的行。</p>
</blockquote>
<h3 id="count-函数">COUNT() 函数</h3>
<p>COUNT()函数进行计数。可利用COUNT()确定表中行的数目或符合特定条件的行的数目。</p>
<p>COUNT()函数有两种使用方式:</p>
<ul>
<li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值(NULL)还是非空值。</li>
<li>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</li>
</ul>
<p>比如：</p>
<pre><code class="language-sql">select count(*) from account;  -- 用户数

select count(last_login) from account; -- 登录过的用户数
</code></pre>
<blockquote>
<p>如果指定列名，则COUNT()函数会忽略指定列的值为空的行，但如果COUNT()函数中用的是星号(*)，则不忽略。</p>
</blockquote>
<h3 id="max-函数">MAX() 函数</h3>
<p>MAX()返回指定列中的最大值。MAX()要求指定列名，如下所示:</p>
<pre><code class="language-sql">-- 充值数据中的最高金额
select max(operate_fee) from trade where operate_type='recharge'; 

select operate_fee from trade 
    where operate_type='recharge' 
    order by operate_fee desc limit 1;
</code></pre>
<blockquote>
<p>MAX()函数忽略列值为NULL的行。</p>
</blockquote>
<h3 id="min-函数">MIN() 函数</h3>
<p>MIN()的功能正好与MAX()功能相反，它返回指定列的最小值。与MAX()一样，MIN()要求指定列名，如下所示:</p>
<pre><code class="language-sql">-- 充值数据中的最少金额
select min(operate_fee) from trade where operate_type='recharge'; 

select operate_fee from trade 
    where operate_type='recharge' 
    order by operate_fee limit 1;
</code></pre>
<blockquote>
<p>MIN()函数忽略列值为NULL的行。</p>
</blockquote>
<h3 id="sum-函数">SUM() 函数</h3>
<pre><code class="language-sql">-- 最大的充值金额
SELECT max(operate_fee) FROM trade WHERE operate_type='recharge';

-- 以最大充值金额充值的条数
SELECT count(*) FROM trade 
    WHERE operate_type='recharge' 
    AND operate_fee = (SELECT max(operate_fee) FROM trade 
                       WHERE operate_type='recharge');

SELECT operate_fee * (SELECT count(*) FROM trade 
                          WHERE operate_type='recharge' 
                          AND operate_fee = (SELECT max(operate_fee) FROM trade 
                              WHERE operate_type='recharge')) AS 最大充值金额总和 FROM trade 
    WHERE operate_type='recharge' 
    AND operate_fee=(SELECT max(operate_fee) FROM trade 
                     WHERE operate_type='recharge');

SELECT sum(operate_fee) AS 最大充值金额总和 FROM trade 
    WHERE operate_type='recharge' 
    AND operate_fee = (SELECT max(operate_fee) FROM trade 
                       WHERE operate_type='recharge');
</code></pre>
<p>SUM()用来返回指定列值的和(总计)。比如:</p>
<pre><code class="language-sql">-- 充值金额的总和
select sum(operate_fee) from trade where operate_type='recharge'; 

-- 充值金额的总和
select sum(operate_fee) from trade where operate_type='recharge';
</code></pre>
<h3 id="组合聚集函数">组合聚集函数</h3>
<p>SELECT语句可根据需要包含多个聚集函数。请看下面的例子:</p>
<pre><code class="language-sql">SELECT count(*) AS 总充值条数,
    min(operate_fee) AS 最小充值金额,
    max(operate_fee) AS 最大充值金额,
    avg(operate_fee) AS fee_avg,
    sum(operate_fee) AS fee_sum
FROM trade WHERE operate_type='recharge';
</code></pre>
<h4 id="练习-计算最大的充值金额并统计最大金额的充值次数">练习： 计算最大的充值金额，并统计最大金额的充值次数</h4>
<pre><code class="language-sql">SELECT count(*) FROM trade 
    WHERE operate_type='recharge' 
    AND operate_fee=(
        SELECT max(operate_fee) FROM trade 
            WHERE operate_type='recharge');
</code></pre>
<h4 id="练习计算最大的充值金额并统计以这个金额充值的总金额">练习：计算最大的充值金额，并统计以这个金额充值的总金额</h4>
<pre><code class="language-sql">SELECT sum(operate_fee) FROM trade 
    WHERE operate_type='recharge' 
    AND operate_fee = (
        SELECT max(operate_fee) FROM trade 
            WHERE operate_type='recharge');
</code></pre>
<p>这条 select 语句执行了5个聚合函数，返回5个值（总充值次数，最小值，最大值，平均值，总充值金额）。</p>
<blockquote>
<p><code>取别名</code> 使用聚合函数时，建议使用别名指定计算后的结果。在指定别名时，不应该使用表中实际的列名。</p>
</blockquote>
<h2 id="分组数据">分组数据</h2>
<p>使用SQL聚集函数可以汇总数据。这样，我们就能够对行进行计数，计算和与平均数，不检索所有数据就获得最大值和最小值。<br>
目前为止的所有计算都是在表的所有数据或匹配特定的WHERE子句的数据上进行的。比如下面的例子返回供应商DLL01提供的产品数目:</p>
<pre><code class="language-sql">SELECT COUNT(*) AS num_prods FROM Products
WHERE vend_id = 'DLL01';
</code></pre>
<p>如果要返回每个供应商提供的产品数目，该怎么办?或者返回只提供一项产品的供应商的产品，或者返回提供10个以上产品的供应商的产品，怎么办?<br>
这就是分组大显身手的时候了。使用分组可以将数据分为多个逻辑组，对每个组进行聚集计算。</p>
<h3 id="创建分组">创建分组</h3>
<p>分组是使用SELECT语句的<code>GROUP BY</code>子句建立的。理解分组的最好办法是看一个例子:</p>
<pre><code class="language-sql">-- 查询每个用户充值的次数
select account_id, count(*) AS 充值次数 from trade 
    where operate_type='recharge' 
    group by account_id;
</code></pre>
<p>上面的<code>SELECT</code>语句指定了两个列: account_id 包含用户的ID，<code>充值次数</code>为计算字段(用COUNT(*)函数建立)。<code>GROUP BY</code>子句指示 数据库按 <code>account_id</code>排序并分组数据。这就会对每个<code>account_id</code>而不是整个表计算充值次数一次。<br>
因为使用了<code>GROUP BY</code>，就不必指定要计算和估值的每个组了。系统会自动完成。<code>GROUP BY</code>子句指示数据库分组数据，然后对每个组而不是整个结果集进行聚集。</p>
<ul>
<li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li>
<li>除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY子句中给出。</li>
<li>如果分组列中包含具有NULL值的行，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。</li>
</ul>
<h3 id="过滤分组">过滤分组</h3>
<p>除了能用GROUP BY分组数据外，SQL还允许过滤分组，规定包括哪些分组，排除哪些分组。例如，你可能想要列出至少充值两次的用户。为此，必须基于完整的分组而不是个别的行进行过滤。</p>
<p>SQL为此提供了另一个子句，就是<code>HAVING</code>子句。HAVING非常类似于WHERE。WHERE过滤行，而 <code>HAVING</code> 过滤分组。</p>
<pre><code class="language-sql">-- 查询充值的次数大于10的用户
select account_id, count(*) AS 充值次数 from trade 
    where operate_type='recharge' 
    group by account_id
    having count(*) &gt; 10;
</code></pre>
<blockquote>
<p>WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重要的区别，WHERE排除的行不包括在分组中。这可能会改变计算值，从而影响HAVING子句中基于这些值过滤掉的分组</p>
</blockquote>
<h3 id="分组和排序">分组和排序</h3>
<p>使用 <code>GROUP BY</code> 分组的结果是无序的，我们可以使用 <code>ORDER BY</code> 对结果进行排序。</p>
<pre><code class="language-sql">-- 查询充值的次数大于10的用户 按充值次数排序
SELECT account_id, count(*) AS 充值次数 FROM trade 
    WHERE operate_type='recharge' 
    GROUP BY account_id
    HAVING count(*) &gt; 10
    ORDER BY count(*) desc;
</code></pre>
<h2 id="参考链接">参考链接</h2>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS入门指南-3：定位元素]]></title>
        <id>http://blog.gusibi.site/post/css-learing-3-positioning-elements/</id>
        <link href="http://blog.gusibi.site/post/css-learing-3-positioning-elements/">
        </link>
        <updated>2017-07-26T06:21:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是《CSS设计指南》的读书笔记，用于加深学习效果。<br>
前一篇<a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752018&amp;idx=1&amp;sn=6915e4f11ba08fa196a64375224cd92e&amp;chksm=80b0b878b7c7316e1a065ae991c534cc11ca5fe72b33690a98fb1c3f6f53f8c98c4c8744cd3a#rd">CSS入门指南-2：盒子模型、浮动和清除</a>介绍了css盒子模型、浮动和清除，这一篇介绍 css元素的定位。</p>
</blockquote>
<h2 id="定位position">定位（position）</h2>
<p>CSS 布局的核心是 position 属性，对元素盒子应用这个属性，可以相对于它在常规文档流中的位置重新定位。<br>
position 属性有4个值：<code>static</code>、<code>relative</code>、<code>absoulte</code>、<code>fixed</code>，默认值为 static。</p>
<p>接下来我会用以下四个段落来逐个说明这些属性是什么意思。</p>
<pre><code class="language-html">&lt;p id=&quot;first&quot;&gt;First Paragraph&lt;/p&gt;
&lt;p id=&quot;Second&quot;&gt;Second Paragraph&lt;/p&gt;
&lt;p id=&quot;specialpara&quot;&gt;Third Paragraph&lt;/p&gt;
&lt;p id=&quot;fourth&quot;&gt;First Paragraph&lt;/p&gt;
</code></pre>
<h3 id="静态定位static">静态定位（static）</h3>
<p>我们先看一下四个段落都采用静态定位的效果。</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/R_7xrRQEA1TEc4S1GJsxwpfz99rx6nvnb0KZNOc1m-D5P8bdMAq-mQsvZ85xxMSb" alt="四段都采用静态定位的图示" loading="lazy"></figure>
<blockquote>
<p>静态定位下，每个元素在处在常规文档流中，它们都是块级元素，所以会在页面中自上而下地堆叠。</p>
</blockquote>
<h3 id="相对定位relative">相对定位（relative）</h3>
<p>现在我把第三段的 position 属性设置为 relative。</p>
<pre><code class="language-css">p#specialpara {
    position: relative;
    top: 25px;
    left: 30px;
}
</code></pre>
<p>因为相对定位<code>相对的是它原来在文档流中的位置（默认位置）</code>，所以如果只设置 position 样式不会有任何变化。这里我同时设置了 top 和 left 属性来改变它的位置。</p>
<p>现在它的效果如图所示：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5OFF-2lXXl-JAY4tUuAl0V3Z5q6livJzUz11Fs7N8nIbz9mYgGp8GlzA6oM6_U9J" alt="第三段使用相对定位的效果图" loading="lazy"></figure>
<blockquote>
<p>现在，第三段从原来的元素（body）中挣脱了出来，与它在文档中的默认位置相比向下移动了25像素，向右移动了30像素。</p>
</blockquote>
<p>需要注意的是，除了这个元素自己相对于原始位置挪动了一下以外，页面没有任何改变。这个元素原来占据的空间没有动，其他元素也没动。</p>
<p>这时，如果不想第四段被它挡住，可以给第四段设置一个 margin-top 值。</p>
<h3 id="绝对定位absoulte">绝对定位（absoulte）</h3>
<p>绝对定位跟静态定位和相对定位相比，它会把元素彻底从文档流中拿出来。</p>
<p>我们把 position 改为绝对定位看一下：</p>
<pre><code class="language-css">p#specialpara {
    position: absoulte;
    top: 25px;
    left: 30px;
}
</code></pre>
<p>效果如图：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/2-U0Y3OwzCz9gOLmV-LF96-U1nnRhPUjvX6InOVjCfPo9vWCqwx0d_mQlmsFCkWL" alt="第三段使用绝对定位的效果图" loading="lazy"></figure>
<blockquote>
<p>可以看到，第三段原来的位置被回收了。这说明绝对定位的元素脱离了常规文档流，它现在是相对于顶级元素 body 在定位。</p>
</blockquote>
<p>现在就涉及到一个概念：<code>定位上下文</code>，这个后边说，先继续看最后一种定位方式：<code>固定定位</code>。</p>
<blockquote>
<p><code>盒子位移属性是如何工作？</code></p>
</blockquote>
<blockquote>
<p>盒子的位移属性有四个“top、right、bottom和left”，用来指定元素的定位位置和方向。这些属性只能在元素的“position”属性设置了“relative、absolute和fixed”属性值，才生效。</p>
</blockquote>
<blockquote>
<p>对于相对定位元素，这些属性的设置让元素从默认位置移动。例如，top设置一个值“20px”在一个相对定位的元素上，这个元素会在原来位置向下移动“20px”。</p>
</blockquote>
<blockquote>
<p>对于绝对定位和固定定位，这些属性指定了元素与父元素边缘之间的距离，例如，绝对定位的元素设置一个“top”值为“20px”，将使绝对定位元素相对于其设置了相对定位的祖先元素顶部边缘向下移动“20px”，反之，如果设置一个“top”值为“20px”，将使绝对定位元素相对于其设置了相对定位的祖先元素顶部边缘向上移动“20px”。（绝对定位的参考点是其祖先元素设置了“relative”或者“absolute”值）。</p>
</blockquote>
<p>事实上，一个相对定位元素同时设置了“top”和“bottom”位移属性值，实际上“top”优先级高于“bottom”。然而，一个相对定位元素同时设置了“left”和“right”位移属性，他们的优先级取决于页面使用的是哪种语言，例如，如果你的页面是英文页面，那么“left”位移属性优先级高，如果你的页面是阿拉伯语，那么“right”的位移属性优先级高</p>
<h3 id="固定定位fixed">固定定位（fixed）</h3>
<p>固定定位与绝对定位类似，我们先看下把定位改为相对定位的效果：</p>
<pre><code class="language-css">p#specialpara {
    position: fixed;
    top: 25px;
    left: 30px;
}
</code></pre>
<p>效果如图：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/g_yr-9KcVSriUd_apawLXJRM3qoZ5fHF3rbJXhq2kUafT3A_eg9D2Jv8Dd0sUTMf" alt="第三段使用固定定位的效果图" loading="lazy"></figure>
<blockquote>
<p>这样看效果和绝对定位完全一致，但是固定定位的定位上下文是<code>浏览器窗口</code>，她并不会随页面滚动。</p>
</blockquote>
<p>以下是使用相对定位和固定定位的图示：</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/31atM18aEdu0ogKsBdM0c1Dmc-l_Gyw2sIee4TE6NCCIG7A1YXAbSUZA_OWRUttM" alt="使用固定定位的示意图" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/G0pLxrvwS6cxCaesieCs9inVKgzsyolbzRFIYcqvwDhnIIprWTlRWj8p6UCFo9SP" alt="使用绝对定位的示意图" loading="lazy"></figure>
<h4 id="固定页头和页脚">固定页头和页脚</h4>
<p>固定定位最常见的一种用途就是在页面中创建一个固定头部、或者脚部、或者固定页面的一个侧面。就算是用户移动浏览器的滚动条，还是会固定在页面。</p>
<p>现在我们来看下定位上下文。</p>
<h2 id="定位上下文">定位上下文</h2>
<p>把元素的 position 属性设定为 relative、absolute或 fixed 后，可以使用 top、right、bottom 和 left 属性，相对于另一个元素移动该元素的位置。这里<code>另一个元素</code>就是当前元素的<code>定位上下文</code>。</p>
<p>我们在介绍绝对定位的时候说过，绝对定位元素默认的定位上下文是  <code>body</code>，这是因为 body 是标记中所有元素唯一的祖先元素。不过，如果把他相应的元素设定为 relative，绝对定位元素的任何祖先元素都可以成为它的定位上下文。</p>
<p>比如：</p>
<pre><code class="language-html">&lt;body&gt;
    &lt;div id=&quot;outer&quot;&gt;
      &lt;div id=&quot;inner&quot;&gt; This is text for a paragraph to demonstrate contextual
        positioning. Here are two divs, one nested in the other. The inner div now
        has absolute positioning, so it positions itself relative to the default
        positioning context, body.&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>css 样式如下：</p>
<pre><code class="language-css">div#outer {
    width:250px; 
    margin:100px 40px; 
    border-top:3px solid red;
}
div#inner {
    top:10px; 
    left:20px; 
    background:#DDD;
}
</code></pre>
<p>结果如图：</p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/GMOwNNvXspDO5-z8jgN_xtU39GWx6F8kGIgO4f1rjWfLBbY8GxRspaF65xve5nJy" alt="两个嵌套的 div。给外部的上方加了边框，给内部的加了背景" loading="lazy"></figure>
<blockquote>
<p>这里内部和外部的 div 都是是静态定位，不存在谁是谁的定位上下文这个问题，所以 top 和 left 属性并没有生效。</p>
</blockquote>
<p>下面我们把内部 div 设定为绝对定位，来看一下变化。</p>
<pre><code class="language-css">div#inner {
    top:10px; 
    left:20px; 
    background:#DDD;
}
</code></pre>
<p>这是效果如图：<br>
<img src="http://media.gusibi.mobi/tIL-dsUeItz8GycFe89rmxUphejURxfSZLEkO4KjefpEJATysQV5_Ny-EujVmlcT" alt="这里由于定位上下文是 body，所以 top 和 left 都是相对于 body 的移动" loading="lazy"></p>
<p>这里由于不存在相对定位的其他祖先元素可以作为定位上下文，绝对定位只能相对于 body 定位。</p>
<blockquote>
<p>事实上，只要把元素的外边距和内边距设定好，多数情况下使用静态定位就可以实现页面布局了。<code>除非真正需要那么做，否则不要轻易修改元素的 position 属性。</code></p>
</blockquote>
<p>现在我们把外部 div 的 position 设置为 relative：</p>
<pre><code class="language-css">div#outer {
    position: relative;
    width:250px; 
    margin:100px 40px; 
    border-top:3px solid red;
}
</code></pre>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/jA4DvQn5T5PjIWmFJc7FE8bx5a31PMF5Y8czNOGD0d_5MdAoE_PM44bIT1-fa0_y" alt="外部 div 改为相对定位的效果图" loading="lazy"></figure>
<p>外部 div 改为相对定位之后，后代中绝对定位的元素就会按照 top 和 left 属性的设定，相对于外部 div 定位。此时内部 div的 top 和 left 属性参照的就是外部 div。</p>
<p>最后我们说一下和定位相关的显示属性。</p>
<h2 id="显示属性">显示属性</h2>
<p>所有的元素都有<code>display</code>属性。display 属性有两个最常用的值：<code>block（块级元素）</code>和<code>inline（行内元素）</code>。</p>
<ul>
<li>块级元素：比如段落、标题、列表等，在浏览器中上下堆叠显示。</li>
<li>行内元素：比如 a、span、和 img，在浏览器中左右并排显示，只有前一行没有空间时才会显示对下一行。</li>
</ul>
<p>块级元素和行内元素是可以互相转化的：</p>
<pre><code class="language-css">/*默认为块级元素*/
p {display: inline;}
/*默认为行内元素*/
a {display: block;}
</code></pre>
<blockquote>
<p>display 还有一个属性值：<code>none</code>。把display设置为 none，该元素及所有包含在其中的元素，都不会在页面中显示。它们原来占据的空间也会被回收<br>
相对的属性是 <code>visibility</code>，这个属性常用的值是 visible（默认）和 hidden。把元素的 visibility 设定为 hidden，元素会隐藏，但它占据的空间仍然存在。</p>
</blockquote>
<p>我们上一篇 <a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752018&amp;idx=1&amp;sn=6915e4f11ba08fa196a64375224cd92e&amp;chksm=80b0b878b7c7316e1a065ae991c534cc11ca5fe72b33690a98fb1c3f6f53f8c98c4c8744cd3a#rd">CSS入门指南-2：盒子模型、浮动和清除</a> 中提到的 <code>clearfix</code> 类就用到了这个属性，在那里我们会添加一个块级元素，然后把内容隐藏，以用来清除浮动。clearfix 的样式如下：</p>
<pre><code class="language-css">.clearfix:after {
     content: &quot;.&quot;;
     display: block;
     height: 0;
     clear: both;
     visibility: hidden;
    }
</code></pre>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.see-design.com.tw/i/css_position.html">10步掌握CSS定位: position static relative absolute float</a></li>
<li><a href="https://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html">HTML和CSS高级指南之二——定位详解</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="9"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="10"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解JWT（JSON Web Token）认证及实践]]></title>
        <id>http://blog.gusibi.site/post/jwt-learn-and-practice-with/</id>
        <link href="http://blog.gusibi.site/post/jwt-learn-and-practice-with/">
        </link>
        <updated>2017-07-23T05:05:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>最近想做个小程序，需要用到授权认证流程。以前项目都是用的 OAuth2 认证，但是Sanic 使用OAuth2 不太方便，就想试一下 JWT 的认证方式。<br>
这一篇主要内容是 JWT 的认证原理，以及python 使用 jwt 认识的实践。</p>
</blockquote>
<h2 id="几种常用的认证机制">几种常用的认证机制</h2>
<p>HUGOMORE42</p>
<h3 id="http-basic-auth">HTTP Basic Auth</h3>
<p><code>HTTP Basic Auth</code> 在HTTP中，基本认证是一种用来允许Web浏览器或其他客户端程序在请求时提供用户名和口令形式的身份凭证的一种登录验证方式，通常用户名和明码会通过HTTP头传递。</p>
<p>在发送之前是以用户名追加一个冒号然后串接上口令，并将得出的结果字符串再用Base64算法编码。例如，提供的用户名是Aladdin、口令是open sesame，则拼接后的结果就是Aladdin:open sesame，然后再将其用<code>Base64编码</code>，得到QWxhZGRpbjpvcGVuIHNlc2FtZQ==。最终将Base64编码的字符串发送出去，由接收者解码得到一个由冒号分隔的用户名和口令的字符串。</p>
<blockquote>
<p><code>优点</code><br>
基本认证的一个优点是基本上所有流行的网页浏览器都支持基本认证。</p>
</blockquote>
<blockquote>
<p><code>缺点</code><br>
由于用户名和密码都是Base64编码的，而Base64编码是可逆的，所以用户名和密码可以认为是明文。所以只有在客户端和服务器主机之间的连接是安全可信的前提下才可以使用。</p>
</blockquote>
<p>接下来我们看一个更加安全也适用范围更大的认证方式 <code>OAuth</code>。</p>
<h3 id="oauth">OAuth</h3>
<p>OAuth 是一个关于授权（authorization）的开放网络标准。允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。现在的版本是2.0版。</p>
<p>严格来说，OAuth2不是一个标准协议，而是一个安全的授权框架。它详细描述了系统中不同角色、用户、服务前端应用（比如API），以及客户端（比如网站或移动App）之间怎么实现相互认证。</p>
<h4 id="名词定义">名词定义</h4>
<ul>
<li>Third-party application: 第三方应用程序，又称&quot;客户端&quot;（client）</li>
<li>HTTP service：HTTP服务提供商</li>
<li>Resource Owner：资源所有者，通常称&quot;用户&quot;（user）。</li>
<li>User Agent：用户代理，比如浏览器。</li>
<li>Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。</li>
<li>Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。</li>
</ul>
<p>OAuth 2.0 运行流程如图：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/9zOAPS-K2Eo9C8vlyPe4EpQ15mRaKCsK8gCy5Wdu2bhogzTImDN0g_v8y7ufbdRl" alt="OAuth 2.0 运行流程" loading="lazy"></figure>
<p>（A）用户打开客户端以后，客户端要求用户给予授权。<br>
（B）用户同意给予客户端授权。<br>
（C）客户端使用上一步获得的授权，向认证服务器申请令牌。<br>
（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。<br>
（E）客户端使用令牌，向资源服务器申请获取资源。<br>
（F）资源服务器确认令牌无误，同意向客户端开放资源。</p>
<blockquote>
<p><code>优点</code><br>
快速开发<br>
实施代码量小<br>
维护工作减少<br>
如果设计的API要被不同的App使用，并且每个App使用的方式也不一样，使用OAuth2是个不错的选择。</p>
</blockquote>
<blockquote>
<p><code>缺点</code>：<br>
OAuth2是一个安全框架，描述了在各种不同场景下，多个应用之间的授权问题。有海量的资料需要学习，要完全理解需要花费大量时间。<br>
OAuth2不是一个严格的标准协议，因此在实施过程中更容易出错。</p>
</blockquote>
<p>了解了以上两种方式后，现在终于到了本篇的重点，JWT 认证。</p>
<h2 id="jwt-认证">JWT 认证</h2>
<blockquote>
<p><code>Json web token (JWT)</code>, 根据官网的定义，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
</blockquote>
<h3 id="jwt-特点">JWT 特点</h3>
<ul>
<li>体积小，因而传输速度快</li>
<li>传输方式多样，可以通过URL/POST参数/HTTP头部等方式传输</li>
<li>严格的结构化。它自身（在 payload 中）就包含了所有与用户相关的验证消息，如用户可访问路由、访问有效期等信息，服务器无需再去连接数据库验证信息的有效性，并且 payload 支持为你的应用而定制化。</li>
<li>支持跨域验证，可以应用于单点登录。</li>
</ul>
<h3 id="jwt原理">JWT原理</h3>
<p>JWT是Auth0提出的通过对JSON进行加密签名来实现授权验证的方案，编码之后的JWT看起来是这样的一串字符：</p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ  
</code></pre>
<p>由 <code>.</code> 分为三段，通过解码可以得到：</p>
<h4 id="1-头部header">1. 头部（Header）</h4>
<pre><code class="language-python">// 包括类别（typ）、加密算法（alg）；
{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}
</code></pre>
<p>jwt的头部包含两部分信息：</p>
<ul>
<li>声明类型，这里是jwt</li>
<li>声明加密的算法 通常直接使用 HMAC SHA256</li>
</ul>
<p>然后将头部进行base64加密（该加密是可以对称解密的)，构成了第一部分。</p>
<pre><code class="language-sh">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
</code></pre>
<h4 id="2-载荷payload">2. 载荷（payload）</h4>
<p>载荷就是存放有效信息的地方。这些有效信息包含三个部分：</p>
<ul>
<li>标准中注册声明</li>
<li>公共的声名</li>
<li>私有的声明</li>
</ul>
<p><code>公共的声明 ：</code><br>
公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>
<p><code>私有的声明 ：</code><br>
私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>
<p>下面是一个例子：</p>
<pre><code class="language-python">// 包括需要传递的用户信息；
{ &quot;iss&quot;: &quot;Online JWT Builder&quot;, 
  &quot;iat&quot;: 1416797419, 
  &quot;exp&quot;: 1448333419, 
  &quot;aud&quot;: &quot;www.gusibi.com&quot;, 
  &quot;sub&quot;: &quot;uid&quot;, 
  &quot;nickname&quot;: &quot;goodspeed&quot;, 
  &quot;username&quot;: &quot;goodspeed&quot;, 
  &quot;scopes&quot;: [ &quot;admin&quot;, &quot;user&quot; ] 
}
</code></pre>
<ul>
<li>iss: 该JWT的签发者，是否使用是可选的；</li>
<li>sub: 该JWT所面向的用户，是否使用是可选的；</li>
<li>aud: 接收该JWT的一方，是否使用是可选的；</li>
<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</li>
<li>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</li>
</ul>
<p>其他还有：</p>
<ul>
<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</li>
</ul>
<p>将上面的JSON对象进行<code>base64编码</code>可以得到下面的字符串。这个字符串我们将它称作JWT的Payload（载荷）。</p>
<pre><code>eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE0MTY3OTc0MTksImV4cCI6MTQ0ODMzMzQxOSwiYXVkIjoid3d3Lmd1c2liaS5jb20iLCJzdWIiOiIwMTIzNDU2Nzg5Iiwibmlja25hbWUiOiJnb29kc3BlZWQiLCJ1c2VybmFtZSI6Imdvb2RzcGVlZCIsInNjb3BlcyI6WyJhZG1pbiIsInVzZXIiXX0
</code></pre>
<blockquote>
<p><code>信息会暴露</code>：由于这里用的是可逆的base64 编码，所以第二部分的数据实际上是明文的。我们应该避免在这里存放不能公开的隐私信息。</p>
</blockquote>
<h4 id="3-签名signature">3. 签名（signature）</h4>
<pre><code class="language-python">// 根据alg算法与私有秘钥进行加密得到的签名字串；
// 这一段是最重要的敏感信息，只能在服务端解密；
HMACSHA256(  
    base64UrlEncode(header) + &quot;.&quot; +
    base64UrlEncode(payload),
    SECREATE_KEY
)
</code></pre>
<p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p>
<ul>
<li>header (base64后的)</li>
<li>payload (base64后的)</li>
<li>secret</li>
</ul>
<p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前），就形成了:</p>
<pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9
</code></pre>
<p>最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。如果我们用 <code>secret</code> 作为密钥的话，那么就可以得到我们加密后的内容:</p>
<pre><code>pq5IDv-yaktw6XEa5GEv07SzS9ehe6AcVSdTj0Ini4o
</code></pre>
<p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE0MTY3OTc0MTksImV4cCI6MTQ0ODMzMzQxOSwiYXVkIjoid3d3Lmd1c2liaS5jb20iLCJzdWIiOiIwMTIzNDU2Nzg5Iiwibmlja25hbWUiOiJnb29kc3BlZWQiLCJ1c2VybmFtZSI6Imdvb2RzcGVlZCIsInNjb3BlcyI6WyJhZG1pbiIsInVzZXIiXX0.pq5IDv-yaktw6XEa5GEv07SzS9ehe6AcVSdTj0Ini4o
</code></pre>
<blockquote>
<p><code>签名的目的</code>：签名实际上是对头部以及载荷内容进行签名。所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。<br>
这样就能保证token不会被篡改。</p>
</blockquote>
<p>token 生成好之后，接下来就可以用token来和服务器进行通讯了。</p>
<p>下图是client 使用 JWT 与server 交互过程:</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/o-dTqqd8zFCnMRDTifTFZJ-8ASvco764IQHFQt5fYDQDmNPn_XuCgMNy_XSUYh1N" alt="client 使用 JWT 与server 交互过程" loading="lazy"></figure>
<p>这里在第三步我们得到 JWT 之后，需要将JWT存放在 client，之后的每次需要认证的请求都要把JWT发送过来。（请求时可以放到 header 的 Authorization ）</p>
<h3 id="jwt-使用场景">JWT 使用场景</h3>
<p>JWT的主要优势在于使用无状态、可扩展的方式处理应用中的用户会话。服务端可以通过内嵌的声明信息，很容易地获取用户的会话信息，而不需要去访问用户或会话的数据库。在一个分布式的面向服务的框架中，这一点非常有用。</p>
<p>但是，如果系统中需要使用黑名单实现长期有效的token刷新机制，这种无状态的优势就不明显了。</p>
<blockquote>
<p><code>优点</code><br>
快速开发<br>
不需要cookie<br>
JSON在移动端的广泛应用<br>
不依赖于社交登录<br>
相对简单的概念理解</p>
</blockquote>
<blockquote>
<p><code>缺点</code><br>
Token有长度限制<br>
Token不能撤销<br>
需要token有失效时间限制(exp)</p>
</blockquote>
<h2 id="python-使用jwt实践">python 使用JWT实践</h2>
<p>我基本是使用 python 作为服务端语言，我们可以使用 <a href="https://github.com/jpadilla/pyjwt/">pyjwt：https://github.com/jpadilla/pyjwt/</a></p>
<p>使用比较方便，下边是我在应用中使用的例子：</p>
<pre><code class="language-python">import jwt
import time

# 使用 sanic 作为restful api 框架 
def create_token(request):
    grant_type = request.json.get('grant_type')
    username = request.json['username']
    password = request.json['password']
    if grant_type == 'password':
        account = verify_password(username, password)
    elif grant_type == 'wxapp':
        account = verify_wxapp(username, password)
    if not account:
        return {}
    payload = {
        &quot;iss&quot;: &quot;gusibi.com&quot;,
         &quot;iat&quot;: int(time.time()),
         &quot;exp&quot;: int(time.time()) + 86400 * 7,
         &quot;aud&quot;: &quot;www.gusibi.com&quot;,
         &quot;sub&quot;: account['_id'],
         &quot;username&quot;: account['username'],
         &quot;scopes&quot;: ['open']
    }
    token = jwt.encode(payload, 'secret', algorithm='HS256')
    return True, {'access_token': token, 'account_id': account['_id']}
    

def verify_bearer_token(token):
    #  如果在生成token的时候使用了aud参数，那么校验的时候也需要添加此参数
    payload = jwt.decode(token, 'secret', audience='www.gusibi.com', algorithms=['HS256'])
    if payload:
        return True, token
    return False, token
</code></pre>
<p>这里，我们可以使用 jwt 直接生成 token，不用手动base64加密和拼接。</p>
<p>详细代码可以参考 <a href="https://github.com/gusibi/Metis/blob/master/apis/verification.py">gusibi/Metis: 一个测试类小程序（包含前后端代码）</a>。</p>
<blockquote>
<p>这个项目中，api 使用 python sanic，文档使用 <a href="https://github.com/guokr/swagger-py-codegen">swagger-py-codegen</a> 生成，提供 swagger ui。</p>
</blockquote>
<p>现在可以使用 swagger ui 来测试jwt。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/QJiuK_OVWOjin9Lrh_Z9Y3Q8TKce5XAHgU1v4p7e7XG-TpS4rowapEbjl--zoMle" alt="swagger ui 界面" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>这一篇主要介绍了 jwt 的原理、验证步骤，最后是使用 <code>pyjwt</code> 包演示 生成token以及校验token的方法。</p>
<blockquote>
<p>以上提到的包可以在<code>公号回复关键字</code>获取地址</p>
</blockquote>
<h3 id="预告下一篇是介绍小程序中使用-jwt-的认证流程及实现">预告，下一篇是介绍小程序中使用 JWT 的认证流程及实现。</h3>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">HTTP基本认证</a></li>
<li><a href="http://www.cnblogs.com/QLeelulu/archive/2009/11/22/1607898.html">访问需要HTTP Basic Authentication认证的资源的各种语言的实现</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></li>
<li><a href="http://moakap.leanote.com/post/OAuth-2-vs.-JSON-Web-Token-JWT-%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%AE%89%E5%85%A8%E7%9A%84API%EF%BC%9F">OAuth 2和JWT - 如何设计安全的API？</a></li>
<li><a href="https://content.pivotal.io/blog/securing-restful-web-services-with-oauth2">Securing RESTful Web Services with OAuth2</a></li>
<li><a href="https://juejin.im/entry/581c8e92bf22ec0068c0cbfc">Server 端的认证——拥抱 </a></li>
<li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JSON Web Token - 在Web应用间安全地传递信息</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/">八幅漫画理解使用JSON Web</a></li>
<li><a href="http://www.cnblogs.com/xiekeli/p/5607107.html">基于Token的WEB后台认证机制</a></li>
<li><a href="http://www.jianshu.com/p/576dbf44b2ae">什么是 JWT -- JSON WEB TOKEN</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS入门指南-2：盒子模型、浮动和清除]]></title>
        <id>http://blog.gusibi.site/post/css-learing-2-box-model-float-and-clear/</id>
        <link href="http://blog.gusibi.site/post/css-learing-2-box-model-float-and-clear/">
        </link>
        <updated>2017-07-19T06:22:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是CSS设计指南的读书笔记，用于加深学习效果。</p>
</blockquote>
<p>上一篇介绍了css 的工作原理，这一篇主要介绍<code>盒子模型</code>和<code>浮动</code>。</p>
<h2 id="盒子模型">盒子模型</h2>
<blockquote>
<p>所谓盒子模型，就是浏览器为页面中的每个HTML元素生成的矩形盒子。这些盒子们都要按照可见版式模型在页面上排布。</p>
</blockquote>
<p>HUGOMORE42</p>
<p>可见的页面版式主要由三个属性控制：position、display和float。</p>
<ul>
<li>position：控制页面上元素的位置关系</li>
<li>display：控制元素是堆叠、并排还是不在页面出现</li>
<li>float：提供控制的方式，以便吧元素组成多栏布局</li>
</ul>
<p>元素盒子的属性可以分成三组：</p>
<ul>
<li>边框(board)。可以甚至边框的宽窄、样式和颜色</li>
<li>内边距(padding)。可以甚至盒子内容区与边框的间距</li>
<li>外边距(margin)。可以设置盒子与相邻元素的间距</li>
</ul>
<figure data-type="image" tabindex="1"><img src="http://omuo4kh1k.bkt.clouddn.com/4J2VDi7TIFFuSOVgWp-3uuDrzvYh7oMDxeNv5OxgpaQoUGlHPo8tL43fAa5iheKn" alt="盒模型示意图展示了HTML元素的边框、内边距和外边距之间的关系" loading="lazy"></figure>
<p>元素盒子还有一个背景层，可以改变颜色，也可以添加图片。</p>
<h3 id="简写样式">简写样式</h3>
<p>CSS为边框、内边距和外边距分别规定了简写属性，每个简写声明中，属性值得顺序都是上、右、下、左。</p>
<p>比如：</p>
<pre><code class="language-css">{
  margin-top: 5px; 
  margin-right: 10px;
  margin-bottom: 12px; 
  margin-left: 8px;
}
</code></pre>
<p>使用简写则为这样：</p>
<pre><code class="language-css">{
    margin: 12px 10px 12px 8px;
}
</code></pre>
<p>如果有一个值没写，那么则使用对边的值。</p>
<p>比如：</p>
<pre><code class="language-css">{margin: 12px 10px 12px;}
/*等同于*/
{
    margin: 12px 10px 12px 10px;
}
</code></pre>
<p>如果只写一个值，则4个边都取这个值。</p>
<pre><code class="language-css">{margin: 12px;}
/*等同于*/
{margin: 12px 12px 12px 12px;}
</code></pre>
<p>另外每个盒子的属性也分三个粒度，这三个粒度从一般到特殊分别举例如下：</p>
<pre><code class="language-css">{
    border: 2px dashed red;
}
</code></pre>
<p>混合使用三种粒度的简写属性达成设计目标是很常见的。比如，想为盒子的上边和下边添加4像素的红色边框，为左边添加1像素宽的红色边框，而右边没有。可以这么写：</p>
<pre><code class="language-css">{border: 4px solid red;} /* 先给4条边设置相同的样式*/
{border-left-width: 1px;} /* 修改左边框宽度*/
{border-fight: none;} /*移出右边框*/
</code></pre>
<h3 id="盒子边框">盒子边框</h3>
<p>border 有三个相关属性。</p>
<ul>
<li>宽度（border-width)。可以使用thin、medium和thick等文本值，也可以使用除百分比和负值之外的任何绝对值。</li>
<li>样式（border-style)。有none、hidden、dotted、dashed等文本值。</li>
<li>颜色（border-color）。可以使用任意颜色值，包括RGB、HSL、十六进制颜色值和颜色关键字。</li>
</ul>
<h3 id="盒子内边距">盒子内边距</h3>
<p>内边距是盒子内容区与盒子边框之间的距离。</p>
<figure data-type="image" tabindex="2"><img src="http://omuo4kh1k.bkt.clouddn.com/sKiD0I3LeE7lTK8rARqH8TFpzVK9vh4QoAWCg_7Ll7m9V8VMkBNKY_YfvVUueia8" alt="" loading="lazy"></figure>
<p>上图的样式为：</p>
<pre><code class="language-css">p {
    font: 16px helvetica, sans-serif; 
    width: 220px; 
    border: 2px solid red; 
    background-color: #caebff;
}
</code></pre>
<p>可以看到在没有设定内边距的情况下，内容紧挨着边框。</p>
<p>设定边框后：</p>
<pre><code class="language-css">p {
    font: 16px helvetica, arial, sans-serif; 
    width: 220px; 
    border: 2px solid red; 
    background-color: #caebff; 
    padding: 10px;
}
</code></pre>
<p>效果如下，可以看到样式舒服了很多：</p>
<figure data-type="image" tabindex="3"><img src="http://omuo4kh1k.bkt.clouddn.com/k6hxSxGq2igZL_RfVnFVqsdD-kX40LgyIPKoXyOprfTQfgL2DdnU4RRBB0c7qYXB" alt="添加内边距后的效果图" loading="lazy"></figure>
<blockquote>
<p>内边距在盒子的内部，所以也会取得盒子背景。也就是说，多出来的内边距并没有挤压文本内容，实际是加在了声明的盒子宽度之上。</p>
</blockquote>
<h3 id="盒子外边距">盒子外边距</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/nU6FAYz7aFdQrfj7ByrBHbcvJx5F86G_jlpttdfaGt24vpb4KsYUln3JuVW7ZZ14" alt="外边距的例子" loading="lazy"></figure>
<p>上图的例子中，第一组是默认情况，第二组是在第一组基础上添加了边框，第三组是把第二组的外边距设置为了0，标题和段落全紧挨在一起了。</p>
<blockquote>
<p>推荐大家吧这条规则作为样式表的第一条规则：</p>
</blockquote>
<pre><code class="language-css">* {margin: 0; padding: 0;}
</code></pre>
<p>这条规则是把所有元素默认的外边距和内边距都设定为0。这样，我们可以为那些真正需要添加边距的元素设定边距。</p>
<h3 id="叠加外边距">叠加外边距</h3>
<p>比如下边这个样式：</p>
<pre><code class="language-css">p {
    height: 50px;
    border: 1px solid #000;
    backgroundcolor: #fff;
    margin-top: 50px;
    margin-bottom: 30px;
}
</code></pre>
<p>如果我们把这个样式应用到3个前后相接的段落上，由于上边距和下边距相邻，<code>你可能会认为他们之间的外边距是80（50+30）像素，但是实际上是50像素</code>，这就是边距叠加。</p>
<blockquote>
<p>垂直方向上外边距会叠加 水平方向的不会<br>
<code>外边距单位</code> 根据经验，水平边距可以使用像素，以便该段文本始终与包含元素边界保持固定间距，不受自豪变大或变小的影响。而对于上下外边距，已<code>em</code> 为单位则可以让段间距随字号变化而相应增大或缩小。</p>
</blockquote>
<h3 id="盒子有多大">盒子有多大</h3>
<h3 id="没有宽度的盒子">没有宽度的盒子</h3>
<p>如果没有显式的设置元素的 <code>width</code> 属性，我们就称这个盒子没有宽度。<br>
如果没有设定 width， 那么这个属性的默认值是 auto，会让元素的宽度扩展到与父元素同宽。</p>
<p>我们看个例子🌰：</p>
<pre><code class="language-html">&lt;body&gt;
&lt;p&gt; 这个元素没有设置宽度&lt;/p&gt;
&lt;/body&gt;
</code></pre>
<p>设置样式：</p>
<pre><code class="language-css">body {
    font-family: helvetica, arial, sans-serif;
    size: 1em;
    marging: 0px;
    background-color: #caebff;
}

p {
    margin: 0;
    background-color: #fff;
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/ZzLp1aWGAOITCd_lxtpRdQ6NX1NRqE8Sgjk38YvazbBCB8nExjmrAL5CPZsDAG7U" alt="不设置宽度的样式" loading="lazy"></figure>
<p>可以看到，不给段落设置宽度，段落会填满 body 元素。</p>
<p>为了更加明显，我给段落左右分别加一个边框，再加一个外边距。</p>
<pre><code class="language-css">p {
    margin:0 30px; 
    background-color:#fff; 
    padding:0 20px; 
    border: solid red; 
    border-width: 0 6px;
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/Wc3Sep8w8seiPVOK-aC70y-maRXmdR0gqqLq9pLXZvjtu0FuTKruWq8mKX_dLMj6" alt="段落添加左右边框" loading="lazy"></figure>
<p>这时段落内容区域变成了 288像素（我把浏览器宽度手动调成了400px，400-(20+6+30)x2）。</p>
<blockquote>
<p><code>结论</code>：没有宽度的元素始终会扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距会导致内容宽度减少，减少量等于水平边框、内边距和外边距的和。</p>
</blockquote>
<h3 id="有宽度的盒子">有宽度的盒子</h3>
<p>还是上边的例子，我们先把外边距去掉，固定宽度400px；</p>
<pre><code class="language-css">p {
    width:400px; 
    margin:0; 
    padding:0 20px;  
    border:solid red;  
    border-width: 0 6px  0 6px;  
    background-color:#fff;
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/p-NHopjzQr4Wb9oQGYVrmjTT-kROYvB0p-cBVEW2uEtliPKnMDxZC-0NowuYuzs0" alt="设定宽度、内边距、边框的样式" loading="lazy"></figure>
<p>可以看到，盒子的宽度并不是400px，而是452像素（400+(20+6)*2）。</p>
<p>再给盒子加上外边距：</p>
<pre><code class="language-css">p {
    width:400px; 
    margin:0 30px; 
    padding:0 20px;  
    border:solid red;  
    border-width: 0 6px  0 6px;  
    background-color:#fff;
}
</code></pre>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/t1Np4vU0aQAiAJ-anFl4nJEEJVh_58Mtv5wgwG6umS103kIolQz374za8QFWbiP1" alt="设定宽度、内边距、外边距、边框的样式" loading="lazy"></figure>
<p>可以看到，这时总宽度达到了512像素（30+6+20+400+20+6+30=512）</p>
<blockquote>
<p><code>结论</code>: 为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子更宽。实际上盒子的 width 属性设定的只是盒子内容区的宽度，而非盒子整体的宽度</p>
</blockquote>
<h2 id="浮动与清除">浮动与清除</h2>
<h3 id="浮动">浮动</h3>
<p>css 设计 float（浮动）属性的主要目的是为了实现文本绕排图片的效果，这个属性也是创建多栏布局最简单的方式。<br>
我们先看一个例子：</p>
<pre><code class="language-html">&lt;img .../&gt;
&lt;p&gt;..the paragraph text...&lt;/p&gt;
</code></pre>
<p>css 规则如下。</p>
<pre><code class="language-css">p {
    margin: 0;
    border: 1px solid red;
}
img {
    float: left;
    margin: 0 4px 4px 0;
}
</code></pre>
<p>这个例子的样式如图所示：<br>
<img src="http://media.gusibi.mobi/oO9LyVmGMagZ6OLJTOp6X4cVPsXliIY5i6DgzFeFm7tflJwZeZLbImciTfmC9yDl" alt="" loading="lazy"></p>
<blockquote>
<p>这里我们给图片加了 <code>float: left</code> 样式，这时浏览器就会把图片向上推，直到它碰到父元素的内边界（也就是body）。后面的内容不再认为浮动元素在它的前边，所以它会占据父元素左上角的位置。不过，它的内容会绕开浮动的图片。</p>
</blockquote>
<h3 id="创建分栏">创建分栏</h3>
<p>在上面的基初上如何使内容分栏呢？<br>
只要再用一<code>float</code> 属性就可以了。</p>
<pre><code class="language-css">p {
    float: left; /* 加上这两行*/
    width: 200px;
    ...
}
</code></pre>
<figure data-type="image" tabindex="9"><img src="http://media.gusibi.mobi/uLsus15W0rQdkt-NzbZwFJuRlczzkEyAWgLb94eGAOGJN-9P_Xi644qyJcgviz8w" alt="" loading="lazy"></figure>
<p>这样同时浮动图片和有宽度的段落，会使图片绕排效果消失，而浮动的段落也向左向上移动。变成了多栏的效果。</p>
<h3 id="围住浮动元素">围住浮动元素</h3>
<p>看下这个例子：</p>
<pre><code class="language-html">&lt;section&gt;
    &lt;img src=&quot;images/rubber_duck2.jpg&quot;&gt;
    &lt;p&gt;It's fun to float.&lt;/p&gt;
&lt;/section&gt;
&lt;footer&gt;Here is the footer element that runs across&lt;/footer&gt;
</code></pre>
<p>应用样式如下：</p>
<pre><code class="language-css">section {
    border: 1px solid blue;
    margin: 0 0 10px 0;
}
p {
    marging: 0;
}
footer {
    border: 1px solid red;
}
</code></pre>
<p>效果如图：</p>
<figure data-type="image" tabindex="10"><img src="http://media.gusibi.mobi/FgZ9xXjRtez6W2GXoMKbhzDq25LRtJISiO90AYkJ6yEKJ9WB0QUvU1Zz-f7wEmlB" alt="浮动图片后标题跑到了右边，但父元素section也收缩到只包含文本的高度" loading="lazy"></figure>
<p>但这并不是我们想要的，我们并不想让footer 被提到上边。<br>
浮动元素脱离了原来的文档流，不受父元素的控制。如果我们想让父元素还包含浮动的子元素，怎么做呢？<br>
有三种方法：</p>
<h4 id="为父元素应用-overflow-hidden">为父元素应用 <code>overflow: hidden</code></h4>
<p>只需要在 <code>section</code> 加上这个样式：</p>
<pre><code class="language-css">section {
    overflow: hidden;
    ...
}
</code></pre>
<p>现在效果如图：</p>
<figure data-type="image" tabindex="11"><img src="http://media.gusibi.mobi/Kepon_jsAnaY99ITC0Oc5SapqZD5PjXOhwAuyeX-O8OH2Ag2hmryl9wH5jdI_gSR" alt="section 又包围了浮动的图片" loading="lazy"></figure>
<blockquote>
<p>实际上，<code>overflow: hidden</code> 声明凯真正用途是防止包含元素被超大内容撑大。也就是说应用上这个之后，包含元素（父元素）会保持其设定的宽度，如果子元素过大，会被截掉。</p>
</blockquote>
<h4 id="浮动父元素">浮动父元素</h4>
<p>第二种方法是让父元素和子元素同时浮动。</p>
<pre><code class="language-css">section {
    float: left;
    width: 100%;
    border: 1px solid blue;
}
img {
    float: left;
}
footer {
    border: 1px solid red;
    clear: left;
}
</code></pre>
<p>浮动section 后，不管其子元素是否浮动，都会被包围。因此需要用 <code>width: 100%</code> 让section 与浏览器同宽。由于section 也浮动，所以footer 会往它旁边挤，这时需要使用 <code>clear: left</code> 以保证不会被提升到浮动的元素旁边。</p>
<h4 id="在父元素内容的末尾添加浮动元素可以直接在标记中加也可以通过给父元素添加clearfix-类来加">在父元素内容的末尾添加浮动元素，可以直接在标记中加，也可以通过给父元素添加clearfix 类来加。</h4>
<p>第三种方法是给父元素添加一个非浮动的子元素，然后清除该子元素。</p>
<blockquote>
<p>这种方式可以生效是因为父元素一定会包围非浮动子元素，且清除会让这个子元素处于最下。</p>
</blockquote>
<p>这里我们使用神奇的 <code>clearfix</code> 规则：</p>
<pre><code class="language-css">.clearfix:after {
	 content: &quot;.&quot;;
	 display: block;
	 height: 0;
	 clear: both;
	 visibility: hidden;
	}
</code></pre>
<p>这个 <code>clearfix</code> 规则最早是由程序员 <code>Tony Aslett</code> 发明的，它只添加了一个清除的包含句点作为非浮动元素（必须有内容，句点是最小的内容）。规则中其他生命是为了确保这个伪元素没有高度，而且不可见。</p>
<blockquote>
<p><code>after</code> 会在元素内容（而不是元素后插入一个伪元素）<br>
使用clear: both 意味着 section 中新增的子元素会被清除左右浮动元素。</p>
</blockquote>
<p>我们看了三种方法围住浮动元素的方式。</p>
<p>那如果没有父元素，如果清除浮动呢？</p>
<p>比如下边这个例子：</p>
<pre><code class="language-html">&lt;section&gt;
    &lt;img src=&quot;images/rubber_duck3.jpg&quot;&gt;
    &lt;p&gt;This text sits next to the image and because the text extends below the bottom of the image, the next image positions itself correctly under the previous image.&lt;/p&gt;
    &lt;img src=&quot;images/beach_ball.jpg&quot;&gt;
    &lt;p&gt;This text is short, so the next image can float up beside this one.&lt;/p&gt;
    &lt;img src=&quot;images/yellow_float.jpg&quot;&gt;
    &lt;p&gt;Because the previous image's text does not extend below it, this image and text move up next to the previous image. This problem can be solved by the use of the clear property.&lt;/p&gt;
&lt;/section&gt;
</code></pre>
<p>样式如下：</p>
<pre><code class="language-css">section {
    width:300px; b
    order:1px solid red;
}
img {
    float:left; 
    margin:0 4px 4px 0;
}
p {
    font-family:helvetica, arial, sans-serif; 
    margin:0 0 5px 0;
}
</code></pre>
<p>效果如图所示：</p>
<figure data-type="image" tabindex="12"><img src="http://media.gusibi.mobi/bgZc0EUo1bur6AIje1zvk3hrV2XF4obDGJ3YzGRfDEriPyfneQWQ45Xb5iEVIJCD" alt="" loading="lazy"></figure>
<p>由于第二张图下方有空间，所以第三张图及说明文字会上浮到第二张图片右侧，这并不是我们想要的结果。</p>
<p>我们想要的效果是如下图这样：</p>
<figure data-type="image" tabindex="13"><img src="http://media.gusibi.mobi/VBkwrlGf31kzH72-6luCmCeBgqCB2_-8giCfqQtY9KBWV0pU-5KsUFJ8STTJde2J" alt="" loading="lazy"></figure>
<p>那怎么实现呢？ 还是应用 <code>clearfix</code> 规则。为每个段落加上clearfix 类。通过<code>clearfix</code>类清除元素后，布局就是我们希望的了。</p>
<p>这一篇主要介绍了盒子模型，浮动和清除。下一篇介绍css 布局。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="14"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="15"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信公号DIY：MongoDB 简易ORM & 公号记账数据库设计]]></title>
        <id>http://blog.gusibi.site/post/weixin_mp_diy_setp_by_setp_1_db_desgin/</id>
        <link href="http://blog.gusibi.site/post/weixin_mp_diy_setp_by_setp_1_db_desgin/">
        </link>
        <updated>2017-07-16T05:14:10.000Z</updated>
        <content type="html"><![CDATA[<p>前两篇 <code>微信公号DIY</code> 系列:</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752007&amp;idx=1&amp;sn=46cf89695e8147fb30acb162ec895290&amp;chksm=80b0b86db7c7317bca8612498cb7b01bc541d5b03399496fd5ce06291b844c0af9920d09f8fc#rd">微信公号DIY：一小时搭建微信聊天机器人</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752009&amp;idx=1&amp;sn=b6d533c6bf408daec7229e2ddb6843a0&amp;chksm=80b0b863b7c73175ff3d6300ad1a2f9e013c5614397a7115a73eba38af715e9a905e28aaa49e#rd">微信公号DIY：训练聊天机器人&amp;公号变身图片上传工具</a></li>
</ul>
<p>介绍了如何使用搭建&amp;训练聊天机器人以及让公号支持图片上传到七牛，把公号变成一个七牛图片上传客户端。这一篇将继续开发公号，让公号变成一个更加实用的工具<code>账本</code>（理财从记账开始）。</p>
<blockquote>
<p><code>代码：</code> 项目代码已上传至github，地址为<a href="https://github.com/gusibi/momo">gusibi/momo：https://github.com/gusibi/momo</a></p>
</blockquote>
<p>HUGOMORE42</p>
<h2 id="账本功能">账本功能</h2>
<p>账本是一个功能比较简单应用，公号内只需要支持：</p>
<ol>
<li>记账（记账，修改金额，取消记账）</li>
<li>账单统计（提供数据和图片形式的统计功能）</li>
</ol>
<p>当然后台管理功能就比较多了，这个以后再介绍。</p>
<p>对于数据存储，我选择的是MongoDB（选MongoDB的原因是，之前没用过，想试一下），我们先看下MongoDB和关系型数据库的不同。</p>
<h2 id="mongodb">MongoDB</h2>
<h3 id="什么是mongodb">什么是MongoDB ?</h3>
<p>MongoDB 是由C++语言编写的，是一个开放源代码的面向文档的数据库,易于开发和缩放。</p>
<blockquote>
<p>mongo和传统关系数据库的最本质的区别在那里呢？MongoDB 是文档模型。</p>
</blockquote>
<p>关系模型和文档模型的区别在哪里？</p>
<ul>
<li>关系模型需要你把一个数据对象，拆分成零部件，然后存到各个相应的表里，需要的是最后把它拼起来。举例子来说，假设我们要做一个CRM应用，那么要管理客户的基本信息，包括客户名字、地址、电话等。由于每个客户可能有多个电话，那么按照第三范式，我们会把电话号码用单独的一个表来存储，并在显示客户信息的时候通过关联把需要的信息取回来。</li>
<li>而MongoDB的文档模式，与这个模式大不相同。由于我们的存储单位是一个文档，可以支持数组和嵌套文档，所以很多时候你直接用一个这样的文档就可以涵盖这个客户相关的所有个人信息。关系型数据库的关联功能不一定就是它的优势，而是它能够工作的必要条件。 而在MongoDB里面，利用富文档的性质，很多时候，关联是个伪需求，可以通过合理建模来避免做关联。<br>
<img src="http://www.mongoing.com/wp-content/uploads/2016/01/MongoDB-%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1%E8%BF%9B%E9%98%B6%E6%A1%88%E4%BE%8B_%E9%A1%B5%E9%9D%A2_04-1024x791.png" alt="关系模型和文档模型区别图例" loading="lazy"></li>
</ul>
<h3 id="mongodb-概念解析">MongoDB 概念解析</h3>
<p>在mongodb中基本的概念是文档、集合、数据库，下表是MongoDB和关系型数据库概念对比：</p>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table</td>
<td>joins</td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>
<p>通过下图实例，我们也可以更直观的的了解Mongo中的一些概念：</p>
<figure data-type="image" tabindex="1"><img src="http://www.runoob.com/wp-content/uploads/2013/10/Figure-1-Mapping-Table-to-Collection-1.png" alt="Mongo中的一些概念" loading="lazy"></figure>
<p>接下来，我从使用的角度来介绍下如何使用 python 如何使用MongoDB，在这个过程中，我会实现一个简单的MongoDB的ORM，同时也会解释一下涉及到的概念。</p>
<h2 id="简易-python-mongodb-orm">简易 Python MongoDB ORM</h2>
<h3 id="python-使用-mongodb">python 使用 mongodb</h3>
<p>首先，需要确认已经安装了 PyMongo，如果没有安装，使用以下命令安装：</p>
<pre><code class="language-sh">pip install pymongo
# 或者
easy_install pymongo
</code></pre>
<p>详细安装步骤参考: <a href="http://api.mongodb.com/python/current/installation.html">PyMongo Installing / Upgrading</a></p>
<h4 id="连接-mongoclient">连接 MongoClient：</h4>
<pre><code class="language-python">&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; client = MongoClient()
</code></pre>
<p>上述命令会使用Mongo的默认host和端口号，和以下命令作用相同：</p>
<pre><code class="language-python">client = MongoClient('localhost', 27017) # mongo 默认端口号
为27017
# 也可以这样写
client = MongoClient('mongodb://localhost:27017/')
</code></pre>
<h4 id="选择一个数据库">选择一个数据库</h4>
<p>获取 MongoClient 后我们接下来要做的是选择要执行的数据库，命令如下：</p>
<pre><code class="language-python">&gt;&gt;&gt; db = client.test_database # test_database 是选择的数据库名称
# 也可以使用下述方式
&gt;&gt;&gt; db = client['test-database']
</code></pre>
<blockquote>
<p><code>数据库（Database）</code><br>
一个mongodb中可以建立多个数据库。<br>
MongoDB的默认数据库为&quot;db&quot;，该数据库存储在data目录中。<br>
MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。<br>
&quot;show dbs&quot; 命令可以显示所有数据的列表。<br>
执行 &quot;db&quot; 命令可以显示当前数据库对象或集合。<br>
运行&quot;use&quot;命令，可以连接到一个指定的数据库。</p>
</blockquote>
<h4 id="获取集合">获取集合</h4>
<p>选择数据库后，接下来就是选择一个集合（Collection），获取一个集合和选择一个数据库的方式基本一致：</p>
<pre><code class="language-python">&gt;&gt;&gt; collection = db.test_collection  # test_collection 是集合名称
# 也可以使用字典的形式
&gt;&gt;&gt; collection = db['test-collection']
</code></pre>
<blockquote>
<p><code>集合（collection）</code><br>
集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表。<br>
集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。<br>
<code>当第一个文档插入时，集合就会被创建。</code><br>
集合名<code>不能是空字符串&quot;&quot;</code>。<br>
集合名<code>不能含有\0字符（空字符)</code>，这个字符表示集合名的结尾。<br>
集合名<code>不能以&quot;system.&quot;开头</code>，这是为系统集合保留的前缀。<br>
用户创建的集合名字<code>不能含有保留字符</code>。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。</p>
</blockquote>
<p>了解这几个操作后我们把这几个封装一下：</p>
<pre><code class="language-python">from six import with_metaclass
from pymongo import MongoClient
from momo.settings import Config

pyclient = MongoClient(Config.MONGO_MASTER_URL)

class ModelMetaclass(type):
    &quot;&quot;&quot;
    Metaclass of the Model.
    &quot;&quot;&quot;
    __collection__ = None

    def __init__(cls, name, bases, attrs):
        super(ModelMetaclass, cls).__init__(name, bases, attrs)
        cls.db = pyclient['momo_bill']  # 数据库名称，也可以作为参数传递 通常情况下一个应用只是用一个数据库就能实现需求
        if cls.__collection__:
            cls.collection = cls.db[cls.__collection__]


class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'
</code></pre>
<p>现在我们可以这样定义一个集合（Collection）：</p>
<pre><code class="language-python">class Account(Model):

    '''
    暂时在这里声明文档结构，用不用做校验，只是方便自己查阅
    以后也不会变成类似 SQLAlchemy 那种强校验的形式
    :param _id: '用户ID',
    :param nickname: '用户昵称 用户显示',
    :param username: '用户名 用于登录',
    :param avatar: '头像',
    :param password: '密码',
    :param created_time: '创建时间',
    '''
    __collection__ = 'account'  # 集合名
</code></pre>
<p>使用方式：</p>
<pre><code class="language-python">account = Account()
</code></pre>
<p>现在就已经指定了数据库和集合，可以自由做 CURD 操作了（虽然还不支持）。</p>
<h4 id="创建文档insert-document">创建文档（insert document）</h4>
<p>使用PyMongo 创建文档非常方便：</p>
<pre><code class="language-python">&gt;&gt;&gt; import datetime
&gt;&gt;&gt; account = {&quot;nickname&quot;: &quot;Mike&quot;,
...         &quot;username&quot;: &quot;mike&quot;,
...         &quot;avatar&quot;: &quot;http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK&quot;,
...         &quot;password&quot;: &quot;password&quot;,
...         &quot;created_time&quot;: datetime.datetime.utcnow()}

&gt;&gt;&gt; accounts = db.account
&gt;&gt;&gt; account_id = accounts.insert_one(account).inserted_id
&gt;&gt;&gt; account_id
ObjectId('...')
</code></pre>
<p>创建一个文档时，你可以指定 <code>_id</code>，如果不指定，系统会自动添加上<code>_id</code> 字段，这个字段必须是唯一不可重复的字段。</p>
<p>也可是使用 <code>collection_names</code> 命令显示所有的集合：</p>
<pre><code class="language-python">&gt;&gt;&gt; db.collection_names(include_system_collections=False)
[u'account']
</code></pre>
<blockquote>
<p><code>文档（Document）</code> 文档是一组键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>
</blockquote>
<p>现在我们给这个简易ORM添加创建文档的功能：</p>
<pre><code class="language-python">class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'

    @classmethod
    def insert(cls, **kwargs):
        # insert one document
        doc = cls.collection.insert_one(kwargs)
        return doc
        
    @classmethod
    def bulk_inserts(cls, *params):
        '''
        :param params: document list
        :return: 
        '''
        results = cls.collection.insert_many(params)
        return results        
</code></pre>
<p>创建一个文档方法为：</p>
<pre><code class="language-python">account = Account.insert(&quot;nickname&quot;: &quot;Mike&quot;,
        &quot;username&quot;: &quot;mike&quot;,
        &quot;avatar&quot;: &quot;http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK&quot;,
        &quot;password&quot;: &quot;password&quot;,
        &quot;created_time&quot;: datetime.datetime.utcnow())
</code></pre>
<h4 id="查询文档">查询文档</h4>
<p>使用 <code>find_one</code> 获取单个文档：</p>
<pre><code class="language-python">accounts.find_one()
</code></pre>
<blockquote>
<p>如果没有任何筛选条件，find_one 命令会取集合中的第一个文档<br>
如果有筛选条件，会取符合条件的第一个文档</p>
</blockquote>
<pre><code class="language-python">accounts.find_one({&quot;nickname&quot;: &quot;mike&quot;})
</code></pre>
<p>使用 <code>ObjectId</code> 查询单个文档：</p>
<pre><code class="language-python">accounts.find_one({&quot;_id&quot;: account_id})
</code></pre>
<p>将这个添加到ORM中：</p>
<pre><code class="language-python">class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'

    @classmethod
    def get(cls, _id=None, **kwargs):
        if _id: # 如果有_id
            doc = cls.collection.find_one({'_id': _id})
        else: # 如果没有id
            doc = cls.collection.find_one(kwargs)
        return doc
</code></pre>
<p>如果你想获取多个文档可以使用<code>find</code>命令。</p>
<p>使用<code>find</code>命令获取多个文档</p>
<pre><code class="language-python">accounts.find()
# 当然支持筛选条件
accounts.find({&quot;nickname&quot;: &quot;mike&quot;})
</code></pre>
<p>将这个功能添加到ORM：</p>
<pre><code class="language-python">class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'
    
    @classmethod
    def find(cls, filter=None, projection=None, skip=0, limit=20, **kwargs):
        docs = cls.collection.find(filter=filter,
                                   projection=projection,
                                   skip=skip, 
                                   limit=limit,
                                   **kwargs)
        return docs
</code></pre>
<p>现在我们可以这样做查询操作：</p>
<pre><code class="language-python">account = Account.get(_id='account_id')
accounts = Account.find({'name': &quot;mike&quot;})
</code></pre>
<h4 id="修改update">修改（update）</h4>
<p>更新操作<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html?highlight=update_one#pymongo.collection.Collection.update_one">文档地址：http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.update_one</a>：</p>
<blockquote>
<p><code>update_one</code>(filter, update, upsert=False, bypass_document_validation=False, collation=None)</p>
</blockquote>
<p>更新一个符合筛选条件的文档 upsert 如果为True 则会在没有匹配到文档的时候创建一个</p>
<blockquote>
<p><code>update_many</code>(filter, update, upsert=False, bypass_document_validation=False, collation=None)</p>
</blockquote>
<p>更新全部符合筛选条件的文档 upsert 如果为True 则会在没有匹配到文档的时候创建一个</p>
<p>添加到ORM中：</p>
<pre><code class="language-python">class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'
    
    @classmethod
    def update_one(cls, filter, **kwargs):
        result = cls.collection.update_one(filter, **kwargs)
        return result

    @classmethod
    def update_many(cls, filter, **kwargs):
        results = cls.collection.update_many(filter, **kwargs)
        return results
</code></pre>
<p>可以看到，我这里并没有做多余的操作，只是直接调用了PyMongo的方法。</p>
<h4 id="删除">删除</h4>
<p>删除操作和update类似但是比较简单：</p>
<blockquote>
<p>delete_one(filter, collation=None):</p>
</blockquote>
<p>删除一个匹配到的文档</p>
<blockquote>
<p>delete_many(filter, collation=None):</p>
</blockquote>
<p>删除全部匹配到的文档</p>
<p>添加到ORM中：</p>
<pre><code class="language-python">class Model(with_metaclass(ModelMetaclass, object)):

    __collection__ = 'model_base'

    @classmethod
    def delete_one(cls, **filter):
        cls.collection.delete_one(filter)

    @classmethod
    def delete_many(cls, **filter):
        cls.collection.delete_many(filter)

</code></pre>
<p>到这里，简易的ORM就实现了（这只能算是个功能简单的框，可以再自由添加其它更多的功能）。</p>
<p>接下来是账本文档结构的设计</p>
<h2 id="账本数据结构设计">账本数据结构设计</h2>
<p>账本需要包含的数据有：</p>
<ul>
<li>账户所有人</li>
<li>账单记录</li>
<li>账单分类</li>
</ul>
<p>那么我们至少需要三个集合：</p>
<pre><code class="language-python">{
    'account': {  # 用户集合
        '_id': '用户ID',
        'nickname': '用户昵称',
        'username': '用户名 用于登录',
        'avatar': '头像',
        'password': '密码',
        'created_time': '创建时间',
    },
    'bill': { # 账单集合
        '_id': '账单ID',
        'uid': '用户ID',
        'money': '金额 精确到分',
        'tag': '标签',
        'remark': '备注',
        'created_time': '创建时间',
    },
    'tag': {  # 账单标签
        '_id': '标签ID',
        'name': '标签名',
        'icon': '标签图标',
        'uid': '创建者ID（默认是管理员）',
        'created_time': '创建时间',
    }
}
</code></pre>
<p>这里账单和用户使用 uid 作为引用的关联，account 和 bill 是一对多关系。</p>
<blockquote>
<p>当然你也可以再加一个账本的集合，用户和账本对应，这时，账单可以作为账本中的一个list数据结构（单个文档有16M的限制，如果存储超过这个大小不能使用这种形式，数据量大的时候，查询操作会比较缓慢）。</p>
</blockquote>
<p>作为公号中的账本，我们暂时不加账本功能，因为这会让我们的操作变得复杂。</p>
<p>因为公号里的每次操作都是独立请求，并没有上下文。所以我们要记录记账这个操作走到了哪一步，接下来改干嘛。</p>
<p>记账逻辑如图：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5hzgvdbSsM37XRm-A8mRkPe6d2sHmvvT6w3RgNAKzoHxZwpxcE3f_tRBsFxRgA-p" alt="公号记账流程图" loading="lazy"></figure>
<p>所以我们这里要有数据来记录当前的操作步骤以及接下来改有的操作步骤：</p>
<pre><code class="language-python">{
    'account_workflow': {  # 用户当前工作流
        '_id': 'id', 
        'next': '下一步的操作',
        'uid': '用户ID',
        'workflow': '使用的工作流',
        'created_time': '开始时间'
    }
}
</code></pre>
<p>这个集合记录了我们当前所在的工作流，下一步该走向哪一步。</p>
<blockquote>
<p>这个集合需要设置文档的过期时间，比如输入 “记账” 激活记账工作流后，如果10分钟没有操作完成，那么需要重新开始。以免输入记账后不完成不能继续其它的操作。</p>
</blockquote>
<p>下面的这个集合记录了哪些关键字可以激活工作流，对应的工作流是什么以及开始哪个动作。</p>
<pre><code class="language-python">{
    'keyword': {  # 特殊关键字
        '_id': '关键字ID',
        'word': '关键字',
        'data': {
            'workflow': '工作流',
            'action': '工作流动作',
            'value': '返回值',
            'type': '返回值类型 url|pic|text',
        },
        'created_time': '创建时间'
    },
}
</code></pre>
<p>到这里账本的数据库设计就结束了。</p>
<h2 id="总结">总结</h2>
<p>这一篇主要介绍了MongoDB，PyMongo 的使用以及如何编写一个简易的MongoDB ORM。<br>
然后又介绍了基于 MongoDB 的公号账本应用的数据库设计。</p>
<h3 id="预告">预告</h3>
<p>下一篇我们将介绍，如何实现记账功能。</p>
<p>以下是操作截图。</p>
<p><img src="http://media.gusibi.mobi/SDTcm0mQp-0ugO8R9bz9NxA-HrhsKBXCdEK85exrLYmU7EiI2X07FhsVRFhQqj3K" alt="记账" loading="lazy"><br>
<img src="http://media.gusibi.mobi/Ya4Ip_QWn_XR2CnG5yipx9ZeG7s6wJZy8_SFYIKYPLOFk75KPq54e42x27v6kjD4" alt="修改金额" loading="lazy"><br>
<img src="http://media.gusibi.mobi/JdJvDNlb4SyvozhE-1YSPdkTWkrk8A1BSO6pxmLUzHpF-7QyqEQYACAeetdkhbFo" alt="取消记账" loading="lazy"></p>
<p>欢迎关注公号<code>四月（April_Louisa）</code>试用。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.cnblogs.com/WeiGe/p/4903850.html">MongoDB数据库设计中6条重要的经验法则：http://www.cnblogs.com/WeiGe/p/4903850.html</a></li>
<li><a href="http://www.mongoing.com/mongodb-advanced-pattern-design">MongoDB 进阶模式设计：http://www.mongoing.com/mongodb-advanced-pattern-design</a></li>
<li><a href="http://www.runoob.com/mongodb/mongodb-databases-documents-collections.html">MongoDB 概念解析：http://www.runoob.com/mongodb/mongodb-databases-documents-collections.html</a></li>
<li><a href="http://api.mongodb.com/python/current/index.html">PyMongo 3.4.0 Documentation：http://api.mongodb.com/python/current/index.html</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用swagger 生成 Flask RESTful API]]></title>
        <id>http://blog.gusibi.site/post/restful_api_by_swagger_py_codegen/</id>
        <link href="http://blog.gusibi.site/post/restful_api_by_swagger_py_codegen/">
        </link>
        <updated>2017-07-11T05:29:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是-restful">什么是 RESTful</h2>
<h3 id="什么是rest">什么是REST</h3>
<p>REST（英文：Representational State Transfer，又称具象状态传输）是Roy Thomas Fielding博士于2000年在他的博士论文[1] 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。</p>
<p>REST 的核心是可编辑的资源及其集合，用符合 Atom 文档标准的 Feed 和 Entry 表示。每个资源或者集合有一个惟一的 URI。系统以资源为中心，构建并提供一系列的 Web 服务。</p>
<p>在 REST 中，开发人员显式地使用 HTTP 方法，对系统资源进行创建、读取、更新和删除的操作：</p>
<ul>
<li>使用 POST 方法在服务器上创建资源</li>
<li>使用 GET 方法从服务器检索某个资源或者资源集合</li>
<li>使用 PUT 方法对服务器的现有资源进行更新</li>
<li>使用 DELETE 方法删除服务器的某个资源</li>
</ul>
<p>如果一个架构符合REST原则，就可以称它为<code>RESTful架构</code>。</p>
<h4 id="restful-api-设计定义">RESTful API 设计定义</h4>
<p>以下是几个RESTful API的几个概念。</p>
<ul>
<li>资源（Resource）：系统上的所有事物都被抽象为资源（一篇文章，一张照片，一段语音）</li>
<li>集合（Collection）：一组资源的合辑称为集合（几篇文章，几张照片）</li>
<li>路径（Endpoint）：路径又称”终点“，表示API的具体网址（每个网址代表一种资源）</li>
</ul>
<p>那么一个设计良好的RESTful API应该遵循哪些原则呢？</p>
<h5 id="协议">协议</h5>
<p>API与用户的通信协议总是使用HTTPs协议。</p>
<h5 id="域名">域名</h5>
<p>应该尽量将API部署在专用域名，例如：</p>
<pre><code class="language-sh">https://apis.gusibi.com
</code></pre>
<h5 id="api地址和版本">API地址和版本</h5>
<p>在url中指定API版本。比如：</p>
<pre><code class="language-sh">https://apis.gusibi.com/v1
</code></pre>
<h5 id="以资源为中心设计url">以资源为中心设计URL</h5>
<p>资源是RESTful API的核心元素，所有的操作都是针对特定资源进化的。而资源就是URL表示的，所以简洁、清晰、结构化的URL设计是至关重要的。<br>
在RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。我们来看一下 Github 的例子：</p>
<pre><code class="language-sh">/users/:username/repos
/users/:org/repos
/repos/:owner/:repo
/repos/:owner/:repo/tags
/repos/:owner/:repo/branches/:branch
</code></pre>
<h5 id="使用正确的method">使用正确的Method</h5>
<p>对于资源的具体操作类型，使用HTTP method 表示。<br>
以下是常用的HTTP方法。</p>
<ul>
<li>GET：从服务器取出资源</li>
<li>POST：在服务器新建一个资源</li>
<li>PUT：在服务器更新资源（客户端提供改变后的完整资源</li>
<li>PATCH：在服务器更新资源（客户端只提供改变了属性）</li>
<li>DELETE：从服务器删除资源</li>
</ul>
<p>还是使用 github 的例子：</p>
<pre><code class="language-sh">GET /repos/:owner/:repo/issues
GET /repos/:owner/:repo/issues/:number
POST /repos/:owner/:repo/issues
PATCH /repos/:owner/:repo/issues/:number
DELETE /repos/:owner/:repo
</code></pre>
<h5 id="正确的过滤信息filtering">正确的过滤信息（filtering）</h5>
<p>如果记录数量很多，服务器不能都将他们返回给用户。API应该提供参数，过滤返回结果。</p>
<p>下边是一些是、常见的参数。</p>
<ul>
<li>?limit=10: 指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置</li>
<li>?page=2&amp;per_page=100：：指定第几页，以及每页的记录数。</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li>?animal_type_id=1：指定筛选条件</li>
</ul>
<h5 id="选择合适的状态码">选择合适的状态码</h5>
<p>HTTP 应答中，需要带一个很重要的字段：status code。它说明了请求的大致情况，是否正常完成、需要进一步处理、出现了什么错误，对于客户端非常重要。状态码都是三位的整数，大概分成了几个区间：</p>
<p>2XX：请求正常处理并返回<br>
3XX：重定向，请求的资源位置发生变化<br>
4XX：客户端发送的请求有错误<br>
5XX：服务器端错误</p>
<p>常见的状态码有以下几种：</p>
<blockquote>
<p>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<br>
201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>
204 NO CONTENT - [DELETE]：用户删除数据成功。<br>
400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<br>
401 Unauthorized - [<em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>
403 Forbidden - [</em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>
404 NOT FOUND - [<em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>
406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>
410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>
422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>
500 INTERNAL SERVER ERROR - [</em>]：服务器发生错误，用户将无法判断发出的请求是否成功。</p>
</blockquote>
<h5 id="返回结果">返回结果</h5>
<p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<blockquote>
<p>GET /collection：返回资源对象的列表（数组）<br>
GET /collection/resource：返回单个资源对象<br>
POST /collection：返回新生成的资源对象<br>
PUT /collection/resource：返回完整的资源对象<br>
PATCH /collection/resource：返回完整的资源对象<br>
DELETE /collection/resource：返回一个空文档</p>
</blockquote>
<h5 id="错误处理error-handling">错误处理（Error handling）</h5>
<p>如果出错的话，在response body 中通过 message 给出明确的信息。如果状态码是4xx，就应该向用户返回出错信息。</p>
<h5 id="良好的文档">良好的文档</h5>
<p>文档应该是规范的API的重要的组成部分，没有文档的API是难以给他人使用的，也是不利于维护的。</p>
<h5 id="其它">其它</h5>
<ul>
<li>使用 OAuth2.0 鉴权</li>
<li>尽量使用JSON作为返回的数据格式</li>
<li>限流</li>
</ul>
<p>对应上述规则，我们并不能保证其它的API提供者也会遵守，特别是文档，有很大一部分API提供者给出的文档是pdf或者word文档，这是因为在API的迭代开发过程中，文档更新会比较麻烦。</p>
<p>swagger帮API使用者和开发者纠正了这个问题。</p>
<h2 id="什么是swagger">什么是swagger</h2>
<p>Swagger是一个简单但功能强大的API表达工具。改框架为创建JSON或YAML格式的RESTful API 文档提供了OpenAPI规范。swagger文档可由各种编程语言处理，可以在软件开发周期中嵌入源代码控制系统中，以便进行版本管理。使用Swagger生成API，我们可以得到交互式文档，自动生成代码的SDK以及API的发现特性等。</p>
<h3 id="如何编写api文档">如何编写API文档</h3>
<p>我们可以选择使用JSON或者YAML来编写API文档。文档示例如下：</p>
<p>json 格式文档：</p>
<pre><code class="language-json">{
    &quot;swagger&quot;: &quot;2.0&quot;,
    &quot;info&quot;: {
        &quot;version&quot;: &quot;1.0.0&quot;,
        &quot;title&quot;: &quot;Simple API&quot;,
        &quot;description&quot;: &quot;A simple API to learn how to write OpenAPI Specification&quot;
    },
    &quot;schemes&quot;: [
        &quot;https&quot;
    ],
    &quot;host&quot;: &quot;simple.api&quot;,
    &quot;basePath&quot;: &quot;/openapi101&quot;,
    &quot;paths&quot;: {
        &quot;/persons&quot;: {
            &quot;get&quot;: {
                &quot;summary&quot;: &quot;Gets some persons&quot;,
                &quot;description&quot;: &quot;Returns a list containing all persons.&quot;,
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;A list of Person&quot;,
                        &quot;schema&quot;: {
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;items&quot;: {
                                &quot;properties&quot;: {
                                    &quot;firstName&quot;: {
                                        &quot;type&quot;: &quot;string&quot;
                                    },
                                    &quot;lastName&quot;: {
                                        &quot;type&quot;: &quot;string&quot;
                                    },
                                    &quot;username&quot;: {
                                        &quot;type&quot;: &quot;string&quot;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
</code></pre>
<p>yaml 格式文档：</p>
<pre><code class="language-yml">swagger: &quot;2.0&quot;

info:
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification

schemes:
  - https
host: simple.api
basePath: /openapi101

paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons.
      responses:
        200:
          description: A list of Person
          schema:
            type: array
            items:
              required:
                - username
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
</code></pre>
<p>可以发现，yaml格式的文档比json格式的更清晰，可读性更高，推荐使用yaml格式书写文档。</p>
<p>swagger 官网提供了 <a href="http://editor.swagger.io/#/">swagger editor: http://editor.swagger.io/#/</a>，你可以在这个编辑器中创建或导入文档，并在交互式环境中浏览它。</p>
<p>以下是您导入 leads.yaml 定义后的 Swagger Editor UI 外观：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/5f3vEHQSGzv7HLePBpb-fIZBRCw5wnuCkBe4gPFLMtQTuz4LsZCOMHq5gWv-dlal" alt="Swagger Editor UI 外观" loading="lazy"></figure>
<p>右侧的显示窗格显示了格式化的文档，反映了在左侧窗格中的代码编辑器中执行的更改。代码编辑器会指出了所有格式错误。你可以展开和折叠每个窗格。</p>
<h3 id="api文档的基本结构">API文档的基本结构</h3>
<p>我用一个例子来介绍下swagger文档的基本结构，这里我用yaml格式来编写文档：</p>
<pre><code class="language-yml">swagger: &quot;2.0&quot;
info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0

host: api.example.com
basePath: /v1
schemes:
  - https

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK
</code></pre>
<p>上述文档包括元数据（Metadata）、Base URL、API路径（paths）三部分：</p>
<h4 id="metadata">Metadata</h4>
<p>这部分信息包括swagger 使用的版本：</p>
<pre><code class="language-yml">swagger: &quot;2.0&quot;
</code></pre>
<p>API相关的描述信息（比如API介绍、版本等）：</p>
<pre><code class="language-yml">info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0
</code></pre>
<h4 id="base-url">Base URL</h4>
<p>作为web API，一个很重要的信息就是用来给用户使用的 根URL，可用协议（http/https）、host地址：</p>
<pre><code class="language-yml">host: api.example.com
basePath: /v1
schemes:
  - https
</code></pre>
<p>所有的API都是base URL 的相对路径 例如 /users 的API地址是 <code>https://api.example.com/v1/users</code>。</p>
<h4 id="路径paths">路径（Paths）</h4>
<p>paths 部分定义API的路径（endpoint）、支持的HTTP 请求方法</p>
<pre><code class="language-yml">paths:  # 声明路径
  /users:  # 定义API路径
    get:   # 定义请求方式
      summary: Returns a list of users.  # 简介
      description: Optional extended description in Markdown.  # 描述
      produces:
        - application/json    # 定义 服务端response MIME types 
      responses:
        200:    # response 状态码
          description: OK
</code></pre>
<p>当然这只是个最简单的例子，swagger可定义的内容要比我提到的多的多。<br>
具体详细信息可以看下 <a href="https://swagger.io/docs/specification/what-is-swagger/">swagger 文档：https://swagger.io/docs/specification/what-is-swagger/</a>。</p>
<p>当然，写完文档并不代表我们的代码就可以直接使用这份文档以及文档中的约束，swagger 还提供了 <a href="https://github.com/swagger-api/swagger-codegen">swagger-codegen：https://github.com/swagger-api/swagger-codegen</a>。</p>
<h3 id="swagger_codegen">swagger_codegen</h3>
<p>swagger-codegen 是一个开源的代码生成工具，它包含一个模板驱动引擎，可以直接从我们定义的 swagger 文档中生成可视化的文档查看界面和API客户端。</p>
<p>这是一个开源的项目，地址是<a href="https://github.com/swagger-api/swagger-codegen">swagger-codegens： https://github.com/swagger-api/swagger-codegen</a>。可以自己安装使用一下。</p>
<p>因为我最常用的语言是Python，所以给大家介绍一个第三方的 python 的代码生成器<a href="https://github.com/guokr/swagger-py-codegen">swagger-py-codegen：https://github.com/guokr/swagger-py-codegen</a></p>
<h2 id="swagger_py_codegen">swagger_py_codegen</h2>
<p>swagger-py-codegen的亮点是它是一个Python web framework 代码生成器，可以根据swagger 文档自动生成相应web framework 的代码，现在支持 Flask, Tornado，falcon，最新版将支持sanic。</p>
<h3 id="安装">安装</h3>
<p>可以使用 pip 安装：</p>
<pre><code class="language-sh">pip install swagger-py-codegen
</code></pre>
<h3 id="使用">使用</h3>
<p>安装后使用命令如下：</p>
<pre><code class="language-sh">swagger_py_codegen --swagger-doc api.yml example-app
</code></pre>
<p>可选参数有：</p>
<pre><code>-s, --swagger, --swagger-doc    Swagger doc file.  [required]
-f, --force                     Force overwrite.
-p, --package                   Package name / application name.
-t, --template-dir              Path of your custom templates directory.
--spec, --specification         Generate online specification json response.
--ui                            Generate swagger ui.
-j, --jobs INTEGER              Parallel jobs for processing.
-tlp, --templates               gen flask/tornado/falcon templates, default flask.
--version                       Show current version.
--help                          Show this message and exit.
</code></pre>
<p>如果不指定 -tlp 参数，默认使用 flask 作为模板。<br>
如果指定 --ui --spec 参数则会在 由-p 参数指定的目录下生成swagger UI 目录 static。</p>
<h4 id="举个例子">举个例子</h4>
<p>我们这里使用 swagger-py-codegen 提供的测试文档 执行：</p>
<pre><code class="language-sh">swagger_py_codegen --swagger-doc api.yml example-app --ui --spec
</code></pre>
<p>生成的代码目录结构如下</p>
<pre><code>$tree
.
|__ api.yml

$ swagger_py_codegen -s api.yml example-app -p demo
$ tree (flask-demo)
.
|__ api.yml
|__ example-app
   |__ demo
   |  |__ __init__.py
   |  |__ v1
   |     |__ api
   |     |  |__ __init__.py
   |     |  |__ oauth_auth_approach_approach.py
   |     |  |__ oauth_auth_approach.py
   |     |  |__ users_token.py
   |     |  |__ users_current.py
   |     |  |__ users.py
   |     |__ __init__.py
   |     |__ routes.py
   |     |__ schemas.py
   |     |__ validators.py
   |__ requirements.txt
</code></pre>
<p>可以看到，这时一个简单的app框架已经生成了，其中 routes.py 是自动生成的路由，validators.py 是response和request的校验代码，schemas.py 是由文档生成的校验规则，api 目录下的各个文件是你定义的endpoint。</p>
<p>这时运行demo 目录下的 <code>__init__.py</code> 文件:</p>
<pre><code class="language-python">python __init__.py 
</code></pre>
<p>会发现 server 已经启动：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/pRyxskK89xODXjfsCdPVns9DJfMA2TF7tDLszenOAvhdB8gf5aBSwkCHCX9rSfQO" alt="server 启动示例" loading="lazy"></figure>
<p>如果生成命令带上 --ui --spec，生成代码的同时也会生成swagger UI：</p>
<pre><code class="language-sh">swagger_py_codegen --swagger-doc api.yml example-app --ui --spec
</code></pre>
<p>启动server后在浏览器输入地址 <code>http://0.0.0.0:8000/static/swagger-ui/index.html#!/default/get_users_uid</code></p>
<p>可以看到直接使用的 swagger UI。</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/SGfBUnb6jxikwbr0IxOYROmwpqmScGJBWUHu88v5sIy806XNbk6KWDGGggDIeJH3" alt="swagger ui 截图" loading="lazy"></figure>
<blockquote>
<p>swagger-py-codegen 认证默认使用 OAuth2 认证方式，认证部分代码需要自己实现。</p>
</blockquote>
<p>现在代码结构已经生成，可以安心的写逻辑代码了。</p>
<h2 id="总结">总结</h2>
<p>这一篇主要介绍了RESTful API以及如何使用swagger编写规范的RESTful API。<br>
最后介绍了如何使用 swagger-py-codegen 生成 web framework 的结构代码。<br>
参考链接中的文章都非常值得一看，建议都看一下。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/REST">REST： https://zh.wikipedia.org/wiki/REST</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南： http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li>
<li><a href="https://codeplanet.io/principles-good-restful-api-design/">Principles of good RESTful API Design： https://codeplanet.io/principles-good-restful-api-design/</a></li>
<li><a href="http://cizixs.com/2016/12/12/restful-api-design-guide">跟着 Github 学习 Restful HTTP API 设计： http://cizixs.com/2016/12/12/restful-api-design-guide</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/web/1103_chenyan_restapi/">最佳实践：更好的设计你的 REST API： https://www.ibm.com/developerworks/cn/web/1103_chenyan_restapi/</a></li>
<li><a href="https://swagger.io/">swagger： https://swagger.io/</a></li>
<li><a href="https://www.gitbook.com/book/huangwenchao/swagger/details">如何编写基于OpenAPI规范的API文档：https://www.gitbook.com/book/huangwenchao/swagger/details</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/web/wa-use-swagger-to-document-and-define-restful-apis/index.html">使用 Swagger 文档化和定义 RESTful API：https://www.ibm.com/developerworks/cn/web/wa-use-swagger-to-document-and-define-restful-apis/index.html</a></li>
<li><a href="https://swagger.io/docs/specification/what-is-swagger/">swagger 文档：https://swagger.io/docs/specification/what-is-swagger/</a></li>
<li><a href="https://github.com/guokr/swagger-py-codegen">swagger-py-codegen：https://github.com/guokr/swagger-py-codegen</a></li>
</ul>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>欢迎关注(April_Louisa)</th>
<th>请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
<p>这里是分割线</p>
<hr>
<p>公号现在已经开通了留言功能，如果你觉得文章有不对的地方，欢迎指出。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信公号DIY：训练聊天机器人&公号变身图片上传工具]]></title>
        <id>http://blog.gusibi.site/post/weixin_mp_diy_image_upload/</id>
        <link href="http://blog.gusibi.site/post/weixin_mp_diy_image_upload/">
        </link>
        <updated>2017-07-08T07:34:53.000Z</updated>
        <content type="html"><![CDATA[<p>上一篇 <a href="http://blog.gusibi.site/post/wechat-chatbot-step-by-step/">一小时搭建微信聊天机器人</a> 介绍了如何搭建一个可用的聊天机器人，但是和机器人聊完你会发现，聊天机器人实在是太傻了，来回就那么几句。这是因为我们给聊天机器人的数据太少，他只能在我们给的训练集中找它认为最合适的。那么，如何导入更多的训练数据呢？<br>
我能想到最简单的方法是找对话的数据，然后把这些数据作为训练数据训练机器人。</p>
<p>感谢 candlewill 已经收集好了大量的训练数据，<a href="https://github.com/candlewill/Dialog_Corpus">dialog_corpus https://github.com/candlewill/Dialog_Corpus</a> 。</p>
<p>HUGOMORE42</p>
<p>这个库中包含电影台词、中英文短信息、自然语言处理相关的数据集、小黄鸡语料等。这里我选择电影台词语料。</p>
<blockquote>
<p>语料地址为：<a href="https://github.com/rustch3n/dgk_lost_conv">dgk_lost_conv：https://github.com/rustch3n/dgk_lost_conv</a></p>
</blockquote>
<h2 id="chatterbot-训练逻辑处理模块">chatterbot 训练逻辑处理模块</h2>
<p>这个模块提供训练机器人的方法，chatterbot自带了通过输入list来训练（[&quot;你好&quot;, &quot;你好啊&quot;] 后者是前者的回答）以及通过导入Corpus格式文件来训练的方式。</p>
<p>这里我们选择使用第一种，通过输入list来训练机器人。</p>
<h3 id="处理训练数据">处理训练数据</h3>
<p>首先下载数据集：</p>
<pre><code class="language-sh">wget https://codeload.github.com/rustch3n/dgk_lost_conv/zip/master
# 解压
$ unzip dgk_lost_conv-master.zip
</code></pre>
<p>我们先打开一个文件看下数据结构：</p>
<pre><code class="language-sh">E
M 你得想想办法 我弟弟是无辜的
M 他可是美国公民啊
M 对此我也无能为力
M 你当然能
M 再去犯罪现场看看 定能证实清白
M 你看 我不过是个夜间办事员而已
M 你若真想解决问题
M 最好等领事来
M 他早上才上班
M 我很抱歉
E
M 那我自己来搞定
M 你兄弟
M 关在哪个监狱?
M 索纳监狱
E
M 怎么了?
M 那里关的都是最穷凶极恶的罪犯
M 别的监狱都不收
</code></pre>
<p>.conv 语料文件中：E 是分隔符 M 表示会话。因为我是使用输入list 的方式训练数据，这时我可以以分隔符E为分隔，将一段对话放入一个list中，那么上述例子中的训练数据应该被格式化为：</p>
<pre><code class="language-python">convs = [
    [
       '你得想想办法 我弟弟是无辜的',
       '他可是美国公民啊',
       '对此我也无能为力',
       '你当然能',
       '再去犯罪现场看看 定能证实清白',
       '你看 我不过是个夜间办事员而已',
       '你若真想解决问题',
       '最好等领事来',
       '他早上才上班',
       '我很抱歉'
    ],
    [
       '那我自己来搞定',
       '你兄弟',
       '关在哪个监狱?',
       '索纳监狱',
    ],
    [
       '怎么了?',
       '那里关的都是最穷凶极恶的罪犯',
       '别的监狱都不收',
    ]
]
</code></pre>
<p>导入训练数据的脚本如下：</p>
<pre><code class="language-python">from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer

# 初始化聊天机器人
momo = ChatBot(
    'Momo',
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter', # 使用mongo存储数据
    logic_adapters=[ # 指定逻辑处理模块
            &quot;chatterbot.logic.BestMatch&quot;,
            &quot;chatterbot.logic.MathematicalEvaluation&quot;,
            &quot;chatterbot.logic.TimeLogicAdapter&quot;,
        ],
    input_adapter='chatterbot.input.VariableInputTypeAdapter',
    output_adapter='chatterbot.output.OutputAdapter',
    database='chatterbot', # 指定数据库
    read_only=True
)

# 读取.conv 数据文件，因为我服务器配置较低，所以选择了一个内容较少的文件
# 这个函数是一个生成器
def read_conv(filename='prisonb.conv'):
    with open(filename, 'rt') as f:
        conv = []
        # 逐行读取
        for line in f:
            _line = line.replace('\n', '').strip()  # 预处理字符串 去掉首位空格
            if _line == 'E':  # 如果是分隔符 表示对话结束 返回对话列表
                yield conv
                conv = []  # 重置对话列表
            else:  # 不是分隔符则将内容加入对话列表
                c = _line.split()[-1]  # 其实这里如果对话中包含空格 对话数据会不完整，应该只去掉M和开头的空格
                conv.append(c)


def traine_momo():
    for conv in read_conv():
        print(conv)
        momo.set_trainer(ListTrainer) # 指定训练方式
        momo.train(conv) # 训练数据


def main():
    traine_momo()


if __name__ == '__main__':
    main()

</code></pre>
<p>这个脚本比较简单，只是简单的将数据从对话文件中读取出来，然后拼接为对话列表输入聊天机器人。</p>
<blockquote>
<p>由于这里对话大部分都是多行数据，聊天机器人匹配结果时运算量会大幅提升，我单核cpu的服务器在导入一个700k 的语料文件后每次聊天都会让cpu飚到100%！🤦‍ 无奈之下只能删掉大半数据。</p>
</blockquote>
<p>对话示例如图:</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/kF27RcGVBL3xDf4kKhJQCbXAB3qgc_HXpYy28ykdfudK0B52Z5nvm63m0wbiKlCA" alt="使用电影台词训练后的聊天截图" loading="lazy"></figure>
<p>导入电影台词后，虽然训练数据大幅提升，但是你会发现聊天机器人开始答非所问了，这是因为聊天数据噪音太大，对白也有点问题。</p>
<h3 id="使用图灵机器人训练">使用图灵机器人训练</h3>
<p>之前在对比聊天机器人实现方案的时候，我试用过 <a href="http://www.tuling123.com">图灵机器人</a>，他们号称中文语境下智能渡最高的机器人大脑。他们的对话比我自己的搭建的靠谱很多，那么我们是不是可以利用一下他的数据呢？</p>
<p>我的方案是这样的，在图灵机器人新建两个机器人教练A 和 教练B，让两个机器人互相对话，然后把训练数据导入chatterbot。</p>
<ol>
<li>打开 <a href="http://www.tuling123.com">http://www.tuling123.com</a>，注册账号</li>
<li>新建两个机器人（免费用户最多可以创建5个，每个机器人每天最多请求5000次）</li>
<li>调用对话API，让两个机器人互相聊天</li>
</ol>
<p>建好机器人后的界面：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/3WZasRFKofxaVIV55WJy2TNRYeUlf7qcD5ijEpYZqwJctWzuAqu3HRBi8VRZSFYz" alt="机器人示例🤖" loading="lazy"></figure>
<p>训练示例代码如下：</p>
<pre><code class="language-python"># tuling_trainer.py
import sys
from time import sleep

from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer

import requests

API_URL = &quot;http://www.tuling123.com/openapi/api&quot;
API_KEY0 = &quot;&quot;  # 机器人1 的key
API_KEY1 = &quot;&quot;  # 机器人2 的key

# 初始化chatterbot
momo = ChatBot(
    'Momo',
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',
    logic_adapters=[
            &quot;chatterbot.logic.BestMatch&quot;,
            &quot;chatterbot.logic.MathematicalEvaluation&quot;,
            &quot;chatterbot.logic.TimeLogicAdapter&quot;,
        ],
    input_adapter='chatterbot.input.VariableInputTypeAdapter',
    output_adapter='chatterbot.output.OutputAdapter',
    database='chatterbot',
    read_only=True
)

# 请求图灵机器人接口
def ask(question, key, name):
    params = {
        &quot;key&quot;: key,
        &quot;userid&quot;: name,
        &quot;info&quot;: question,
    }
    res = requests.post(API_URL, json=params)
    result = res.json()
    answer = result.get('text')
    return answer


def A(bsay):
    # 打印 A 和 B 的对话内容
    print('B:', bsay)
    answer = ask(bsay, API_KEY0, 'momo123')
    print('A:', answer)
    return answer


def B(asay):
    print('A:', asay)
    answer = ask(asay, API_KEY1, 'momo456')
    print('B', answer)
    return answer


def tariner(asay):
    momo.set_trainer(ListTrainer)  # 设置处理方式
    while True:  # 两个机器人训练的主循环
        conv = []
        conv.append(asay) # 先把 A 说的第一句加入到对话列表
        bsay = B(asay)  # A 先问 B
        conv.append(bsay) # 将B 的回答加入到对话列表
        momo.train(conv) # 将对话用于训练
        print(conv)
        conv = []
        conv.append(bsay) # 用B的对话 去问 A 步骤和上述方式一致
        asay = A(bsay)
        conv.append(asay)
        momo.train(conv)
        print(conv)
        sleep(5)  # 控制频率


def main(asay):
    tariner(asay)


if __name__ == '__main__':
    main(*sys.argv[1:])  # 接收参数作为开始的第一句话
    
# 执行脚本
# python tuling_trainer.py 你好？

</code></pre>
<p>使用图灵聊天机器人训练的时候是需要监测的，因为如果两个机器人说的内容一样的时候，机器人可能会一直重复同一句话，直到调用次数耗尽，你需要看一下两个机器人的对话是否陷入了僵局。</p>
<p>当然也可以在程序中加入判断，先多设定几个开始打招呼的句子，如果一句话连续出现多次的时候，换下一个句子纠正他们。</p>
<p>以下是我训练了两天之后的结果：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/wNM0i84JsmsgldhxUjV1TMHr_YwwM726brHr0tmSYS_cxAYWWIHQEvG-eTmBIRjJ" alt="对话示例" loading="lazy"></figure>
<p>虽然还是答非所问，但是已经比之前像样了。</p>
<blockquote>
<p>图灵聊天机器人免费版每天可调用5000 次，如果觉得次数太少可以多新建几个轮流使用</p>
</blockquote>
<p>聊天机器人的配置及训练方式就到这里了，接下来介绍个更实用的功能，如何让微信公号变成图床。</p>
<h2 id="如何让微信公号化身图片上传助手">如何让微信公号化身图片上传助手</h2>
<p>在使用 <code>markdown</code> 格式来写文章的过程中，发现图片地址是一个比较麻烦的事情，每次贴图获取图片URL都是一个比较麻烦的过程。<br>
以我使用的七牛为例，获取图片地址的步骤如下：</p>
<ol>
<li>登录七牛网站，打开存储空间&gt;内容管理</li>
<li>上传文件</li>
<li>返回内容管理找到刚才上传的文件，获取外链</li>
</ol>
<p>按照这个步骤上传一张图片至少耗时半分钟。</p>
<p>那能不能简化这个步骤呢？</p>
<p>答案是<code>可以！</code></p>
<p>微信公号是可以发送图片消息的，我的做法是</p>
<ol>
<li>将图片发送到公号</li>
<li>服务器获取触发图片消息的处理逻辑&gt; 将图片使用七牛提供的<code>第三方资源抓取</code>API<code>另存到</code>，七牛存储空间</li>
<li>将设定好的图片地址返回给微信，发送到公号消息对话中</li>
</ol>
<p>示例如下图所示：</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/Eg5Idjmp3nLyufBVU2hzp6jNMdNoSWEYgKTqNG9BbqD6VrM4U5oN-gmJw3PaN-Yh" alt="上传图片到七牛" loading="lazy"></figure>
<h3 id="实现步骤">实现步骤</h3>
<ul>
<li>注册个七牛账号</li>
<li>新建存储空间</li>
<li>在个人中心秘钥管理获取 AccessKey 和 SecreKey</li>
<li>pip install qiniu</li>
</ul>
<p>代码实现如下：</p>
<pre><code class="language-python"># media.py
# 图片抓取逻辑处理
from qiniu import Auth, BucketManager

from momo.settings import Config

def qiniu_auth():
    access_key = str(Config.QINIU_ACCESS_TOKEN)
    secret_key = str(Config.QINIU_SECRET_TOKEN)
    auth = Auth(access_key, secret_key)
    return auth
    
def media_fetch(media_url, media_id):
    '''抓取url的资源存储在库'''
    auth = qiniu_auth()
    bucket = BucketManager(auth)
    bucket_name = Config.QINIU_BUCKET  # 存储空间名称
    ret, info = bucket.fetch(media_url, bucket_name, media_id) # 参数依次是第三方图片地址，空间名称，目标文件名
    if info.status_code == 200:
        return True, media_id # 如果上传成功，返回文件名
    return False, None
</code></pre>
<p>抓取第三方图片文档地址为：<a href="https://developer.qiniu.com/kodo/api/1263/fetch">第三方资源抓取 https://developer.qiniu.com/kodo/api/1263/fetch</a>。</p>
<p>微信图片消息处理逻辑代码：</p>
<pre><code class="language-python">class WXResponse(_WXResponse):

    def _image_msg_handler(self):
        media_id = self.data['MediaId']
        picurl = None
        if not picurl:
            picurl = self.data['PicUrl']  # 从消息中获取图片地址
        is_succeed, media_key = media_fetch(picurl, media_id) # 使用图片抓取接口将图片存储到七牛并获取图片文件名
        if is_succeed:
            qiniu_url = '{host}/{key}'.format(host=Config.QINIU_HOST, key=media_key) # 拼接图片地址
        else:
            qiniu_url = '图片上传失败，请重新上传'
        self.reply_params['content'] = qiniu_url # 返回图片地址
        self.reply = TextReply(**self.reply_params).render()
</code></pre>
<p>代码已开源道github，详细代码逻辑参考 <a href="https://github.com/gusibi/momo/blob/chatterbot/momo/views/mweixin.py">gusibi/momo: https://github.com/gusibi/momo/tree/chatterbot</a></p>
<p>欢迎试用体验：</p>
<ul>
<li>请不要上传高清图片，微信会压缩损坏图片质量</li>
<li>也不要上传太个人的图片，毕竟内容我能看到</li>
</ul>
<h2 id="总结">总结</h2>
<p>这一篇主要提供了两个训练 chatterbot 的思路，以及使用公号作为图片上传客户端提高上传图片的效率的解决方法。<br>
接下来公号还是继续开发，准备给公号加一个记账功能，促使自己养成记账的习惯。</p>
<h3 id="预告">预告</h3>
<p>下一篇的公号DIY 将介绍 <code>记账的功能设计以及实现思路</code>。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信公号DIY：一小时搭建微信聊天机器人]]></title>
        <id>http://blog.gusibi.site/post/weixin_chatbot_step_by_step/</id>
        <link href="http://blog.gusibi.site/post/weixin_chatbot_step_by_step/">
        </link>
        <updated>2017-07-05T07:47:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>最近借用了女朋友的公号，感觉如果只是用来发文章，太浪费微信给提供的这些功能了。想了想，先从最简单的开始，做一个聊天机器人吧。</p>
</blockquote>
<p>使用Python实现聊天机器人的方案有多种：AIML、chatterBot以及图灵聊天机器人和微软小冰等。</p>
<p>考虑到以后可能会做一些定制化的需求，这里我选择了<code>chatterBot</code>（<a href="https://github.com/gunthercox/ChatterBot">github 项目地址：https://github.com/gunthercox/ChatterBot</a>)。</p>
<p>chatterbot是一款python接口的，基于一系列规则和机器学习算法完成的聊天机器人。具有结构清晰，可扩展性好，简单实用的特点。</p>
<p>chatterBot 的工作流程如图：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/l-OywTEmN9B6u_RevUWyUpAD9yeHyChmh55q7fIObhC82Wf9X-DTxCF6oGI4tqG7" alt="chatterBot 工作流程" loading="lazy"></figure>
<ol>
<li>输入模块（input adapter）从终端或者API等输入源获取数据</li>
<li>输入源会被指定的逻辑处理模块（logic Adapter）分别处理，逻辑处理模块会匹配训练集中已知的最接近输入数据句子A，然后根据句子A去找到相关度最高的结果B，如果有多个逻辑处理模块返回了不同的结果，会返回一个相关度最高的结果。</li>
<li>输出模块（output adapter）将匹配到的结果返回给终端或者API。</li>
</ol>
<p>值得一说的是chatterBot 是一个模块化的项目，分为 input Adapter、logic Adapter、storage Adapter、output Adapter以及Trainer 模块。</p>
<p>logic Adapter是一个插件式设计，主进程在启动时会将用户定义的所有逻辑处理插件添加到logic context中，然后交MultiLogicAdapter 进行处理，MultiLogicAdapter 依次调用每个 logic Adapter，logic Adapter 被调用时先执行can_process 方式判断输入是否可以命中这个逻辑处理插件。比如”今天天气怎么样“这样的问题显然需要命中天气逻辑处理插件，这时时间逻辑处理插件的can_process 则会返回False。在命中后logic Adapter 负责计算出对应的回答（Statement对象）以及可信度（confidence），MultiLogicAdapter会取可信度最高的回答，并进入下一步。</p>
<p>下面我们来看下 chatterBot 如何使用</p>
<h2 id="chatterbot-安装使用">chatterBot 安装&amp;使用</h2>
<h3 id="安装">安装</h3>
<p>chatterBot 是使用Python编写的，可以使用 pip 安装：</p>
<pre><code class="language-bash">pip install chatterbot
</code></pre>
<blockquote>
<p>chatterBot 的中文对话要求Python3 以上版本，建议在Python3.x 环境下开发</p>
</blockquote>
<h3 id="测试">测试</h3>
<p>打开iPython，输入测试一下</p>
<pre><code class="language-bash">In [1]: from chatterbot import ChatBot  # import ChatBot

In [2]: momo = ChatBot('Momo', trainer='chatterbot.trainers.ChatterBotCorpusTrainer')
/Users/gs/.virtualenvs/py3/lib/python3.6/site-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.
  self.UnsuitableForProductionWarning  # 这里storage adapter 默认使用的是 json 格式存储数据的，如果想在服务端部署，应该避免使用这种格式，因为实在是太慢了

In [3]: momo.train(&quot;chatterbot.corpus.chinese&quot;)  # 指定训练集，这里我们使用中文

# 下边是对话结果
In [4]: momo.get_response('你好')
Out[4]: &lt;Statement text:你好&gt;

In [5]: momo.get_response('怎么了')
Out[5]: &lt;Statement text:没什么.&gt;

In [6]: momo.get_response('你知道它的所有内容吗?')
Out[6]: &lt;Statement text:优美胜于丑陋.&gt;

In [7]: momo.get_response('你是一个程序员吗?')
Out[7]: &lt;Statement text:我是个程序员&gt;

In [8]: momo.get_response('你使用什么语言呢？')
Out[8]: &lt;Statement text:我经常使用 Python, Java 和 C++ .&gt;
</code></pre>
<p>这时你已经可以和机器人对话了，不过现在由于训练数据太少，机器人只能返回简单的对话。</p>
<blockquote>
<p>这里是默认的中文对话训练数据 <a href="https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data/chinese">中文训练数据地址：https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data/chinese</a>。</p>
</blockquote>
<p>那么我们怎么添加训练数据呢？</p>
<h3 id="训练机器人">训练机器人</h3>
<p>chatterBot 内置了training class，自带的方法有两种，一种是使用通过输入list 来训练，比如 [&quot;你好&quot;, &quot;我不好&quot;]，后者是前者的回答，另一种是通过导入Corpus 格式的文件来训练。也支持自定义的训练模块，不过最终都是转为上述两种类型。</p>
<p>chatterBot 通过调用 train() 函数训练，不过在这之前要先用 set_trainer() 来进行设置。例如：</p>
<pre><code class="language-bash">In [12]: from chatterbot.trainers import ListTrainer  # 导入训练模块的 ListTrainer 类

In [13]: momo.get_response('你叫什么?')  # 现在是答非所问，因为在这之前我们并没有训练过
Out[13]: &lt;Statement text:我在烤蛋糕.&gt;

In [14]: momo.set_trainer(ListTrainer)  # 指定训练方式

In [15]: momo.train(['你叫什么?', '我叫魔魔！'])  # 训练

In [16]: momo.get_response('你叫什么?')  # 现在机器人已经可以回答了
Out[16]: &lt;Statement text:我叫魔魔！&gt;
</code></pre>
<p>训练好的数据默认存在 ./database.db，这里使用的是 jsondb。</p>
<p>对 chatterBot 的介绍先到这里，具体用法可以参考文档：<a href="http://chatterbot.readthedocs.io/en/stable/tutorial.html">ChatterBot Tutorial：http://chatterbot.readthedocs.io/en/stable/tutorial.html</a></p>
<p>接下来，介绍如何在项目中使用 chatterBot。</p>
<h2 id="使用-sanic-创建项目">使用 Sanic 创建项目</h2>
<p>Sanic 是一个和类Flask 的基于Python3.5+的web框架，它编写的代码速度特别快。</p>
<p>除了像Flask 以外，Sanic 还支持以异步请求的方式处理请求。这意味着你可以使用新的 async/await 语法，编写非阻塞的快速的代码。</p>
<p>对 Sanic 不了解的可以参考我之前的一篇文章： <a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752001&amp;idx=1&amp;sn=2c2e84f5f493514fdbff482a28dd7551&amp;chksm=80b0b86bb7c7317df9d1c7b13411a231b91bb107de5e99c5379a3d9d072d5d3fb8117f364188#rd">python web 框架 Sanci 快速入门</a>，可以在公号输入 【sanic】获取文章地址。</p>
<p>这里之所以使用 Sanic 是因为他和Flask 非常像，之前我一直使用Flask，并且它也是专门为Python3.5 写的，使用到了协程。</p>
<p>首先建个项目，这里项目我已经建好了，项目结构如下：</p>
<pre><code class="language-sh">.
├── LICENSE
├── README.md
├── manage.py   # 运行文件 启动项目 使用 python manage.py 命令
├── momo
│   ├── __init__.py
│   ├── app.py          # 创建app 模块
│   ├── helper.py  
│   ├── settings.py     # 应用配置
│   └── views
│       ├── __init__.py
│       ├── hello.py    # 测试模块
│       └── mweixin.py  # 微信消息处理模块
├── requirements.txt
└── supervisord.conf
</code></pre>
<p>源码我已经上传到github，有兴趣的可以看一下，也可以直接拉下来测试。<br>
<a href="https://github.com/gusibi/momo/tree/chatterbot">项目代码地址</a></p>
<p>我们先重点看下 <code>hello.py</code> 文件 和 <code>helper.py</code>。</p>
<pre><code class="language-python"># hello.py
# -*- coding: utf-8 -*-

from sanic import Sanic, Blueprint
from sanic.views import HTTPMethodView
from sanic.response import text

from momo.helper import get_momo_answer  # 导入获取机器人回答获取函数


blueprint = Blueprint('index', url_prefix='/')


class ChatBot(HTTPMethodView):
    # 聊天机器人 http 请求处理逻辑
    async def get(self, request):
        ask = request.args.get('ask')
        # 先获取url 参数值 如果没有值，返回 '你说啥'
        if ask:
            answer = get_momo_answer(ask)
            return text(answer)
        return text('你说啥?')


blueprint.add_route(ChatBot.as_view(), '/momo')
</code></pre>
<pre><code class="language-python"># helper.py
from chatterbot import ChatBot

momo_chat = ChatBot(
    'Momo',
    # 指定存储方式 使用mongodb 存储数据
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',
    # 指定 logic adpater 这里我们指定三个
    logic_adapters=[
        &quot;chatterbot.logic.BestMatch&quot;, 
        &quot;chatterbot.logic.MathematicalEvaluation&quot;,  # 数学模块
        &quot;chatterbot.logic.TimeLogicAdapter&quot;,   # 时间模块
    ],
    input_adapter='chatterbot.input.VariableInputTypeAdapter',
    output_adapter='chatterbot.output.OutputAdapter',
    database='chatterbot',
    read_only=True
)


def get_momo_answer(content):
    # 获取机器人返回结果函数
    response = momo_chat.get_response(content)
    if isinstance(response, str):
        return response
    return response.text

</code></pre>
<p>运行命令 <code>python manage.py</code> 启动项目。</p>
<p>在浏览器访问url： <a href="http://0.0.0.0:8000/momo?ask=%E4%BD%A0%E6%98%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%97">http://0.0.0.0:8000/momo?ask=你是程序员吗</a></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/3l0HV4l5N473KqwM6C35IW78zP5j0qybSymjK4HHzeFj3KbMkH3jS7W_kpsF-EtX" alt="运行结果" loading="lazy"></figure>
<p>到这里，我们已经启动了一个web 项目，可以通过访问url 的方式和机器人对话，是时候接入微信公号了！</p>
<h2 id="接入微信公众号">接入微信公众号</h2>
<h3 id="前提">前提</h3>
<ol>
<li>拥有一个可以使用的微信公众号（订阅号服务号都可以，如果没有，可以使用微信提供的测试账号）</li>
<li>拥有一个外网可以访问的服务器（vps 或公有云都可以 aws 新用户免费使用一年，可以试试）</li>
<li>服务器配置了python3 环境，（建议使用 virtualenvwrapper 配置虚拟环境）</li>
</ol>
<h3 id="微信设置">微信设置</h3>
<p>登录微信公众号： <a href="https://mp.weixin.qq.com">https://mp.weixin.qq.com</a></p>
<h4 id="打开开发基本配置">打开：开发&gt;基本配置</h4>
<p>查看公号开发信息：</p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/JZqW6bMs4_qRB-XnMoPZNMHWUh3uI3l482UTg6EbkrN0KZSisiloqhV4uCBuLPYP" alt="公号基本信息" loading="lazy"></figure>
<h4 id="开启服务器配置">开启服务器配置：</h4>
<p><strong>设置请求url，这里是你配置的url（需要外网可访问，只能是80或443端口）</strong></p>
<p><img src="http://media.gusibi.mobi/gx5Ssn4Taoq-BDMJ0Dty56ks7IkWR9ruCn5oMYuXEUMDeNj8YgCSM8caxI3AVzcu" alt="开启服务器配置" loading="lazy"><br>
填写token和EncodingAESKey，这里我选择的是兼容模式，既有明文方便调试，又有信息加密。</p>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/CghRlbwDFA2-U2I9mOZZZitRiT-gRnj433UPHuRMh9jEEbUMuzE8PfrmCc9lZqNk" alt="配置服务器" loading="lazy"></figure>
<p>详细配置可以参考官方文档：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432">接入指南</a></p>
<p>如果你的 <code>服务器地址</code> 已经配置完成，现在点击提交应该就成功了。如果没有成功我们接下来看怎么配置服务器地址。</p>
<h3 id="代码示例">代码示例</h3>
<p>先看下 微信请求的视图代码：</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from six import StringIO

import re
import xmltodict
from chatterbot.trainers import ListTrainer

from sanic import Blueprint
from sanic.views import HTTPMethodView
from sanic.response import text
from sanic.exceptions import ServerError

from weixin import WeixinMpAPI
from weixin.lib.WXBizMsgCrypt import WXBizMsgCrypt

from momo.settings import Config

blueprint = Blueprint('weixin', url_prefix='/weixin')


class WXRequestView(HTTPMethodView):

    def _get_args(self, request):
        # 获取微信请求参数，加上token  拼接为完整的请求参数
        params = request.raw_args
        if not params:
            raise ServerError(&quot;invalid params&quot;, status_code=400)
        args = {
            'mp_token': Config.WEIXINMP_TOKEN,
            'signature': params.get('signature'),
            'timestamp': params.get('timestamp'),
            'echostr': params.get('echostr'),
            'nonce': params.get('nonce'),
        }
        return args

    def get(self, request):
        # 微信验证服务器这一步是get  请求，参数可以使用 request.raw_args 获取
        args = self._get_args(request)
        weixin = WeixinMpAPI(**args) # 这里我使用了 第三方包 python-weixin 可以直接实例化一个WeixinMpAPI对象
        if weixin.validate_signature(): # 验证参数合法性
            # 如果参数争取，我们将微信发过来的echostr参数再返回给微信，否则返回 fail
            return text(args.get('echostr') or 'fail')
        return text('fail')
        
blueprint.add_route(WXRequestView.as_view(), '/request')
</code></pre>
<p>这里处理微信请求我使用的是 我用python 写的 微信SDK <a href="https://github.com/gusibi/python-weixin">python-weixin</a>，可以使用 pip 安装：</p>
<pre><code class="language-bash">pip install python-weixin
</code></pre>
<p>这个包最新版本对Python3 加密解密有点问题，可以直接从github 安装:</p>
<pre><code class="language-bash">pip install git+https://github.com/zongxiao/python-weixin.git@py3
</code></pre>
<p>然后更新 app.py 文件：</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-
from sanic import Sanic
from momo.settings import Config


def create_app(register_bp=True, test=False):
    # 创建app    
    app = Sanic(__name__)
    if test:
        app.config['TESTING'] = True
    # 从object 导入配置
    app.config.from_object(Config)
    register_blueprints(app)
    return app


def register_blueprints(app):
    from momo.views.hello import blueprint as hello_bp
    from momo.views.mweixin import blueprint as wx_bp
    app.register_blueprint(hello_bp)
    # 注册 wx_bp 
    app.register_blueprint(wx_bp)
</code></pre>
<p>详细代码参考github: <a href="https://github.com/gusibi/momo/tree/chatterbot">微信聊天机器人 momo</a></p>
<h2 id="接入聊天机器人">接入聊天机器人</h2>
<p>现在我们公号已经接入了自己的服务，是时候接入微信聊天机器人。</p>
<p>微信聊天机器人的工作流程如下：</p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/p88CrkRItlwU7VXo7uihsd9DPV-vSexkuXqKuQ1ZJGlFrFT25AzhvkFh2Aqc6Ajn" alt="微信聊天机器人工作流程" loading="lazy"></figure>
<p>看我们消息逻辑处理代码：</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-
from __future__ import unicode_literals

from six import StringIO

import re
import xmltodict
from chatterbot.trainers import ListTrainer

from sanic import Blueprint
from sanic.views import HTTPMethodView
from sanic.response import text
from sanic.exceptions import ServerError

from weixin import WeixinMpAPI
from weixin.reply import TextReply
from weixin.response import WXResponse as _WXResponse
from weixin.lib.WXBizMsgCrypt import WXBizMsgCrypt

from momo.settings import Config
from momo.helper import validate_xml, smart_str, get_momo_answer
from momo.media import media_fetch


blueprint = Blueprint('weixin', url_prefix='/weixin')

appid = smart_str(Config.WEIXINMP_APPID)
token = smart_str(Config.WEIXINMP_TOKEN)
encoding_aeskey = smart_str(Config.WEIXINMP_ENCODINGAESKEY)

# 关注后自动返回的文案
AUTO_REPLY_CONTENT = &quot;&quot;&quot;
Hi，朋友！
这是我妈四月的公号，我是魔魔，我可以陪你聊天呦！
我还能&quot;记账&quot;，输入&quot;记账&quot;会有惊喜呦！
&lt;a href=&quot;https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzAwNjI5MjAzNw==&amp;scene=124#wechat_redirect&quot;&gt;历史记录&lt;/a&gt;
&quot;&quot;&quot;


class ReplyContent(object):

    _source = 'value'

    def __init__(self, event, keyword, content=None, momo=True):
        self.momo = momo
        self.event = event
        self.content = content
        self.keyword = keyword
        if self.event == 'scan':
            pass

    @property
    def value(self):
        if self.momo:
            answer = get_momo_answer(self.content)
            return answer
        return ''


class WXResponse(_WXResponse):

    auto_reply_content = AUTO_REPLY_CONTENT

    def _subscribe_event_handler(self):
        # 关注公号后的处理逻辑
        self.reply_params['content'] = self.auto_reply_content
        self.reply = TextReply(**self.reply_params).render()

    def _unsubscribe_event_handler(self):
        # 取关后的处理逻辑，取关我估计会哭吧
        pass

    def _text_msg_handler(self):
        # 文字消息处理逻辑 聊天机器人的主要逻辑
        event_key = 'text'
        content = self.data.get('Content')
        reply_content = ReplyContent('text', event_key, content)
        self.reply_params['content'] = reply_content.value
        self.reply = TextReply(**self.reply_params).render()


class WXRequestView(HTTPMethodView):

    def _get_args(self, request):
        params = request.raw_args
        if not params:
            raise ServerError(&quot;invalid params&quot;, status_code=400)
        args = {
            'mp_token': Config.WEIXINMP_TOKEN,
            'signature': params.get('signature'),
            'timestamp': params.get('timestamp'),
            'echostr': params.get('echostr'),
            'nonce': params.get('nonce'),
        }
        return args

    def get(self, request):
        args = self._get_args(request)
        weixin = WeixinMpAPI(**args)
        if weixin.validate_signature():
            return text(args.get('echostr') or 'fail')
        return text('fail')

    def _get_xml(self, data):
        post_str = smart_str(data)
        # 验证xml 格式是否正确
        validate_xml(StringIO(post_str))
        return post_str

    def _decrypt_xml(self, params, crypt, xml_str):
        # 解密消息
        nonce = params.get('nonce')
        msg_sign = params.get('msg_signature')
        timestamp = params.get('timestamp')
        ret, decryp_xml = crypt.DecryptMsg(xml_str, msg_sign,
                                           timestamp, nonce)
        return decryp_xml, nonce

    def _encryp_xml(self, crypt, to_xml, nonce):
        # 加密消息
        to_xml = smart_str(to_xml)
        ret, encrypt_xml = crypt.EncryptMsg(to_xml, nonce)
        return encrypt_xml

    def post(self, request):
        # 获取微信服务器发送的请求参数
        args = self._get_args(request)
        weixin = WeixinMpAPI(**args)
        if not weixin.validate_signature(): # 验证参数合法性
            raise AttributeError(&quot;Invalid weixin signature&quot;)
        xml_str = self._get_xml(request.body)  # 获取form data
        crypt = WXBizMsgCrypt(token, encoding_aeskey, appid) 
        decryp_xml, nonce = self._decrypt_xml(request.raw_args, crypt, xml_str) # 解密
        xml_dict = xmltodict.parse(decryp_xml)
        xml = WXResponse(xml_dict)() or 'success' # 使用WXResponse 根据消息获取机器人返回值
        encryp_xml = self._encryp_xml(crypt, xml, nonce) # 加密消息
        return text(encryp_xml or xml) # 回应微信请求


blueprint.add_route(WXRequestView.as_view(), '/request')

</code></pre>
<p>可以看到，我处理微信请求返回结果比较简单，也是使用的 python-weixin 包封装的接口，<br>
主要的处理逻辑是 WXResponse。</p>
<p>这里需要注意的是，如果服务器在5秒内没有响应微信服务器会重试。为了加快响应速度，不要在服务器 将 chatterBot 的 storage adapter 设置为使用 jsondb。</p>
<p>上边这些就是，微信聊天机器人的主要处理逻辑，我们运行服务，示例如下：</p>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/gdLue88YMxJcy0hDqcWntqUHl_ekWu99WXe_vbphQy5TetIuESae-M6lEaWw2WqP" alt="聊天示例图" loading="lazy"></figure>
<p>可以看到这里聊天机器人也可以做简单的数学运算和报时，是因为我在上边指定处理逻辑的时候添加了数学模块和时间模块：</p>
<pre><code class="language-python">momo_chat = ChatBot(
    'Momo',
    # 指定存储方式 使用mongodb 存储数据
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',
    # 指定 logic adpater 这里我们指定三个
    logic_adapters=[
        &quot;chatterbot.logic.BestMatch&quot;, 
        &quot;chatterbot.logic.MathematicalEvaluation&quot;,  # 数学模块
        &quot;chatterbot.logic.TimeLogicAdapter&quot;,   # 时间模块
    ],
    input_adapter='chatterbot.input.VariableInputTypeAdapter',
    output_adapter='chatterbot.output.OutputAdapter',
    database='chatterbot',
    read_only=True
)
</code></pre>
<p>到这里，微信机器人的搭建就完成了，详细代码已经长传到了 <a href="https://github.com/gusibi/momo/tree/chatterbot">github: https://github.com/gusibi/momo/tree/chatterbot</a>，感兴趣的可以参考一下。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://github.com/gunthercox/ChatterBot">ChatterBot 项目地址：https://github.com/gunthercox/ChatterBot</a></li>
<li><a href="http://chatterbot.readthedocs.io/en/stable/tutorial.html">ChatterBot Tutorial：http://chatterbot.readthedocs.io/en/stable/tutorial.html</a></li>
<li><a href="http://www.jianshu.com/p/d1333fde266f">用Python快速实现一个聊天机器人：http://www.jianshu.com/p/d1333fde266f</a></li>
<li><a href="https://ask.hellobi.com/blog/guodongwei1991/7626">基于Python-ChatterBot搭建不同adapter的聊天机器人：https://ask.hellobi.com/blog/guodongwei1991/7626</a></li>
<li><a href="https://kantai235.github.io/2017/03/16/ChatterBotTeaching/">擁有自動學習的 Python 機器人 - ChatterBot：https://kantai235.github.io/2017/03/16/ChatterBotTeaching/</a></li>
<li><a href="https://www.biaodianfu.com/chatterbot.html">使用 ChatterBot构建聊天机器人：https://www.biaodianfu.com/chatterbot.html</a></li>
<li><a href="https://github.com/gusibi/python-weixin">python-weixin sdk: https://github.com/gusibi/python-weixin</a></li>
</ul>
<h2 id="预告">预告</h2>
<p>这里，聊天机器人还是比较简单的只能回复简单的对话，下一篇将要结束如何在公号训练机器人以及一个更实用的功能，如何让公号变成一个博客写作助手。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="7"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="8"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python并发4：使用thread处理并发]]></title>
        <id>http://blog.gusibi.site/post/python-threading/</id>
        <link href="http://blog.gusibi.site/post/python-threading/">
        </link>
        <updated>2017-07-02T00:29:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这一篇是Python并发的第四篇，主要介绍进程和线程的定义，Python线程和全局解释器锁以及Python如何使用thread模块处理并发，这篇文章之前发过，但是前几篇介绍到了并发，就顺便再发一下组成一个系列</p>
</blockquote>
<h2 id="引言动机">引言&amp;动机</h2>
<p>考虑一下这个场景，我们有10000条数据需要处理，处理每条数据需要花费1秒，但读取数据只需要0.1秒，每条数据互不干扰。该如何执行才能花费时间最短呢？</p>
<p>在多线程(MT)编程出现之前，电脑程序的运行由一个执行序列组成，执行序列按顺序在主机的中央处理器(CPU)中运行。无论是任务本身要求顺序执行还是整个程序是由多个子任务组成，程序都是按这种方式执行的。即使子任务相互独立，互相无关(即，一个子任务的结果不影响其它子 任务的结果)时也是这样。</p>
<p>HUGOMORE42</p>
<p>对于上边的问题，如果使用一个执行序列来完成，我们大约需要花费 10000*0.1 + 10000 = 11000 秒。这个时间显然是太长了。</p>
<p>那我们有没有可能在执行计算的同时取数据呢？或者是同时处理几条数据呢？如果可以，这样就能大幅提高任务的效率。这就是多线程编程的目的。</p>
<p>对于本质上就是异步的， 需要有多个并发事务，各个事务的运行顺序可以是不确定的，随机的，不可预测的问题，多线程是最理想的解决方案。这样的任务可以被分成多个执行流，每个流都有一个要完成的目标，然后将得到的结果合并，得到最终的结果。</p>
<h2 id="线程和进程">线程和进程</h2>
<h3 id="什么是进程">什么是进程</h3>
<p>进程(有时被称为重量级进程)是程序的一次 执行。每个进程都有自己的地址空间，内存，数据栈以及其它记录其运行轨迹的辅助数据。操作系 统管理在其上运行的所有进程，并为这些进程公平地分配时间。进程也可以通过 fork 和 spawn 操作 来完成其它的任务。不过各个进程有自己的内存空间，数据栈等，所以只能使用进程间通讯(IPC)， 而不能直接共享信息。</p>
<h3 id="什么是线程">什么是线程</h3>
<p>线程(有时被称为轻量级进程)跟进程有些相似，不同的是，所有的线程运行在同一个进程中， 共享相同的运行环境。它们可以想像成是在主进程或“主线程”中并行运行的“迷你进程”。</p>
<p>线程状态如图</p>
<figure data-type="image" tabindex="1"><img src="http://omuo4kh1k.bkt.clouddn.com/python-thread-status.png" alt="线程状态如图" loading="lazy"></figure>
<p>线程有开始，顺序执行和结束三部分。它有一个自己的指令指针，记录自己运行到什么地方。 线程的运行可能被抢占(中断)，或暂时的被挂起(也叫睡眠)，让其它的线程运行，这叫做让步。 一个进程中的各个线程之间共享同一片数据空间，所以线程之间可以比进程之间更方便地共享数据以及相互通讯。</p>
<p>当然，这样的共享并不是完全没有危险的。如果多个线程共同访问同一片数据，则由于数据访 问的顺序不一样，有可能导致数据结果的不一致的问题。这叫做竞态条件(race condition)。</p>
<p>线程一般都是并发执行的，不过在单 CPU 的系统中，真正的并发是不可能的，每个线程会被安排成每次只运行一小会，然后就把 CPU 让出来，让其它的线程去运行。由于有的函数会在完成之前阻塞住，在没有特别为多线程做修改的情 况下，这种“贪婪”的函数会让 CPU 的时间分配有所倾斜。导致各个线程分配到的运行时间可能不 尽相同，不尽公平。</p>
<h2 id="python-线程和全局解释器锁">Python、线程和全局解释器锁</h2>
<h3 id="全局解释器锁gil">全局解释器锁(GIL)</h3>
<p>首先需要明确的一点是GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行（其中的JPython就没有GIL）。</p>
<p>那么CPython实现中的GIL又是什么呢？GIL全称Global Interpreter Lock为了避免误导，我们还是来看一下官方给出的解释：</p>
<blockquote>
<p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p>
</blockquote>
<p>尽管Python完全支持多线程编程， 但是解释器的C语言实现部分在完全并行执行时并不是线程安全的。 实际上，解释器被一个全局解释器锁保护着，它确保任何时候都只有一个Python线程执行。</p>
<p>在多线程环境中，Python 虚拟机按以下方式执行:</p>
<ol>
<li>设置GIL</li>
<li>切换到一个线程去执行</li>
<li>运行</li>
</ol>
<ul>
<li>指定数量的字节码指令</li>
<li>线程主动让出控制（可以调用time.sleep(0))</li>
</ul>
<ol start="4">
<li>把线程设置完睡眠状态</li>
<li>解锁GIL</li>
<li>再次重复以上步骤</li>
</ol>
<blockquote>
<p>对所有面向 I/O 的(会调用内建的操作系统 C 代码的)程序来说，GIL 会在这个 I/O 调用之 前被释放，以允许其它的线程在这个线程等待 I/O 的时候运行。如果某线程并未使用很多 I/O 操作， 它会在自己的时间片内一直占用处理器(和 GIL)。也就是说，I/O 密集型的 Python 程序比计算密集 型的程序更能充分利用多线程环境的好处。</p>
</blockquote>
<h3 id="退出线程">退出线程</h3>
<p>当一个线程结束计算，它就退出了。线程可以调用 thread.exit()之类的退出函数，也可以使用 Python 退出进程的标准方法，如 sys.exit()或抛出一个 SystemExit 异常等。不过，你不可以直接 “杀掉”(&quot;kill&quot;)一个线程。</p>
<h3 id="在-python-中使用线程">在 Python 中使用线程</h3>
<p>在 Win32 和 Linux, Solaris, MacOS, *BSD 等大多数类 Unix 系统上运行时，Python 支持多线程 编程。Python 使用 POSIX 兼容的线程，即 pthreads。</p>
<p>默认情况下，只要在解释器中</p>
<pre><code>&gt;&gt; import thread
</code></pre>
<p>如果没有报错，则说明线程可用。</p>
<h3 id="python-的-threading-模块">Python 的 threading 模块</h3>
<p>Python  供了几个用于多线程编程的模块，包括 thread, threading 和 Queue 等。thread 和 threading 模块允许程序员创建和管理线程。thread 模块 供了基本的线程和锁的支持，而 threading  供了更高级别，功能更强的线程管理的功能。Queue 模块允许用户创建一个可以用于多个线程之间 共享数据的队列数据结构。</p>
<h5 id="核心-示避免使用-thread-模块">核心 示:避免使用 thread 模块</h5>
<p>出于以下几点考虑，我们不建议您使用 thread 模块。</p>
<ol>
<li>更高级别的 threading 模块更为先 进，对线程的支持更为完善，而且使用 thread 模块里的属性有可能会与 threading 出现冲突。其次， 低级别的 thread 模块的同步原语很少(实际上只有一个)，而 threading 模块则有很多。</li>
<li>对于你的进程什么时候应该结束完全没有控制，当主线程结束 时，所有的线程都会被强制结束掉，没有警告也不会有正常的清除工作。我们之前说过，至少 threading 模块能确保重要的子线程退出后进程才退出。</li>
</ol>
<h2 id="thread-模块">thread 模块</h2>
<p>除了产生线程外，thread 模块也提供了基本的同步数 据结构锁对象(lock object，也叫原语锁，简单锁，互斥锁，互斥量，二值信号量)。</p>
<p>thread 模块函数</p>
<ul>
<li>start_new_thread(function, args, kwargs=None)：产生一个新的线程，在新线程中用指定的参数和可选的 kwargs 来调用这个函数。</li>
<li>allocate_lock()：分配一个 LockType 类型的锁对象</li>
<li>exit()：让线程退出</li>
<li>acquire(wait=None)：尝试获取锁对象</li>
<li>locked()：如果获取了锁对象返回 True，否则返回 False</li>
<li>release()：释放锁</li>
</ul>
<p>下面是一个使用 thread 的例子：</p>
<pre><code class="language-python">import thread
from time import sleep, time


def loop(num):
    print('start loop at:', time())
    sleep(num)
    print('loop done at:', time())


def loop1(num):
    print('start loop 1 at:', time())
    sleep(num)
    print('loop 1 done at:', time())


def main():
    print('starting at:', time())
    thread.start_new_thread(loop, (4,))
    thread.start_new_thread(loop1, (5,))
    sleep(6)
    print('all DONE at:', time())

if __name__ == '__main__':
    main()

('starting at:', 1489387024.886667)
('start loop at:', 1489387024.88705)
('start loop 1 at:', 1489387024.887277)
('loop done at:', 1489387028.888182)
('loop 1 done at:', 1489387029.888904)
('all DONE at:', 1489387030.889918)
</code></pre>
<p>start_new_thread()要求一定要有前两个参数。所以，就算我们想要运行的函数不要参数，也要传一个空的元组。<br>
为什么要加上sleep(6)这一句呢? 因为，如果我们没有让主线程停下来，那主线程就会运行下一条语句，显示 “all done”，然后就关闭运行着 loop()和 loop1()的两个线程，退出了。</p>
<p>我们有没有更好的办法替换使用sleep() 这种不靠谱的同步方式呢？答案是使用锁，使用了锁，我们就可以在两个线程都退出之后马上退出。</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

import thread
from time import sleep, time

loops = [4, 2]

def loop(nloop, nsec, lock):
    print('start loop %s at: %s' % (nloop, time()))
    sleep(nsec)
    print('loop %s done at: %s' % (nloop, time()))
    # 每个线程都会被分配一个事先已经获得的锁，在 sleep()的时间到了之后就释放 相应的锁以通知主线程，这个线程已经结束了。
    lock.release()


def main():
    print('starting at:', time())
    locks = []
    nloops = range(len(loops))

    for i in nloops:
        # 调用 thread.allocate_lock()函数创建一个锁的列表
        lock = thread.allocate_lock()
        # 分别调用各个锁的 acquire()函数获得, 获得锁表示“把锁锁上”
        lock.acquire()
        locks.append(lock)

    for i in nloops:
        # 创建线程，每个线程都用各自的循环号，睡眠时间和锁为参数去调用 loop()函数
        thread.start_new_thread(loop, (i, loops[i], locks[i]))

    for i in nloops:
        # 在线程结束的时候，线程要自己去做解锁操作
        # 当前循环只是坐在那一直等(达到暂停主 线程的目的)，直到两个锁都被解锁为止才继续运行。
        while locks[i].locked(): pass

    print('all DONE at:', time())

if __name__ == '__main__':
    main()

</code></pre>
<p>为什么我们不在创建锁的循环里创建线程呢?有以下几个原因:</p>
<ol>
<li>我们想到实现线程的同步，所以要让“所有的马同时冲出栅栏”。</li>
<li>获取锁要花一些时间，如果你的 线程退出得“太快”，可能会导致还没有获得锁，线程就已经结束了的情况。</li>
</ol>
<h2 id="threading-模块">threading 模块</h2>
<p>threading 模块不仅提供了 Thread 类，还提供了各种非常好用的同步机制。</p>
<p>下面是threading 模块里所有的对象：</p>
<ol>
<li>Thread： 表示一个线程的执行的对象</li>
<li>Lock： 锁原语对象(跟 thread 模块里的锁对象相同)</li>
<li>RLock： 可重入锁对象。使单线程可以再次获得已经获得了的锁(递归锁定)。</li>
<li>Condition： 条件变量对象能让一个线程停下来，等待其它线程满足了某个“条件”。 如，状态的改变或值的改变。</li>
<li>Event： 通用的条件变量。多个线程可以等待某个事件的发生，在事件发生后， 所有的线程都会被激活。</li>
<li>Semaphore： 为等待锁的线程 供一个类似“等候室”的结构</li>
<li>BoundedSemaphore： 与 Semaphore 类似，只是它不允许超过初始值</li>
<li>Timer： 与 Thread 相似，只是，它要等待一段时间后才开始运行。</li>
</ol>
<h4 id="守护线程">守护线程</h4>
<p>另一个避免使用 thread 模块的原因是，它不支持守护线程。当主线程退出时，所有的子线程不 论它们是否还在工作，都会被强行退出。有时，我们并不期望这种行为，这时，就引入了守护线程 的概念<br>
threading 模块支持守护线程，它们是这样工作的:守护线程一般是一个等待客户请求的服务器， 如果没有客户 出请求，它就在那等着。如果你设定一个线程为守护线程，就表示你在说这个线程 是不重要的，在进程退出的时候，不用等待这个线程退出。<br>
如果你的主线程要退出的时候，不用等待那些子线程完成，那就设定这些线程的 daemon 属性。 即，在线程开始(调用 thread.start())之前，调用 setDaemon()函数设定线程的 daemon 标志 (thread.setDaemon(True))就表示这个线程“不重要”<br>
如果你想要等待子线程完成再退出，那就什么都不用做，或者显式地调用 thread.setDaemon(False)以保证其 daemon 标志为 False。你可以调用 thread.isDaemon()函数来判 断其 daemon 标志的值。新的子线程会继承其父线程的 daemon 标志。整个 Python 会在所有的非守护 线程退出后才会结束,即进程中没有非守护线程存在的时候才结束。</p>
<h3 id="thread-类">Thread 类</h3>
<p>Thread类提供了以下方法:</p>
<ul>
<li>run(): 用以表示线程活动的方法。</li>
<li>start():启动线程活动。</li>
<li>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li>
<li>is_alive(): 返回线程是否活动的。</li>
<li>name(): 设置/返回线程名。</li>
<li>daemon(): 返回/设置线程的 daemon 标志，一定要在调用 start()函数前设置</li>
</ul>
<p>用 Thread 类，你可以用多种方法来创建线程。我们在这里介绍三种比较相像的方法。</p>
<ul>
<li>创建一个Thread的实例，传给它一个函数</li>
<li>创建一个Thread的实例，传给它一个可调用的类对象</li>
<li>从Thread派生出一个子类，创建一个这个子类的实例</li>
</ul>
<p>下边是三种不同方式的创建线程的示例：</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

# 创建一个Thread的实例，传给它一个函数

import threading
from time import sleep, time

loops = [4, 2]

def loop(nloop, nsec, lock):
    print('start loop %s at: %s' % (nloop, time()))
    sleep(nsec)
    print('loop %s done at: %s' % (nloop, time()))
    # 每个线程都会被分配一个事先已经获得的锁，在 sleep()的时间到了之后就释放 相应的锁以通知主线程，这个线程已经结束了。


def main():
    print('starting at:', time())
    threads = []
    nloops = range(len(loops))

    for i in nloops:
        t = threading.Thread(target=loop, args=(i, loops[i]))
        threads.append(t)

    for i in nloops:
        # start threads
        threads[i].start()

    for i in nloops:
        # wait for all
        # join()会等到线程结束，或者在给了 timeout 参数的时候，等到超时为止。
        # 使用 join()看上去 会比使用一个等待锁释放的无限循环清楚一些(这种锁也被称为&quot;spinlock&quot;)
        threads[i].join()  # threads to finish

    print('all DONE at:', time())

if __name__ == '__main__':
    main()
</code></pre>
<p>与传一个函数很相似的另一个方法是在创建线程的时候，传一个可调用的类的实例供线程启动 的时候执行——这是多线程编程的一个更为面向对象的方法。相对于一个或几个函数来说，由于类 对象里可以使用类的强大的功能，可以保存更多的信息，这种方法更为灵活</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

# 创建一个 Thread 的实例，传给它一个可调用的类对象

from threading import Thread
from time import sleep, time


loops = [4, 2]


class ThreadFunc(object):

    def __init__(self, func, args, name=&quot;&quot;):
        self.name = name
        self.func = func
        self.args = args

    def __call__(self):
        # 创建新线程的时候，Thread 对象会调用我们的 ThreadFunc 对象，这时会用到一个特殊函数 __call__()。
        self.func(*self.args)


def loop(nloop, nsec):
    print('start loop %s at: %s' % (nloop, time()))
    sleep(nsec)
    print('loop %s done at: %s' % (nloop, time()))


def main():
    print('starting at:', time())
    threads = []
    nloops = range(len(loops))

    for i in nloops:
        t = Thread(target=ThreadFunc(loop, (i, loops[i]), loop.__name__))
        threads.append(t)

    for i in nloops:
        # start threads
        threads[i].start()

    for i in nloops:
        # wait for all
        # join()会等到线程结束，或者在给了 timeout 参数的时候，等到超时为止。
        # 使用 join()看上去 会比使用一个等待锁释放的无限循环清楚一些(这种锁也被称为&quot;spinlock&quot;)
        threads[i].join()  # threads to finish

    print('all DONE at:', time())


if __name__ == '__main__':
    main()

</code></pre>
<p>最后一个例子介绍如何子类化 Thread 类，这与上一个例子中的创建一个可调用的类非常像。使用子类化创建线程(第 29-30 行)使代码看上去更清晰明了。</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

# 创建一个 Thread 的实例，传给它一个可调用的类对象

from threading import Thread
from time import sleep, time


loops = [4, 2]


class MyThread(Thread):

    def __init__(self, func, args, name=&quot;&quot;):
        super(MyThread, self).__init__()
        self.name = name
        self.func = func
        self.args = args

    def getResult(self):
        return self.res

    def run(self):
        # 创建新线程的时候，Thread 对象会调用我们的 ThreadFunc 对象，这时会用到一个特殊函数 __call__()。
        print 'starting', self.name, 'at:', time()
        self.res = self.func(*self.args)
        print self.name, 'finished at:', time()



def loop(nloop, nsec):
    print('start loop %s at: %s' % (nloop, time()))
    sleep(nsec)
    print('loop %s done at: %s' % (nloop, time()))


def main():
    print('starting at:', time())
    threads = []
    nloops = range(len(loops))

    for i in nloops:
        t = MyThread(loop, (i, loops[i]), loop.__name__)
        threads.append(t)

    for i in nloops:
        # start threads
        threads[i].start()

    for i in nloops:
        # wait for all
        # join()会等到线程结束，或者在给了 timeout 参数的时候，等到超时为止。
        # 使用 join()看上去 会比使用一个等待锁释放的无限循环清楚一些(这种锁也被称为&quot;spinlock&quot;)
        threads[i].join()  # threads to finish

    print('all DONE at:', time())


if __name__ == '__main__':
    main()

</code></pre>
<h4 id="下载国旗的例子">下载国旗的例子</h4>
<p>下面，我们接我们之前按之前并发的套路，用实现一下使用 threading 并发下载国旗</p>
<pre><code class="language-python"># python3

import threading
from threading import Thread

from flags import save_flag, show, main, get_flag


class MyThread(Thread):

    def __init__(self, func, args, name=&quot;&quot;):
        super(MyThread, self).__init__()
        self.name = name
        self.func = func
        self.args = args

    def getResult(self):
        return self.res

    def run(self):
        # 创建新线程的时候，Thread 对象会调用我们的 ThreadFunc 对象，这时会用到一个特殊函数 __call__()。
        self.res = self.func(*self.args)


def download_one(cc):  # &lt;3&gt;
    image = get_flag(cc)
    show(cc)
    save_flag(image, cc.lower() + '.gif')
    return cc


def download_many(cc_list):
    threads = []
    for cc in cc_list:
        thread = MyThread(download_one, (cc, ), download_one.__name__)
        threads.append(thread)

    for thread in threads:
        # 启动线程
        thread.start()

    for thread in threads:
        # wait for all
        # join()会等到线程结束，或者在给了 timeout 参数的时候，等到超时为止。
        # 使用 join()看上去 会比使用一个等待锁释放的无限循环清楚一些(这种锁也被称为&quot;spinlock&quot;)
        thread.join()

    return len(list(threads))  # &lt;7&gt;


if __name__ == '__main__':
    main(download_many)
</code></pre>
<p>执行代码发现和使用协程相比速度基本一致。</p>
<p>除了各种同步对象和线程对象外，threading 模块还 供了一些函数。</p>
<ul>
<li>active_count(): 当前活动的线程对象的数量</li>
<li>current_thread(): 返回当前线程对象</li>
<li>enumerate(): 返回当前活动线程的列表</li>
<li>settrace(func): 为所有线程设置一个跟踪函数</li>
<li>setprofile(func): 为所有线程设置一个 profile 函数</li>
</ul>
<h3 id="lock-rlock">Lock &amp; RLock</h3>
<p>原语锁定是一个同步原语，状态是锁定或未锁定。两个方法acquire()和release() 用于加锁和释放锁。<br>
RLock 可重入锁是一个类似于Lock对象的同步原语，但同一个线程可以多次调用。</p>
<p>Lock 不支持递归加锁，也就是说即便在同 线程中，也必须等待锁释放。通常建议改  RLock， 它会处理 &quot;owning thread&quot; 和 &quot;recursion level&quot; 状态，对于同 线程的多次请求锁 为，只累加<br>
计数器。每次调 release() 将递减该计数器，直到 0 时释放锁，因此 acquire() 和 release() 必须 要成对出现。</p>
<pre><code class="language-python">
from time import sleep
from threading import current_thread, Thread

lock = Rlock()

def show():
    with lock:
        print current_thread().name, i
        sleep(0.1)

def test():
    with lock:
        for i in range(3):
            show(i)

for i in range(2):
    Thread(target=test).start()
</code></pre>
<h3 id="event">Event</h3>
<p>事件用于在线程间通信。一个线程发出一个信号，其他一个或多个线程等待。<br>
Event 通过通过 个内部标记来协调多线程运 。 法 wait() 阻塞线程执 ，直到标记为 True。 set() 将标记设为 True，clear() 更改标记为 False。isSet() 用于判断标记状态。</p>
<pre><code class="language-python">from threading import Event

def test_event():
    e = Event()
    def test():
        for i in range(5):
            print 'start wait'
            e.wait()
            e.clear()  # 如果不调用clear()，那么标记一直为 True，wait()就不会发生阻塞行为
            print i
Thread(target=test).start()
return e


e = test_event()
</code></pre>
<h3 id="condition">Condition</h3>
<p>条件变量和 Lock 参数一样，也是一个，也是一个同步原语，当需要线程关注特定的状态变化或事件的发生时使用这个锁定。</p>
<p>可以认为，除了Lock带有的锁定池外，Condition还包含一个等待池，池中的线程处于状态图中的等待阻塞状态，直到另一个线程调用notify()/notifyAll()通知；得到通知后线程进入锁定池等待锁定。</p>
<p>构造方法：<br>
Condition([lock/rlock])</p>
<p>Condition 有以下这些方法：</p>
<ul>
<li>acquire([timeout])/release(): 调用关联的锁的相应方法。</li>
<li>wait([timeout]): 调用这个方法将使线程进入Condition的等待池等待通知，并释放锁。使用前线程必须已获得锁定，否则将抛出异常。</li>
<li>notify(): 调用这个方法将从等待池挑选一个线程并通知，收到通知的线程将自动调用acquire()尝试获得锁定（进入锁定池）；其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li>
<li>notifyAll(): 调用这个方法将通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li>
</ul>
<pre><code class="language-python">from threading import Condition, current_thread, Thread

con = Condition()

def tc1():
    with con:
        for i in range(5):
            print current_thread().name, i
            sleep(0.3)
            if i == 3:
                con.wait()


def tc2():
    with con:
        for i in range(5):
            print current_thread().name, i
            sleep(0.1)
            con.notify()

Thread(target=tc1).start()
Thread(target=tc2).start()

Thread-1 0
Thread-1 1
Thread-1 2
Thread-1 3    # 让出锁
Thread-2 0
Thread-2 1
Thread-2 2
Thread-2 3
Thread-2 4
Thread-1 4    # 重新获取锁，继续执

</code></pre>
<p>只有获取锁的线程才能调用 wait() 和 notify()，因此必须在锁释放前调用。<br>
当 wait() 释放锁后，其他线程也可进入 wait 状态。notifyAll() 激活所有等待线程，让它们去抢锁然后完成后续执行。</p>
<h3 id="生产者-消费者问题和-queue-模块">生产者-消费者问题和 Queue 模块</h3>
<p>现在我们用一个经典的(生产者消费者)例子来介绍一下 Queue模块。</p>
<p>生产者消费者的场景是： 生产者生产货物，然后把货物放到一个队列之类的数据结构中，生产货物所要花费的时间无法预先确定。消费者消耗生产者生产的货物的时间也是不确定的。</p>
<p>常用的 Queue 模块的属性:</p>
<ul>
<li>queue(size): 创建一个大小为size的Queue对象。</li>
<li>qsize(): 返回队列的大小(由于在返回的时候，队列可能会被其它线程修改，所以这个值是近似值)</li>
<li>empty(): 如果队列为空返回 True，否则返回 False</li>
<li>full(): 如果队列已满返回 True，否则返回 False</li>
<li>put(item,block=0): 把item放到队列中，如果给了block(不为0)，函数会一直阻塞到队列中有空间为止</li>
<li>get(block=0): 从队列中取一个对象，如果给了 block(不为 0)，函数会一直阻塞到队列中有对象为止</li>
</ul>
<p>Queue 模块可以用来进行线程间通讯，让各个线程之间共享数据。</p>
<p>现在，我们创建一个队列，让 生产者(线程)把新生产的货物放进去供消费者(线程)使用。</p>
<pre><code class="language-python"># python2
#! -*- coding: utf-8 -*-

from Queue import Queue
from random import randint
from time import sleep, time
from threading import Thread


class MyThread(Thread):

    def __init__(self, func, args, name=&quot;&quot;):
        super(MyThread, self).__init__()
        self.name = name
        self.func = func
        self.args = args

    def getResult(self):
        return self.res

    def run(self):
        # 创建新线程的时候，Thread 对象会调用我们的 ThreadFunc 对象，这时会用到一个特殊函数 __call__()。
        print 'starting', self.name, 'at:', time()
        self.res = self.func(*self.args)
        print self.name, 'finished at:', time()


# writeQ()和 readQ()函数分别用来把对象放入队列和消耗队列中的一个对象。在这里我们使用 字符串'xxx'来表示队列中的对象。
def writeQ(queue):
    print 'producing object for Q...'
    queue.put('xxx', 1)
    print &quot;size now&quot;, queue.qsize()


def readQ(queue):
    queue.get(1)
    print(&quot;consumed object from Q... size now&quot;, queue.qsize())


def writer(queue, loops):
    # writer()函数只做一件事，就是一次往队列中放入一个对象，等待一会，然后再做同样的事
    for i in range(loops):
        writeQ(queue)
        sleep(1)


def reader(queue, loops):
    # reader()函数只做一件事，就是一次从队列中取出一个对象，等待一会，然后再做同样的事
    for i in range(loops):
        readQ(queue)
        sleep(randint(2, 5))


# 设置有多少个线程要被运行
funcs = [writer, reader]
nfuncs = range(len(funcs))


def main():
    nloops = randint(10, 20)
    q = Queue(32)
    threads = []

    for i in nfuncs:
        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)
        threads.append(t)

    for i in nfuncs:
        threads[i].start()

    for i in nfuncs:
        threads[i].join()
        print threads[i].getResult()

    print 'all DONE'


if __name__ == '__main__':
    main()
</code></pre>
<h3 id="faq">FAQ</h3>
<h5 id="进程与线程-线程与进程的区别是什么">进程与线程。线程与进程的区别是什么?</h5>
<p>进程(有时被称为重量级进程)是程序的一次 执行。每个进程都有自己的地址空间，内存，数据栈以及其它记录其运行轨迹的辅助数据。<br>
线程(有时被称为轻量级进程)跟进程有些相似，不同的是，所有的线程运行在同一个进程中， 共享相同的运行环境。它们可以想像成是在主进程或“主线程”中并行运行的“迷你进程”。</p>
<p>这篇文章很好的解释了 线程和进程的区别，推荐阅读: http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</p>
<h5 id="python-的线程-在-python-中哪一种多线程的程序表现得更好io-密集型的还是计算-密集型的">Python 的线程。在 Python 中，哪一种多线程的程序表现得更好，I/O 密集型的还是计算 密集型的?</h5>
<p>由于GIL的缘故，对所有面向 I/O 的(会调用内建的操作系统 C 代码的)程序来说，GIL 会在这个 I/O 调用之 前被释放，以允许其它的线程在这个线程等待 I/O 的时候运行。如果某线程并未使用很多 I/O 操作， 它会在自己的时间片内一直占用处理器(和 GIL)。也就是说，I/O 密集型的 Python 程序比计算密集 型的程序更能充分利用多线程环境的好处。</p>
<h5 id="线程-你认为多cpu-的系统与一般的系统有什么大的不同多线程的程序在这种系统上的表现会怎么样">线程。你认为，多CPU 的系统与一般的系统有什么大的不同?多线程的程序在这种系统上的表现会怎么样?</h5>
<p>Python的线程就是C语言的一个pthread，并通过操作系统调度算法进行调度（例如linux是CFS）。为了让各个线程能够平均利用CPU时间，python会计算当前已执行的微代码数量，达到一定阈值后就强制释放GIL。而这时也会触发一次操作系统的线程调度（当然是否真正进行上下文切换由操作系统自主决定）。<br>
伪代码</p>
<pre><code class="language-python">while True:
    acquire GIL
    for i in 1000:
        do something
    release GIL
    /* Give Operating System a chance to do thread scheduling */
</code></pre>
<p>这种模式在只有一个CPU核心的情况下毫无问题。任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。<br>
但当CPU有多个核心的时候，问题就来了。从伪代码可以看到，从release GIL到acquire GIL之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。<br>
简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。</p>
<h5 id="线程池-修改-生成者消费者-的代码不再是一个生产者和一个消费者而是可以有任意个-消费者线程一个线程池每个线程可以在任意时刻处理或消耗任意多个产品">线程池。修改 生成者消费者 的代码，不再是一个生产者和一个消费者，而是可以有任意个 消费者线程(一个线程池)，每个线程可以在任意时刻处理或消耗任意多个产品。</h5>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">进程与线程的一个简单解释 http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></li>
<li><a href="http://cenalulu.github.io/python/gil-in-python/">Python的GIL是什么鬼，多线程性能究竟如何 http://cenalulu.github.io/python/gil-in-python/</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p09_dealing_with_gil_stop_worring_about_it.html">Python的全局锁问题 http://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p09_dealing_with_gil_stop_worring_about_it.html</a></li>
<li><a href="http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html">Python线程指南 http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html</a></li>
</ul>
<table>
<thead>
<tr>
<th>&gt;欢迎关注</th>
<th>&gt;请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python并发3：使用asyncio编写服务器]]></title>
        <id>http://blog.gusibi.site/post/python-asyncio-server/</id>
        <link href="http://blog.gusibi.site/post/python-asyncio-server/">
        </link>
        <updated>2017-06-30T00:29:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<section class="caption">asyncio </section> 上一篇我们介绍了 asyncio 包，以及如何使用异步编程管理网络应用中的高并发。在这一篇，我们主要介绍使用 asyncio 包编程的两个例子。
</blockquote>
<h2 id="asyncawait语法">async/await语法</h2>
<p>我们先介绍下 async/await 语法，要不然看完这篇可能会困惑，为什么之前使用 asyncio.coroutine 装饰器 和 yield from，这里都是 用的 async 和 await？</p>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751998&amp;idx=1&amp;sn=37833d3d7582d38f85a526de7eeda814">python并发2：使用asyncio处理并发</a></p>
</blockquote>
<p>async/await 是Python3.5 的新语法，语法如下：</p>
<pre><code class="language-python">async def read_data(db):
    pass
</code></pre>
<p>async 是明确将函数声明为协程的关键字，即使没有await表达式，函数执行也会返回一个协程对象。<br>
在协程函数内部，可以在某个表达式之前使用 await 关键字来暂停协程的执行，以等待某协程完成：</p>
<pre><code class="language-python">async def read_data(db):
    data = await db.fetch('SELECT ...')
</code></pre>
<p>这个代码如果使用 asyncio.coroutine 装饰器语法为：</p>
<pre><code class="language-python">@asyncio.coroutine
def read_data(db):
    data = yield from db.fetch('SELECT ...')
</code></pre>
<p>这两段代码执行的结果是一样的，也就是说 可以把 asyncio.coroutine 替换为 async， yield from 替换为 await。</p>
<p>使用新的语法有什么好处呢：</p>
<ul>
<li>使生成器和协程的概念更容易理解，因为语法不同</li>
<li>可以消除由于重构时不小心移出协程中yield 声明而导致的不明确错误，这回导致协程变成普通的生成器。</li>
</ul>
<h2 id="使用-asyncio-包编写服务器">使用 asyncio 包编写服务器</h2>
<p>这个例子主要是使用 asyncio 包 和 unicodedata 模块，实现通过规范名称查找Unicode 字符。</p>
<p>我们先来看一下代码：</p>
<pre><code class="language-python"># charfinder.py
import sys
import re
import unicodedata
import pickle
import warnings
import itertools
import functools
from collections import namedtuple

RE_WORD = re.compile('\w+')
RE_UNICODE_NAME = re.compile('^[A-Z0-9 -]+$')
RE_CODEPOINT = re.compile('U\+[0-9A-F]{4, 6}')

INDEX_NAME = 'charfinder_index.pickle'
MINIMUM_SAVE_LEN = 10000
CJK_UNI_PREFIX = 'CJK UNIFIED IDEOGRAPH'
CJK_CMP_PREFIX = 'CJK COMPATIBILITY IDEOGRAPH'

sample_chars = [
    '$',  # DOLLAR SIGN
    'A',  # LATIN CAPITAL LETTER A
    'a',  # LATIN SMALL LETTER A
    '\u20a0',  # EURO-CURRENCY SIGN
    '\u20ac',  # EURO SIGN
]

CharDescription = namedtuple('CharDescription', 'code_str char name')

QueryResult = namedtuple('QueryResult', 'count items')


def tokenize(text):
    '''
    :param text: 
    :return: return iterable of uppercased words 
    '''
    for match in RE_WORD.finditer(text):
        yield match.group().upper()


def query_type(text):
    text_upper = text.upper()
    if 'U+' in text_upper:
        return 'CODEPOINT'
    elif RE_UNICODE_NAME.match(text_upper):
        return 'NAME'
    else:
        return 'CHARACTERS'


class UnicodeNameIndex:
    # unicode name 索引类

    def __init__(self, chars=None):
        self.load(chars)

    def load(self, chars=None):
        # 加载 unicode name    
        self.index = None
        if chars is None:
            try:
                with open(INDEX_NAME, 'rb') as fp:
                    self.index = pickle.load(fp)
            except OSError:
                pass
        if self.index is None:
            self.build_index(chars)
        if len(self.index) &gt; MINIMUM_SAVE_LEN:
            try:
                self.save()
            except OSError as exc:
                warnings.warn('Could not save {!r}: {}'
                              .format(INDEX_NAME, exc))

    def save(self):
        with open(INDEX_NAME, 'wb') as fp:
            pickle.dump(self.index, fp)

    def build_index(self, chars=None):
        if chars is None:
            chars = (chr(i) for i in range(32, sys.maxunicode))
        index = {}
        for char in chars:
            try:
                name = unicodedata.name(char)
            except ValueError:
                continue
            if name.startswith(CJK_UNI_PREFIX):
                name = CJK_UNI_PREFIX
            elif name.startswith(CJK_CMP_PREFIX):
                name = CJK_CMP_PREFIX

            for word in tokenize(name):
                index.setdefault(word, set()).add(char)

        self.index = index

    def word_rank(self, top=None):
        # (len(self.index[key], key) 是一个生成器，需要用list 转成列表，要不然下边排序会报错
        res = [list((len(self.index[key], key)) for key in self.index)]
        res.sort(key=lambda  item: (-item[0], item[1]))
        if top is not None:
            res = res[:top]
        return res

    def word_report(self, top=None):
        for postings, key in self.word_rank(top):
            print('{:5} {}'.format(postings, key))

    def find_chars(self, query, start=0, stop=None):
        stop = sys.maxsize if stop is None else stop
        result_sets = []
        for word in tokenize(query):
            # tokenize 是query 的生成器 a b 会是 ['a', 'b'] 的生成器
            chars = self.index.get(word)
            if chars is None:
                result_sets = []
                break
            result_sets.append(chars)

        if not result_sets:
            return QueryResult(0, ())

        result = functools.reduce(set.intersection, result_sets)
        result = sorted(result)  # must sort to support start, stop
        result_iter = itertools.islice(result, start, stop)
        return QueryResult(len(result),
                           (char for char in result_iter))

    def describe(self, char):
        code_str = 'U+{:04X}'.format(ord(char))
        name = unicodedata.name(char)
        return CharDescription(code_str, char, name)

    def find_descriptions(self, query, start=0, stop=None):
        for char in self.find_chars(query, start, stop).items:
            yield self.describe(char)

    def get_descriptions(self, chars):
        for char in chars:
            yield self.describe(char)

    def describe_str(self, char):
        return '{:7}\t{}\t{}'.format(*self.describe(char))

    def find_description_strs(self, query, start=0, stop=None):
        for char in self.find_chars(query, start, stop).items:
            yield self.describe_str(char)

    @staticmethod  # not an instance method due to concurrency
    def status(query, counter):
        if counter == 0:
            msg = 'No match'
        elif counter == 1:
            msg = '1 match'
        else:
            msg = '{} matches'.format(counter)
        return '{} for {!r}'.format(msg, query)

def main(*args):
    index = UnicodeNameIndex()
    query = ' '.join(args)
    n = 0
    for n, line in enumerate(index.find_description_strs(query), 1):
        print(line)
    print('({})'.format(index.status(query, n)))


if __name__ == '__main__':
    if len(sys.argv) &gt; 1:
        main(*sys.argv[1:])
    else:
        print('Usage: {} word1 [word2]...'.format(sys.argv[0]))

</code></pre>
<p>这个模块读取Python内建的Unicode数据库，为每个字符名称中的每个单词建立索引，然后倒排索引，存入一个字典。<br>
例如，在倒排索引中，'SUN' 键对应的条目是一个集合，里面是名称中包含'SUN' 这个词的10个Unicode字符。倒排索引保存在本地一个名为charfinder_index.pickle 的文件中。如果查询多个单词，会计算从索引中所得集合的交集。<br>
运行示例如下：</p>
<pre><code class="language-python">    &gt;&gt;&gt; main('rook')  # doctest: +NORMALIZE_WHITESPACE
    U+2656  ♖  WHITE CHESS ROOK
    U+265C  ♜  BLACK CHESS ROOK
    (2 matches for 'rook')
    &gt;&gt;&gt; main('rook', 'black')  # doctest: +NORMALIZE_WHITESPACE
    U+265C  ♜  BLACK CHESS ROOK
    (1 match for 'rook black')
    &gt;&gt;&gt; main('white bishop')  # doctest: +NORMALIZE_WHITESPACE
    U+2657  ♗   WHITE CHESS BISHOP
    (1 match for 'white bishop')
    &gt;&gt;&gt; main(&quot;jabberwocky's vest&quot;)
    (No match for &quot;jabberwocky's vest&quot;)
</code></pre>
<p>这个模块没有使用并发，主要作用是为使用 asyncio 包编写的服务器提供支持。<br>
下面我们来看下 tcp_charfinder.py 脚本：</p>
<pre><code class="language-python"># tcp_charfinder.py
import sys
import asyncio

# 用于构建索引，提供查询方法
from charfinder import UnicodeNameIndex

CRLF = b'\r\n'
PROMPT = b'?&gt; '

# 实例化UnicodeNameIndex 类，它会使用charfinder_index.pickle 文件
index = UnicodeNameIndex()

async def handle_queries(reader, writer):
    # 这个协程要传给asyncio.start_server 函数，接收的两个参数是asyncio.StreamReader 对象和 asyncio.StreamWriter 对象
    while True:  # 这个循环处理会话，直到从客户端收到控制字符后退出
        writer.write(PROMPT)  # can't await!  # 这个方法不是协程，只是普通函数；这一行发送 ?&gt; 提示符
        await writer.drain()  # must await!  # 这个方法刷新writer 缓冲；因为它是协程，所以要用 await
        data = await reader.readline()  # 这个方法也是协程，返回一个bytes对象，也要用await
        try:
            query = data.decode().strip()
        except UnicodeDecodeError:
            # Telenet 客户端发送控制字符时，可能会抛出UnicodeDecodeError异常
            # 我们这里默认发送空字符
            query = '\x00'
        client = writer.get_extra_info('peername')  # 返回套接字连接的远程地址
        print('Received from {}: {!r}'.format(client, query))  # 在控制台打印查询记录
        if query:
            if ord(query[:1]) &lt; 32:  # 如果收到控制字符或者空字符，退出循环
                break
            # 返回一个生成器，产出包含Unicode 码位、真正的字符和字符名称的字符串
            lines = list(index.find_description_strs(query)) 
            if lines:
                # 使用默认的UTF-8 编码把lines    转换成bytes 对象，并在每一行末添加回车符合换行符
                # 参数列表是一个生成器
                writer.writelines(line.encode() + CRLF for line in lines) 
            writer.write(index.status(query, len(lines)).encode() + CRLF) # 输出状态

            await writer.drain()  # 刷新输出缓冲
            print('Sent {} results'.format(len(lines)))  # 在服务器控制台记录响应

    print('Close the client socket')  # 在控制台记录会话结束
    writer.close()  # 关闭StreamWriter流



def main(address='127.0.0.1', port=2323):  # 添加默认地址和端口，所以调用默认可以不加参数
    port = int(port)
    loop = asyncio.get_event_loop()
    # asyncio.start_server 协程运行结束后，
    # 返回的协程对象返回一个asyncio.Server 实例，即一个TCP套接字服务器
    server_coro = asyncio.start_server(handle_queries, address, port,
                                loop=loop) 
    server = loop.run_until_complete(server_coro) # 驱动server_coro 协程，启动服务器

    host = server.sockets[0].getsockname()  # 获得这个服务器的第一个套接字的地址和端口
    print('Serving on {}. Hit CTRL-C to stop.'.format(host))  # 在控制台中显示地址和端口
    try:
        loop.run_forever()  # 运行事件循环 main 函数在这里阻塞，直到服务器的控制台中按CTRL-C 键
    except KeyboardInterrupt:  # CTRL+C pressed
        pass

    print('Server shutting down.')
    server.close()
    # server.wait_closed返回一个 future
    # 调用loop.run_until_complete 方法，运行 future
    loop.run_until_complete(server.wait_closed())  
    loop.close()  # 终止事件循环


if __name__ == '__main__':
    main(*sys.argv[1:])

</code></pre>
<p>运行 tcp_charfinders.py</p>
<pre><code class="language-bash">python tcp_charfinders.py
</code></pre>
<p>打开终端，使用 telnet 命令请求服务，运行结果如下所示：</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/gjKne6lhnA1QoQEksLjU8ujZEIlaH-F622yCUcfD6QTB-M6DT84qK04A9rLMSosx" alt="在 telnet 会话中访问tcp版字符串查找服务器所做的查询" loading="lazy"></figure>
<p>main 函数几乎会立即显示 Serving on... 消息，然后在调用loop.run_forever() 方法时阻塞。这时，控制权流动到事件循环中，而且一直等待，偶尔会回到handle_queries 协程，这个协程需要等待网络发送或接收数据时，控制权又交给事件循环。</p>
<p>handle_queries 协程可以处理多个客户端发来的多次请求。只要有新客户端连接服务器，就会启动一个handle_queries 协程实例。</p>
<blockquote>
<p>handle_queries 的I/O操作都是使用bytes格式。我们从网络得到的数据要解码，发出去的数据也要编码</p>
</blockquote>
<p>asyncio包提供了高层的流API，提供了现成的服务器，我们只需要实现一个处理程序。详细信息可以查看文档：<a href="https://docs.python.org/3/library/asyncio-stream.html">https://docs.python.org/3/library/asyncio-stream.html</a></p>
<p>虽然，asyncio包提供了服务器，但是功能相对来说还是比较简陋的，现在我们使用一下 基于asyncio包的 web 框架 sanci，用它来实现一个http版的简易服务器</p>
<blockquote>
<section class="caption">sanic</section> 的简单入门在上一篇文章有介绍，[python web 框架 Sanci 快速入门](https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&mid=2655752001&idx=1&sn=2c2e84f5f493514fdbff482a28dd7551&chksm=80b0b86bb7c7317df9d1c7b13411a231b91bb107de5e99c5379a3d9d072d5d3fb8117f364188#rd)
</blockquote>
<h2 id="使用-sanic-包编写web-服务器">使用 sanic 包编写web 服务器</h2>
<p>Sanic 是一个和类Flask 的基于Python3.5+的web框架，提供了比较高阶的API，比如路由、request参数，response等，我们只需要实现处理逻辑即可。</p>
<p>下边是使用 sanic 实现的简易的 字符查询http web 服务：</p>
<pre><code class="language-python">from sanic import Sanic
from sanic import response

from charfinder import UnicodeNameIndex

app = Sanic()

index = UnicodeNameIndex()

html_temp = '&lt;p&gt;{char}&lt;/p&gt;'

@app.route('/charfinder')  # app.route 函数的第一个参数是url path，我们这里指定路径是charfinder
async def charfinder(request):
    # request.args 可以取到url 的查询参数
    # ?key1=value1&amp;key2=value2 的结果是 {'key1': ['value1'], 'key2': ['value2']}
    # 我们这里支持传入多个查询参数，所以这里使用 request.args.getlist('char')
    # 如果我们 使用 request.args.get('char') 只能取到第一个参数
    query = request.args.getlist('char')
    query = ' '.join(query)
    lines = list(index.find_description_strs(query))
    # 将得到的结果生成html
    html = '\n'.join([html_temp.format(char=line) for line in lines])
    return response.html(html)

if __name__ == '__main__':
    app.run(host=&quot;0.0.0.0&quot;, port=8000)  # 设置服务器运行地址和端口号
</code></pre>
<p>对比两段代码可以发现，使用 sanic 非常简单。</p>
<p>运行服务：</p>
<pre><code class="language-sh">python http_charsfinder.py
</code></pre>
<p>我们在浏览器输入地址 http://0.0.0.0:8000/charfinder?char=sun 结果示例如下</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/BruF3mWEA0c2KEh5wqP92DajeNuZ_2LI6LeamF-kpYcDqmy8xlVw3V98tbIdHEeI" alt="http://media.gusibi.mobi/BruF3mWEA0c2KEh5wqP92DajeNuZ_2LI6LeamF-kpYcDqmy8xlVw3V98tbIdHEeI" loading="lazy"></figure>
<h3 id="现在对比下两段代码">现在对比下两段代码</h3>
<p>在TCP 的示例中，服务器通过main函数下的这两行代码创建并排定运行时间：</p>
<pre><code class="language-python">server_coro = asyncio.start_server(handle_queries, address, port,
                                loop=loop)
server = loop.run_until_complete(server_coro)
</code></pre>
<p>而在sanic的HTTP示例中，使用，创建服务器：</p>
<pre><code class="language-python">app.run(host=&quot;0.0.0.0&quot;, port=8000)
</code></pre>
<p>这两个看起来运行方式完全不同，但如果我们翻开sanic的源码会看到 app.run() 内部是调用 的 <code>server_coroutine = loop.create_server()</code>创建服务器，<br>
server_coroutine 是通过 <code>loop.run_until_complete()</code>驱动的。</p>
<p>所以说，为了启动服务器，这两个都是由 loop.run_until_complete 驱动，完成运行的。只不过 sanic 封装了run 方法，使得使用更加方便。</p>
<blockquote>
<p>这里可以得到一个基本事实：只有驱动协程，协程才能做事，而驱动 asyncio.coroutine 装饰的协程有两种方式，使用 yield from 或者传给asyncio 包中某个参数为协程或future的函数，例如 run_until_complete</p>
</blockquote>
<p>现在如果你搜索 cjk，会得到7万多条数据3M 的一个html文件，耗时大约2s，这如果是生产服务的一个请求，耗时2s是不能接收的，我们可以使用分页，这样我们可以每次只取200条数据，当用户想看更多数据时再使用 ajax 或者 websockets发送下一批数据。</p>
<p>这一篇我们使用 asyncio 包实现了TCP服务器，使用sanic（基于asyncio <code>sanic 默认使用 uvloop替代asyncio</code>）实现了HTTP服务器，用于按名称搜索Unicode 字符。但是并没有涉及服务器并发部分，这部分可以以后再讨论。</p>
<blockquote>
<p>这一篇还是 《流畅的python》asyncio 一章的读书笔记，下一篇将是python并发的第三篇，《使用线程处理并发》。</p>
</blockquote>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.infoq.com/cn/news/2015/05/python-async-await">Python 3.5将支持Async/Await异步编程:http://www.infoq.com/cn/news/2015/05/python-async-await</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655752001&amp;idx=1&amp;sn=2c2e84f5f493514fdbff482a28dd7551&amp;chksm=80b0b86bb7c7317df9d1c7b13411a231b91bb107de5e99c5379a3d9d072d5d3fb8117f364188#rd">python web 框架 Sanci 快速入门</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751998&amp;idx=1&amp;sn=37833d3d7582d38f85a526de7eeda814">python并发2：使用asyncio处理并发</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python web 框架 Sanci 快速入门]]></title>
        <id>http://blog.gusibi.site/post/sanic-quickstart/</id>
        <link href="http://blog.gusibi.site/post/sanic-quickstart/">
        </link>
        <updated>2017-06-24T20:47:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Sanic 是一个和类Flask 的基于Python3.5+的web框架，它编写的代码速度特别快。</p>
<p>除了像Flask 以外，Sanic 还支持以异步请求的方式处理请求。这意味着你可以使用新的 async/await 语法，编写非阻塞的快速的代码。</p>
<blockquote>
<p>关于 asyncio 包的介绍，请参考之前的一篇文章 <a href="http://blog.gusibi.site/post/python-asyncio/">python并发2：使用asyncio处理并发</a></p>
</blockquote>
<p>Github 地址 是 <a href="https://github.com/channelcat/sanic">https://github.com/channelcat/sanic</a>，感兴趣的可以去贡献代码。</p>
<p>既然它说速度特别快，我们先看下官方提供的 基准测试结果。</p>
<h2 id="sanic基准测试">Sanic基准测试</h2>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/Z4kaZYttJBgd10Nl9CxCc9aRv0lpERgpW2tCnnRjHQ7G3Yb0swwrL2qFBORVcRSp" alt="sanic benchmarks" loading="lazy"></figure>
<p>这个测试的程序运行在 AWS 实例上，系统是Ubuntu，只使用了一个进程。</p>
<p>Sanic 的开发者说他们的灵感来自于这篇文章 <a href="https://magic.io/blog/uvloop-blazing-fast-python-networking/">uvloop: Blazing fast Python networking</a>。</p>
<p>那我们就有必要看下uvloop是个什么库。</p>
<h2 id="uvloop">uvloop</h2>
<p>uvloop 是 asyncio 默认事件循环的替代品，实现的功能完整，切即插即用。uvloop是用CPython 写的，建于libuv之上。<br>
uvloop 可以使 asyncio 更快。事实上，它至少比 nodejs、gevent 和其他 Python 异步框架要快两倍 。基于 uvloop 的 asyncio 的速度几乎接近了 Go 程序的速度。</p>
<h3 id="安装-uvloop">安装 uvloop</h3>
<p>uvloop 还只能在 *nix 平台 和 Python3.5+以上版本使用。<br>
使用pip安装：</p>
<pre><code class="language-bash">pip install uvloop
</code></pre>
<p>在 asyncio 代码中使用uvloop 也很简单：</p>
<pre><code class="language-python">import asyncio
import uvloop
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
</code></pre>
<p>这得代码使得对任何asyncio.get_event_loop() 的调用都将返回一个uvloop实例。</p>
<p>详细的uvloop 介绍可以看下原文：<a href="https://magic.io/blog/uvloop-blazing-fast-python-networking/">uvloop: Blazing fast Python networking</a>。</p>
<p>uvloop的github地址是<a href="https://github.com/MagicStack/uvloop">https://github.com/MagicStack/uvloop</a>。</p>
<p>现在我们开始学习Sanic：</p>
<h2 id="安装-sanic">安装 Sanic</h2>
<pre><code class="language-bash">pip install sanic
</code></pre>
<h3 id="创建第一个-sanic-代码">创建第一个 sanic 代码</h3>
<pre><code class="language-python">from sanic import Sanic
from sanic.response import text

app = Sanic(__name__)

@app.route(&quot;/&quot;)
async def test(request):
    return text('Hello world!')

app.run(host=&quot;0.0.0.0&quot;, port=8000, debug=True)
</code></pre>
<p>运行代码： <code>python main.py</code>, 现在打开浏览器访问 http://0.0.0.0:8000，你会看到 <code>hello world!</code>。</p>
<p>如果你熟悉Flask，你会发现，这个语法简直和Flask一模一样。</p>
<h2 id="路由routing">路由（Routing）</h2>
<p>路由用于把一个函数绑定到一个 URL。下面是一些基本的例子：</p>
<pre><code class="language-python">@app.route('/')
def index():
    return text('Index Page')

@app.route('/hello')
def hello():
    return text('Hello World')
</code></pre>
<p>当然，你还可以动态的变化URL的某些部分，还可以为一个函数指定多个规则。</p>
<h3 id="变量规则">变量规则</h3>
<p>通过把 URL 的一部分标记为 &lt;variable_name&gt; 就可以在 URL 中添加变量。标记的 部分会作为关键字参数传递给函数。通过使用 <code>&lt;converter:variable_name&gt;</code> ，可以 选择性的加上一个转换器，为变量指定特定的类型，如果传入的类型错误，Sanic会抛出<code>NotFound</code>异常。请看下面的例子:</p>
<pre><code class="language-python">from sanic.response import text

@app.route('/tag/&lt;tag&gt;')
async def tag_handler(request, tag):
    return text('Tag - {}'.format(tag))

@app.route('/number/&lt;integer_arg:int&gt;')
async def integer_handler(request, integer_arg):
    return text('Integer - {}'.format(integer_arg))

@app.route('/number/&lt;number_arg:number&gt;')
async def number_handler(request, number_arg):
    return text('Number - {}'.format(number_arg))

@app.route('/person/&lt;name:[A-z]&gt;')
async def person_handler(request, name):
    return text('Person - {}'.format(name))

@app.route('/folder/&lt;folder_id:[A-z0-9]{0,4}&gt;')
async def folder_handler(request, folder_id):
    return text('Folder - {}'.format(folder_id))
</code></pre>
<h3 id="http-请求类型">HTTP 请求类型</h3>
<p>默认情况下，我们定义的URL只支持<code>GET</code> 请求，<code>@app.route</code>装饰器提供了一个可选参数<code>methods</code>，这个参数允许传入所有HTTP 方法。<br>
例如：</p>
<pre><code class="language-python">from sanic.response import text

@app.route('/post', methods=['POST'])
async def post_handler(request):
    return text('POST request - {}'.format(request.json))

@app.route('/get', methods=['GET'])
async def get_handler(request):
    return text('GET request - {}'.format(request.args))
</code></pre>
<p>也可以简写为：</p>
<pre><code class="language-python">from sanic.response import text

@app.post('/post')
async def post_handler(request):
    return text('POST request - {}'.format(request.json))

@app.get('/get')
async def get_handler(request):
    return text('GET request - {}'.format(request.args))
</code></pre>
<h3 id="add_route-方法">add_route 方法</h3>
<p>除了<code>@app.route</code>装饰器，Sanic 还提供了 <code>add_route</code> 方法。</p>
<blockquote>
<p><code>@app.route</code> 只是包装了 <code>add_route</code>方法。</p>
</blockquote>
<pre><code class="language-python">from sanic.response import text

# Define the handler functions
async def handler1(request):
    return text('OK')

async def handler2(request, name):
    return text('Folder - {}'.format(name))

async def person_handler2(request, name):
    return text('Person - {}'.format(name))

# Add each handler function as a route
app.add_route(handler1, '/test')
app.add_route(handler2, '/folder/&lt;name&gt;')
app.add_route(person_handler2, '/person/&lt;name:[A-z]&gt;', methods=['GET'])
</code></pre>
<h3 id="url-构建">URL 构建</h3>
<p>如果可以匹配URL，那么Sanic可以生成URL吗？当然可以，url_for() 函数就是用于构建指定函数的URL的。它把函数名称作为第一个参数，其余参数对应URL中的变量，例如：</p>
<pre><code class="language-python">@app.route('/')
async def index(request):
    # generate a URL for the endpoint `post_handler`
    url = app.url_for('post_handler', post_id=5)
    # the URL is `/posts/5`, redirect to it
    return redirect(url)


@app.route('/posts/&lt;post_id&gt;')
async def post_handler(request, post_id):
    return text('Post - {}'.format(post_id))
</code></pre>
<p>未定义变量会作为URL的查询参数：</p>
<pre><code class="language-python">url = app.url_for('post_handler', post_id=5, arg_one='one', arg_two='two')
# /posts/5?arg_one=one&amp;arg_two=two

# 支持多值参数
url = app.url_for('post_handler', post_id=5, arg_one=['one', 'two'])
# /posts/5?arg_one=one&amp;arg_one=two
</code></pre>
<h2 id="使用蓝图blueprint">使用蓝图（Blueprint）</h2>
<p>Sanic也提供了和Flask 类似的 Blueprint。</p>
<p>Blueprint有以下用途：</p>
<ul>
<li>把一个应用分解为一套蓝图。这是针对大型应用的理想方案：一个项目可以实例化一个 应用，初始化多个扩展，并注册许多蓝图。</li>
<li>在一个应用的 URL 前缀和（或）子域上注册一个蓝图。 URL 前缀和（或）子域的参数 成为蓝图中所有视图的通用视图参数（缺省情况下）。</li>
<li>使用不同的 URL 规则在应用中多次注册蓝图。</li>
<li>通过蓝图提供模板过滤器、静态文件、模板和其他工具。蓝图不必执行应用或视图 函数。</li>
</ul>
<h3 id="blueprint-示例">blueprint 示例</h3>
<pre><code class="language-python">from sanic import Sanic
from sanic.response import json
from sanic import Blueprint

bp = Blueprint('my_blueprint')

@bp.route('/')
async def bp_root(request):
    return json({'my': 'blueprint'})
    
app = Sanic(__name__)
app.blueprint(bp)

app.run(host='0.0.0.0', port=8000, debug=True)
</code></pre>
<p>Sanic 使用 app.blueprint() 方法注册blueprint。</p>
<h3 id="使用蓝图注册全局中间件">使用蓝图注册全局中间件</h3>
<pre><code class="language-python">@bp.middleware
async def print_on_request(request):
    print(&quot;I am a spy&quot;)

@bp.middleware('request')
async def halt_request(request):
    return text('I halted the request')

@bp.middleware('response')
async def halt_response(request, response):
    return text('I halted the response')
</code></pre>
<h3 id="使用蓝图处理异常">使用蓝图处理异常</h3>
<pre><code class="language-python">@bp.exception(NotFound)
def ignore_404s(request, exception):
    return text(&quot;Yep, I totally found the page: {}&quot;.format(request.url))
</code></pre>
<h3 id="使用蓝图处理静态文件">使用蓝图处理静态文件</h3>
<p>第一个参数指向当前的Python包<br>
第二个参数是静态文件的目录</p>
<pre><code class="language-python">bp.static('/folder/to/serve', '/web/path')
</code></pre>
<h3 id="使用url_for">使用url_for</h3>
<p>如果要创建页面链接，可以和通常一样使用 url_for() 函数，只是要把蓝图名称作为端点的前缀，并且用一个点（ . ）来 分隔:</p>
<pre><code class="language-python">@blueprint_v1.route('/')
async def root(request):
    url = app.url_for('v1.post_handler', post_id=5) # --&gt; '/v1/post/5'
    return redirect(url)


@blueprint_v1.route('/post/&lt;post_id&gt;')
async def post_handler(request, post_id):
    return text('Post {} in Blueprint V1'.format(post_id))
</code></pre>
<h2 id="操作请求数据">操作请求数据</h2>
<p>对于web 应用来说对客户端向服务器发送的数据做出相应很重要，在Sanic中由传入的参数 request来提供请求信息。</p>
<blockquote>
<section class="caption">为什么不像Flask 一样提供一个全局变量 request？</section>
Flask 是同步请求，每次请求都有一个独立的新线程来处理，这个线程中也只处理这一个请求。而Sanic是基于协程的处理方式，一个线程可以同时处理几个、几十个甚至几百个请求，把request作为全局变量显然会比较难以处理。
</blockquote>
<p>Request 对象常用参数有</p>
<h4 id="jsonany-json-body">json（any）  json body</h4>
<pre><code class="language-python">from sanic.response import json

@app.route(&quot;/json&quot;)
def post_json(request):
    return json({ &quot;received&quot;: True, &quot;message&quot;: request.json })
</code></pre>
<h4 id="argsdict-url请求参数">args（dict）  URL请求参数</h4>
<p>?key1=value1&amp;key2=value2  将转变为</p>
<pre><code class="language-json">{'key1': ['value1'], 'key2': ['value2']}
</code></pre>
<h4 id="raw_argsdict-和args-类似">raw_args（dict） 和args 类似</h4>
<p>?key1=value1&amp;key2=value2  将转变为</p>
<pre><code class="language-json">{'key1': 'value1', 'key2': 'value2'}
</code></pre>
<h4 id="formdict处理-post-表单请求数据是一个字典">form（dict）处理 POST 表单请求，数据是一个字典</h4>
<h4 id="bodybytes处理post-表单请求数据是一个字符串">body（bytes）处理POST 表单请求，数据是一个字符串</h4>
<p>其他参数还有:</p>
<ul>
<li>file</li>
<li>ip</li>
<li>app</li>
<li>url</li>
<li>scheme</li>
<li>path</li>
<li>query_string</li>
</ul>
<p>详细信息参考文档: <a href="http://sanic.readthedocs.io/en/latest/sanic/request_data.html">Request Data</a></p>
<h2 id="关于响应">关于响应</h2>
<p>Sanic使用response 函数创建响应对象。</p>
<ul>
<li>文本 <code>response.text('hello world')</code></li>
<li>html <code>response.html('&lt;p&gt;hello world&lt;/p&gt;')</code></li>
<li>json <code>response.json({'hello': 'world'})</code></li>
<li>file <code>response.file('/srv/www/hello.txt')</code></li>
<li>streaming</li>
</ul>
<pre><code class="language-python">from sanic import response

@app.route(&quot;/streaming&quot;)
async def index(request):
    async def streaming_fn(response):
        response.write('foo')
        response.write('bar')
    return response.stream(streaming_fn, content_type='text/plain')
</code></pre>
<ul>
<li>redirect <code>response.file('/json')</code></li>
<li>raw <code>response.raw('raw data')</code></li>
<li>如果想修改响应的headers可以传入headers 参数</li>
</ul>
<pre><code class="language-python">from sanic import response

@app.route('/json')
def handle_request(request):
    return response.json(
        {'message': 'Hello world!'},
        headers={'X-Served-By': 'sanic'},
        status=200
    )
</code></pre>
<h2 id="配置管理">配置管理</h2>
<p>应用总是需要一定的配置的。根据应用环境不同，会需要不同的配置。比如开关调试 模式、设置密钥以及其他依赖于环境的东西。<br>
Sanic 的设计思路是在应用开始时载入配置。你可以在代码中直接硬编码写入配置，也可以使用配置文件。</p>
<p>不管你使用何种方式载入配置，都可以使用 Sanic 的 config 属性来操作配置的值。 Sanic 本身就使用这个对象来保存 一些配置，扩展也可以使用这个对象保存配置。同时这也是你保存配置的地方。</p>
<h3 id="配置入门">配置入门</h3>
<p>config 实质上是一个字典的子类，可以像字典一样操作：</p>
<pre><code class="language-python">app = Sanic('myapp')
app.config.DB_NAME = 'appdb'
app.config.DB_USER = 'appuser'
</code></pre>
<p>也可以一次更新多个配置：</p>
<pre><code class="language-python">db_settings = {
    'DB_HOST': 'localhost',
    'DB_NAME': 'appdb',
    'DB_USER': 'appuser'
}
app.config.update(db_settings)
</code></pre>
<h3 id="从对象导入配置">从对象导入配置</h3>
<pre><code class="language-python">import myapp.default_settings

app = Sanic('myapp')
app.config.from_object(myapp.default_settings)
</code></pre>
<p>这里是我写的聊天机器人的真实配置示例：<a href="https://github.com/gusibi/momo/blob/master/app.py#L17">https://github.com/gusibi/momo/</a></p>
<h3 id="使用配置文件">使用配置文件</h3>
<p>如果把配置放在一个单独的文件中会更有用。理想情况下配置文件应当放在应用包的 外面。这样可以在修改配置文件时不影响应用的打包与分发<br>
常见用法如下:</p>
<pre><code class="language-python">app = Sanic('myapp')
app.config.from_envvar('MYAPP_SETTINGS')
</code></pre>
<p>首先从 myapp.default_settings 模块载入配置，然后根据 MYAPP_SETTINGS 环境变量所指向的文件的内容重载配置的值。在 启动服务器前，在 Linux 或 OS X 操作系统中，这个环境变量可以在终端中使用 export 命令来设置:</p>
<pre><code class="language-bash">$ export MYAPP_SETTINGS=/path/to/config_file
$ python myapp.py
</code></pre>
<h2 id="部署">部署</h2>
<p>Sanic 项目还不是特别成熟，现在部署比较简陋。对Gunicorn的支持也不完善。<br>
详细信息可以 看下这个问题 <a href="https://github.com/channelcat/sanic/issues/396">Projects built with sanic?</a></p>
<p>先在说下我的部署方式</p>
<h3 id="使用-supervisord-部署">使用 supervisord 部署</h3>
<p>supervisord 配置文件： <a href="https://github.com/gusibi/momo/blob/master/supervisord.conf">https://github.com/gusibi/momo/blob/master/supervisord.conf</a></p>
<p>启动 方式</p>
<pre><code class="language-bash">supervisord -c supervisor.conf
</code></pre>
<h2 id="总结">总结</h2>
<p>试用了下Sanic，把之前的一个聊天机器人从Flask 改成了 Sanic。不得不说，如果你有Flask经验，大致看一下Sanic文档就可以直接上手了。<br>
并且Sanic 的速度比Flask 快很多，只是Sanic配套的包还是太少，用于生产环境有一定的风险。</p>
<p>最后对聊天微信聊天机器人感兴趣的可以看下<a href="https://github.com/gusibi/momo">https://github.com/gusibi/momo</a>。</p>
<h2 id="预告">预告</h2>
<p>下一篇将介绍如何使用 Sanic 一步一步创建一个 聊天机器人。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://magic.io/blog/uvloop-blazing-fast-python-networking">uvloop: Blazing fast Python networking</a></li>
<li><a href="https://github.com/channelcat/sanic">Sanic Githu 地址</a></li>
<li><a href="http://sanic.readthedocs.io/en/latest/">Sanic 文档</a></li>
</ul>
<hr>
<p>最后，感谢女朋友支持。</p>
<table>
<thead>
<tr>
<th>&gt;欢迎关注</th>
<th>&gt;请我喝芬达</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://media.gusibi.mobi/Hy8XHexmzppNKuekLuGxWy8LjdGrQAzZA3mH_e9xltoiYgTFWdvlpZwGWxZESrbK" alt="欢迎关注" loading="lazy"></td>
<td><img src="http://media.gusibi.mobi/CO9DwU6ZHnXHD5xuG3GqTsY_IYPl-JdpQrDaOo6tl6PiAGEBDeYFHO7sGQi_VVFc" alt="请我喝芬达" loading="lazy"></td>
</tr>
</tbody>
</table>
<h2 id="彩蛋">彩蛋</h2>
<p><strong>魔魔是我们家巴哥的名字</strong><br>
贴一张魔魔的照片结束本篇文章。</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/ocViYNLQGTk_wX2aGhazWKH_q2kkpJkxAosa8f8NbLFLBdHt78dEDYRGklBbBT1J" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python并发2：使用asyncio处理并发]]></title>
        <id>http://blog.gusibi.site/post/python-asyncio/</id>
        <link href="http://blog.gusibi.site/post/python-asyncio/">
        </link>
        <updated>2017-06-23T00:29:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="asyncio">asyncio</h2>
<p><code>asyncio</code> 是Python3.4 之后引入的标准库的，这个包使用事件循环驱动的协程实现并发。<br>
asyncio 包在引入标准库之前代号 <code>“Tulip”（郁金香）</code>，所以在网上搜索资料时，会经常看到这种花的名字。</p>
<h3 id="什么是事件循环">什么是事件循环?</h3>
<p><code>wiki 上说：</code>事件循环是”一种等待程序分配事件或者消息的编程架构“。基本上来说事件循环就是：<code>”当A发生时，执行B&quot;</code>。或者用最简单的例子来解释这一概念就是每个浏览器中都存在的JavaScript事件循环。当你点击了某个东西（“当A发生时”），这一点击动作会发送给JavaScript的事件循环，并检查是否存在注册过的onclick 回调来处理这一点击（执行B)。只要有注册过的回调函数就会伴随点击动作的细节信息被执行。事件循环被认为是一种虚幻是因为它不停的手机事件并通过循环来发如何应对这些事件。</p>
<p>对 Python 来说，用来提供事件循环的 asyncio 被加入标准库中。asyncio 重点解决网络服务中的问题，事件循环在这里将来自套接字（socket）的 I/O 已经准备好读和/或写作为“当A发生时”（通过selectors模块）。除了 GUI 和 I/O，事件循环也经常用于在别的线程或子进程中执行代码，并将事件循环作为调节机制（例如，合作式多任务）。如果你恰好理解 Python 的 GIL，事件循环对于需要释放 GIL 的地方很有用。</p>
<h2 id="线程与协程">线程与协程</h2>
<p>我们先看两断代码，分别用 threading 模块和asyncio 包实现的一段代码。</p>
<pre><code class="language-python"># sinner_thread.py

import threading
import itertools
import time
import sys


class Signal: # 这个类定义一个可变对象，用于从外部控制线程
    go = True


def spin(msg, signal):  # 这个函数会在单独的线程中运行，signal 参数是前边定义的Signal类的实例
    write, flush = sys.stdout.write, sys.stdout.flush
    for char in itertools.cycle('|/-\\'):  # itertools.cycle 函数从指定的序列中反复不断地生成元素
        status = char + ' ' + msg
        write(status)
        flush()
        write('\x08' * len(status))  # 使用退格符把光标移回行首
        time.sleep(.1)  # 每 0.1 秒刷新一次
        if not signal.go:  # 如果 go属性不是 True，退出循环
            break

    write(' ' * len(status) + '\x08' * len(status))  # 使用空格清除状态消息，把光标移回开头


def slow_function():  # 模拟耗时操作
    # 假装等待I/O一段时间
    time.sleep(3)  # 调用sleep 会阻塞主线程，这么做事为了释放GIL，创建从属线程
    return 42


def supervisor():  # 这个函数设置从属线程，显示线程对象，运行耗时计算，最后杀死进程
    signal = Signal()
    spinner = threading.Thread(target=spin,
                               args=('thinking!', signal))
    print('spinner object:', spinner)  # 显示线程对象 输出 spinner object: &lt;Thread(Thread-1, initial)&gt;
    spinner.start()  # 启动从属进程
    result = slow_function()  # 运行slow_function 行数，阻塞主线程。同时丛书线程以动画形式旋转指针
    signal.go = False
    spinner.join()  # 等待spinner 线程结束
    return result

def main():
    result = supervisor()  
    print('Answer', result)


if __name__ == '__main__':
    main()

</code></pre>
<p>执行一下，结果大致是这个样子：</p>
<figure data-type="image" tabindex="1"><img src="http://omuo4kh1k.bkt.clouddn.com/QQ20170619-224013-HD.gif" alt="" loading="lazy"></figure>
<p>这是一个动图，“thinking&quot; 前的 \ 线是会动的（为了录屏，我把sleep 的时间调大了）</p>
<blockquote>
<p>python 并没有提供终止线程的API，所以若想关闭线程，必须给线程发送消息。这里我们使用signal.go 属性：在主线程中把它设置为False后，spinner 线程会接收到，然后退出</p>
</blockquote>
<p>现在我们再看下使用 asyncio 包的版本：</p>
<pre><code class="language-python"># spinner_asyncio.py
# 通过协程以动画的形式显示文本式旋转指针

import asyncio
import itertools
import sys

@asyncio.coroutine # 打算交给asyncio 处理的协程要使用 @asyncio.coroutine 装饰
def spin(msg):
    write, flush = sys.stdout.write, sys.stdout.flush
    for char in itertools.cycle('|/-\\'):  # itertools.cycle 函数从指定的序列中反复不断地生成元素
        status = char + ' ' + msg
        write(status)
        flush()
        write('\x08' * len(status))  # 使用退格符把光标移回行首
        try:
            yield from asyncio.sleep(0.1)  # 使用 yield from asyncio.sleep(0.1) 代替 time.sleep(.1), 这样的休眠不会阻塞事件循环
        except asyncio.CancelledError:  # 如果 spin 函数苏醒后抛出 asyncio.CancelledError 异常，其原因是发出了取消请求
            break

    write(' ' * len(status) + '\x08' * len(status))  # 使用空格清除状态消息，把光标移回开头


@asyncio.coroutine
def slow_function():  # 5 现在此函数是协程，使用休眠假装进行I/O 操作时，使用 yield from 继续执行事件循环
    # 假装等待I/O一段时间
    yield from asyncio.sleep(3)  # 此表达式把控制权交给主循环，在休眠结束后回复这个协程
    return 42


@asyncio.coroutine
def supervisor():  #这个函数也是协程，因此可以使用 yield from 驱动 slow_function
    spinner = asyncio.async(spin('thinking!'))  # asyncio.async() 函数排定协程的运行时间，使用一个 Task 对象包装spin 协程，并立即返回
    print('spinner object:', spinner)  # Task 对象，输出类似 spinner object: &lt;Task pending coro=&lt;spin() running at spinner_asyncio.py:6&gt;&gt;
    # 驱动slow_function() 函数，结束后，获取返回值。同事事件循环继续运行，
    # 因为slow_function 函数最后使用yield from asyncio.sleep(3) 表达式把控制权交给主循环
    result = yield from slow_function()
    # Task 对象可以取消；取消后会在协程当前暂停的yield处抛出 asyncio.CancelledError 异常
    # 协程可以捕获这个异常，也可以延迟取消，甚至拒绝取消
    spinner.cancel()

    return result

def main():
    loop = asyncio.get_event_loop()  # 获取事件循环引用
    # 驱动supervisor 协程，让它运行完毕；这个协程的返回值是这次调用的返回值
    result = loop.run_until_complete(supervisor())
    loop.close()
    print('Answer', result)


if __name__ == '__main__':
    main()
</code></pre>
<blockquote>
<p>除非想阻塞主线程，从而冻结事件循环或整个应用，否则不要再 asyncio 协程中使用 time.sleep().<br>
如果协程需要在一段时间内什么都不做，应该使用 yield from asyncio.sleep(DELAY)</p>
</blockquote>
<p>使用 @asyncio.coroutine 装饰器不是强制要求，但建议这么做因为这样能在代码中突显协程，如果还没从中产出值，协程就把垃圾回收了（意味着操作未完成，可能有缺陷），可以发出警告。这个装饰器不会预激协程。</p>
<p>这两段代码的执行结果基本相同，现在我们看一下两段代码的核心代码 supervisor 主要区别：</p>
<ul>
<li>asyncio.Task 对象差不多与 threading.Thread 对象等效（Task 对象像是实现写作时多任务的库中的绿色线程</li>
<li>Task 对象用于驱动协程，Thread 对象用于调用可调用的对象</li>
<li>Task 对象不由自己动手实例化，而是通过把协程传给 asyncio.async(...) 函数或 loop.create_task(...) 方法获取</li>
<li>获取的Task 对象已经排定了运行时间；Thread 实例必须调用start方法，明确告知它运行</li>
<li>在线程版supervisor函数中，slow_function 是普通的函数，由线程直接调用，而异步版的slow_function 函数是协程，由yield from 驱动。</li>
<li>没有API能从外部终止线程，因为线程随时可能被中断。而如果想终止任务，可以使用Task.cancel() 实例方法，在协程内部抛出CancelledError 异常。协程可以在暂停的yield 处捕获这个异常，处理终止请求</li>
<li>supervisor 协程必须在main 函数中由loop.run_until_complete 方法执行。</li>
</ul>
<blockquote>
<p>协程和线程相比关键的一个优点是，<br>
线程必须记住保留锁，去保护程序中的重要部分，防止多步操作再执行的过程中中断，防止山水处于于晓状态<br>
协程默认会做好保护，我们必须显式产出（使用yield 或 yield from 交出控制权）才能让程序的余下部分运行。</p>
</blockquote>
<h3 id="asynciofuture故意不阻塞">asyncio.Future：故意不阻塞</h3>
<p>asynci.Future 类与 concurrent.futures.Future 类的接口基本一致，不过实现方式不同，不可互换。</p>
<p>上一篇<a href="http://blog.gusibi.site/post/python-concurrency-with-futures/">python并发 1：使用 futures 处理并发</a>我们介绍过 concurrent.futures.Future 的 future，在 concurrent.futures.Future 中，future只是调度执行某物的结果。在 asyncio 包中，BaseEventLoop.create_task(...) 方法接收一个协程，排定它的运行时间，然后返回一个asyncio.Task 实例（也是asyncio.Future 类的实例，因为 Task 是 Future 的子类，用于包装协程。（在 concurrent.futures.Future 中，类似的操作是Executor.submit(...)）。</p>
<p>与concurrent.futures.Future 类似，asyncio.Future 类也提供了</p>
<ul>
<li>.done()  返回布尔值，表示Future 是否已经执行</li>
<li>.add_done_callback() 这个方法只有一个参数，类型是可调用对象，Future运行结束后会回调这个对象。</li>
<li>.result() 这个方法没有参数，因此不能指定超时时间。 如果调用 .result() 方法时期还没有运行完毕，会抛出 asyncio.InvalidStateError 异常。</li>
</ul>
<blockquote>
<p>对应的 concurrent.futures.Future 类中的 Future 运行结束后调用result(), 会返回可调用对象的结果或者抛出执行可调用对象时抛出的异常，如果是 Future 没有运行结束时调用 f.result()方法，这时会阻塞调用方所在的线程，直到有结果返回。此时result 方法还可以接收 timeout 参数，如果在指定的时间内 Future 没有运行完毕，会抛出 TimeoutError 异常。</p>
</blockquote>
<p><em>我们使用asyncio.Future 时， 通常使用yield from，从中获取结果，而不是使用 result()方法</em> yield from 表达式在暂停的协程中生成返回值，回复执行过程。</p>
<p>asyncio.Future 类的目的是与 yield from 一起使用，所以通常不需要使用以下方法：</p>
<ul>
<li>不需调用 my_future.add_down_callback(...), 因为可以直接把想在 future 运行结束后的操作放在协程中 yield from my_future 表达式的后边。（因为协程可以暂停和恢复函数）</li>
<li>无需调用 my_future.result(), 因为 yield from 产生的结果就是（result = yield from my_future)</li>
</ul>
<p>在 asyncio 包中，可以使用yield from 从asyncio.Future 对象中产出结果。这也就意味着我们可以这么写：</p>
<pre><code class="language-python">res = yield from foo()  # foo 可以是协程函数，也可以是返回 Future 或 task 实例的普通函数
</code></pre>
<h4 id="asyncioasync-函数">asyncio.async(...)* 函数</h4>
<pre><code class="language-python">asyncio.async(coro_or_future, *, loop=None)
</code></pre>
<p>这个函数统一了协程和Future: 第一个参数可以是二者中的任意一个。如果是Future 或者 Task 对象，就直接返回，如果是协程，那么async 函数会自动调用 loop.create_task(...) 方法创建 Task 对象。 loop 参数是可选的，用于传入事件循环; 如果没有传入，那么async函数会通过调用asyncio.get_event_loop() 函数获取循环对象。</p>
<h4 id="baseeventloopcreate_taskcoro">BaseEventLoop.create_task(coro)</h4>
<p>这个方法排定协程的执行时间，返回一个 asyncio.Task 对象。如果在自定义的BaseEventLoop 子类上调用，返回的对象可能是外部库中与Task类兼容的某个类的实例。</p>
<blockquote>
<p>BaseEventLoop.create_task() 方法只在Python3.4.2 及以上版本可用。 Python3.3 只能使用 asyncio.async(...)函数。</p>
</blockquote>
<p>如果想在Python控制台或者小型测试脚本中实验future和协程，可以使用下面的片段：</p>
<pre><code class="language-python">import asyncio

def run_sync(coro_or_future):
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(coro_or_future)

a = run_sync(some_coroutine())
</code></pre>
<h2 id="使用asyncio-和-aiohttp-包下载">使用asyncio 和 aiohttp 包下载</h2>
<p>现在，我们了解了asyncio 的基础知识，是时候使用asyncio 来重写我们 上一篇 <a href="http://blog.gusibi.site/post/python-concurrency-with-futures/">python并发 1：使用 futures 处理并发</a> 下载国旗的脚本了。</p>
<p>先看一下代码：</p>
<pre><code class="language-python">import asyncio

import aiohttp  # 需要pip install aiohttp

from flags import save_flag, show, main, BASE_URL


@asyncio.coroutine  # 我们知道，协程应该使用 asyncio.coroutine 装饰
def get_flag(cc):
    url = &quot;{}/{cc}/{cc}.gif&quot;.format(BASE_URL, cc=cc.lower())
     # 阻塞的操作通过协程实现，客户代码通过yield from 把指责委托给协程，以便异步操作
    resp = yield from aiohttp.request('GET', url) 
    # 读取也是异步操作
    image = yield from resp.read()
    return image


@asyncio.coroutine
def download_one(cc):  # 这个函数也必须是协程，因为用到了yield from
    image = yield from get_flag(cc) 
    show(cc)
    save_flag(image, cc.lower() + '.gif')
    return cc


def download_many(cc_list):
    loop = asyncio.get_event_loop()  # 获取事件序号底层实现的引用
    to_do = [download_one(cc) for cc in sorted(cc_list)] # 调用download_one 获取各个国旗，构建一个生成器对象列表
    # 虽然函数名称是wait 但它不是阻塞型函数，wait 是一个协程，等传给他的所有协程运行完毕后结束
    wait_coro = asyncio.wait(to_do)
    res, _ = loop.run_until_complete(wait_coro) # 执行事件循环，知道wait_coro 运行结束；事件循环运行的过程中，这个脚本会在这里阻塞。
    loop.close() # 关闭事件循环
    return len(res)

if __name__ == '__main__':
    main(download_many)
</code></pre>
<p>这段代码的运行简述如下：</p>
<ol>
<li>在download_many 函数获取一个事件循环，处理调用download_one 函数生成的几个协程对象</li>
<li>asyncio 事件循环一次激活各个协程</li>
<li>客户代码中的协程（get_flag）使用 yield from 把指责委托给库里的协程（aiohttp.request)时，控制权交还给事件循环，执行之前排定的协程</li>
<li>事件循环通过基于回调的底层API，在阻塞的操作执行完毕后获得通知。</li>
<li>获得通知后，主循环把结果发给暂停的协程</li>
<li>协程向前执行到下一个yield from 表达式，例如 get_flag 函数的yield from resp.read()。事件循环再次得到控制权，重复第4~6步，直到循环终止。</li>
</ol>
<p>download_many 函数中，我们使用了 asyncio.wait(...) 函数，这个函数是一个协程，协程的参数是一个由future或者协程构成的可迭代对象；wait 会分别把各个协程包装进一个Task对象。最终的结果是，wait 处理的所有对象都通过某种方式变成Future 类的实例。</p>
<blockquote>
<p>wait 是协程函数，因此，返回的是一个协程或者生成器对象；waite_coro 变量中存储的就是这种对象</p>
</blockquote>
<p>loop.run_until_complete 方法的参数是一个future 或协程。如果是协程，run_until_complete 方法与 wait 函数一样，把协程包装进一个Task 对象中。这里 run_until_complete 方法把 wait_coro 包装进一个Task 对象中，由yield from 驱动。wait_coro 运行结束后返回两个参数，第一个参数是结束的future 第二个参数是未结束的future。</p>
<blockquote>
<section class="caption">wait</section>有两个命名参数，timeout 和 return_when 如果设置了可能会返回未结束的future。
</blockquote>
<p>有一点你可能也注意到了，我们重写了get_flags 函数，是因为之前用到的 requests 库执行的是阻塞型I/O操作。为了使用 asyncio 包，我们必须把函数改成异步版。</p>
<h3 id="小技巧">小技巧</h3>
<p>如果你觉得 使用了协程后代码难以理解，可以采用 Python之父（Guido van Rossum）的建议，假装没有yield from。</p>
<p>已上边这段代码为例：</p>
<pre><code class="language-python">@asyncio.coroutine
def get_flag(cc):
    url = &quot;{}/{cc}/{cc}.gif&quot;.format(BASE_URL, cc=cc.lower())
    resp = yield from aiohttp.request('GET', url) 
    image = yield from resp.read()
    return image

# 把yield form 去掉

def get_flag(cc):
    url = &quot;{}/{cc}/{cc}.gif&quot;.format(BASE_URL, cc=cc.lower())
    resp = aiohttp.request('GET', url) 
    image = resp.read()
    return image

# 现在是不是清晰多了
</code></pre>
<h3 id="知识点">知识点</h3>
<p>在asyncio 包的API中使用 yield from 时，有个细节要注意：</p>
<p>使用asyncio包时，我们编写的异步代码中包含由asyncio本身驱动的协程（委派生成器），而生成器最终把指责委托给asyncio包或者第三方库中的协程。这种处理方式相当于架起了管道，让asyncio事件循环驱动执行底层异步I/O的库函数。</p>
<h2 id="避免阻塞型调用">避免阻塞型调用</h2>
<p>我们先看一个图，这个图显示了电脑从不同存储介质中读取数据的延迟情况：</p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/w8Yl9AQJQ3JzHTnPCUPqwRBuN_BdmLH3iRlvpaNbavfCOvlmiUz5PLexfSZEOXo6" alt="" loading="lazy"></figure>
<p>通过这个图，我们可以看到，阻塞型调用对于CPU来说是巨大的浪费。有什么办法可以避免阻塞型调用中止整个应用程序么？</p>
<p>有两种方法：</p>
<ul>
<li>在单独的线程中运行各个阻塞型操作</li>
<li>把每个阻塞型操作转化成非阻塞的异步调用使用</li>
</ul>
<p>当然我们推荐第二种方案，因为第一种方案中如果每个连接都使用一个线程，成本太高。<br>
第二种我们可以使用把生成器当做协程使用的方式实现异步编程。对事件循环来说，调用回调与在暂停的协程上调用 .send() 方法效果差不多。各个暂停的协程消耗的内存比线程小的多。</p>
<p>现在，你应该能理解为什么 flags_asyncio.py 脚本比 flags.py 快的多了吧。</p>
<blockquote>
<p>因为flags.py 是依次同步下载，每次下载都要用几十亿个CPU周期等待结果。而在flags_asyncio.py中，在download_many 函数中调用loop.run_until_complete 方法时，事件循环驱动各个download_one 协程，运行到yield from 表达式出，那个表达式又驱动各个 get_flag 协程，运行到第一个yield from 表达式处，调用 aiohttp.request()函数。这些调用不会阻塞，因此在零点几秒内所有请求都可以全部开始。</p>
</blockquote>
<h2 id="改进-asyncio-下载脚本">改进 asyncio 下载脚本</h2>
<p>现在我们改进一下上边的 flags_asyncio.py，在其中添加上异常处理，计数器</p>
<pre><code class="language-python">import asyncio
import collections
from collections import namedtuple
from enum import Enum

import aiohttp
from aiohttp import web

from flags import save_flag, show, main, BASE_URL

DEFAULT_CONCUR_REQ = 5
MAX_CONCUR_REQ = 1000

Result = namedtuple('Result', 'status data')
HTTPStatus = Enum('Status', 'ok not_found error')

# 自定义异常用于包装其他HTTP货网络异常，并获取country_code，以便报告错误
class FetchError(Exception):
    def __init__(self, country_code):
        self.country_code = country_code


@asyncio.coroutine
def get_flag(cc):
    # 此协程有三种返回结果：
    # 1.  返回下载到的图片
    # 2. HTTP 响应为404 时，抛出web.HTTPNotFound 异常
    # 3. 返回其他HTTP状态码时， 抛出aiohttp.HttpProcessingError
    url = &quot;{}/{cc}/{cc}.gif&quot;.format(BASE_URL, cc=cc.lower())
    resp = yield from aiohttp.request('GET', url)
    if resp.status == 200:
        image = yield from resp.read()
        return image
    elif resp.status == 404:
        raise web.HttpNotFound()
    else:
        raise aiohttp.HttpProcessionError(
            code=resp.status, message=resp.reason,
            headers=resp.headers
        )


@asyncio.coroutine
def download_one(cc, semaphore):
    # semaphore 参数是 asyncio.Semaphore 类的实例
    # Semaphore 类是同步装置，用于限制并发请求
    try:
        with (yield from semaphore):
             # 在yield    from  表达式中把semaphore   当成上下文管理器使用，防止阻塞整个系统
             # 如果semaphore 计数器的值是所允许的最大值，只有这个协程会阻塞
              image = yield from get_flag(cc)
              # 退出with语句后 semaphore 计数器的值会递减，
              # 解除阻塞可能在等待同一个semaphore对象的其他协程实例
    except web.HTTPNotFound:
        status = HTTPStatus.not_found
        msg = 'not found'
    except Exception as exc:
        raise FetchError(cc) from exc
    else:
        save_flag(image, cc.lower() + '.gif')
        status = HTTPStatus.ok
        msg = 'ok'
    return Result(status, cc)

@asyncio.coroutine
def downloader_coro(cc_list):
    counter = collections.Counter()
    # 创建一个 asyncio.Semaphore 实例，最多允许激活MAX_CONCUR_REQ个使用这个计数器的协程
    semaphore = asyncio.Semaphore(MAX_CONCUR_REQ)
    # 多次调用 download_one 协程，创建一个协程对象列表
    to_do = [download_one(cc, semaphore) for cc in sorted(cc_list)]
    # 获取一个迭代器，这个迭代器会在future运行结束后返回future
    to_do_iter = asyncio.as_completed(to_do)
    for future in to_do_iter:
        # 迭代允许结束的 future    
        try:
            res = yield from future # 获取asyncio.Future 对象的结果（也可以调用future.result）
        except FetchError as exc:
            # 抛出的异常都包装在FetchError  对象里
            country_code = exc.country_code
            try:
                # 尝试从原来的异常 （__cause__）中获取错误消息
                error_msg = exc.__cause__.args[0]
            except IndexError:
                # 如果在原来的异常中找不到错误消息，使用所连接异常的类名作为错误消息
                error_msg = exc.__cause__.__class__.__name__
            if error_msg:
                msg = '*** Error for {}: {}'
                print(msg.format(country_code, error_msg))
            status = HTTPStatus.error
        else:
            status = res.status
        counter[status] += 1
    return counter

def download_many(cc_list):
    loop = asyncio.get_event_loop()
    coro = downloader_coro(cc_list)
    counts = loop.run_until_complete(coro)
    loop.close()
    return counts


if __name__ == '__main__':
    main(download_many)
</code></pre>
<p>由于协程发起的请求速度较快，为了防止向服务器发起太多的并发请求，使服务器过载，我们在download_coro 函数中创建一个asyncio.Semaphore 实例，然后把它传给download_one 函数。</p>
<blockquote>
<p><code>Semaphore</code> 对象维护着一个内部计数器，若在对象上调用 <code>.acquire()</code> 协程方法，计数器则递减；若在对象上调用 <code>.release()</code> 协程方法，计数器则递增。计数器的值是在初始化的时候设定。<br>
如果计数器大于0，那么调用 <code>.acquire()</code> 方法不会阻塞，如果计数器为0， <code>.acquire()</code> 方法会阻塞调用这个方法的协程，直到其他协程在同一个 Semaphore 对象上调用 <code>.release()</code> 方法，让计数器递增。</p>
</blockquote>
<p>在上边的代码中，我们并没有手动调用 .acquire() 或 .release() 方法，而是在 download_one 函数中 把 semaphore 当做上下文管理器使用:</p>
<pre><code class="language-python">with (yield from semaphore):
    image = yield from get_flag(cc)
</code></pre>
<p>这段代码保证，任何时候都不会有超过 MAX_CONCUR_REQ 个 get_flag 协程启动。</p>
<h3 id="使用-asyncioas_completed-函数">使用 asyncio.as_completed 函数</h3>
<p>因为要使用 yield from 获取 asyncio.as_completed 函数产出的future的结果，所以 as_completed 函数秩序在协程中调用。由于 download_many 要作为参数传给非协程的main 函数，我已我们添加了一个新的 downloader_coro 协程，让download_many 函数只用于设置事件循环。</p>
<h3 id="使用executor-对象防止阻塞事件循环">使用Executor 对象，防止阻塞事件循环</h3>
<p>现在我们回去看下上边<strong>关于电脑从不同存储介质读取数据的延迟情况图</strong>，有一个实时需要注意，那就是访问本地文件系统也会阻塞。<br>
上边的代码中，save_flag 函数阻塞了客户代码与 asyncio 事件循环公用的唯一线程，因此保存文件时，整个应用程序都会暂停。为了避免这个问题，可以使用事件循环对象的 run_in_executor 方法。</p>
<p>asyncio 的事件循环在后台维护着一个ThreadPoolExecutor 对象，我们可以调用 run_in_executor 方法，把可调用的对象发给它执行。<br>
下边是我们改动后的代码：</p>
<pre><code class="language-python">@asyncio.coroutine
def download_one(cc, semaphore):
    try:
        with (yield from semaphore):
            image = yield from get_flag(cc)
    except web.HTTPNotFound:
        status = HTTPStatus.not_found
        msg = 'not found'
    except Exception as exc:
        raise FetchError(cc) from exc
    else:
        # 这里是改动部分
        loop = asyncio.get_event_loop()  # 获取事件循环的引用
        loop.run_in_executor(None, save_flag, image, cc.lower() + '.gif')
        status = HTTPStatus.ok
        msg = 'ok'
    return Result(status, cc)

</code></pre>
<p>run_in_executor 方法的第一个参数是Executor 实例；如果设为None,使用事件循环的默认 ThreadPoolExecutor 实例。</p>
<h2 id="从回调到future到协程">从回调到future到协程</h2>
<p>在接触协程之前，我们可能对回调有一定的认识，那么和回调相比，协程有什么改进呢？</p>
<p>python中的回调代码样式：</p>
<pre><code class="language-python">def stage1(response1):
    request2 = step1(response1)
    api_call2(request2, stage2)
    
def stage2(response2):
    request3 = step3(response3)
    api_call3(request3, stage3)   

 def stage3(response3):
     step3(response3) 

api_call1(request1, stage1)
</code></pre>
<p>上边的代码的缺陷：</p>
<ul>
<li>容易出现回调地狱</li>
<li>代码难以阅读</li>
</ul>
<p>在这个问题上，协程能发挥很大的作用。如果换成协程和yield from 结果做的异步代码，代码示例如下：</p>
<pre><code class="language-python">@asyncio.coroutine
def three_stages(request1):
    response1 = yield from api_call1(request1)
    request2 = step1(response1)
    response2 = yield from api_call2(requests)
    request3 = step2(response2)
    response3 = yield from api_call3(requests)
    step3(response3)  
    
loop.create_task(three_stages(request1)
</code></pre>
<p>和之前的代码相比，这个代码就容易理解多了。如果异步调用 api_call1,api_call2,api_call3 会抛出异常，那么可以把相应的 yield from 表达式放在 try/except 块中处理异常。<br>
使用协程必须习惯 yield from 表达式，并且协程不能直接调用，必须显式的排定协程的执行时间，或在其他排定了执行时间的协程中使用yield from 表达式吧它激活。如果不使用 loop.create_task(three_stages(request1))，那么什么都不会发生。</p>
<p>下面我们用一个实际的例子来演示一下：</p>
<h4 id="每次下载发起多次请求">每次下载发起多次请求</h4>
<p>我们修改一下上边下载国旗的代码，使在下载国旗的同时还可以获取国家名称在保存图片的时候使用。<br>
我们使用协程和yield from 解决这个问题：</p>
<pre><code class="language-python">@asyncio.coroutine
def http_get(url):
    resp = yield from aiohttp.request('GET', url)
    if resp.status == 200:
        ctype = resp.headers.get('Content-type', '').lower()
        if 'json' in ctype or url.endswith('json'):
            data = yield from resp.json()
        else:
            data = yield from resp.read()
        return data
    elif resp.status == 404:
        raise web.HttpNotFound()
    else:
        raise aiohttp.HttpProcessionError(
            code=resp.status, message=resp.reason,
            headers=resp.headers)


@asyncio.coroutine
def get_country(cc):
    url = &quot;{}/{cc}/metadata.json&quot;.format(BASE_URL, cc=cc.lower())
    metadata = yield from http_get(url)
    return metadata['country']


@asyncio.coroutine
def get_flag(cc):
    url = &quot;{}/{cc}/{cc}.gif&quot;.format(BASE_URL, cc=cc.lower())
    return (yield from http_get(url))


@asyncio.coroutine
def download_one(cc, semaphore):
    try:
        with (yield from semaphore):
            image = yield from get_flag(cc)
        with (yield from semaphore):
            country = yield from get_country(cc)
    except web.HTTPNotFound:
        status = HTTPStatus.not_found
        msg = 'not found'
    except Exception as exc:
        raise FetchError(cc) from exc
    else:
        country = country.replace(' ', '_')
        filename = '{}--{}.gif'.format(country, cc)
        print(filename)
        loop = asyncio.get_event_loop()
        loop.run_in_executor(None, save_flag, image, filename)
        status = HTTPStatus.ok
        msg = 'ok'
    return Result(status, cc)
</code></pre>
<p>在这段代码中，我们在download_one 函数中分别在 semaphore 控制的两个with 块中调用get_flag 和 get_country，是为了节约时间。</p>
<p>get_flag 的return 语句在外层加上括号，是因为() 的运算符优先级高，会先执行括号内的yield from 语句 返回的结果。如果不加 会报句法错误<br>
加() ，相当于</p>
<pre><code class="language-python">image = yield from http_get(url)
return image
</code></pre>
<p>如果不加()，那么程序会在 yield from 处中断，交出控制权，这时使用return 会报句法错误。</p>
<h2 id="总结">总结</h2>
<p>这一篇我们讨论了：</p>
<ul>
<li>对比了一个多线程程序和asyncio版，说明了多线程和异步任务之间的关系</li>
<li>比较了 asyncio.Future 类 和 concurrent.futures.Future 类的区别</li>
<li>如何使用异步编程管理网络应用中的高并发</li>
<li>在异步编程中，与回调相比，协程显著提升性能的方式</li>
</ul>
<p>下一篇，我们将介绍如何使用asyncio包编写服务器</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore">class asyncio.Semaphore</a></li>
<li><a href="https://docs.python.org/3/library/asyncio.html">asyncio — Asynchronous I/O, event loop, coroutines and tasks</a></li>
<li><a href="http://blog.rainy.im/2016/03/10/how-the-heck-does-async-await-work-in-python-3-5/">【译】 Python 3.5 协程究竟是个啥</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0492/">PEP 0492 Coroutines with async and await syntax</a></li>
<li><a href="https://juejin.im/entry/57b138e1165abd00542ab1fa">Python 之 asyncio</a></li>
<li><a href="https://python.freelycode.com/contribution/detail/515">我所不能理解的Python中的Asyncio模块</a></li>
</ul>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="4"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python并发 1：使用 futures 处理并发]]></title>
        <id>http://blog.gusibi.site/post/python-concurrency-with-futures/</id>
        <link href="http://blog.gusibi.site/post/python-concurrency-with-futures/">
        </link>
        <updated>2017-06-17T06:01:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>作为Python程序员，平时很少使用并发编程，偶尔使用也只需要派生出一批独立的线程，然后放到队列中，批量执行。所以，不夸张的说，虽然我知道线程、进程、并行、并发的概念，但每次使用的时候可能还需要再打开文档回顾一下。</p>
</blockquote>
<p>现在这一篇还是 <em>《流畅的python》读书笔记</em>，译者在这里把future 翻译为“期物”，我觉得不太合适，既然future不能找到一个合适的词汇，暂时还是直接使用 future 吧。</p>
<h2 id="concurrentfutures">concurrent.futures</h2>
<p>future 是一种对象，表示异步执行的操作。这个概念是 concurrent.futures模块和asyncio包的基础。</p>
<p>concurrent.futures 模块是Python3.2 引入的，对于Python2x 版本，Python2.5 以上的版本可以安装 futures 包来使用这个模块。</p>
<p>HUGOMORE42</p>
<p>从Python3.4起，标准库中有两个为Future的类：concurrent.futures.Future 和 asyncio.Future。这两个类作用相同：两个Future类的实例都表示可能已经完成或未完成的延迟计算。</p>
<p>Future 封装待完成的操作，可放入队列，完成的状态可以查询，得到结果（或抛出异常）后可以获取结果（或异常）。</p>
<p>我们知道，如果程序中包含I/O操作，程序会有很高的延迟，CPU会处于等待状态，这时如果我们不使用并发会浪费很多时间。</p>
<h3 id="示例">示例</h3>
<p>我们先举个例子：</p>
<p>下边是有两段代码，主要功能都是从网上下载人口前20的国际的国旗：<br>
第一段代码(flagss.py)是依序下载：下载完一个图片后保存到硬盘，然后请求下一张图片；<br>
第二段代码(flagss_threadpool.py)使用 concurrent.futures 模块，批量下载10张图片。</p>
<p>运行分别运行两段代码3次，结果如下：</p>
<p>images.py 的结果如下</p>
<pre><code class="language-bash">$ python flags.py
BD BR CD CN DE EG ET FR ID IN IR JP MX NG PH PK RU TR US VN 
20 flags downloaded in 6.18s

$ python flags.py
BD BR CD CN DE EG ET FR ID IN IR JP MX NG PH PK RU TR US VN 
20 flags downloaded in 5.67s

$ python flags.py
BD BR CD CN DE EG ET FR ID IN IR JP MX NG PH PK RU TR US VN 
20 flags downloaded in 6.55s

</code></pre>
<blockquote>
<p>可以看到，依次下载10张图片，平均需要6秒</p>
</blockquote>
<p>flags_threadpool.py 的结果如下：</p>
<pre><code class="language-bash">$ python flags_threadpool.py
NG EG VN BR JP FR DE CN TR BD PK MX PH US RU IN ET CD ID IR 
20 flags downloaded in 2.12s

$ python flags_threadpool.py
BR IN DE FR TR RU EG NG JP CN ID ET PK MX PH US IR CD VN BD 
20 flags downloaded in 2.23s

$ python flags_threadpool.py
CN BR DE ID NG RU TR IN MX US IR BD VN CD PH EG FR JP ET PK 
20 flags downloaded in 1.18s

</code></pre>
<blockquote>
<p>使用 concurrent.futures 后，下载10张图片平均需要2秒</p>
</blockquote>
<p>通过上边的结果我们发现使用 concurrent.futures 后，下载效率大幅提升。</p>
<p>下边我们来看下这两段代码。</p>
<p>同步执行的代码flags.py：</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

import os
import time
import sys

import requests  # &lt;1&gt;

POP20_CC = ('CN IN US ID BR PK NG BD RU JP '
            'MX PH VN ET EG DE IR TR CD FR').split()  # &lt;2&gt;

BASE_URL = 'http://flupy.org/data/flags'  # &lt;3&gt;

DEST_DIR = 'images/'  # &lt;4&gt;


# 保存图片
def save_flag(img, filename):  # &lt;5&gt;
    path = os.path.join(DEST_DIR, filename)
    with open(path, 'wb') as fp:
        fp.write(img)


# 下载图片
def get_flag(cc):  # &lt;6&gt;
    url = '{}/{cc}/{cc}.gif'.format(BASE_URL, cc=cc.lower())
    # 这里我们使用 requests 包，需要先通过pypi安装
    resp = requests.get(url)
    return resp.content


# 显示一个字符串，然后刷新sys.stdout,目的是在一行消息中看到进度
def show(text):  # &lt;7&gt;
    print(text, end=' ')
    sys.stdout.flush()


def download_many(cc_list):  # &lt;8&gt;
    for cc in sorted(cc_list):  # &lt;9&gt;
        image = get_flag(cc)
        show(cc)
        save_flag(image, cc.lower() + '.gif')

    return len(cc_list)


def main(download_many):  # &lt;10&gt;
    t0 = time.time()
    count = download_many(POP20_CC)
    elapsed = time.time() - t0
    msg = '\n{} flags downloaded in {:.2f}s'
    print(msg.format(count, elapsed))


if __name__ == '__main__':
    main(download_many)  # &lt;11&gt;
</code></pre>
<p>使用 concurrent.future 并发的代码 flags_threadpool.py</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

from concurrent import futures

from flags import save_flag, get_flag, show, main

# 设定ThreadPoolExecutor 类最多使用几个线程
MAX_WORKERS = 20


# 下载一个图片
def download_one(cc):
    image = get_flag(cc)
    show(cc)
    save_flag(image, cc.lower() + '.gif')
    return cc


def download_many(cc_list):
    # 设定工作的线程数量，使用约需的最大值与要处理的数量直接较小的那个值，以免创建多余的线程
    workers = min(MAX_WORKERS, len(cc_list))  # &lt;4&gt;
    # 使用工作的线程数实例化ThreadPoolExecutor类；
    # executor.__exit__方法会调用executor.shutdown(wait=True)方法，
    # 它会在所有线程都执行完毕前阻塞线程
    with futures.ThreadPoolExecutor(workers) as executor:  # &lt;5&gt;
        # map 与内置map方法类似，不过download_one 函数会在多个线程中并发调用；
        # map 方法返回一个生成器，因此可以迭代，
        # 迭代器的__next__方法调用各个Future 的 result 方法
        res = executor.map(download_one, sorted(cc_list))

    # 返回获取的结果数量；如果有现成抛出异常，会在这里抛出
    # 这与隐式调用next() 函数从迭代器中获取相应的返回值一样。
    return len(list(res))  # &lt;7&gt;
    return len(results)


if __name__ == '__main__':
    main(download_many)
</code></pre>
<p>上边的代码，我们对 concurrent.futures 的使用有了大致的了解。但 future 在哪里呢，我们并没有看到。</p>
<p>Future 是 concurrent.futures 模块和 asyncio 包的重要组件。从Python3.4起，标准库中有两个为Future的类：concurrent.futures.Future 和 asyncio.Future。这两个Future作用相同。</p>
<p>Future 封装待完成的操作，可放入队列，完成的状态可以查询，得到结果（或抛出异常）后可以获取结果（或异常）。<br>
Future 表示终将发生的事情，而确定某件事情会发生的唯一方式是执行的时间已经排定。因此只有把某件事交给 concurrent.futures.Executor 子类处理时，才会创建 concurrent.futures.Future 实例。</p>
<blockquote>
<p>例如，调用Executor.submit() 方法的参数是一个可调用的对象，调用这个方法后会为传入的可调用对象排期，并返回一个Future。</p>
</blockquote>
<p>Future 有三个重要的方法：</p>
<ul>
<li>.done()  返回布尔值，表示Future 是否已经执行</li>
<li>.add_done_callback() 这个方法只有一个参数，类型是可调用对象，Future运行结束后会回调这个对象。</li>
<li>.result() 如果 Future 运行结束后调用result(), 会返回可调用对象的结果或者抛出执行可调用对象时抛出的异常，如果是 Future 没有运行结束时调用 f.result()方法，这时会阻塞调用方所在的线程，直到有结果返回。此时result 方法还可以接收 timeout 参数，如果在指定的时间内 Future 没有运行完毕，会抛出 TimeoutError 异常。</li>
</ul>
<blockquote>
<p>asyncio.Future.result 方法不支持设定超时时间，如果想获取 Future 的结果，可以使用 yield from 结构</p>
</blockquote>
<p>为了加深对 Future 的理解，现在我们修改下 flags_threadpool.py download_many 函数。</p>
<pre><code class="language-python">def download_many(cc_list):
    cc_list = cc_list[:5]
    with futures.ThreadPoolExecutor(max_workers=3) as executor:
        to_do = []
        # 用于创建并排定 future
        for cc in sorted(cc_list):
            # submit 方法排定可调用对象的执行时间然后返回一个future，表示这个待执行的操作
            future = executor.submit(download_one, cc)
            to_do.append(future)
            msg = 'Scheduled for {}: {}'
            print(msg.format(cc, future))
        
        results = []
        # 用于获取future 结果
        # as_completed 接收一个future 列表，返回值是一个迭代器，在运行结束后产出future
        for future in futures.as_completed(to_do):
            res = future.result()
            msg = '{} result: {!r}'
            print(msg.format(future, res))
            results.append(res)
    
    return len(results)

</code></pre>
<p>现在执行代码，运行结果如下：</p>
<pre><code class="language-python">Scheduled for BR: &lt;Future at 0x10d43cb70 state=running&gt;
Scheduled for CN: &lt;Future at 0x10d4434a8 state=running&gt;
Scheduled for ID: &lt;Future at 0x10d443ef0 state=running&gt;
Scheduled for IN: &lt;Future at 0x10d443978 state=pending&gt;
Scheduled for US: &lt;Future at 0x10d44f748 state=pending&gt;
BR &lt;Future at 0x10d43cb70 state=finished returned str&gt; result: 'BR'
IN &lt;Future at 0x10d443978 state=finished returned str&gt; result: 'IN'
CN &lt;Future at 0x10d4434a8 state=finished returned str&gt; result: 'CN'
ID &lt;Future at 0x10d443ef0 state=finished returned str&gt; result: 'ID'
US &lt;Future at 0x10d44f748 state=finished returned str&gt; result: 'US'

5 flags downloaded in 1.47s
</code></pre>
<p>从结果可以看到，future 的 repr() 方法会显示状态，前三个 是running 是因为我们设定了三个进程，所以后两个是pendding 状态。如果将max_workers参数设置为5，结果就会全都是 running。</p>
<p>虽然，使用 future 的脚步比第一个脚本的执行速度快了很多，但由于受GIL的限制，下载并不是并行的。</p>
<h2 id="gilglobal-interpreter-lock和阻塞型io">GIL（Global Interpreter Lock）和阻塞型I/O</h2>
<p>CPython 解释器本身不是线程安全的，因此解释器被一个全局解释器锁保护着，它确保任何时候都只有一个Python线程执行。</p>
<p>然而，Python标准库中所有执行阻塞型I/O操作的函数，在等待系统返回结果时都会释放GIL。这意味着I/O密集型Python程序能从中受益：一个Python线程等待网络响应时，阻塞型I/O函数会释放GIL，再运行一个线程。</p>
<blockquote>
<p>Python 标准库中所有阻塞型I/O函数都会释放GIL，允许其他线程运行。time.sleep()函数也会释放GIL。</p>
</blockquote>
<p><strong>那么如何在CPU密集型作业中使用 concurrent.futures 模块绕开GIL呢？</strong></p>
<p>答案是 使用 <em>ProcessPoolExecutor</em> 类。</p>
<p>使用这个模块可以在做CPU密集型工作是绕开GIL，利用所有可用核心。</p>
<p>ThreadPoolExecutor 和 ProcessPoolExecutor 都实现了通用的 Executor 接口，所以，我们可以轻松的将基于线程的方案改为使用进程的方案。</p>
<p>比如下边这样：</p>
<pre><code class="language-python">def download_many(cc_list):
    workers = min(MAX_WORKERS, len(cc_list))
    with futures.ThreadPoolExecutor(workers) as executor:
        pass

# 改成
def download_many(cc_list):
    with futures.ProcessPoolExecutor() as executor:
        pass
</code></pre>
<p>需要注意的是，ThreadPoolExecutor 需要指定 max_workers 参数，<br>
而 ProcessPoolExecutor 的这个参数是可选的默认值是 os.cup_count()(计算机cpu核心数)。</p>
<p>ProcessPoolExecutor 的价值主要体现在CPU密集型作业上。</p>
<blockquote>
<p>使用Python处理CPU密集型工作，应该试试PyPy，会有更高的执行速度。</p>
</blockquote>
<p>现在我们回到开始的代码，看下 Executor.map 函数。</p>
<p>文档中对map函数的介绍如下。</p>
<blockquote>
<p>map(func, *iterables, timeout=None, chunksize=1)</p>
</blockquote>
<blockquote>
<p>等同于 map(func, *iterables)，不同的是 func 是异步执行的，并且可以同时进行对 func 的多个调用。如果调用 <strong>next</strong>()，则返回的迭代器提出 concurrent.futures.TimeoutError，并且在从 Executor.map() 的原始调用起的 timeout 秒之后结果不可用。 timeout 可以是int或float。如果未指定 timeout 或 None，则等待时间没有限制。如果调用引发异常，那么当从迭代器检索其值时，将引发异常。当使用 ProcessPoolExecutor 时，此方法将 iterables 分成多个块，它作为单独的任务提交到进程池。这些块的（近似）大小可以通过将 chunksize 设置为正整数来指定。对于非常长的迭代，与默认大小1相比，使用大值 chunksize 可以显着提高性能。使用 ThreadPoolExecutor，chunksize 没有效果。</p>
</blockquote>
<blockquote>
<p>在 3.5 版更改: 添加了 chunksize 参数。</p>
</blockquote>
<p>Executor.map 还有个特性比较有用，那就是这个函数返回结果的顺序于调用开始的顺序是一致的。如果第一个调用称其结果用时10秒，其他调用只用1秒，代码会阻塞10秒，获取map方法返回的生成器产出的第一个结果。</p>
<p>如果不是获取到所有结果再处理，通常会使用 Executor.submit + Executor.as_completed 组合使用的方案。</p>
<p>Executor.submit + Executor.as_completed 这个组合更灵活，因为submit方法能处理不同的可调用对象和参数，而executor.map 只能处理参数不同的同一个可调用对象。此外，传给futures.as_completed 函数的期物集合可以来自不同的 Executor 实例。</p>
<h2 id="future-的异常处理">future 的异常处理</h2>
<p>futures 有三个异常类：</p>
<ul>
<li>exception concurrent.futures.CancelledError  在future取消时引发。</li>
<li>exception concurrent.futures.TimeoutError 在future操作超过给定超时时触发。</li>
<li>exception concurrent.futures.process.BrokenProcessPool<br>
从 RuntimeError 派生，当 ProcessPoolExecutor 的一个工人以非干净方式终止（例如，如果它从外部被杀死）时，引发此异常类。</li>
</ul>
<p>我们先看一下，future.result() 出现异常的处理情况。代码改动如下：</p>
<pre><code class="language-python">
# 将第一个 CN 改为CN1 也可以是其它任意错误代码
POP20_CC = ('CN1 IN US ID BR PK NG BD RU JP '
            'MX PH VN ET EG DE IR TR CD FR').split()


def get_flag(cc):  # &lt;6&gt;
    url = '{}/{cc}/{cc}.gif'.format(BASE_URL, cc=cc.lower())
    resp = requests.get(url)
    if resp.status_code != 200:  # &lt;1&gt;
        resp.raise_for_status() # 如果不是200 抛出异常
    return resp.content

def download_one(cc):
    try:
        image = get_flag(cc)
    # 捕获 requests.exceptions.HTTPError
    except requests.exceptions.HTTPError as exc:  #
        # 如果有异常 直接抛出
        raise
    else:
        save_flag(image, cc.lower() + '.gif')
    return cc

</code></pre>
<p>现在执行代码，会发现 download_one 中的异常传递到了download_many 中,并且导致抛出了异常，未执行完的其它future 也都中断。</p>
<p>为了能保证其它没有错误的future 可以正常执行，这里我们需要对future.result() 做异常处理。</p>
<p>改动结果如下：</p>
<pre><code class="language-python">def download_many(cc_list):
    cc_list = cc_list[:5]
    with futures.ThreadPoolExecutor(max_workers=20) as executor:
        to_do_map = {}
        for cc in sorted(cc_list):
            future = executor.submit(download_one, cc)
            to_do_map[future] = cc
            msg = 'Scheduled for {}: {}'
            print(msg.format(cc, future))

        results = []
        for future in futures.as_completed(to_do_map):
            try:
                res = future.result()
            except requests.exceptions.HTTPError as exc:
                # 处理可能出现的异常
                error_msg = '{} result {}'.format(cc, exc)
            else:
                error_msg = ''
            if error_msg:
                cc = to_do_map[future]  # &lt;16&gt;
                print('*** Error for {}: {}'.format(cc, error_msg))
            else:
                msg = '{} result: {!r}'
                print(msg.format(future, res))
                results.append(res)

    return len(results)

</code></pre>
<p>这里我们用到了一个对 futures.as_completed 函数特别有用的惯用法：构建一个字典，把各个future映射到其他数据（future运行结束后可能用的）上。这样，虽然 future生成的顺序虽然已经乱了，依然便于使用结果做后续处理。</p>
<p>一篇写完了没有总结总感觉少点什么，所以。</p>
<h2 id="总结">总结</h2>
<p>Python 自 0.9.8 版就支持线程了，concurrent.futures 只不过是使用线程的最新方式。</p>
<p>futures.ThreadPoolExecutor 类封装了 threading 模块的组件，使使用线程变得更加方便。</p>
<p>顺便再推荐一下 《流畅的python》，绝对值得一下。</p>
<p>下一篇笔记应该是使用 asyncio 处理并发。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python协程3：用仿真实验学习协程]]></title>
        <id>http://blog.gusibi.site/post/python-coroutine-3/</id>
        <link href="http://blog.gusibi.site/post/python-coroutine-3/">
        </link>
        <updated>2017-06-15T03:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>前两篇我们已经介绍了<a href="https://gusibi.github.io/post/python-coroutine-1-yield/">python 协程的使用</a>和<a href="https://gusibi.github.io/post/python-coroutine-yield-from/">yield from 的原理</a>，这一篇，我们用一个例子来揭示如何使用协程在单线程中管理并发活动。</p>
<h2 id="什么是离散事件仿真">什么是离散事件仿真</h2>
<p>Wiki上的定义是：</p>
<blockquote>
<p>离散事件仿真将系统随时间的变化抽象成一系列的离散时间点上的事件，通过按照事件时间顺序处理事件来演进，是一种事件驱动的仿真世界观。离散事件仿真将系统的变化看做一个事件，因此系统任何的变化都只能是通过处理相应的事件来实现，在两个相邻的事件之间，系统状态维持前一个事件发生后的状态不变。</p>
</blockquote>
<p>人话说就是一种把系统建模成一系列事件的仿真系统。在离散事件仿真中，仿真“钟”向前推进的量不是固定的，而是直接推进到下一个事件模型的模拟时间。</p>
<p>假设我们抽象模拟出租车的运营过程，其中一个事件是乘客上车，下一个事件则是乘客下车。不管乘客做了5分钟还是50分钟，一旦下车，仿真钟就会更新，指向此次运营的结束时间。</p>
<p>事件？是不是想到了协程！</p>
<p>协程恰好为实现离散事件仿真提供了合理的抽象。</p>
<p>HUGOMORE42</p>
<blockquote>
<p>第一门面向对象的语音 Simula 引入协程这个概念就是为了支持仿真。<br>
Simpy 是一个实现离散事件仿真的Python包，通过一个协程表示离散事件仿真系统的各个进程。</p>
</blockquote>
<h2 id="出租车对运营仿真">出租车对运营仿真</h2>
<p>仿真程序会创建几辆出租车，每辆出租车会拉几个乘客，然后回家。出租车会首先驶离车库，四处徘徊，寻找乘客；拉到乘客后，行程开始；乘客下车后，继续四处徘徊。</p>
<p>徘徊和行程所用的时间使用指数分布生成，我们将时间设为分钟数，以便显示清楚。</p>
<p>完整代码如下：(taxi_sim.py)</p>
<pre><code class="language-python">
#! -*- coding: utf-8 -*-
import random
import collections
import queue
import argparse

DEFAULT_NUMBER_OF_TAXIS = 3
DEFAULT_END_TIME = 180
SEARCH_DURATION = 5
TRIP_DURATION = 20
DEPARTURE_INTERAVAL = 5


# time 是事件发生的仿真时间，proc 是出租车进程实例的编号，action是描述活动的字符串
Event = collections.namedtuple('Event', 'time proc action')

# 开始 出租车进程
# 每辆出租车调用一次taxi_process 函数，创建一个生成器对象，表示各辆出租车的运营过程。
def taxi_process(ident, trips, start_time=0):
    '''
    每次状态变化时向创建事件，把控制权交给仿真器
    :param ident: 出租车编号
    :param trips: 出租车回家前的行程数量
    :param start_time: 离开车库的时间
    :return: 
    '''
    time = yield Event(start_time, ident, 'leave garage') # 产出的第一个Event
    for i in range(trips):  # 每次行程都会执行一遍这个代码块
        # 产出一个Event实例，表示拉到了乘客 协程在这里暂停 等待下一次send() 激活
        time = yield Event(time, ident, 'pick up passenger')
         # 产出一个Event实例，表示乘客下车 协程在这里暂停 等待下一次send() 激活
        time = yield Event(time, ident, 'drop off passenger')
    # 指定的行程数量完成后，for 循环结束，最后产出 'going home' 事件。协程最后一次暂停
    yield Event(time, ident, 'going home')
    # 协程执行到最后 抛出StopIteration 异常


def compute_duration(previous_action):
    '''使用指数分布计算操作的耗时'''
    if previous_action in ['leave garage', 'drop off passenger']:
        # 新状态是四处徘徊
        interval = SEARCH_DURATION
    elif previous_action == 'pick up passenger':
        # 新状态是开始行程
        interval = TRIP_DURATION
    elif previous_action == 'going home':
        interval = 1
    else:
        raise ValueError('Unkonw previous_action: %s' % previous_action)
    return int(random.expovariate(1/interval)) + 1


# 开始仿真
class Simulator:

    def __init__(self, procs_map):
        self.events = queue.PriorityQueue()  # 带优先级的队列 会按时间正向排序
        self.procs = dict(procs_map) # 从获取的procs_map 参数中创建本地副本，为了不修改用户传入的值

    def run(self, end_time):
        '''
        调度并显示事件，直到时间结束
        :param end_time:  结束时间 只需要指定一个参数
        :return: 
        '''
        # 调度各辆出租车的第一个事件
        for iden, proc in sorted(self.procs.items()):
            first_event = next(proc)  # 预激协程 并产出一个 Event 对象
            self.events.put(first_event)  # 把各个事件加到self.events 属性表示的 PriorityQueue对象中

        # 此次仿真的主循环
        sim_time = 0  # 把 sim_time 归0
        while sim_time &lt; end_time:
            if self.events.empty(): # 事件全部完成后退出循环
                print('*** end of event ***')
                break
            current_event = self.events.get() # 获取优先级最高(time 属性最小)的事件
            sim_time, proc_id, previous_action = current_event # 更新 sim_time
            print('taxi:', proc_id, proc_id * '  ', current_event)
            active_proc = self.procs[proc_id]  # 从self.procs 字典中获取表示当前活动的出租车协程
            next_time = sim_time + compute_duration(previous_action)
            try:
                next_event = active_proc.send(next_time)  # 把计算得到的时间发送给出租车协程。协程会产出下一个事件，或者抛出 StopIteration
            except StopIteration:
                del self.procs[proc_id]  # 如果有异常 表示已经退出， 删除这个协程
            else:
                self.events.put(next_event)  # 如果没有异常，把next_event 加入到队列
        else:  # 如果超时 则走到这里
            msg = '*** end of simulation time: {} event pendding ***'
            print(msg.format(self.events.qsize()))



def main(end_time=DEFAULT_END_TIME, num_taxis=DEFAULT_NUMBER_OF_TAXIS,
         seed=None):
    '''初始化随机生成器，构建过程，运行仿真程序'''
    if seed is not None:
        random.seed(seed)  # 获取可复现的结果
    # 构建taxis 字典。值是三个参数不同的生成器对象。
    taxis = {i: taxi_process(i, (i + 1) * 2, i*DEPARTURE_INTERAVAL)
             for i in range(num_taxis)}
    sim = Simulator(taxis)
    sim.run(end_time)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Taxi fleet simulator.')
    parser.add_argument('-e', '--end-time', type=int,
                        default=DEFAULT_END_TIME,
                        help='simulation end time; default=%s' % DEFAULT_END_TIME)
    parser.add_argument('-t', '--taxis', type=int,
                        default=DEFAULT_NUMBER_OF_TAXIS,
                        help='number of taxis running; default = %s' % DEFAULT_NUMBER_OF_TAXIS)
    parser.add_argument('-s', '--seed', type=int, default=None,
                        help='random generator seed (for testing)')

    args = parser.parse_args()
    main(args.end_time, args.taxis, args.seed)

</code></pre>
<p>运行程序，</p>
<pre><code class="language-sh"># -s 3 参数设置随机生成器的种子，以便调试的时候随机数不变，输出相同的结果
python taxi_sim.py -s 3
</code></pre>
<p>输出结果如下图</p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/3237874125-5942771d7ee84_articlex.jpeg" alt="" loading="lazy"></figure>
<p>从结果我们可以看出，3辆出租车的行程是交叉进行的。不同颜色的箭头代表不同出租车从乘客上车到乘客下车的跨度。</p>
<p>从结果可以看出：</p>
<ul>
<li>出租车每5隔分钟从车库出发</li>
<li>0 号出租车2分钟后拉到乘客（time=2），1号出租车3分钟后拉到乘客（time=8），2号出租车5分钟后拉到乘客（time=15）</li>
<li>0 号出租车拉了两个乘客</li>
<li>1 号出租车拉了4个乘客</li>
<li>2 号出租车拉了6个乘客</li>
<li>在此次示中，所有排定的事件都在默认的仿真时间内完成</li>
</ul>
<p>我们先在控制台中调用taxi_process 函数，自己驾驶一辆出租车，示例如下：</p>
<pre><code class="language-python">In [1]: from taxi_sim import taxi_process
# 创建一个生成器，表示一辆出租车 编号是13 从t=0 开始，有两次行程
In [2]: taxi = taxi_process(ident=13, trips=2, start_time=0) 

In [3]: next(taxi) # 预激协程
Out[3]: Event(time=0, proc=13, action='leave garage')

# 发送当前时间 在控制台中，变量_绑定的是前一个结果
# _.time + 7 是 0 + 7
In [4]: taxi.send(_.time+7) 
Out[4]: Event(time=7, proc=13, action='pick up passenger') # 这个事件有for循环在第一个行程的开头产出

# 发送_.time+12 表示这个乘客用时12分钟
In [5]: taxi.send(_.time+12)
Out[5]: Event(time=19, proc=13, action='drop off passenger')

# 徘徊了29 分钟
In [6]: taxi.send(_.time+29)
Out[6]: Event(time=48, proc=13, action='pick up passenger')

# 乘坐了50分钟
In [7]: taxi.send(_.time+50)
Out[7]: Event(time=98, proc=13, action='drop off passenger')

# 两次行程结束 for 循环结束产出'going home'
In [8]: taxi.send(_.time+5)
Out[8]: Event(time=103, proc=13, action='going home')

# 再发送值，会执行到末尾 协程返回后 抛出 StopIteration 异常
In [9]: taxi.send(_.time+10)
---------------------------------------------------------------------------
StopIteration                            Traceback (most recent call last)
&lt;ipython-input-9-d775cc8cc079&gt; in &lt;module&gt;()
----&gt; 1 taxi.send(_.time+10)

StopIteration:
</code></pre>
<p>在这个示例中，我们用控制台模拟仿真主循环。从taxi协程中产出的Event实例中获取 .time 属性，随意加一个数，然后调用send()方法发送两数之和，重新激活协程。</p>
<p>在taxi_sim.py 代码中，出租车协程由 Simulator.run 方法中的主循环驱动。</p>
<p>Simulator 类的主要数据结构如下：</p>
<p>self.events</p>
<pre><code>PriorityQueue 对象，保存Event实例。元素可以放进PriorityQueue对象中，然后按 item[0](对象的time 属性)依序取出（按从小到大）。
</code></pre>
<p>self.procs</p>
<pre><code>一个字典，把出租车的编号映射到仿真过程的进程（表示出租车生成器的对象）。这个属性会绑定前面所示的taxis字典副本。
</code></pre>
<blockquote>
<p>优先队列是离散事件仿真系统的基础构件：创建事件的顺序不定，放入这种队列后，可以按各个事件排定的顺序取出。</p>
</blockquote>
<p>比如，我们把两个事件放入队列：</p>
<pre><code class="language-python">Event(time=14, proc=0, action='pick up passenger')
Event(time=10, proc=1, action='pick up passenger')
</code></pre>
<p>这个意思是 0号出租车14分拉到一个乘客，1号出租车10分拉到一个乘客。但是主循环获取的第一个事件将是</p>
<p>Event(time=10, proc=1, action='pick up passenger')</p>
<p>下面我们分析一下仿真系统的主算法--Simulator.run 方法。</p>
<ol>
<li>迭代表示各辆出租车的进程</li>
</ol>
<ul>
<li>在各辆出租车上调用next()函数，预激协程。</li>
<li>把各个事件放入Simulator类的self.events属性中。</li>
</ul>
<ol start="2">
<li>满足 sim_time &lt; end_time 条件是，运行仿真系统的主循环。</li>
</ol>
<ul>
<li>检查self.events 属性是否为空；如果为空，跳出循环</li>
<li>从self.events 中获取当前事件</li>
<li>显示获取的Event对象</li>
<li>获取curent_event 的time 属性，更新仿真时间</li>
<li>把时间发送给current_event 的pro属性标识的协程，产出下一个事件</li>
<li>把next_event 添加到self.events 队列中，排定 next_event</li>
</ul>
<p>我们代码中 while 循环有一个else 语句，仿真系统到达结束时间后，代码会执行else中的语句。</p>
<p>这个示例主要是想说明如何在一个主循环中处理事件，以及如何通过发送数据驱动协程，同时解释了如何使用生成器代替线程和回调，实现并发。</p>
<blockquote>
<p>并发： 多个任务交替执行</p>
<p>并行： 多个任务同时执行</p>
</blockquote>
<p>到这里 Python协程系列的三篇文章就结束了。</p>
<blockquote>
<p>我们会看到，协程做面向事件编程时，会不断把控制权让步给主循环，激活并向前运行其他协程，从而执行各个并发活动。</p>
<p>协程一种协作式多任务：协程显式自主的把控制权让步给中央调度程序。</p>
<p>多线程实现的是抢占式多任务。调度程序可以在任何时刻暂停线程，把控制权交给其他线程</p>
</blockquote>
<h2 id="前两篇文章">前两篇文章</h2>
<p><a href="https://gusibi.github.io/post/python-coroutine-1-yield/">python 协程1：协程10分钟入门</a><br>
<a href="https://gusibi.github.io/post/python-coroutine-yield-from/">python 协程2：yield from 从入门到精通</a></p>
<p>再次说明一下，这几篇是《流畅的python》一书的读书笔记，作者提供了大量的扩展阅读，有兴趣的可以看一下。</p>
<h2 id="扩展阅读">扩展阅读</h2>
<ul>
<li><a href="http://www.dabeaz.com/generators/">Generator Tricks for Systems Programmers</a></li>
<li><a href="http://www.dabeaz.com/coroutines/">A Curious Course on Coroutines and Concurrency</a></li>
<li><a href="http://www.dabeaz.com/finalgenerator/">Generators: The Final Frontier</a></li>
<li><a href="http://seriously.dontusethiscode.com/2013/05/01/greedy-coroutine.html">greedy algorithm with coroutines</a></li>
<li>BinaryTree类、一个简单的XML解析器、和一个任务调度器<a href="http://www.cosc.canterbury.ac.nz/greg.ewing/python/yield-from/yield_from.html">Proposal for a yield from statement for Python</a></li>
<li><a href="http://www.effectivepython.com/2015/03/10/consider-coroutines-to-run-many-functions-concurrently/">考虑用协程操作多个函数</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python协程2：yield from 从入门到精通]]></title>
        <id>http://blog.gusibi.site/post/python-coroutine-2/</id>
        <link href="http://blog.gusibi.site/post/python-coroutine-2/">
        </link>
        <updated>2017-06-14T01:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>上一篇<a href="https://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751983&amp;idx=1&amp;sn=e4c093c6e5d6e4e8281d76db7c67eb23">python协程1：yield的使用</a>介绍了：</p>
<ul>
<li>生成器作为协程使用时的行为和状态</li>
<li>使用装饰器预激协程</li>
<li>调用方如何使用生成器对象的 .throw(...) 和 .close() 方法控制协程</li>
</ul>
<p>这一篇将介绍：</p>
<ul>
<li>协程终止时如何返回值</li>
<li>yield新句法的用途和语义</li>
</ul>
<p>HUGOMORE42</p>
<h2 id="让协程返回值">让协程返回值</h2>
<p>先看一个例子：<br>
这段代码会返回最终均值的结果，每次激活协程时不会产出移动平均值，而是最后一次返回。</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

from collections import namedtuple

Result = namedtuple('Result', 'count average')


def averager():
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield
        if term is None:
            break  # 为了返回值，协程必须正常终止；这里是退出条件
        total += term
        count += 1
        average = total/count
    # 返回一个namedtuple，包含count和average两个字段。在python3.3前，如果生成器返回值，会报错
    return Result(count, average)
</code></pre>
<p>我们调用这段代码，结果如下</p>
<pre><code class="language-python">&gt;&gt;&gt; coro_avg = averager()
&gt;&gt;&gt; next(coro_avg)
&gt;&gt;&gt; coro_avg.send(20) # 并没有返回值
&gt;&gt;&gt; coro_avg.send(30)
&gt;&gt;&gt; coro_avg.send(40)
&gt;&gt;&gt; coro_avg.send(None) # 发送None终止循环，导致协程结束。生成器对象会抛出StopIteration异常。异常对象的value属性保存着返回值。
Traceback (most recent call last):
   ...
StopIteration: Result(count=3, average=30)
</code></pre>
<blockquote>
<p>return 表达式的值会传给调用方，<em>赋值给StopIteration</em> 异常的一个属性。这样做虽然看着别扭，但为了保留生成器对象耗尽时抛出StopIteration异常的行为，也可以理解。</p>
</blockquote>
<p>如果我们想获取协程的返回值，可以这么操作：</p>
<pre><code class="language-python">&gt;&gt;&gt; coro_avg = averager()
&gt;&gt;&gt; next(coro_avg)
&gt;&gt;&gt; coro_avg.send(20) # 并没有返回值
&gt;&gt;&gt; coro_avg.send(30)
&gt;&gt;&gt; coro_avg.send(40)
&gt;&gt;&gt; try:
...     coro_avg.send(None)
... except StopIteration as exc:
...     result = exc.value
...
&gt;&gt;&gt; result
Result(count=3, average=30)

</code></pre>
<p>看到这我们会说，这是什么鬼，为什么获取返回值要绕这么一大圈，就没有简单的方法吗？</p>
<p>有的，那就是 <em>yield from</em></p>
<p>yield from 结果会在内部自动捕获StopIteration 异常。这种处理方式与 for 循环处理StopIteration异常的方式一样。<br>
对于yield from 结构来说，解释器不仅会捕获StopIteration异常，还会把value属性的值变成yield from 表达式的值。</p>
<blockquote>
<p>在函数外部不能使用yield from（yield也不行）。</p>
</blockquote>
<p>既然我们提到了 <em>yield from</em> 那yield from 是什么呢？</p>
<h2 id="yield-from">yield from</h2>
<p>yield from 是 Python3.3 后新加的语言结构。和其他语言的await关键字类似，它表示：*在生成器 gen 中使用 yield from subgen()时，subgen 会获得控制权，把产出的值传个gen的调用方，即调用方可以直接控制subgen。于此同时，gen会阻塞，等待subgen终止。</p>
<p>yield from 可用于简化for循环中的yield表达式。</p>
<p>例如：</p>
<pre><code class="language-python">def gen():
    for c in 'AB':
        yield c
    for i in range(1, 3):
        yield i

list(gen())
['A', 'B', '1', '2']
</code></pre>
<p>可以改写为：</p>
<pre><code class="language-python">def gen():
    yield from 'AB'
    yield from range(1, 3)
    

list(gen())
['A', 'B', '1', '2']
</code></pre>
<p>下面来看一个复杂点的例子：(来自Python cookbook 3 ，github源码地址 <a href="https://github.com/dabeaz/python-cookbook/blob/master/src/4/how_to_flatten_a_nested_sequence/example.py">https://github.com/dabeaz/python-cookbook/blob/master/src/4/how_to_flatten_a_nested_sequence/example.py</a>)</p>
<pre><code class="language-python"># Example of flattening a nested sequence using subgenerators

from collections import Iterable

def flatten(items, ignore_types=(str, bytes)):
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, ignore_types):
            yield from flatten(x) # 这里递归调用，如果x是可迭代对象，继续分解
        else:
            yield x

items = [1, 2, [3, 4, [5, 6], 7], 8]

# Produces 1 2 3 4 5 6 7 8
for x in flatten(items):
    print(x)

items = ['Dave', 'Paula', ['Thomas', 'Lewis']]
for x in flatten(items):
    print(x)
</code></pre>
<p>yield from x 表达式对x对象做的第一件事是，调用 iter(x)，获取迭代器。所以要求x是可迭代对象。</p>
<p>PEP380 的标题是 ”syntax for delegating to subgenerator“(把指责委托给子生成器的句法)。由此我们可以知道，yield from是可以实现嵌套生成器的使用。</p>
<p>yield from 的主要功能是打开双向通道，把最外层的调用方与最内层的子生成器连接起来，使两者可以直接发送和产出值，还可以直接传入异常，而不用在中间的协程添加异常处理的代码。</p>
<p>yield from 包含几个概念：</p>
<ul>
<li>委派生成器</li>
</ul>
<p>包含yield from <iterable> 表达式的生成器函数</p>
<ul>
<li>子生成器</li>
</ul>
<p>从yield from <iterable> 部分获取的生成器。</p>
<ul>
<li>调用方</li>
</ul>
<p>调用委派生成器的客户端（调用方）代码</p>
<p>这个示意图是 对yield from 的调用过程</p>
<figure data-type="image" tabindex="1"><img src="http://omuo4kh1k.bkt.clouddn.com/z6VQ9oWIy-KOo2eJckn6_FDzRaiZoxdyyvbe-QstGCLw5p5AlJ43coiNPMy23Rup" alt="" loading="lazy"></figure>
<p>委派生成器在 yield from 表达式处暂停时，调用方可以直接把数据发给字生成器，子生成器再把产出的值发送给调用方。子生成器返回之后，解释器会抛出StopIteration异常，并把返回值附加到异常对象上，只是委派生成器恢复。</p>
<blockquote>
<p>这个图来自于Paul<br>
Sokolovsky 的 <a href="http://flupy.org/resources/yield-from.pdf">How Python 3.3 &quot;yield from&quot; construct works</a></p>
</blockquote>
<p>下边这个例子是对yield from 的一个应用：</p>
<pre><code class="language-python"> #! -*- coding: utf-8 -*-

from collections import namedtuple


Result = namedtuple('Result', 'count average')


# 子生成器
# 这个例子和上边示例中的 averager 协程一样，只不过这里是作为字生成器使用
def averager():
    total = 0.0
    count = 0
    average = None
    while True:
        # main 函数发送数据到这里 
        term = yield
        if term is None: # 终止条件
            break
        total += term
        count += 1
        average = total/count
    return Result(count, average) # 返回的Result 会成为grouper函数中yield from表达式的值


# 委派生成器
def grouper(results, key):
     # 这个循环每次都会新建一个averager 实例，每个实例都是作为协程使用的生成器对象
    while True:
        # grouper 发送的每个值都会经由yield from 处理，通过管道传给averager 实例。grouper会在yield from表达式处暂停，等待averager实例处理客户端发来的值。averager实例运行完毕后，返回的值绑定到results[key] 上。while 循环会不断创建averager实例，处理更多的值。
        results[key] = yield from averager()


# 调用方
def main(data):
    results = {}
    for key, values in data.items():
        # group 是调用grouper函数得到的生成器对象，传给grouper 函数的第一个参数是results，用于收集结果；第二个是某个键
        group = grouper(results, key)
        next(group)
        for value in values:
            # 把各个value传给grouper 传入的值最终到达averager函数中；
            # grouper并不知道传入的是什么，同时grouper实例在yield from处暂停
            group.send(value)
        # 把None传入groupper，传入的值最终到达averager函数中，导致当前实例终止。然后继续创建下一个实例。
        # 如果没有group.send(None)，那么averager子生成器永远不会终止，委派生成器也永远不会在此激活，也就不会为result[key]赋值
        group.send(None)
    report(results)


# 输出报告
def report(results):
    for key, result in sorted(results.items()):
        group, unit = key.split(';')
        print('{:2} {:5} averaging {:.2f}{}'.format(result.count, group, result.average, unit))


data = {
    'girls;kg':[40, 41, 42, 43, 44, 54],
    'girls;m': [1.5, 1.6, 1.8, 1.5, 1.45, 1.6],
    'boys;kg':[50, 51, 62, 53, 54, 54],
    'boys;m': [1.6, 1.8, 1.8, 1.7, 1.55, 1.6],
}

if __name__ == '__main__':
    main(data)
</code></pre>
<blockquote>
<p>这段代码从一个字典中读取男生和女生的身高和体重。然后把数据传给之前定义的 averager 协程，最后生成一个报告。</p>
</blockquote>
<p>执行结果为</p>
<pre><code class="language-python">6 boys  averaging 54.00kg
6 boys  averaging 1.68m
6 girls averaging 44.00kg
6 girls averaging 1.58m
</code></pre>
<p>这断代码展示了yield from 结构最简单的用法。委派生成器相当于管道，所以可以把任意数量的委派生成器连接在一起---一个委派生成器使用yield from 调用一个子生成器，而那个子生成器本身也是委派生成器，使用yield from调用另一个生成器。最终以一个只是用yield表达式的生成器（或者任意可迭代对象）结束。</p>
<h2 id="yield-from-的意义">yield from 的意义</h2>
<p>PEP380 分6点说明了yield from 的行为。</p>
<ul>
<li>子生成器产出的值都直接传给委派生成器的调用方（客户端代码）</li>
<li>使用send() 方法发给委派生成器的值都直接传给子生成器。如果发送的值是None，那么会调用子生成器的 <strong>next</strong>()方法。如果发送的值不是None，那么会调用子生成器的send()方法。如果调用的方法抛出StopIteration异常，那么委派生成器恢复运行。任何其他异常都会向上冒泡，传给委派生成器。</li>
<li>生成器退出时，生成器（或子生成器）中的return expr 表达式会触发 StopIteration(expr) 异常抛出。</li>
<li>yield from表达式的值是子生成器终止时传给StopIteration异常的第一个参数。</li>
<li>传入委派生成器的异常，除了 GeneratorExit 之外都传给子生成器的throw()方法。如果调用throw()方法时抛出 StopIteration 异常，委派生成器恢复运行。StopIteration之外的异常会向上冒泡。传给委派生成器。</li>
<li>如果把 GeneratorExit 异常传入委派生成器，或者在委派生成器上调用close() 方法，那么在子生成器上调用close() 方法，如果他有的话。如果调用close() 方法导致异常抛出，那么异常会向上冒泡，传给委派生成器；否则，委派生成器抛出 GeneratorExit 异常。</li>
</ul>
<p>yield from的具体语义很难理解，不过我们可以看下Greg Ewing 的伪代码，通过伪代码分析一下：</p>
<pre><code class="language-python">RESULT = yield from EXPR

# is semantically equivalent to
# EXPR 可以是任何可迭代对象，因为获取迭代器_i 使用的是iter()函数。
_i = iter(EXPR)
try:
    _y = next(_i) # 2 预激字生成器，结果保存在_y 中，作为第一个产出的值
except StopIteration as _e:
    # 3 如果调用的方法抛出StopIteration异常，获取异常对象的value属性，赋值给_r
    _r = _e.value
else:
    while 1: # 4 运行这个循环时，委派生成器会阻塞，只能作为调用方和子生成器直接的通道
        try:
            _s = yield _y # 5 产出子生成器当前产出的元素；等待调用方发送_s中保存的值。
        except GeneratorExit as _e:
            # 6 这一部分是用于关闭委派生成器和子生成器，因为子生成器可以是任意可迭代对象，所以可能没有close() 方法。
            try:
                _m = _i.close
            except AttributeError:
                pass
            else:
                _m()
            # 如果调用close() 方法导致异常抛出，那么异常会向上冒泡，传给委派生成器；否则，委派生成器抛出 GeneratorExit 异常。
            raise _e
        except BaseException as _e: # 7 这一部分处理调用方通过.throw() 方法传入的异常。如果子生成器是迭代器，没有throw()方法，这种情况会导致委派生成器抛出异常
            _x = sys.exc_info()
            try:
                # 传入委派生成器的异常，除了 GeneratorExit 之外都传给子生成器的throw()方法。
                _m = _i.throw
            except AttributeError:
                # 子生成器一迭代器，没有throw()方法， 调用throw()方法时抛出AttributeError异常传给委派生成器
                raise _e
            else: # 8
                try:
                    _y = _m(*_x)
                except StopIteration as _e:
                     # 如果调用throw()方法时抛出 StopIteration 异常，委派生成器恢复运行。
                     # StopIteration之外的异常会向上冒泡。传给委派生成器。
                    _r = _e.value
                    break
        else: # 9 如果产出值时没有异常
            try: # 10 尝试让子生成器向前执行
                if _s is None: 
                    # 11. 如果发送的值是None，那么会调用子生成器的 __next__()方法。
                    _y = next(_i)
                else:
                    # 11. 如果发送的值不是None，那么会调用子生成器的send()方法。
                    _y = _i.send(_s)
            except StopIteration as _e: # 12
                # 2. 如果调用的方法抛出StopIteration异常，获取异常对象的value属性，赋值给_r, 退出循环，委派生成器恢复运行。任何其他异常都会向上冒泡，传给委派生成器。
                _r = _e.value 
                break
RESULT = _r #13 返回的结果是 _r 即整个yield from表达式的值
</code></pre>
<p>上段代码变量说明:</p>
<ul>
<li>_i 迭代器（子生成器）</li>
<li>_y 产出的值 （子生成器产出的值）</li>
<li>_r 结果 （最终的结果  即整个yield from表达式的值）</li>
<li>_s 发送的值 （调用方发给委派生成器的值，这个只会传给子生成器）</li>
<li>_e 异常 （异常对象）</li>
</ul>
<p>我们可以看到在代码的第一个 try 部分 使用 _y = next(_i) 预激了子生成器。这可以看出，上一篇我们使用的用于自动预激的装饰器与yield from 语句不兼容。</p>
<p>除了这段伪代码之外，<a href="https://www.python.org/dev/peps/pep-0380/#proposal">PEP380</a> 还有个说明：</p>
<pre><code class="language-python">In a generator, the statement

return value

is semantically equivalent to

raise StopIteration(value)

except that, as currently, the exception cannot be caught by except clauses within the returning generator.
</code></pre>
<p>这也就是为什么 yield from 可以使用return 来返回值而 yield 只能使用 try ... except StopIteration ... 来捕获异常的value 值。</p>
<pre><code class="language-python">&gt;&gt;&gt; try:
...     coro_avg.send(None)
... except StopIteration as exc:
...     result = exc.value
...
&gt;&gt;&gt; result
</code></pre>
<p>到这里，我们已经了解了 yield from 的具体细节。下一篇，会分析一个使用协程的经典案例： 仿真编程。这个案例说明了如何使用协程在单线程中管理并发活动。</p>
<h2 id="参考文档">参考文档</h2>
<ul>
<li>流畅的python 第16章（这是读书笔记，这是读书笔记）</li>
<li><a href="https://www.python.org/dev/peps/pep-0380/#proposal">PEP 380-- Syntax for Delegating to a Subgenerator</a></li>
<li><a href="http://flupy.org/resources/yield-from.pdf">How Python 3.3 &quot;yield from&quot; construct works</a></li>
</ul>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python协程1：协程 10分钟入门]]></title>
        <id>http://blog.gusibi.site/post/python-coroutine-1/</id>
        <link href="http://blog.gusibi.site/post/python-coroutine-1/">
        </link>
        <updated>2017-06-12T01:22:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>最近找到一本python好书《流畅的python》，是到现在为止看到的对python高级特性讲述最详细的一本。<br>
看了协程一章，做个读书笔记，加深印象。</p>
</blockquote>
<h2 id="协程定义">协程定义</h2>
<p>协程的底层架构是在pep342 中定义，并在python2.5 实现的。</p>
<p>HUGOMORE42</p>
<p>python2.5 中，yield关键字可以在表达式中使用，而且生成器API中增加了 .send(value)方法。生成器可以使用.send(...)方法发送数据，发送的数据会成为生成器函数中yield表达式的值。</p>
<p>协程是指一个过程，这个过程与调用方协作，产出有调用方提供的值。因此，生成器可以作为协程使用。</p>
<blockquote>
<p>除了 .send(...)方法，pep342 和添加了 .throw(...)（让调用方抛出异常，在生成器中处理）和.close()（终止生成器）方法。</p>
</blockquote>
<p>python3.3后，pep380对生成器函数做了两处改动：</p>
<ul>
<li>生成器可以返回一个值；以前，如果生成器中给return语句提供值，会抛出SyntaxError异常。</li>
<li>引入yield from 语法，使用它可以把复杂的生成器重构成小型的嵌套生成器，省去之前把生成器的工作委托给子生成器所需的大量模板代码。</li>
</ul>
<h2 id="协程生成器的基本行为">协程生成器的基本行为</h2>
<p>首先说明一下，协程有四个状态，可以使用inspect.getgeneratorstate(...)函数确定：</p>
<ul>
<li>GEN_CREATED    # 等待开始执行</li>
<li>GEN_RUNNING    # 解释器正在执行（只有在多线程应用中才能看到这个状态）</li>
<li>GEN_SUSPENDED  # 在yield表达式处暂停</li>
<li>GEN_CLOSED     # 执行结束</li>
</ul>
<pre><code class="language-python">#! -*- coding: utf-8 -*-
import inspect

# 协程使用生成器函数定义：定义体中有yield关键字。
def simple_coroutine():
    print('-&gt; coroutine started')
    # yield 在表达式中使用；如果协程只需要从客户那里接收数据，yield关键字右边不需要加表达式（yield默认返回None）
    x = yield
    print('-&gt; coroutine received:', x)

my_coro = simple_coroutine()
my_coro # 和创建生成器的方式一样，调用函数得到生成器对象。
# 协程处于 GEN_CREATED (等待开始状态)
print(inspect.getgeneratorstate(my_coro))

my_coro.send(None)
# 首先要调用next()函数，因为生成器还没有启动，没有在yield语句处暂停，所以开始无法发送数据
# 发送 None 可以达到相同的效果 my_coro.send(None) 
next(my_coro)
# 此时协程处于 GEN_SUSPENDED (在yield表达式处暂停)
print(inspect.getgeneratorstate(my_coro))

# 调用这个方法后，协程定义体中的yield表达式会计算出42；现在协程会恢复，一直运行到下一个yield表达式，或者终止。
my_coro.send(42)
print(inspect.getgeneratorstate(my_coro))
</code></pre>
<p>运行上述代码，输出结果如下</p>
<pre><code class="language-python">GEN_CREATED
-&gt; coroutine started
GEN_SUSPENDED
-&gt; coroutine received: 42

# 这里，控制权流动到协程定义体的尾部，导致生成器像往常一样抛出StopIteration异常
Traceback (most recent call last):
  File &quot;/Users/gs/coroutine.py&quot;, line 18, in &lt;module&gt; 
    my_coro.send(42)
StopIteration
</code></pre>
<blockquote>
<p>send方法的参数会成为暂停yield表达式的值，所以，仅当协程处于暂停状态是才能调用send方法。<br>
如果协程还未激活（GEN_CREATED 状态）要调用next(my_coro) 激活协程，也可以调用my_coro.send(None)</p>
</blockquote>
<p>如果创建协程对象后立即把None之外的值发给它，会出现下述错误：</p>
<pre><code class="language-python">&gt;&gt;&gt; my_coro = simple_coroutine()
&gt;&gt;&gt; my_coro.send(123)

Traceback (most recent call last):
  File &quot;/Users/gs/coroutine.py&quot;, line 14, in &lt;module&gt;
    my_coro.send(123)
TypeError: can't send non-None value to a just-started generator
</code></pre>
<p>仔细看错误消息</p>
<blockquote>
<p>can't send non-None value to a just-started generator</p>
</blockquote>
<p>最先调用next(my_coro) 这一步通常称为”预激“（prime）协程---即，让协程向前执行到第一个yield表达式，准备好作为活跃的协程使用。</p>
<h4 id="再看一个两个值得协程">再看一个两个值得协程</h4>
<pre><code class="language-python">def simple_coro2(a):
    print('-&gt; coroutine started: a =', a)
    b = yield a
    print('-&gt; Received: b =', b)
    c = yield a + b
    print('-&gt; Received: c =', c)

my_coro2 = simple_coro2(14)
print(inspect.getgeneratorstate(my_coro2))
# 这里inspect.getgeneratorstate(my_coro2) 得到结果为 GEN_CREATED （协程未启动）

next(my_coro2)
# 向前执行到第一个yield 处 打印 “-&gt; coroutine started: a = 14”
# 并且产生值 14 （yield a 执行 等待为b赋值）
print(inspect.getgeneratorstate(my_coro2))
# 这里inspect.getgeneratorstate(my_coro2) 得到结果为 GEN_SUSPENDED （协程处于暂停状态）

my_coro2.send(28)
# 向前执行到第二个yield 处 打印 “-&gt; Received: b = 28”
# 并且产生值 a + b = 42（yield a + b 执行 得到结果42 等待为c赋值）
print(inspect.getgeneratorstate(my_coro2))
# 这里inspect.getgeneratorstate(my_coro2) 得到结果为 GEN_SUSPENDED （协程处于暂停状态）

my_coro2.send(99)
# 把数字99发送给暂停协程，计算yield 表达式，得到99，然后把那个数赋值给c 打印 “-&gt; Received: c = 99”
# 协程终止，抛出StopIteration
</code></pre>
<p>运行上述代码，输出结果如下</p>
<pre><code class="language-python">GEN_CREATED
-&gt; coroutine started: a = 14
GEN_SUSPENDED
-&gt; Received: b = 28
-&gt; Received: c = 99

Traceback (most recent call last):
  File &quot;/Users/gs/coroutine.py&quot;, line 37, in &lt;module&gt;
    my_coro2.send(99)
StopIteration
</code></pre>
<p>simple_coro2 协程的执行过程分为3个阶段，如下图所示</p>
<figure data-type="image" tabindex="1"><img src="http://omuo4kh1k.bkt.clouddn.com/3b3UCuR_iYj3-r_V4PUErxrFm0v1uIo7p4yoplxnqaQt7PK4iUO8CAWlg7chZyW_" alt="" loading="lazy"></figure>
<ol>
<li>调用next(my_coro2)，打印第一个消息，然后执行yield a，产出数字14.</li>
<li>调用my_coro2.send(28)，把28赋值给b，打印第二个消息，然后执行 yield a + b 产生数字42</li>
<li>调用my_coro2.send(99)，把99赋值给c，然后打印第三个消息，协程终止。</li>
</ol>
<h2 id="使用装饰器预激协程">使用装饰器预激协程</h2>
<p>我们已经知道，协程如果不预激，不能使用send() 传入非None 数据。所以，调用my_coro.send(x)之前，一定要调用next(my_coro)。<br>
为了简化，我们会使用装饰器预激协程。</p>
<pre><code class="language-python">from functools import wraps

def coroutinue(func):
    '''
    装饰器： 向前执行到第一个`yield`表达式，预激`func`
    :param func: func name
    :return: primer
    '''

    @wraps(func)
    def primer(*args, **kwargs):
        # 把装饰器生成器函数替换成这里的primer函数；调用primer函数时，返回预激后的生成器。
        gen = func(*args, **kwargs)
        # 调用被被装饰函数，获取生成器对象
        next(gen)  # 预激生成器
        return gen  # 返回生成器
    return primer


# 使用方法如下

@coroutinue
def simple_coro(a):
    a = yield

simple_coro(12)  # 已经预激
</code></pre>
<h2 id="终止协程和异常处理">终止协程和异常处理</h2>
<p>协程中，为处理的异常会向上冒泡，传递给next函数或send方法的调用方，未处理的异常会导致协程终止。</p>
<p>看下边这个例子</p>
<pre><code class="language-python">#! -*- coding: utf-8 -*-

from functools import wraps

def coroutinue(func):
    '''
    装饰器： 向前执行到第一个`yield`表达式，预激`func`
    :param func: func name
    :return: primer
    '''

    @wraps(func)
    def primer(*args, **kwargs):
        # 把装饰器生成器函数替换成这里的primer函数；调用primer函数时，返回预激后的生成器。
        gen = func(*args, **kwargs)
        # 调用被被装饰函数，获取生成器对象
        next(gen)  # 预激生成器
        return gen  # 返回生成器
    return primer


@coroutinue
def averager():
    # 使用协程求平均值
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield average
        total += term
        count += 1
        average = total/count

coro_avg = averager()
print(coro_avg.send(40))
print(coro_avg.send(50))
print(coro_avg.send('123')) # 由于发送的不是数字，导致内部有异常抛出。
</code></pre>
<p>执行上述代码结果如下</p>
<pre><code class="language-python">40.0
45.0
Traceback (most recent call last):
  File &quot;/Users/gs/coro_exception.py&quot;, line 37, in &lt;module&gt;
    print(coro_avg.send('123'))
  File &quot;/Users/gs/coro_exception.py&quot;, line 30, in averager
    total += term
TypeError: unsupported operand type(s) for +=: 'float' and 'str'
</code></pre>
<p>出错的原因是发送给协程的'123'值不能加到total变量上。<br>
出错后，如果再次调用 coro_avg.send(x) 方法 会抛出 StopIteration 异常。</p>
<p>由上边的例子我们可以知道，如果想让协程退出，可以发送给它一个特定的值。比如None和Ellipsis。（推荐使用Ellipsis，因为我们不太使用这个值）<br>
从Python2.5 开始，我们可以在生成器上调用两个方法，显式的把异常发给协程。<br>
这两个方法是throw和close。</p>
<pre><code class="language-python">generator.throw(exc_type[, exc_value[, traceback]])
</code></pre>
<p>这个方法使生成器在暂停的yield表达式处抛出指定的异常。如果生成器处理了抛出的异常，代码会向前执行到下一个yield表达式，而产出的值会成为调用throw方法得到的返回值。如果没有处理，则向上冒泡，直接抛出。</p>
<pre><code class="language-python">generator.close()
</code></pre>
<p>生成器在暂停的yield表达式处抛出GeneratorExit异常。<br>
如果生成器没有处理这个异常或者抛出了StopIteration异常，调用方不会报错。如果收到GeneratorExit异常，生成器一定不能产出值，否则解释器会抛出RuntimeError异常。</p>
<h4 id="示例-使用close和throw方法控制协程">示例： 使用close和throw方法控制协程。</h4>
<pre><code class="language-python">import inspect


class DemoException(Exception):
    pass


@coroutinue
def exc_handling():
    print('-&gt; coroutine started')
    while True:
        try:
            x = yield
        except DemoException:
            print('*** DemoException handled. Conginuing...')
        else:
            # 如果没有异常显示接收到的值
            print('--&gt; coroutine received: {!r}'.format(x))
    raise RuntimeError('This line should never run.')  # 这一行永远不会执行 


exc_coro = exc_handling()

exc_coro.send(11)
exc_coro.send(12)
exc_coro.send(13)
exc_coro.close()
print(inspect.getgeneratorstate(exc_coro))
</code></pre>
<blockquote>
<p>raise RuntimeError('This line should never run.') 永远不会执行，因为只有未处理的异常才会终止循环，而一旦出现未处理的异常，协程会立即终止。</p>
</blockquote>
<p>执行上述代码得到结果为：</p>
<pre><code class="language-python">-&gt; coroutine started
--&gt; coroutine received: 11
--&gt; coroutine received: 12
--&gt; coroutine received: 13
GEN_CLOSED    # 协程终止
</code></pre>
<p>上述代码，如果传入DemoException，协程不会中止，因为做了异常处理。</p>
<pre><code class="language-python">exc_coro = exc_handling()

exc_coro.send(11)
exc_coro.send(12)
exc_coro.send(13)
exc_coro.throw(DemoException) # 协程不会中止，但是如果传入的是未处理的异常，协程会终止
print(inspect.getgeneratorstate(exc_coro))
exc_coro.close()
print(inspect.getgeneratorstate(exc_coro))

## output

-&gt; coroutine started
--&gt; coroutine received: 11
--&gt; coroutine received: 12
--&gt; coroutine received: 13
*** DemoException handled. Conginuing...
GEN_SUSPENDED
GEN_CLOSED
</code></pre>
<p>如果不管协程如何结束都想做些处理工作，要把协程定义体重的相关代码放入try/finally块中。</p>
<pre><code class="language-python">@coroutinue
def exc_handling():
    print('-&gt; coroutine started')
    try:
        while True:
            try:
                x = yield
            except DemoException:
                print('*** DemoException handled. Conginuing...')
            else:
                # 如果没有异常显示接收到的值
                print('--&gt; coroutine received: {!r}'.format(x))
    finally:
        print('-&gt; coroutine ending')
</code></pre>
<p>上述部分介绍了：</p>
<ul>
<li>生成器作为协程使用时的行为和状态</li>
<li>使用装饰器预激协程</li>
<li>调用方如何使用生成器对象的 .throw(...)和.close() 方法控制协程</li>
</ul>
<p>下一部分将介绍：</p>
<ul>
<li>协程终止时如何返回值</li>
<li>yield新句法的用途和语义</li>
</ul>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS入门指南-1：工作原理]]></title>
        <id>http://blog.gusibi.site/post/css-learing-1-how-it-workds/</id>
        <link href="http://blog.gusibi.site/post/css-learing-1-how-it-workds/">
        </link>
        <updated>2017-05-27T01:22:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这是CSS设计指南的读书笔记，用于加深学习效果。</p>
</blockquote>
<p>最近想做一个小程序，前端是必修课，那就从css开始吧。</p>
<h2 id="css-工作原理">css 工作原理</h2>
<p>每个html元素都有一组样式属性，可以通过css来设定。当html元素的同一个样式属性有多种样式值的时候，css就要靠层叠机智来决定最终应用哪种样式。</p>
<p>HUGOMORE42</p>
<h3 id="css规则">css规则</h3>
<p>规则实际上是一条完整的css指令，规则声明了要修改的元素和要应用给改元素的样式。</p>
<h4 id="为文档添加样式的三种方法">为文档添加样式的三种方法：</h4>
<ol>
<li>写在元素标签里（也叫行内样式，只能影响它所在的标签，会覆盖嵌入样式和链接样式）</li>
<li>写在&lt;style&gt; 标签里（也就嵌入样式，应用范围仅限于当前页面，页面样式会覆盖外部样式表中的样式，但会被行内样式覆盖）</li>
<li>写在单独css样式表中（也叫链接样式，样式表是一个扩展名为.css 的文件，可以在任意多个HTML页面链接同一个样式表文件。链接样式的作用范围是整个网站）</li>
</ol>
<p>除了这三种为页面添加样式的方法，还有一种在样式表中链接其他样式表的方法，使用@import 指令：例如</p>
<pre><code>@import url(css/styles.css)
</code></pre>
<p>@import 指令必须出现在样式表中其他样式之前，否则@吹灭；@import引用的样式表不会被加载。<br>
<img src="http://omuo4kh1k.bkt.clouddn.com/cpByY2yOl7gHv6vEFDL2CyMt8YJQ-0t0MRxo6itjABg0PeYrrqz6wrIV6q5kKsm8" alt="css 规则命名惯例" loading="lazy"></p>
<p>对这个基本的结构有三种方法可以进行扩展</p>
<p>**第一种方法：**多个声明包含在一条规则里。</p>
<pre><code class="language-css">p {color: red; font-size: 12px; font-weight: bold;}
</code></pre>
<p>**第二种方法：**多个选择器组合在一起。例如：如果想让&lt;h1&gt;、&lt;h2&gt;和&lt;h3&gt;的文本都变成蓝色粗体可以这么写：</p>
<pre><code class="language-css">h1 {color: blue; font-weight: bold;}
h2 {color: blue; font-weight: bold;}
h3 {color: blue; font-weight: bold;}
</code></pre>
<p>也可以这么写：</p>
<pre><code class="language-css">h1, h2, h3 {color: blue; font-weight: bold;}
</code></pre>
<p><strong>分组选择符以逗号作为分隔符</strong></p>
<p><strong>第三种方法：</strong> 多条规则应用给一个选择符。<br>
例如，写完上边的规则，还想把h3变成斜体，那么可以再为h3单独写一条规则：</p>
<pre><code class="language-css">h1, h2, h3 {color: blue; font-weight: bold;}
h3 {font-style: italic;}
</code></pre>
<h3 id="选择特定元素的选择符">选择特定元素的选择符</h3>
<p>用于选择特定元素的操作符有三种</p>
<ol>
<li><strong>上下文选择符</strong>。基于祖先或者同胞元素选择一个元素。</li>
<li><strong>ID和类选择符</strong>。基于id和class属性的值选择元素。</li>
<li><strong>属性选择符</strong>。基于属性的有无和特征选择元素。</li>
</ol>
<h4 id="上下文选择符">上下文选择符</h4>
<p>比如我们想给article中的段落设置不同的字号，可以使用上下文选择符来解决。</p>
<p>上下文选择符的格式如下：</p>
<blockquote>
<p>标签1 标签2 {声明}</p>
</blockquote>
<p>其中<strong>标签2</strong> 是我们要选择的目标，而且只有在 <strong>标签1</strong>是其祖先元素的情况下才会被选中。</p>
<p>上下文选择符，叫后代组合式选择符，就是一组以空格分隔的标签名。用于选择作为特定祖先元素后代的标签。</p>
<pre><code class="language-css">article p {font-weight: bold;}
</code></pre>
<p>上边例子中，只有article后代的p元素才会应用后边的样式。</p>
<p><strong>上下文选择符以空格作为分隔符</strong></p>
<h5 id="特殊的上下文选择符">特殊的上下文选择符</h5>
<ul>
<li>子选择符 &gt;</li>
</ul>
<p>格式如下：</p>
<blockquote>
<p>标签1 &gt; 标签2</p>
</blockquote>
<p><strong>标签1</strong> 必须是 <strong>标签2</strong> 的<strong>父元素</strong>，不能是其它的祖先元素。</p>
<pre><code class="language-css">section &gt; h2 {font-style: italic;}
</code></pre>
<ul>
<li>紧邻同胞选择符+</li>
</ul>
<p>格式如下：</p>
<blockquote>
<p>标签1 + 标签2</p>
</blockquote>
<p>标签2 必须紧跟在期同胞标签1后面。</p>
<pre><code class="language-css">h2 + p {font-variant: small-caps;}
</code></pre>
<p>标签 h2 和 p 为同一级标签，且标签p和 h2 相邻。(只应用到p标签）</p>
<ul>
<li>一般同胞选择符 ~</li>
</ul>
<p>格式如下：</p>
<blockquote>
<p>标签1 ~ 标签2</p>
</blockquote>
<p><strong>标签2</strong> 必须跟在其 <strong>同胞标签1</strong> 后面（可以不相邻）。</p>
<pre><code class="language-css">h2 ~ a {color: red;}
</code></pre>
<p>标签a 和 标签h2 同一级，且a标签在h2 标签之后。（只应用与a标签）</p>
<ul>
<li>通用选择符 *</li>
</ul>
<p>通用选择符 * 是一个通配符，它匹配任何元素。</p>
<pre><code class="language-css">* {color: green;}
</code></pre>
<p>这条规则会将所有元素（文本和边框）都变成绿色。</p>
<pre><code class="language-css">p * {color: red;}
</code></pre>
<p>这条规则会把p包含的所有元素的文本都变成红色。</p>
<pre><code class="language-css">section * a {font-size: 1.3em;}
</code></pre>
<p>所有section标签的 非子标签（*是所有的子标签）的a标签字体设置为 1.3 em;</p>
<h4 id="id和类选择符">ID和类选择符</h4>
<p>使用ID和类选择符，首先要在HTML标记中为元素添加id和class属性。</p>
<blockquote>
<p>可以给id和class属性设定任意值，但不能以数字或特殊符号开头</p>
</blockquote>
<h5 id="类属性">类属性</h5>
<p>给标签h1添加 specialtext 类。</p>
<pre><code class="language-css">&lt;h1 class=&quot;specialtext&quot;&gt;This is text&lt;/h1&gt;
</code></pre>
<ul>
<li>类选择符</li>
</ul>
<p>格式为：</p>
<blockquote>
<p>.类名</p>
</blockquote>
<p>类选择符使用点(.)，紧跟类名。</p>
<ul>
<li>标签带类选择符</li>
</ul>
<p>格式为：</p>
<blockquote>
<p>标签1.类名</p>
</blockquote>
<p>比如：</p>
<pre><code class="language-css">p.specialtext {color: red;}
</code></pre>
<p>只对有 specialtext 类的p标签有效。</p>
<ul>
<li>多类选择符</li>
</ul>
<p>可以给元素添加多个类：</p>
<pre><code class="language-html">&lt;p class=&quot;specialtext featured&quot;&gt;Here the span tag &lt;span&gt; may or may not&lt;/span&gt; be styled.&lt;/p&gt;
</code></pre>
<p>多个类名放在同一对引号吃，用空格分隔。</p>
<p>要选择同时存在这两个类名的元素可以这样写：</p>
<pre><code class="language-css">.specialtext.featured {font-size: 120%;}
</code></pre>
<p>CSS 选择符的两个类名直接没有空格。如果加了，就变成祖先/后代关系的上下文选择符了。</p>
<h5 id="id属性">ID属性</h5>
<p>ID属性与类写法类似，用#表示。</p>
<pre><code class="language-html">&lt;p id=&quot;specialtext&quot;&gt;This is text&lt;/p&gt;
</code></pre>
<p>上边p标签就设置了ID属性specialtext。</p>
<p>相应的ID选择符就这样写：</p>
<pre><code class="language-css">#specialtext {css样式}
</code></pre>
<p>选择元素方式其余和class 一致。</p>
<h4 id="id属性和类属性的区别">ID属性和类属性的区别</h4>
<ul>
<li>ID可以用于页面导航链接中。<br>
例如：</li>
</ul>
<pre><code class="language-html">&lt;a href=&quot;#bio&quot;&gt;Biggraphy&lt;/a&gt;
</code></pre>
<p>用户点击这个链接会滚到ID值为bio的位置。如果href属性里只有一个#，那么点击链接会跳到顶部。</p>
<ul>
<li>ID值需要时独一无二的。</li>
<li>类的目的是为了标识一组具有相同特征的元素，以便我们为这些元素应用相同的css样式。</li>
</ul>
<h4 id="属性选择符">属性选择符</h4>
<h5 id="属性名选择符">属性名选择符</h5>
<p>格式如下：</p>
<blockquote>
<p>标签名[属性名]</p>
</blockquote>
<p>选择任何带有属性名的标签名。</p>
<p>比如：</p>
<pre><code class="language-css">img[title] {border: 2px solid blue;}
</code></pre>
<p>这个规则会选择带有title属性的HTML img元素，title是什么值都可以。</p>
<h5 id="属性值选择符">属性值选择符</h5>
<p>格式如下：</p>
<blockquote>
<p>标签名[属性名=&quot;属性值&quot;]（在html5中，属性值得引号可不加)</p>
</blockquote>
<p>例如：</p>
<pre><code class="language-css">img[title=&quot;red flower&quot;] {border: 2px solid blue;}
</code></pre>
<p>这个规则会选择带有title属性的HTML img元素，且title值为&quot;red flower&quot;。</p>
<h4 id="伪类">伪类</h4>
<p>伪类分两种：</p>
<ol>
<li>UI伪类会在HTML元素处于某个状态时，为该元素应用CSS样式。</li>
<li>结构化伪类会在标记中存在某种结构上的关系时，为相应元素应用CSS样式。</li>
</ol>
<p>伪类使用:(冒号)作为选择符。<br>
两个冒号(::)表示新增的伪元素。</p>
<h4 id="ui伪类">UI伪类</h4>
<p>UI伪类会基于特定的HTML元素的状态应用样式。</p>
<h5 id="链接伪类">链接伪类</h5>
<p>针对链接的伪类有4个：</p>
<ul>
<li>Link。 此时，链接为被点击</li>
<li>Visited。用户点击过链接之后</li>
<li>Hover。鼠标悬停在链接上</li>
<li>Active。链接正在被点击</li>
</ul>
<p>使用方式举例：</p>
<pre><code class="language-css">a:link {color: black;}
a:visited {color: blue;}
a:hover {text-decoration: none;}
a:active {color: red;}
</code></pre>
<p>hover伪类可以应用在任何元素。</p>
<pre><code class="language-css">p:hover {background-color: gray;}
</code></pre>
<h5 id="focus-伪类">:focus 伪类</h5>
<p>可以应用于任何元素。</p>
<p>点击时会或得焦点。</p>
<h5 id="target-伪类">:target 伪类</h5>
<p>可以应用于任何元素。<br>
如果用户点击一个指向页面中其他元素的链接，则那个元素就是目标，可以用:target 选中。</p>
<p>比如：</p>
<pre><code class="language-html">&lt;a href=&quot;#more_info&quot;&gt;More Infomation&lt;/a&gt;
</code></pre>
<p>应用上伪类后，ID为more_info的元素就是目标。点击a标签时，会应用css样式。</p>
<p>css规则如下：</p>
<pre><code class="language-css">#more_info:target {background: #eee;}
</code></pre>
<h4 id="结构化伪类">结构化伪类</h4>
<h5 id="first-child和last-child">:first-child和:last-child</h5>
<ul>
<li>:first-child 代表一组同胞元素的第一个元素</li>
<li>:last-child 代表一组同胞元素的最后一个元素</li>
</ul>
<h5 id="nth-child">:nth-child</h5>
<p>规则如下：</p>
<pre><code class="language-css">e:nth-child(n)
</code></pre>
<p>e表示元素名，n表示一个数值。</p>
<p>比如：</p>
<pre><code class="language-css">li:nth-child(3)
</code></pre>
<p>会选中一组列表的每个第三项。</p>
<h4 id="伪元素">伪元素</h4>
<p>伪元素是文档中若有实无的元素。<br>
常用的伪类如下：</p>
<h5 id="first-letter">::first-letter</h5>
<p>选择首字母，使用规则：</p>
<pre><code class="language-css">e::first-letter
</code></pre>
<p>比如</p>
<pre><code class="language-css">p::first-letter {font-size:300%;}
</code></pre>
<p>会让首字母变大。</p>
<h5 id="first-line">::first-line</h5>
<p>选择段落的第一行。</p>
<pre><code class="language-css">e::first-line
</code></pre>
<h5 id="before和after">::before和::after</h5>
<p>使用规则如下：</p>
<pre><code class="language-css">e::before
e::after
</code></pre>
<p>可用于在特定的元素前面或者后面添加特殊内容。</p>
<p>以上CSS选择符已经介绍完了，接下来讨论在一个大的样式表中，规则选择的问题。</p>
<p>CSS提供了三种机制来决定那条规则会胜出：</p>
<ul>
<li>继承</li>
<li>层叠</li>
<li>特指</li>
</ul>
<h3 id="继承">继承</h3>
<p>CSS属性的值会向下传递。<br>
比如我们添加一条这样的规则：</p>
<pre><code class="language-css">body: {font-family: arial;}
</code></pre>
<p>那么文档的所有元素都将继承这个样式。</p>
<h3 id="层叠">层叠</h3>
<p>层叠，是样式在文档层次中逐层叠加的过程，目的是让浏览器面对某个标签特定属性值得多个来源，确定最终使用哪个值。</p>
<h4 id="样式来源">样式来源</h4>
<p>以下是浏览器层叠各个来源样式的顺序：</p>
<ol>
<li>浏览器默认的样式表</li>
<li>用户的样式表</li>
<li>作者链接样式表（按照它们链接到页面的先后顺序）</li>
<li>作者嵌入样式</li>
<li>作者行内样式</li>
</ol>
<p>浏览器会按上述顺序依次检查每个来源的样式，并在有定义的情况下，更新对每个标签属性值得设定。整个检查更新过程结束后，再将每个标签已最终设定的样式显示出来。</p>
<p>比如，如果作者链接样式表将p的字体设定为Helvetica，而页面中有一条嵌入规则以相同的选择符吧字体设定为Verdana，那么段落文本最终会以Verdana字体显示。<strong>因为浏览器是在读取链接样式表之后读取嵌入样式。</strong></p>
<h4 id="层叠规则">层叠规则</h4>
<p>**层叠规则一：**找到应用给每个元素和属性的所有声明。</p>
<p>**层叠规则二：**按照顺序和权重排序。浏览器一次检查5个来源，并设定匹配的属性，如果匹配的属性在下一个来源有定义，则更新改属性值。</p>
<p>声明也可以加权重。比如：</p>
<pre><code class="language-css">p {color: green !important; font-size: 12pt;}
</code></pre>
<p>空格!important分号(😉 用于加重声明的权重。</p>
<p>这条规则加重了将文本设置为绿色的权重。所以就算层叠的下一来源给段落设定了其他颜色，最终的颜色仍然还是绿色。</p>
<p>**层叠规则三：**按特指度排序。特指度是表示一条规则有多明确。</p>
<p>比如某个样式表中包含如下规则：</p>
<pre><code class="language-css">p {font-size: 12px;}
p.largetext {font-size: 16px;}

&lt;p class=&quot;largetext&quot;&gt;A bit of text&lt;/p&gt;
</code></pre>
<p>那么上边的p标签将显示16px 文本，因为第二条规则的选择符既包含标签名，又包含类名（特指度高）。</p>
<p>如果是下边的样式：</p>
<pre><code class="language-css">p {font-size: 12px;}
.largetext {font-size: 16px;}

&lt;p class=&quot;largetext&quot;&gt;A bit of text&lt;/p&gt;
</code></pre>
<p>还是会显示16px像素，因为类的特指度高。</p>
<p><strong>层叠规则四</strong> 顺序决定权重。如果两条规则都影响某一元素的属性，特指度也相同，后出现的胜出。</p>
<h5 id="计算特指度">计算特指度</h5>
<p>计算特指度有一个记分规则，被称为“ICE”公式：</p>
<p><strong>I-C-E</strong></p>
<p>I(ID)C(Class)E(Element)并非真正的三个数，但是 0-1-12比0-2-0 小。</p>
<p>ICE记分规则如下：</p>
<ol>
<li>选择符中有一个ID，在I的位置上加1；</li>
<li>选择符中有一个类，在C的位置上加1；</li>
<li>选择符中有一个元素，在E的位置上加1；</li>
<li>得到一个三位数。</li>
</ol>
<p>好了，我们来看一个例子：</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>特指度</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td>0-0-1</td>
</tr>
<tr>
<td>p.largetext</td>
<td>0-1-1</td>
</tr>
<tr>
<td>p#largetext</td>
<td>1-0-1</td>
</tr>
<tr>
<td>body p#largetext</td>
<td>1-0-2</td>
</tr>
<tr>
<td>body p#largetext ul.mylist</td>
<td>1-1-3</td>
</tr>
<tr>
<td>body p#largetext ul.mylist li</td>
<td>1-1-4</td>
</tr>
</tbody>
</table>
<h5 id="简化版层叠规则">简化版层叠规则</h5>
<ol>
<li>包含ID的选择符胜过包含类的选择符，包含类的胜过包含标签的选择符。</li>
<li>如果几个不同来源都为同一个标签的同一个属性定义了样式，行内样式胜过嵌入样式，嵌入样式胜过链接样式。在链接样式表中，具有相同特指度的样式，后声明的优先。</li>
<li>规则一胜过规则二。</li>
<li>设定的样式胜过继承的样式。</li>
</ol>
<p>这一篇我们主要介绍了CSS规则，以及如何用它来为HTML应用样式。</p>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elasticsearch 安装和使用]]></title>
        <id>http://blog.gusibi.site/post/elasticsearch-install/</id>
        <link href="http://blog.gusibi.site/post/elasticsearch-install/">
        </link>
        <updated>2017-05-17T22:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>安装使用 Elasticsearch 两种方法：</p>
<h3 id="方法1-手动安装-elasticsearch">方法1 手动安装 Elasticsearch</h3>
<h5 id="安装到ubuntu">安装到ubuntu</h5>
<p>Elasticsearch与Logstash需要Java作为运行环境</p>
<h2 id="安装java-8">安装Java 8</h2>
<p>将甲骨文Java PPA添加至apt：</p>
<pre><code class="language-shell">sudo add-apt-repository -y ppa:webupd8team/java
</code></pre>
<p>更新apt软件包数据库：</p>
<pre><code class="language-shell">sudo apt-get update
</code></pre>
<p>HUGOMORE42</p>
<p>安装甲骨文Java 8的最新稳定版本，命令如下（在弹出的许可协议中点击接受）：</p>
<pre><code class="language-shell">sudo apt-get -y install oracle-java8-installer
</code></pre>
<h2 id="安装elasticsearch">安装Elasticsearch</h2>
<h3 id="方法1-通过添加elastic的软件包源列表利用软件包管理器安装elasticsearch">方法1 通过添加Elastic的软件包源列表利用软件包管理器安装Elasticsearch。</h3>
<p>运行以下命令以将Elasticsearch公共GPG密钥导入apt：</p>
<pre><code class="language-shell">wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</code></pre>
<p>接下来，创建Elasticsearch源列表：</p>
<pre><code class="language-shell">echo &quot;deb http://packages.elastic.co/elasticsearch/${ELASTICSEARCH_VERSION}/debian stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elk.list
</code></pre>
<p>更新apt软件包数据库：</p>
<pre><code class="language-shell">sudo apt-get update
</code></pre>
<p>安装Elasticsearch</p>
<pre><code class="language-shell">sudo apt-get -y install elasticsearch
</code></pre>
<p>Elasticsearch已经安装完成。下面编辑其配置文件：</p>
<pre><code class="language-shell">sudo vi /etc/elasticsearch/elasticsearch.yml
</code></pre>
<p>限制来自外部的Elasticsearch实例访问活动（端口9200），找到指定network.host的一行，取消其注释并将其值替换为“localhost”：</p>
<pre><code class="language-shell">elasticsearch.yml excerpt (updated)

network.host: localhost
</code></pre>
<p>启动elasticsearch</p>
<pre><code class="language-shell">sudo service elasticsearch restart
</code></pre>
<p>也可以使用 脚本 安装</p>
<pre><code class="language-shell">#!/bin/bash

### USAGE
###
### ./ElasticSearch.sh 1.7 will install Elasticsearch 1.7
### ./ElasticSearch.sh will fail because no version was specified (exit code 1)
###
### CLI options Contributed by @janpieper
### Check http://www.elasticsearch.org/download/ for latest version of ElasticSearch

### ElasticSearch version
if [ -z &quot;$1&quot; ]; then
  echo &quot;&quot;
  echo &quot;  Please specify the Elasticsearch version you want to install!&quot;
  echo &quot;&quot;
  echo &quot;    $ $0 1.7&quot;
  echo &quot;&quot;
  exit 1
fi

ELASTICSEARCH_VERSION=$1

if [[ ! &quot;${ELASTICSEARCH_VERSION}&quot; =~ ^[0-9]+\.[0-9]+ ]]; then
  echo &quot;&quot;
  echo &quot;  The specified Elasticsearch version isn't valid!&quot;
  echo &quot;&quot;
  echo &quot;    $ $0 1.7&quot;
  echo &quot;&quot;
  exit 2
fi

### Install Java 8
cd ~
sudo apt-get install python-software-properties -y
sleep 1
sudo add-apt-repository ppa:webupd8team/java -y
sleep 1
sudo apt-get update
sleep 1
sudo apt-get install oracle-java8-installer -y

### Download and install the Public Signing Key
wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -

### Setup Repository
echo &quot;deb http://packages.elastic.co/elasticsearch/${ELASTICSEARCH_VERSION}/debian stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elk.list

### Install Elasticsearch
sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch -y

### Start ElasticSearch
sudo service elasticsearch start

### Lets wait a little while ElasticSearch starts
sleep 5

### Make sure service is running
curl http://localhost:9200

### Should return something like this:
# {
#  &quot;status&quot; : 200,
#  &quot;name&quot; : &quot;Storm&quot;,
#  &quot;version&quot; : {
#    &quot;number&quot; : &quot;1.3.1&quot;,
#    &quot;build_hash&quot; : &quot;2de6dc5268c32fb49b205233c138d93aaf772015&quot;,
#    &quot;build_timestamp&quot; : &quot;2014-07-28T14:45:15Z&quot;,
#    &quot;build_snapshot&quot; : false,
#    &quot;lucene_version&quot; : &quot;4.9&quot;
#  },
#  &quot;tagline&quot; : &quot;You Know, for Search&quot;
# }

</code></pre>
<h5 id="安装到-mac">安装到 Mac</h5>
<ol>
<li>到 https://www.elastic.co/downloads/elasticsearch 下载elasticsearch</li>
<li>解压 cd 到目录 执行</li>
</ol>
<pre><code class="language-shell">sudo bin/elasticsearch
</code></pre>
<h3 id="方法2-使用-docker">方法2 使用 docker</h3>
<ol>
<li>下载 elasticsearch 镜像</li>
</ol>
<pre><code class="language-shell">docker pull elasticsearch
</code></pre>
<ol start="2">
<li>新建 docker-compose.yml 文件</li>
</ol>
<pre><code class="language-yml">es:
   image: elasticsearch
   volumes:
     - /data:/usr/share/elasticsearch/data/
   ports:
     - &quot;9200:9200&quot;
   mem_limit: 2g
   environment:
    ES_JAVA_OPTS: &quot;-Xmx1g -Xms1g&quot;
</code></pre>
<p>运行命令</p>
<pre><code class="language-shell">docker-compose -f es-docker-compose.yml up -d
</code></pre>
<p>启动 elasticsearch</p>
<h3 id="测试安装">测试安装</h3>
<p>浏览器中访问http://localhost:9200/，看到一个json结果集，表明安装成功：</p>
<pre><code class="language-json">{
  &quot;name&quot; : &quot;g1WVNJ8&quot;,
  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,
  &quot;cluster_uuid&quot; : &quot;RjwyeM4kRRajDZzE3Tcq8g&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;5.4.0&quot;,
    &quot;build_hash&quot; : &quot;780f8c4&quot;,
    &quot;build_date&quot; : &quot;2017-04-28T17:43:27.229Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;6.5.0&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}

</code></pre>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门7：项目更新]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-UpdateItem/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-UpdateItem/">
        </link>
        <updated>2017-02-07T06:23:33.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一节介绍了DynamoDB 的查询，本来计划这一节介绍使用索引的查询，不过随机看到了更新操作，就先写更新操作吧</p>
</blockquote>
<h2 id="update-修改表中的数据">update (修改表中的数据)</h2>
<p>SQL 语言提供用于修改数据的 UPDATE 语句。DynamoDB 使用 UpdateItem 操作完成类似的任务。</p>
<h3 id="sql">SQL</h3>
<p>在 SQL 中，可使用 UPDATE 语句修改一个或多个行。SET 子句为一个或多个列指定新值，WHERE 子句确定修改的行。示例如下：</p>
<pre><code class="language-sql">UPDATE Music
SET RecordLabel = 'Global Records'
WHERE Artist = 'No One You Know' AND SongTitle = 'Call Me Today';
</code></pre>
<p>HUGOMORE42</p>
<p>如果任何行均不匹配 WHERE 子句，则 UPDATE 语句不起作用。</p>
<h3 id="dynamodb">DynamoDB</h3>
<p>在 DynamoDB 中，可使用 UpdateItem 操作修改单个项目。</p>
<p>API 语法如下：</p>
<pre><code class="language-json">{
   &quot;AttributeUpdates&quot;: {
      &quot;string&quot; : {
         &quot;Action&quot;: &quot;string&quot;,
         &quot;Value&quot;: {
            &quot;B&quot;: blob,
            &quot;BOOL&quot;: boolean,
            &quot;BS&quot;: [ blob ],
            &quot;L&quot;: [
               &quot;AttributeValue&quot;
            ],
            &quot;M&quot;: {
               &quot;string&quot; : &quot;AttributeValue&quot;
            },
            &quot;N&quot;: &quot;string&quot;,
            &quot;NS&quot;: [ &quot;string&quot; ],
            &quot;NULL&quot;: boolean,
            &quot;S&quot;: &quot;string&quot;,
            &quot;SS&quot;: [ &quot;string&quot; ]
         }
      }
   },
   &quot;ConditionalOperator&quot;: &quot;string&quot;,
   &quot;ConditionExpression&quot;: &quot;string&quot;,
   &quot;Expected&quot;: {
      &quot;string&quot; : {
         &quot;AttributeValueList&quot;: [
            {
               &quot;B&quot;: blob,
               &quot;BOOL&quot;: boolean,
               &quot;BS&quot;: [ blob ],
               &quot;L&quot;: [
                  &quot;AttributeValue&quot;
               ],
               &quot;M&quot;: {
                  &quot;string&quot; : &quot;AttributeValue&quot;
               },
               &quot;N&quot;: &quot;string&quot;,
               &quot;NS&quot;: [ &quot;string&quot; ],
               &quot;NULL&quot;: boolean,
               &quot;S&quot;: &quot;string&quot;,
               &quot;SS&quot;: [ &quot;string&quot; ]
            }
         ],
         &quot;ComparisonOperator&quot;: &quot;string&quot;,
         &quot;Exists&quot;: boolean,
         &quot;Value&quot;: {
            &quot;B&quot;: blob,
            &quot;BOOL&quot;: boolean,
            &quot;BS&quot;: [ blob ],
            &quot;L&quot;: [
               &quot;AttributeValue&quot;
            ],
            &quot;M&quot;: {
               &quot;string&quot; : &quot;AttributeValue&quot;
            },
            &quot;N&quot;: &quot;string&quot;,
            &quot;NS&quot;: [ &quot;string&quot; ],
            &quot;NULL&quot;: boolean,
            &quot;S&quot;: &quot;string&quot;,
            &quot;SS&quot;: [ &quot;string&quot; ]
         }
      }
   },
   &quot;ExpressionAttributeNames&quot;: {
      &quot;string&quot; : &quot;string&quot;
   },
   &quot;ExpressionAttributeValues&quot;: {
      &quot;string&quot; : {
         &quot;B&quot;: blob,
         &quot;BOOL&quot;: boolean,
         &quot;BS&quot;: [ blob ],
         &quot;L&quot;: [
            &quot;AttributeValue&quot;
         ],
         &quot;M&quot;: {
            &quot;string&quot; : &quot;AttributeValue&quot;
         },
         &quot;N&quot;: &quot;string&quot;,
         &quot;NS&quot;: [ &quot;string&quot; ],
         &quot;NULL&quot;: boolean,
         &quot;S&quot;: &quot;string&quot;,
         &quot;SS&quot;: [ &quot;string&quot; ]
      }
   },
   &quot;Key&quot;: {
      &quot;string&quot; : {
         &quot;B&quot;: blob,
         &quot;BOOL&quot;: boolean,
         &quot;BS&quot;: [ blob ],
         &quot;L&quot;: [
            &quot;AttributeValue&quot;
         ],
         &quot;M&quot;: {
            &quot;string&quot; : &quot;AttributeValue&quot;
         },
         &quot;N&quot;: &quot;string&quot;,
         &quot;NS&quot;: [ &quot;string&quot; ],
         &quot;NULL&quot;: boolean,
         &quot;S&quot;: &quot;string&quot;,
         &quot;SS&quot;: [ &quot;string&quot; ]
      }
   },
   &quot;ReturnConsumedCapacity&quot;: &quot;string&quot;,
   &quot;ReturnItemCollectionMetrics&quot;: &quot;string&quot;,
   &quot;ReturnValues&quot;: &quot;string&quot;,
   &quot;TableName&quot;: &quot;string&quot;,
   &quot;UpdateExpression&quot;: &quot;string&quot;
}
</code></pre>
<p>参数说明：</p>
<ul>
<li>Key: 主键，用于定位项目</li>
<li>TableName：表名 （最小 3. 最大 255）</li>
<li>Expected：</li>
<li>AttributeUpdates： 遗留参数，已废弃</li>
<li>ConditionalOperator： 遗留参数，已废弃</li>
<li>ConditionExpression：条件表达式（仅在特定 ConditionExpression 的计算结果为 true 时成功完成）</li>
<li>ExpressionAttributeNames：条件表达式的名称的别名，比如 date 为保留字，可用别名定义为 #d</li>
<li>ExpressionAttributeValues：条件表达式的值</li>
<li>ReturnConsumedCapacity：显示使用的写入容量单位数
<ul>
<li>TOTAL 会返回由表及其所有global secondary index占用的写入容量；</li>
<li>INDEXES 仅返回由global secondary index占用的写入容量；</li>
<li>NONE 表示您不需要返回任何占用容量统计数据。</li>
</ul>
</li>
<li>ReturnValues: 更新后返回的数据.
<ul>
<li>NONE - 如果没有特别说明，返回None (这个是默认值)</li>
<li>ALL_OLD - 按在进行更新之前的情况，返回整个项目。</li>
<li>ALL_NEW - 按在进行更新之后的情况，返回整个项目。</li>
<li>UPDATED_OLD - 按在进行更新之前的情况，仅返回更新的值。</li>
<li>UPDATED_NEW - 按在进行更新之后的情况，仅返回更新的值。</li>
</ul>
</li>
<li>UpdateExpression：指定要修改的属性以及这些属性的新值，更新表达式还指定如何修改属性。下面是更新表达式的语法摘要：</li>
</ul>
<pre><code>update-expression ::=
SET set-action , ...
| REMOVE remove-action , ...  
| ADD add-action , ...
| DELETE delete-action , ...  
</code></pre>
<p>更新表达式由多个部分组成。每个部分以一个 SET、REMOVE、ADD 或 DELETE 关键字开头。您可在更新表达式中按任意顺序包含其中任意部分。但是，每个部分关键字只能出现一次。您可以同时修改多个属性。以下是更新表达式的一些示例：</p>
<ul>
<li>SET list[0] = :val1</li>
<li>REMOVE #m.nestedField1, #m.nestedField2</li>
<li>ADD aNumber :val2, anotherNumber :val3</li>
<li>DELETE aSet :val4</li>
</ul>
<p>以下示例显示了带有多个部分的单个更新表达式：</p>
<pre><code class="language-json">SET list[0] = :val1 REMOVE #m.nestedField1, #m.nestedField2 ADD aNumber :val2, anotherNumber :val3 DELETE aSet :val4
</code></pre>
<p>我们可以在更新表达式中使用任意属性名称，<em>第一个字符是 a-z 或 A-Z</em>，<em>第二个字符（如果存在）是 a-z、A-Z 或 0-9</em>。<br>
如果属性名称不满足此要求，则需要将表达式属性名称定义为占位符。更多信息参考（表达式属性名称）。</p>
<p>要在更新表达式中指定文本值，可以使用表达式属性值。更多信息参考（表达式属性值）。</p>
<hr>
<h5 id="set">SET</h5>
<p>在更新表达式中使用 SET 操作可将一个或多个属性与值添加到项目。如果这些属性已存在，则更新。还可以使用 SET 来加或减数字类型的属性。对多个属性执行 SET 操作，使用逗号分隔。</p>
<p>set语法如下：</p>
<pre><code>set-action ::=
    path = value

value ::=
    operand
    | operand '+' operand
    | operand '-' operand

operand ::=
    path | function
</code></pre>
<ul>
<li>path 元素是项目的文档路径。(比如项目中info 为字典 info 中 a 的路径为info['a'])</li>
<li>operand 元素可以为项目的文档路径，或者为函数。</li>
</ul>
<p>SET 操作支持以下函数：</p>
<ul>
<li>if_not_exists (path, operand) - 如果项目在指定 path 中不包含属性，则 if_not_exists 的求值结果为 operand；否则求值结果为 path。您可以使用此函数来避免覆盖项目中已存在的属性。</li>
<li>list_append (operand, operand) - 此函数的求值结果为列表，新元素将添加到列表中。新元素必须包含在列表中，例如要向列表中添加 2，操作数将成为 [2]。您可以通过反转操作数的顺序，将新元素附加到列表的开头或结尾。</li>
</ul>
<p>以下是在这些函数中使用 SET 操作的一些示例。</p>
<p>如果属性已存在，则以下示例不执行任何操作；否则它会将属性设置为默认值。</p>
<pre><code>SET Price = if_not_exists(Price, 100)
</code></pre>
<p>以下示例将新元素添加到 FiveStar 评论列表。表达式属性名称 #pr 是 ProductReviews；属性值 :r 是只包含一个元素的列表。如果列表之前有两个元素 [0] 和 [1]，则新元素将为 [2]。</p>
<pre><code>SET #pr.FiveStar = list_append(#pr.FiveStar, :r)
</code></pre>
<p>以下示例将另一个元素添加到 FiveStar 评论列表中，但此时元素将附加到列表开头的位置 [0] 处。列表中的所有其他元素将会移动一位。</p>
<pre><code>SET #pr.FiveStar = list_append(:r, #pr.FiveStar)
</code></pre>
<h5 id="remove">REMOVE</h5>
<p>在更新表达式中使用 REMOVE 操作可从项目中删除一个或多个元素。要执行多个 REMOVE 操作，请使用逗号分隔。</p>
<p>下面是更新表达式中的 REMOVE 的语法摘要。唯一的操作数是您要删除的属性的文档路径：</p>
<pre><code>remove-action ::=
    path
</code></pre>
<p>以下是使用 REMOVE 操作的更新表达式示例。从项目中删除多个属性：</p>
<pre><code>REMOVE Title, RelatedItems[2], Pictures.RearView
</code></pre>
<p>对列表元素使用 REMOVE</p>
<p>当删除现有列表元素时，剩余的元素将会移位。例如，考虑以下列表：</p>
<pre><code>MyNumbers: { [&quot;Zero&quot;,&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Four&quot;] }
</code></pre>
<p>列表包含元素 [0]、[1]、[2]、[3] 和 [4]。现在，我们使用 REMOVE 操作删除两个元素：</p>
<pre><code>REMOVE MyNumbers[1], MyNumbers[3]
</code></pre>
<p>剩余的元素会向右移位，生成带有元素 [0]、[1] 和 [2] 的列表，每个元素具有以下数据：</p>
<pre><code>MyNumbers: { [&quot;Zero&quot;,&quot;Two&quot;,&quot;Four&quot;] }
</code></pre>
<blockquote>
<p>如果您使用 REMOVE 来删除超出列表中最后一个元素位置的不存在项目，则将不执行任何操作：也就是不删除任何数据。例如，以下表达式对 MyNumbers 列表没有任何效果：</p>
</blockquote>
<pre><code>REMOVE MyNumbers[11]
</code></pre>
<h5 id="add">ADD</h5>
<p><em>ADD 操作仅支持数字和集数据类型。一般而言，我们建议使用 SET 而不是 ADD。</em></p>
<p>在更新表达式中使用 ADD 可执行以下任一操作：</p>
<ul>
<li>如果属性尚不存在，则将新属性及其值添加到项目。</li>
<li>如果属性已存在，则 ADD 的行为取决于属性的数据类型：</li>
<li>如果属性是数字，并且添加的值也是数字，则该值将按数学运算与现有属性相加。（如果该值为负数，则从现有属性减去该值。）</li>
<li>如果属性是集，并且您添加的值也是集，则该值将附加到现有集中。</li>
<li>要执行多个 ADD 操作，请使用逗号分隔。</li>
</ul>
<p>在以下语法摘要中：</p>
<ul>
<li>path 元素是属性的文档路径。属性必须为数字或集数据类型。</li>
<li>value 元素是要与属性相加的值（对于数字数据类型），或者是要附加到属性中的集（对于集类型）。</li>
</ul>
<pre><code>add-action ::=
    path value
</code></pre>
<p>以下是使用 add 操作的一些更新表达式示例。</p>
<p>以下示例对数字进行加运算。表达式属性值 :n 是数字，此值将与 Price 相加。</p>
<pre><code>ADD Price :n
</code></pre>
<p>以下示例将一个或多个值添加到 Color 集。表达式属性值 :c 是字符串集。</p>
<pre><code>ADD Color :c
</code></pre>
<h5 id="delete">DELETE</h5>
<p><em>DELETE 操作只支持集数据类型。</em></p>
<p>在更新表达式中使用 DELETE 操作可从集中删除元素。要执行多个 DELETE 操作，请使用逗号分隔。</p>
<p>在以下语法摘要中：</p>
<ul>
<li>path 元素是属性的文档路径。该属性必须是集数据类型。</li>
<li>value 元素是集中要删除的元素。</li>
</ul>
<pre><code>delete-action ::=
    path value
</code></pre>
<p>以下示例使用 DELETE 操作从 Color 集中删除元素。表达式属性值 :c 是字符串集。</p>
<pre><code>DELETE Color :c
</code></pre>
<h4 id="updateitem-示例如下">UpdateItem 示例如下：</h4>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET RecordLabel = :label&quot;,
    ExpressionAttributeValues: {
        &quot;:label&quot;: &quot;Global Records&quot;
    }
}
</code></pre>
<ul>
<li>UpdateItem必须指定要修改的项目的 Key 属性和一个用于指定属性值的 UpdateExpression。</li>
<li>UpdateItem 替换整个项目，而不是替换单个属性。</li>
<li>UpdateItem 的行为与“upsert”操作的行为类似：如果项目位于表中，则更新项目，否则添加（插入）新项目。</li>
<li>UpdateItem只能修改单个项目，如果要修改多个项目，则必须使用多个 UpdateItem 操作。</li>
<li>UpdateItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成。例如，除非歌曲的价格大于或等于 2.00，否则以下 UpdateItem 操作不会执行更新：</li>
</ul>
<h4 id="条件写入">条件写入</h4>
<p>要执行条件更新，请使用更新表达式以及条件表达式来执行 UpdateItem 操作。要继续执行操作，条件表达式的求值结果必须为 true；否则操作将失败。</p>
<p>假设您要将某项目的价格提高一定金额，如 :amt，但前提是结果不得超过最高价。为此，您可以计算当前允许提价的最高价，然后从最高价中减去提高的金额 :amt。将结果定义为 :limit，然后使用以下条件表达式：</p>
<p>条件表达式：Price &lt;= :limit)<br>
更新表达式：SET Price = Price + :amt<br>
现在假设您要为项目设置前视图图片，不过前提是该项目还没有任何图片，不希望覆盖任何现有元素。您可以使用以下表达式来执行操作：</p>
<p>更新表达式：SET Pictures.FrontView = :myUR<br>
（假设 :myURL 是项目图片的位置，例如 http://example.com/picture.jpg。）<br>
条件表达式：attribute_not_exists(Pictures.FrontView)</p>
<pre><code class="language-python">{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET RecordLabel = :label&quot;,
    ConditionExpression: &quot;Price &gt;= :p&quot;,
    ExpressionAttributeValues: {
        &quot;:label&quot;: &quot;Global Records&quot;,
        &quot;:p&quot;: 2.00
    }
}
</code></pre>
<ul>
<li>UpdateItem 还支持原子计数器或类型为 Number 的属性（可递增或递减）。原子计数器在很多方面都类似于 SQL 数据库中的顺序生成器、身份列或自递增字段。</li>
</ul>
<p>以下是一个 UpdateItem 操作的示例，它初始化一个新属性 (Plays) 来跟踪歌曲的已播放次数：</p>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET Plays = :val&quot;,
    ExpressionAttributeValues: {
        &quot;:val&quot;: 0
    },
    ReturnValues: &quot;UPDATED_NEW&quot;
}
</code></pre>
<p>ReturnValues 参数设置为 UPDATED_NEW，这将返回已更新的任何属性的新值。在此示例中，它返回 0（零）。</p>
<p>当某人播放此歌曲时，可使用以下 UpdateItem 操作来将 Plays 增加 1：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET Plays = Plays + :incr&quot;,
    ExpressionAttributeValues: {
        &quot;:incr&quot;: 1
    },
    ReturnValues: &quot;UPDATED_NEW&quot;
}
</code></pre>
<h4 id="总结一下">总结一下</h4>
<ul>
<li>UpdateItem 一次只能更新一个项目</li>
<li>UpdateItem 更新更新整个项目而不是只修改特点的值</li>
<li>UpdateItem 支持条件写入</li>
</ul>
<blockquote>
<p>这一节我们介绍了DynamoDB 项目的更新操作，下一节我们将介绍项目的删除操作（索引的查询又要延后了。。</p>
</blockquote>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751962&amp;idx=1&amp;sn=9d3e387c3fa946305598bc269b40fd3e&amp;chksm=80b0b830b7c73126364b48cb33915d9a51552327afb4cc73388984f5449f99871fd44465baa6#rd">原文链接</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门6：query 和 scan]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-query-and-scan/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-query-and-scan/">
        </link>
        <updated>2017-01-31T01:46:28.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一节我们介绍了DynamoDB索引的创建及管理，这一节我们将介绍query（查询）和scan（扫描）的使用。</p>
</blockquote>
<h1 id="查询query">查询Query</h1>
<p>SQL 可使用 SELECT 语句查询关键列、非关键列或任意组合。WHERE 子句确定返回的行。</p>
<p>DynamoDB Query 操作提供对存储数据的物理位置的快速高效访问。 可以将 Query 用于任何具有复合主键（分区键和排序键）的表。这里的表必须指定分区键的相等条件，并且可以选择性为排序键提供另一个条件。 KeyConditionExpression 参数指定要查询的键值。</p>
<p>HUGOMORE42</p>
<blockquote>
<p>可使用可选 FilterExpression 在结果中的找出某些符号条件的项目。</p>
</blockquote>
<p>在 DynamoDB 中，必须使用 ExpressionAttributeValues 作为表达式参数（例如，KeyConditionExpression和 FilterExpression）中的占位符。这类似于在关系数据库中使用绑定变量，在运行时将实际值代入 SELECT语句。 下边是query的语法：</p>
<pre><code class="language-python">response = table.query(
    IndexName='string',
    Select='ALL_ATTRIBUTES'|'ALL_PROJECTED_ATTRIBUTES'|'SPECIFIC_ATTRIBUTES'|'COUNT',
    AttributesToGet=[
        'string',
    ],
    Limit=123,
    ConsistentRead=True|False,
    ConditionalOperator='AND'|'OR',
    ScanIndexForward=True|False,
    ExclusiveStartKey={
      'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    },
    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',
    ProjectionExpression='string',
    FilterExpression=Attr('myattribute').eq('myvalue'),
    KeyConditionExpression=Key('mykey').eq('myvalue'),
    ExpressionAttributeNames={
        'string': 'string'
    },
    ExpressionAttributeValues={
        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    }
)
</code></pre>
<p>参数说明：</p>
<ul>
<li>
<p>ExclusiveStartKey: 起始查询的key，也就是上一页的最后一条数据</p>
</li>
<li>
<p>ConsistentRead: 是否使用强制一致性 默认False</p>
</li>
<li>
<p>ScanIndexForward: 索引的排序方式 True 为正序 False 为倒序 默认True</p>
</li>
<li>
<p>ReturnConsumedCapacity: DynamoDB 将返回条件写入期间使用的写入容量单位数</p>
<ul>
<li>TOTAL 会返回由表及其所有global secondary index占用的写入容量；</li>
<li>INDEXES 仅返回由global secondary index占用的写入容量；</li>
<li>NONE 表示您不需要返回任何占用容量统计数据。</li>
</ul>
</li>
<li>
<p>ProjectionExpression: 用于指定要在扫描结果中包含的属性</p>
</li>
<li>
<p>FilterExpression: 指定一个条件，以便仅返回符合条件的项目</p>
</li>
<li>
<p>KeyConditionExpression: 要查询的键值</p>
</li>
<li>
<p>ExpressionAttributeNames: 提供名称替换功能</p>
</li>
<li>
<p>ExpressionAttributeValues: 提供值替换功能</p>
</li>
</ul>
<p>以下是 DynamoDB 中的几个 Query 示例：</p>
<p>返回 Aritist = 'No One You Know' SongTitle='Call Me Today' 的歌曲：</p>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    KeyConditionExpression: &quot;Artist = :a and SongTitle = :t&quot;,
    ExpressionAttributeValues: {
        &quot;:a&quot;: &quot;No One You Know&quot;,
        &quot;:t&quot;: &quot;Call Me Today&quot;
    }
}
</code></pre>
<p>返回 Aitist='No One You Know' 的所以歌曲：</p>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    KeyConditionExpression: &quot;Artist = :a&quot;,
    ExpressionAttributeValues: {
        &quot;:a&quot;: &quot;No One You Know&quot;
    }
}
</code></pre>
<p>返回Aritist ='No One You Know' 并且 SongTitle 开头为Call 的所有歌曲：</p>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    KeyConditionExpression: &quot;Artist = :a and begins_with(SongTitle, :t)&quot;,
    ExpressionAttributeValues: {
        &quot;:a&quot;: &quot;No One You Know&quot;,
        &quot;:t&quot;: &quot;Call&quot;
    }
}
</code></pre>
<p>返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：</p>
<pre><code class="language-json">{
    TableName: &quot;Music&quot;,
    KeyConditionExpression: &quot;Artist = :a and contains(SongTitle, :t)&quot;,
    FilterExpression: &quot;price &lt; :p&quot;,
    ExpressionAttributeValues: {
        &quot;:a&quot;: &quot;No One You Know&quot;,
        &quot;:t&quot;: &quot;Today&quot;,
        &quot;:p&quot;: 1.00
    }
}
</code></pre>
<h2 id="python-example">Python Example</h2>
<p>boto3</p>
<p>返回 Aitist='The Acme Band' 的所有歌曲：</p>
<pre><code class="language-python"># ...
from boto3.dynamodb.conditions import Key, Attr

table = db3.Table('Music')

response = table.query(
    KeyConditionExpression=Key('Artist').eq('The Acme Band')
)

items = response['Items']
print(items)

## output
[
{
    u'Genre': u'Rock',
    u'Price': Decimal('0.99'),
    u'Artist': u'The Acme Band',
    u'SongTitle': u'Look Out, World',
    u'AlbumTitle': u'The Buck Starts Here'
},
{
    u'Artist': u'The Acme Band',
    u'Price': Decimal('2.47'),
    u'AlbumTitle': u'The Buck Starts Here',
    u'PromotionInfo': {
        u'RadioStationsPlaying': [u'KHCR', u'KBQX', u'WTNR', u'WJJH'],
        u'Rotation': u'Heavy',
        u'TourDates': {u'Seattle': u'20150625', u'Cleveland': u'20150630'}
    },
    u'Genre': u'Rock', u'SongTitle': u'Still In Love'
    }
]
</code></pre>
<p>返回 Artist='No One You Know' 并且SongTitle='Somewhere Down The Road' 的所有歌曲：</p>
<pre><code class="language-python">response = table.query(
    KeyConditionExpression=Key('Artist').eq('No One You Know') &amp; Key('SongTitle').eq('Somewhere Down The Road')
)
items = response['Items']
print(items)

## output

[{
    u'Artist': u'No One You Know',
    u'AlbumTitle': u'Somewhat Famous',
    u'CriticRating': Decimal('8.4'),
    u'Year': Decimal('1984'),
    u'Genre': u'Country',
    u'SongTitle': u'Somewhere Down The Road'
  }
]
</code></pre>
<p>返回Aritist ='No One You Know' 并且 SongTitle 开头为 Call 的所有歌曲：</p>
<pre><code class="language-python">response = table.query(
    KeyConditionExpression=Key('Artist').eq('The Acme Band') &amp; Key('SongTitle').begins_with('Look')
)
items = response['Items']
print(items)

## output

[
{
    u'Genre': u'Rock',
    u'Price': Decimal('0.99'),
    u'Artist': u'The Acme Band',
    u'SongTitle': u'Look Out, World',
    u'AlbumTitle': u'The Buck Starts Here'
}
]
</code></pre>
<p>返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：</p>
<pre><code class="language-python">response = table.query(
    KeyConditionExpression=Key('Artist').eq('The Acme Band'),
    FilterExpression=Attr('Price').lt(1)
)
items = response['Items']
print(items)

## output
[{
    u'Genre': u'Rock',
    u'Price': Decimal('0.99'),
    u'Artist': u'The Acme Band',
    u'SongTitle': u'Look Out, World',
    u'AlbumTitle': u'The Buck Starts Here'
},
]
</code></pre>
<h3 id="note">Note</h3>
<p>特别注意： 如果筛选条件是排序键，则是先过滤再返回结果，和SQL中where 筛选类似。 如果排序值不是排序建，则先返回结果再过滤。</p>
<p>例如：</p>
<p>表结构和项目值如下：</p>
<pre><code>Table Test:
    a: hash_key
    b: range_key
    c: number

for i in range(10):
    Test(a=1, b=i*10, c=i*20)
</code></pre>
<p>查询：</p>
<pre><code class="language-python">response = table.query(
    KeyConditionExpression=Key('a').eq('1') &amp; Key('b').gt('40'),
    Limit=2
)

查询结果为两个项目：

a=1, b=50, c=80
a=1, b=60, c=100

response = table.query(
    KeyConditionExpression=Key('a').eq('1'),
    FilterExpression=Attr('c').gt('80'),
    Limit=2
)

会发现查询没有结果。

这是因为DynamoDB 会默认按照 b 正序排列，limit=2 则限定了结果为：
a=1, b=10, c=20
a=1, b=20, c=40

可以看出，这个结果中并没有符合 c &gt; 80 的项目。
所以 结果为空。

不过还是会占读取吞吐量。
</code></pre>
<h2 id="scan">Scan</h2>
<p>在 SQL 中，不带 WHERE 子句的 SELECT 语句将返回表中的每个行。在 DynamoDB 中，Scan 操作可执行相同的工作。在这两种情况下，您都可以检索所有项目或部分项目。 无论您使用的是 SQL 还是 NoSQL 数据库，都应谨慎使用扫描操作，因为它们会占用大量系统资源</p>
<p>在 SQL 中，可在不指定 WHERE 子句的情况下使用 SELECT 语句扫描表并检索其所有数据。您可以在结果中请求一个或多个列。或者，如果您使用通配符 (*)，则可请求所有列。 下面是一些示例：</p>
<pre><code class="language-sql">/* Return all of the data in the table */
SELECT * FROM Music;
/* Return all of the values for Artist and Title */
SELECT Artist, Title FROM Music;
</code></pre>
<p>DynamoDB 提供以相似方式工作的 Scan 操作。 下面是Scan 的语法示例：</p>
<pre><code class="language-python">response = table.scan(
    IndexName='string',
    AttributesToGet=[
        'string',
    ],
    Limit=123,
    Select='ALL_ATTRIBUTES'|'ALL_PROJECTED_ATTRIBUTES'|'SPECIFIC_ATTRIBUTES'|'COUNT',
    ConditionalOperator='AND'|'OR',
    ExclusiveStartKey={
        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    },
    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',
    TotalSegments=123,
    Segment=123,
    ProjectionExpression='string',
    FilterExpression=Attr('myattribute').eq('myvalue'),
    ExpressionAttributeNames={
        'string': 'string'
    },
    ExpressionAttributeValues={
        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    },
    ConsistentRead=True|False
)
</code></pre>
<p>参数说明：</p>
<ul>
<li>
<p>ExclusiveStartKey: 起始查询的key，也就是上一页的最后一条数据</p>
</li>
<li>
<p>ConsistentRead: 是否使用强制一致性 默认False</p>
</li>
<li>
<p>ScanIndexForward: 索引的排序方式 True 为正序 False 为倒序 默认True</p>
</li>
<li>
<p>ReturnConsumedCapacity: DynamoDB 将返回条件写入期间使用的写入容量单位数</p>
<ul>
<li>TOTAL 会返回由表及其所有global secondary index占用的写入容量；</li>
<li>INDEXES 仅返回由global secondary index占用的写入容量；</li>
<li>NONE 表示您不需要返回任何占用容量统计数据。</li>
</ul>
</li>
<li>
<p>ProjectionExpression: 用于指定要在扫描结果中包含的属性</p>
</li>
<li>
<p>FilterExpression: 指定一个条件，以便仅返回符合条件的项目</p>
</li>
<li>
<p>KeyConditionExpression: 要查询的键值</p>
</li>
<li>
<p>ExpressionAttributeNames: 提供名称替换功能</p>
</li>
<li>
<p>ExpressionAttributeValues: 提供值替换功能</p>
</li>
</ul>
<blockquote>
<p>scan 的查询方式是先扫描所有数据，筛选条件也仅在扫描整个表后进行应用，所以会占用大量的读取吞吐量。</p>
</blockquote>
<p>下面是一些示例：</p>
<pre><code class="language-json">// Return all of the data in the table
{
    TableName:  &quot;Music&quot;
}
// Return all of the values for Artist and Title
{
    TableName:  &quot;Music&quot;,
    ProjectionExpression: &quot;Artist, Title&quot;
}
</code></pre>
<p>Scan 操作还提供一个 FilterExpression 参数以过滤符合条件的项目。在扫描整个表后且结果返回之前，应用 FilterExpression。（建议不要对大型表这样做：即使仅返回几个匹配项目，仍需为整个 Scan 付费。会占用吞吐量）</p>
<h3 id="python-example-2">Python Example</h3>
<p>boto3</p>
<p>返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：</p>
<pre><code class="language-python">response = table.scan(
    FilterExpression=Attr('Price').lt(2)&amp;Key('Artist').eq('The Acme Band')
)
items = response['Items']
print(items)

## output
[{
    u'Genre': u'Rock',
    u'Price': Decimal('0.99'),
    u'Artist': u'The Acme Band',
    u'SongTitle': u'Look Out, World',
    u'AlbumTitle': u'The Buck Starts Here'
},]
</code></pre>
<p>在代码中，请注意以下情况：</p>
<ul>
<li>ProjectionExpression 用于指定要在扫描结果中包含的属性。</li>
<li>FilterExpression 用于指定一个条件，以便仅返回符合条件的项目。所有其他项目都将被舍弃。</li>
<li>scan 方法每次返回项目的一个子集（称为页面）。响应中的 LastEvaluatedKey 值随后通过 ExclusiveStartKey 参数传递给 scan 方法。当返回最后一页后，LastEvaluatedKey 将不是响应的一部分。</li>
</ul>
<p>Note</p>
<ul>
<li>ExpressionAttributeNames 提供名称替换功能。我们使用此参数是因为 year 是 DynamoDB 中的保留字，您不能直接在任何表达式中使用它，包括 KeyConditionExpression。我们使用表达式属性名称 #yr 来解决此问题。</li>
<li>ExpressionAttributeValues 提供值替换功能。我们使用此参数是因为您不能在任何表达式中使用文字，包括 KeyConditionExpression。我们使用表达式属性值 :yyyy 来解决此问题。</li>
</ul>
<blockquote>
<p>这一节我们介绍了DynamoDB query和scan的基本用法，下一节将介绍使用索引查询</p>
</blockquote>
<p>tips:<br>
从这几篇的介绍可以发现DynamoDB的查询语法比较繁琐，写起来非常麻烦，所以我模仿sqlalchemy 写了一个orm，欢迎使用<a href="https://github.com/gusibi/dynamodb-py">!https://github.com/gusibi/dynamodb-py</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751959&amp;idx=1&amp;sn=ba71eac3e0113239031c326e421015ea&amp;chksm=80b0b83db7c7312b0eaf427dee3abdf6a94a7694d9c58974912db368d88128900da77ab25aba#rd">原文地址</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门5：索引创建及管理]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-Indexes/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-Indexes/">
        </link>
        <updated>2017-01-18T05:55:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一节我们介绍了项目的添加、修改、获取、删除（CRUD）操作，这一节将介绍索引的创建及管理。</p>
</blockquote>
<h3 id="创建索引">创建索引</h3>
<h4 id="sql">SQL</h4>
<p>在关系数据库中，索引是一个数据结构，可对表中的不同的列执行快速查询。可以使用 CREATE INDEX SQL 语句将索引添加到现有表，并指定要建立索引的列。在创建索引后，可以照常查询表中的数据，但现在数据库可使用索引快速查找表中的指定行，而不是扫描整个表。</p>
<p>在创建一个索引后，数据库将自动维护此索引。只要修改表中的数据，就会自动更改索引以反映表中的更改。</p>
<p>HUGOMORE42</p>
<p>在 MySQL 中，您可以创建如下所示的索引：</p>
<pre><code>CREATE INDEX GenreAndPriceIndex
ON Music (genre, price);
</code></pre>
<h4 id="dynamodb">DynamoDB</h4>
<p>在 DynamoDB 中，我们可以创建和使用secondary index来实现类似目的。</p>
<p>DynamoDB 中的索引与其关系对应项不同。当我们创建secondary index时，必须指定其键属性 - 分区键和排序键。<br>
在创建secondary index后，我们可以对它执行 Query 或 Scan 操作，就如同对表执行这些操作一样。<br>
DynamoDB 没有查询优化程序，因此，仅在我们对secondary index执行 Query 或 Scan 操作时使用它。</p>
<p>DynamoDB 支持两种不同的索引：</p>
<ul>
<li>全局二级索引 - 索引的主键可以是其表中的任意两个属性（<strong>可以在创建表时创建，也可以向现有表添加新全局二级索引，或者删除现有的全局二级索引</strong>）。</li>
<li>本地二级索引 - 索引的分区键必须与其表的分区键相同。不过，排序键可以是任何其他属性（<strong>是在创建表的同时创建的。不能向现有表添加本地二级索引，也不能删除已存在的任何本地二级索引</strong>）。</li>
</ul>
<p>DynamoDB 确保secondary index中的数据最终与其表保持一致。我们可以请求对表或local secondary index<strong>执行强一致性 Query 或 Scan 操作</strong>。但是，<strong>全局二级索引仅支持最终一致性</strong>。</p>
<p>可使用 UpdateTable 操作并指定 GlobalSecondaryIndexUpdates 来将global secondary index添加到现有表：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    AttributeDefinitions:[
        {AttributeName: &quot;Genre&quot;, AttributeType: &quot;S&quot;},
        {AttributeName: &quot;Price&quot;, AttributeType: &quot;N&quot;}
    ],
    GlobalSecondaryIndexUpdates: [
        {
            Create: {
                IndexName: &quot;GenreAndPriceIndex&quot;,
                KeySchema: [
                    {AttributeName: &quot;Genre&quot;, KeyType: &quot;HASH&quot;}, //Partition key
                    {AttributeName: &quot;Price&quot;, KeyType: &quot;RANGE&quot;}, //Sort key
                ],
                Projection: {
                    &quot;ProjectionType&quot;: &quot;ALL&quot;
                },
                ProvisionedThroughput: {
                    &quot;ReadCapacityUnits&quot;: 1,&quot;WriteCapacityUnits&quot;: 1
                }
            }
        }
    ]
}
</code></pre>
<p>添加索引时必须向 UpdateTable 提供以下参数：</p>
<ul>
<li>
<p>TableName – 索引将关联到的表。</p>
</li>
<li>
<p>AttributeDefinitions – 索引的键架构属性的数据类型。</p>
</li>
<li>
<p>GlobalSecondaryIndexUpdates – 有关要创建的索引的详细信息：</p>
<ul>
<li>IndexName - 索引的名称。</li>
<li>KeySchema – 用于索引主键的属性。</li>
<li>Projection - 表中要复制到索引的属性。在此情况下，ALL 意味着复制所有属性。</li>
<li>ProvisionedThroughput – 每秒需对此索引执行的读取和写入次数。（它与表的预配置吞吐量设置是分开的。）</li>
</ul>
</li>
</ul>
<p>在此操作中，会将表中的数据回填到新索引。在回填期间，表保持可用。但索引未准备就绪，直至其 Backfilling 属性从 true 变为 false。您可以使用 DescribeTable 操作查看此属性。</p>
<h4 id="python-示例">python 示例</h4>
<p>boto3</p>
<pre><code>import boto3
db3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')

table = db3.meta.client.update_table(
    TableName='Music',
    AttributeDefinitions=[
        {
            'AttributeName': &quot;Genre&quot;,
            'AttributeType': &quot;S&quot;
        },
        {
            'AttributeName': &quot;Price&quot;,
            'AttributeType': &quot;N&quot;
        }
    ],
    GlobalSecondaryIndexUpdates=[
        {
            'Create': {
                'IndexName': &quot;GenreAndPriceIndex&quot;,
                'KeySchema': [
                    {'AttributeName': &quot;Genre&quot;, 'KeyType': &quot;HASH&quot;},  # Partition key
                    {'AttributeName': &quot;Price&quot;, 'KeyType': &quot;RANGE&quot;}, # Sort key
                ],
                'Projection': {
                    &quot;ProjectionType&quot;: &quot;ALL&quot;
                },
                'ProvisionedThroughput': {
                    &quot;ReadCapacityUnits&quot;: 10,&quot;WriteCapacityUnits&quot;: 10
                }
            }
        }
    ]
)

db3.meta.client.describe_table(TableName='Music')
</code></pre>
<blockquote>
<p>output</p>
</blockquote>
<pre><code>{'ResponseMetadata': {'HTTPHeaders': {'content-length': '1082',
   'content-type': 'application/x-amz-json-1.0',
   'server': 'Jetty(8.1.12.v20130726)',
   'x-amz-crc32': '3717567836',
   'x-amzn-requestid': 'd63c0176-8257-428b-b6f3-af87219ba45b'},
  'HTTPStatusCode': 200,
  'RequestId': 'd63c0176-8257-428b-b6f3-af87219ba45b',
  'RetryAttempts': 0},
 u'Table': {u'AttributeDefinitions': [{u'AttributeName': u'Artist',
    u'AttributeType': u'S'},
   {u'AttributeName': u'Price', u'AttributeType': u'N'},
   {u'AttributeName': u'SongTitle', u'AttributeType': u'S'},
   {u'AttributeName': u'Genre', u'AttributeType': u'S'}],
  u'CreationDateTime': datetime.datetime(2017, 1, 14, 3, 9, 42, 63000, tzinfo=tzlocal()),
  u'GlobalSecondaryIndexes': [{u'IndexArn': u'arn:aws:dynamodb:ddblocal:000000000000:table/Music/index/GenreAndPriceIndex',
    u'IndexName': u'GenreAndPriceIndex',
    u'IndexSizeBytes': 0,
    u'IndexStatus': u'ACTIVE',
    u'ItemCount': 0,
    u'KeySchema': [{u'AttributeName': u'Genre', u'KeyType': u'HASH'},
     {u'AttributeName': u'Price', u'KeyType': u'RANGE'}],
    u'Projection': {u'ProjectionType': u'ALL'},
    u'ProvisionedThroughput': {u'ReadCapacityUnits': 10,
     u'WriteCapacityUnits': 10}}],
  u'ItemCount': 0,
  u'KeySchema': [{u'AttributeName': u'Artist', u'KeyType': u'HASH'},
   {u'AttributeName': u'SongTitle', u'KeyType': u'RANGE'}],
  u'ProvisionedThroughput': {u'LastDecreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),
   u'LastIncreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),
   u'NumberOfDecreasesToday': 0,
   u'ReadCapacityUnits': 10,
   u'WriteCapacityUnits': 10},
  u'TableArn': u'arn:aws:dynamodb:ddblocal:000000000000:table/Music',
  u'TableName': u'Music',
  u'TableSizeBytes': 0,
  u'TableStatus': u'ACTIVE'}}

</code></pre>
<hr>
<h3 id="索引扩展">索引扩展</h3>
<h3 id="管理索引">管理索引</h3>
<p>索引可以访问替代查询模式，并可以加快查询速度。</p>
<p>无论使用的是关系数据库还是 DynamoDB，在创建索引时都应谨慎。只要对表进行写入，就必须更新表的所有索引。在具有大型表的写入密集型环境中，这会占用大量系统资源。</p>
<p>为了对表中的数据进行高效访问，Amazon DynamoDB 对主键属性创建并维护索引。这可以让应用程序通过指定主键值快速地检索数据。<br>
可以对表创建一个或多个二级索引，然后对这些索引发出 Query 或 Scan 请求，以便通过主键以外的属性对数据进行高效访问。</p>
<p>secondary index 是一种数据结构，它包含表中属性的子集以及一个支持 Query 操作的替代键。我们可以使用 Query 从索引中检索数据，其方式与对表使用 Query 大致相同。一个表可以有多个secondary index，这样，应用程序可以访问许多不同的查询模式。</p>
<blockquote>
<p>也可以对索引使用 Scan，其方式与对表使用 Scan 大致相同。</p>
</blockquote>
<p>secondary index中的数据由从表投影 或复制到索引中的属性组成。在创建secondary index时，可以定义索引的替代键以及要在索引中投影的任何其他属性。DynamoDB 将这些属性与表中的主键属性一起复制到索引中。然后，就可以像查询或扫描表一样查询或扫描该索引。</p>
<p>每个secondary index都由 DynamoDB 自动维护。在表中添加、修改或删除项目时，表上的所有索引也会更新。</p>
<p>DynamoDB 支持两种secondary index：</p>
<ul>
<li>Global secondary index – 其分区键和排序键可以与表上的分区键和排序键不同的索引。global secondary index被视为“全局”，是因为对索引进行的查询可以跨表中所有分区的所有数据。</li>
<li>Local secondary index – 一种分区键与表中的相同但排序键与表中的不同的索引。local secondary index的含义是“本地”，表示local secondary index的每个分区的范围都限定为具有相同分区键值的表分区。</li>
</ul>
<p>下表是global secondary index与local secondary index的主要差异：</p>
<hr>
<table>
<thead>
<tr>
<th>性能</th>
<th>全局二级索引</th>
<th>本地二级索引</th>
</tr>
</thead>
<tbody>
<tr>
<td>键架构</td>
<td>global secondary index的<strong>主键可以是简单主键（分区键）或复合主键（分区键和排序键）</strong>。</td>
<td>local secondary index的<strong>主键必须是复合主键</strong>（分区键和排序键）。</td>
</tr>
<tr>
<td>键属性</td>
<td>索引分区键和排序键（如果有）可以是字符串、数字或二进制类型的任何表属性。</td>
<td>索引的分区键是与表的分区键相同的属性。排序键可以是字符串、数字或二进制类型的任何表属性。</td>
</tr>
<tr>
<td>每个分区键值的大小限制</td>
<td>global secondary index<strong>没有大小限制</strong>。</td>
<td>对于每个分区键值，<strong>所有索引项目的大小总和必须为 10GB 或更小</strong>。</td>
</tr>
<tr>
<td>在线索引操作</td>
<td>可以在创建表时创建Global secondary index。也可以向现有表添加新global secondary index，或者删除现有global secondary index。</td>
<td>Local secondary index是在<strong>创建表的同时创建的</strong>。不能向现有表添加local secondary index，也不能删除已存在的任何local secondary index。</td>
</tr>
<tr>
<td>查询和分区</td>
<td>通过global secondary index，<strong>可以跨所有分区查询整个表</strong>。</td>
<td>借助local secondary index，<strong>可以对查询中分区键值指定的单个分区进行查询</strong>。</td>
</tr>
<tr>
<td>读取一致性</td>
<td>对global secondary index进行的查询<strong>仅支持最终一致性</strong>。</td>
<td>查询local secondary index时，<strong>可以选择最终一致性或强一致性</strong>。</td>
</tr>
<tr>
<td>预配置吞吐量使用</td>
<td>每个global secondary index都<strong>有自己的用于读取和写入活动的预配置吞吐量设置</strong>。对global secondary index进行的查询或扫描会占用索引（而非表）的容量单位。global secondary index更新也是如此，因为会进行表写入。</td>
<td>对local secondary index进行的查询或扫描<strong>会占用表的读取容量单位</strong>。向表写入时，其local secondary index也会更新；这些更新会占用表的写入容量单位。</td>
</tr>
<tr>
<td>投影属性</td>
<td>对于global secondary index查询或扫描，<strong>只能请求投影到索引中的属性</strong>。DynamoDB 不从表提取任何属性。</td>
<td>如果您查询或扫描local secondary index，可以<strong>请求未投影到索引中的属性</strong>。DynamoDB 自动从表提取这些属性。</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>如果要创建多个含有secondary index的表，必须按顺序执行此操作。例如，先创建第一个表，等待其状态变为 ACTIVE，创建下一个表，等待其状态变为 ACTIVE，依此类推。如果我们尝试同时创建多个含有secondary index的表，DynamoDB 会返回 LimitExceededException。</p>
</blockquote>
<p>对于每个secondary index，必须指定以下内容：</p>
<ul>
<li>要创建的索引的类型 – global secondary index或local secondary index。</li>
<li>索引的名称。索引的命名规则与表的命名规则相同，对于听一个表的不同索引，索名称必须是唯一的，不过，与不同的表的索引的名称可以相同。</li>
<li>索引的键架构。索引键架构中的每个属性必须是类型为字符串、数字或二进制的顶级属性。其他数据类型，包括文档和集，均不受支持。键架构的其他要求取决于索引的类型：
<ul>
<li>对于global secondary index，分区键可以是任何标量表属性。排序键是可选的，也可以是任何标量表属性。</li>
<li>对于local secondary index，分区键必须与表的分区键相同，排序键必须是非键表属性。</li>
</ul>
</li>
<li>从表投影到索引中的其他属性（如果有）必须是除表键属性之外的属性。（表键属性会自动投影到每个索引）</li>
<li>索引的预配置吞吐量设置（如有必要）：
<ul>
<li>对于global secondary index，必须指定读取和写入容量单位设置。这些预配置吞吐量设置独立于表的设置。</li>
<li>对于local secondary index，无需指定读取和写入容量单位设置。对local secondary index进行的读取和写入操作会占用其父表的预配置吞吐量设置。</li>
</ul>
</li>
</ul>
<blockquote>
<p>为获得最大查询灵活性，您可以为每个表创建最多 5 个 global secondary index和最多 5 个local secondary index。</p>
</blockquote>
<p>可以使用 DescribeTable 操作获取表上secondary index的详细列表。DescribeTable 返回表上每个secondary index的名称、存储大小和项目数。<strong>系统并不会实时更新这些值，但会大约每隔六个小时刷新一次</strong>。</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751953&amp;idx=1&amp;sn=13195866ffc6106d90bb60df86347101&amp;chksm=80b0b83bb7c7312d00c186d2603835ff7f49a6c0fb77c1c94c3ee7cd30b45f7661c7b8c03e42#rd">原文地址</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门4：项目的基本操作（CRUD）]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-Item-CRUD/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-Item-CRUD/">
        </link>
        <updated>2017-01-18T05:53:38.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>上一节我们介绍了DynamoDB 表的操作，这一节将介绍项目的添加 修改 获取 删除操作。</p>
</blockquote>
<h2 id="创建项目">创建项目</h2>
<p>Amazon DynamoDB 提供了 PutItem 和 BatchWriteItem 两种方式写入数据</p>
<h3 id="添加单个项目">添加单个项目</h3>
<p>在 Amazon DynamoDB 中，使用 PutItem 操作向表添加项目：</p>
<p>HUGOMORE42</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Item: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;,
        &quot;AlbumTitle&quot;:&quot;Somewhat Famous&quot;,
        &quot;Year&quot;: 2015,
        &quot;Price&quot;: 2.14,
        &quot;Genre&quot;: &quot;Country&quot;,
        &quot;Tags&quot;: {
            &quot;Composers&quot;: [
                  &quot;Smith&quot;,
                  &quot;Jones&quot;,
                  &quot;Davis&quot;
            ],
            &quot;LengthInSeconds&quot;: 214
        }
    }
}
</code></pre>
<p>此表的主键包含 Artist 和 SongTitle。您必须为这些属性指定值。<br>
以下是要了解的有关此 PutItem 示例的几个关键事项：</p>
<ul>
<li>
<p>DynamoDB 使用 JSON 提供对文档的本机支持。这使得 DynamoDB 非常适合存储半结构化数据，例如 Tags。您也可以从 JSON 文档中检索和操作数据。</p>
</li>
<li>
<p>除了主键（Artist 和 SongTitle），Music 表没有预定义的属性。</p>
</li>
<li>
<p>大多数 SQL 数据库是面向事务的。当您发出 INSERT 语句时，数据修改不是永久性的，直至您发出 COMMIT 语句。利用 Amazon DynamoDB，当 DynamoDB 通过 HTTP 200 状态代码 (OK) 进行回复时，PutItem 操作的效果是永久性的。</p>
</li>
</ul>
<h4 id="python-example">Python Example</h4>
<p>boto3</p>
<pre><code># ...
table = db3.Table('Music')
table.put_item(
      Item = {
        &quot;Artist&quot;: &quot;No One You Know&quot;,
        &quot;SongTitle&quot;: &quot;My Dog Spot&quot;,
        &quot;AlbumTitle&quot;: &quot;Hey Now&quot;,
        &quot;Price&quot;: Decimal('1.98'),
        &quot;Genre&quot;: &quot;Country&quot;,
        &quot;CriticRating&quot;: Decimal('8.4')
    }
)

Out[98]:
{'ResponseMetadata': {'HTTPHeaders': {'content-length': '2',
   'content-type': 'application/x-amz-json-1.0',
   'server': 'Jetty(8.1.12.v20130726)',
   'x-amz-crc32': '2745614147',
   'x-amzn-requestid': 'c7c6be12-9752-403f-97b1-a9ac451a0a98'},
  'HTTPStatusCode': 200,
  'RequestId': 'c7c6be12-9752-403f-97b1-a9ac451a0a98',
  'RetryAttempts': 0}}

table.put_item(
      Item = {
        &quot;Artist&quot;: &quot;No One You Know&quot;,
        &quot;SongTitle&quot;: &quot;Somewhere Down The Road&quot;,
        &quot;AlbumTitle&quot;:&quot;Somewhat Famous&quot;,
        &quot;Genre&quot;: &quot;Country&quot;,
        &quot;CriticRating&quot;: Decimal('8.4'),
        &quot;Year&quot;: 1984
    }
)
table.put_item(
      Item = {
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Still In Love&quot;,
        &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
        &quot;Price&quot;: Decimal('2.47'),
        &quot;Genre&quot;: &quot;Rock&quot;,
        &quot;PromotionInfo&quot;: {
            &quot;RadioStationsPlaying&quot;:[
                 &quot;KHCR&quot;, &quot;KBQX&quot;, &quot;WTNR&quot;, &quot;WJJH&quot;
            ],
            &quot;TourDates&quot;: {
                &quot;Seattle&quot;: &quot;20150625&quot;,
                &quot;Cleveland&quot;: &quot;20150630&quot;
            },
            &quot;Rotation&quot;: &quot;Heavy&quot;
        }
    }
)

table.put_item(
      Item = {
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Look Out, World&quot;,
        &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
        &quot;Price&quot;: Decimal('0.99'),
        &quot;Genre&quot;: &quot;Rock&quot;
    }
)

</code></pre>
<p>Note</p>
<ul>
<li>PutItem 是覆盖操作，如果主键相同，第二次执行将覆盖掉之前的数据</li>
<li>除了 PutItem 之外，Amazon DynamoDB 还支持同时写入多个（最多25个）项目的 BatchWriteItem 操作。</li>
</ul>
<h3 id="添加多个项目">添加多个项目</h3>
<h4 id="python-example-2">Python Example</h4>
<p>boto3</p>
<pre><code># ...
table = db3.Table('Music')

with table.batch_writer() as batch:
    batch.put_item(
        Item = {
            &quot;Artist&quot;: &quot;The Acme Band&quot;,
            &quot;SongTitle&quot;: &quot;Look Out, World&quot;,
            &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
            &quot;Price&quot;: Decimal('0.99'),
            &quot;Genre&quot;: &quot;Rock&quot;
        }
    )
    batch.put_item(
        Item = {
            &quot;Artist&quot;: &quot;The Acme Band 0&quot;,
            &quot;SongTitle&quot;: &quot;Look Out, World&quot;,
            &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
            &quot;Price&quot;: Decimal('1.99'),
            &quot;Genre&quot;: &quot;Rock&quot;
        }
    )
    batch.put_item(
        Item = {
            &quot;Artist&quot;: &quot;The Acme Band 1&quot;,
            &quot;SongTitle&quot;: &quot;Look Out, World&quot;,
            &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
            &quot;Price&quot;: Decimal('2.99'),
            &quot;Genre&quot;: &quot;Rock&quot;
        }
    )
    batch.put_item(
        Item = {
            &quot;Artist&quot;: &quot;The Acme Band 1&quot;,
            &quot;SongTitle&quot;: &quot;Look Out, World&quot;,
            &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
        }
    )
</code></pre>
<p>BatchWriteItem 使用 overwrite_by_pkeys=['partition_key','sort_key'] 参数去除项目中重复的部分。</p>
<pre><code>with table.batch_writer(overwrite_by_pkeys=['partition_key', 'sort_key']) as batch:
    batch.put_item(
        Item={
            'partition_key': 'p1',
            'sort_key': 's1',
            'other': '111',
        }
    )
    batch.put_item(
        Item={
            'partition_key': 'p1',
            'sort_key': 's1',
            'other': '222',
        }
    )
</code></pre>
<p>去重后，等同于:</p>
<pre><code>with table.batch_writer(overwrite_by_pkeys=['partition_key', 'sort_key']) as batch:
    batch.put_item(
        Item={
            'partition_key': 'p1',
            'sort_key': 's1',
            'other': '222',
        }
    )
</code></pre>
<h2 id="读取数据">读取数据</h2>
<p>利用 SQL，我们可以使用 SELECT 语句从表中检索一个或多个行。可使用 WHERE 子句来确定返回给您的数据</p>
<p>DynamoDB 提供以下操作来读取数据：</p>
<ul>
<li>GetItem - 从表中检索单个项目。这是读取单个项目的最高效方式，因为它将提供对项目的物理位置的直接访问。（DynamoDB 还提供 BatchGetItem 操作，在单个操作中执行最多 100 个 GetItem 调用。）</li>
<li>Query - 检索具有特定分区键的所有项目。在这些项目中，您可以将条件应用于排序键并仅检索一部分数据。Query提供对存储数据的分区的快速高效的访问。</li>
<li>Scan - 检索指定表中的所有项目。</li>
</ul>
<p>Note</p>
<p>利用关系数据库，您可以使用 SELECT 语句联接多个表中的数据并返回结果。联接是关系模型的基础。要确保联接高效执行，应持续优化数据库及其应用程序的性能。<br>
DynamoDB 是一个非关系 NoSQL 数据库且不支持表联接。相反，应用程序一次从一个表中读取数据。</p>
<h3 id="使用项目的主键读取项目">使用项目的主键读取项目</h3>
<p>DynamoDB 提供 GetItem 操作来按项目的主键检索项目。</p>
<p>默认情况下，GetItem 将返回整个项目及其所有属性。</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;: &quot;No One You Know&quot;,
        &quot;SongTitle&quot;: &quot;Call Me Today&quot;
    }
}
</code></pre>
<p>可以添加 ProjectionExpression 参数以仅返回一些属性：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;: &quot;No One You Know&quot;,
        &quot;SongTitle&quot;: &quot;Call Me Today&quot;
    },
    &quot;ProjectionExpression&quot;: &quot;AlbumTitle, Price&quot;
}
</code></pre>
<ul>
<li>DynamoDB GetItem 操作非常高效：此操作使用主键值确定相关项目的准确存储位置，并直接此位置检索该项目。</li>
<li>SQL SELECT 语句支持多种查询和表扫描。DynamoDB 通过其 Query 和 Scan 操作提供相似功能，如查询表和扫描表中所述。</li>
<li>SQL SELECT 语句可执行表联接，这允许您同时从多个表中检索数据。DynamoDB 是一个非关系数据库。因此，它不支持表联接。</li>
</ul>
<blockquote>
<p>Query 和 Scan 操作将在之后的章节详细介绍。</p>
</blockquote>
<h4 id="python-example-3">Python Example</h4>
<p>boto3</p>
<pre><code># ...
table = db3.Table('Music')
response = table.get_item(
    Key={
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Still In Love&quot;
    }
)
item = response['Item']
print(item)

# output
{
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Still In Love&quot;,
        &quot;AlbumTitle&quot;:&quot;The Buck Starts Here&quot;,
        &quot;Price&quot;: Decimal('2.47'),
        &quot;Genre&quot;: &quot;Rock&quot;,
        &quot;PromotionInfo&quot;: {
            &quot;RadioStationsPlaying&quot;:[
                 &quot;KHCR&quot;, &quot;KBQX&quot;, &quot;WTNR&quot;, &quot;WJJH&quot;
            ],
            &quot;TourDates&quot;: {
                &quot;Seattle&quot;: &quot;20150625&quot;,
                &quot;Cleveland&quot;: &quot;20150630&quot;
            },
            &quot;Rotation&quot;: &quot;Heavy&quot;
        }
    }

response = table.get_item(
    Key={
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Still In Love&quot;
    },
    ProjectionExpression = &quot;AlbumTitle, Price&quot;
)
item = response['Item']
print(item)
{
    'AlbumTitle': u'The Buck Starts Here',
    'Price': Decimal('2.47')
}
</code></pre>
<h2 id="更新">更新</h2>
<p>SQL 语言提供用于修改数据的 UPDATE 语句。DynamoDB 使用 UpdateItem 操作完成类似的任务。</p>
<p>在 DynamoDB 中，可使用 UpdateItem 操作修改单个项目。（如果要修改多个项目，则必须使用多个 UpdateItem 操作。）<br>
示例如下：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET RecordLabel = :label&quot;,
    ExpressionAttributeValues: {
        &quot;:label&quot;: &quot;Global Records&quot;
    }
}
</code></pre>
<ul>
<li>必须指定要修改的项目的 Key 属性和一个用于指定属性值的 UpdateExpression。</li>
<li>UpdateItem 替换整个项目，而不是替换单个属性。</li>
<li>UpdateItem 的行为与**“upsert”操作的行为类似**：如果项目位于表中，则更新项目，否则添加（插入）新项目。</li>
<li>UpdateItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成</li>
</ul>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET RecordLabel = :label&quot;,
    ConditionExpression: &quot;Price &gt;= :p&quot;,
    ExpressionAttributeValues: {
        &quot;:label&quot;: &quot;Global Records&quot;,
        &quot;:p&quot;: 2.00
    }
}
</code></pre>
<ul>
<li>UpdateItem 还支持原子计数器或类型为 Number 的属性（可递增或递减）。</li>
</ul>
<p>以下是一个 UpdateItem 操作的示例，它初始化一个新属性 (Plays) 来跟踪歌曲的已播放次数：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET Plays = :val&quot;,
    ExpressionAttributeValues: {
        &quot;:val&quot;: 0
    },
    ReturnValues: &quot;UPDATED_NEW&quot;
}

</code></pre>
<p>ReturnValues 参数设置为 UPDATED_NEW，这将返回已更新的任何属性的新值。在此示例中，它返回 0（零）。</p>
<p>当某人播放此歌曲时，可使用以下 UpdateItem 操作来将 Plays 增加 1：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression: &quot;SET Plays = Plays + :incr&quot;,
    ExpressionAttributeValues: {
        &quot;:incr&quot;: 1
    },
    ReturnValues: &quot;UPDATED_NEW&quot;
}
</code></pre>
<h4 id="python-example-4">Python Example</h4>
<p>boto3<br>
使用 UpdateItem 操作修改单个项目</p>
<pre><code>import boto3
import json
import decimal

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            if o % 1 &gt; 0:
                return float(o)
            else:
                return int(o)
        return super(DecimalEncoder, self).default(o)

db3 = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url=&quot;http://localhost:8000&quot;)

table = db3.Table('Music')

response = table.update_item(
    Key={
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression=&quot;SET RecordLabel = :label&quot;,
    ExpressionAttributeValues={
        &quot;:label&quot;: &quot;Global Records&quot;
    },
    ReturnValues=&quot;UPDATED_NEW&quot;
)

print(json.dumps(response, indent=4, cls=DecimalEncoder))
</code></pre>
<p>UpdateItem 条件写入 价格大于或等于 2.00 UpdateItem 执行更新</p>
<pre><code>table = db3.Table('Music')

response = table.update_item(
    Key={
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression=&quot;SET RecordLabel = :label&quot;,
    ConditionExpression=&quot;Price &gt;= :p&quot;,
    ExpressionAttributeValues={
        &quot;:label&quot;: &quot;Global Records&quot;,
        &quot;:p&quot;: 2.00
    },
    ReturnValues=&quot;UPDATED_NEW&quot;
)

</code></pre>
<p>UpdateItem 操作的示例，它初始化一个新属性 (Plays) 来跟踪歌曲的已播放次数</p>
<pre><code>table = db3.Table('Music')

response = table.update_item(
    Key={
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression=&quot;SET Plays = :val&quot;,
    ExpressionAttributeValues={
        &quot;:val&quot;: 0
    },
    ReturnValues=&quot;UPDATED_NEW&quot;
)

</code></pre>
<p>使用 UpdateItem 操作来将 Plays 增加 1</p>
<pre><code>table = db3.Table('Music')

response = table.update_item(
    Key={
        &quot;Artist&quot;:&quot;No One You Know&quot;,
        &quot;SongTitle&quot;:&quot;Call Me Today&quot;
    },
    UpdateExpression=&quot;SET Plays = Plays + :incr&quot;,
    ExpressionAttributeValues={
        &quot;:incr&quot;: 1
    },
    ReturnValues=&quot;UPDATED_NEW&quot;
)

</code></pre>
<h2 id="删除项目">删除项目</h2>
<p>在 SQL 中，DELETE 语句从表中删除一个或多个行。DynamoDB 使用 DeleteItem 操作一次删除一个项目。</p>
<p>在 DynamoDB 中，可使用 DeleteItem 操作从表中删除数据（一次删除一个项目）。您必须指定项目的主键值。示例如下：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        Artist: &quot;The Acme Band&quot;,
        SongTitle: &quot;Look Out, World&quot;
    }
}
</code></pre>
<p>Note</p>
<p>除了 DeleteItem 之外，Amazon DynamoDB 还支持同时删除多个项目的 BatchWriteItem 操作。</p>
<p>DeleteItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成。例如，以下 DeleteItem 操作仅在项目具有 RecordLabel 属性时删除项目：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        Artist: &quot;The Acme Band&quot;,
        SongTitle: &quot;Look Out, World&quot;
    },
   ConditionExpression: &quot;attribute_exists(RecordLabel)&quot;
}
</code></pre>
<h4 id="python-example-5">Python Example</h4>
<p>boto3</p>
<pre><code>table = db3.Table('Music')
table.delete_item(
    Key={
        'AlbumTitle': 'Hey Now'
        'Artist': 'No One You Know'
    }
)

</code></pre>
<blockquote>
<p>这一节我们介绍了项目的基本操作（CRUD），下一节将介绍索引的创建和管理。</p>
</blockquote>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751948&amp;idx=1&amp;sn=22046f0c62fa0e3a740306b5f106488a&amp;chksm=80b0b826b7c73130e0f65057f83aebea9b41c5edcdccd3230a07fe24f5864c5ed11e89f0ae05#rd">原文地址</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门3： 表的基本操作]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-table-operator/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-table-operator/">
        </link>
        <updated>2017-01-14T02:13:42.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>之前两篇文章介绍了DynamoDB如何在本地安装以及基本的工作原理和API，这一节主要介绍如何使用DynamoDB。</p>
</blockquote>
<p>基本的DynamoDB 操作包括表操作、项目操作和索引管理。</p>
<p>首先是链接数据库。和关系型数据库不同，<strong>DynamoDB 是一项 Web 服务，与其进行的交互是无状态的。应用程序不需要维护持久性网络连接。相反，与 DynamoDB 的交互是通过 HTTP(S) 请求和响应进行的。</strong></p>
<p>HUGOMORE42</p>
<p>执行某项操作的步骤为：</p>
<ol>
<li><strong>应用程序将 HTTP(S) 请求发送到 DynamoDB。该请求包含要执行的 DynamoDB 操作的名称和参数。DynamoDB 将立即执行请求。</strong></li>
<li><strong>DynamoDB 返回一个包含操作结果的 HTTP(S) 响应。如果出错，DynamoDB 将返回 HTTP 错误状态和消息。</strong></li>
</ol>
<p>大多数情况下，我们编写应用程序代码访问DynamoDB。同时还可以使用 AWS 管理控制台或 AWS Command Line Interface (AWS CLI) 向 DynamoDB 发送临时请求并查看结果。</p>
<p>剩下的就让我们用代码展示吧！</p>
<h2 id="表操作">表操作</h2>
<p>我们知道，关系模型需要一个明确定义的架构，其中，数据将标准化为表、列和行。此外，在表、列、索引和其他数据库元素之间定义所有关系。但 DynamoDB 不同，<strong>DynamoDB 没有架构。每个表必须具有一个用来唯一标识每个数据项目的主键，但对其他非键属性没有类似的约束。DynamoDB 可以管理结构化或半结构化的数据，包括 JSON 文档。</strong></p>
<p>表是关系数据库和 DynamoDB 中的基本数据结构。关系数据库管理系统 (RDBMS) 要求在创建表时定义表的架构。相比之下，DynamoDB 表没有架构 - 与主键不同，我们在创建表时无需定义任何属性或数据类型。</p>
<h3 id="新建表">新建表</h3>
<p>DynamoDB 使用 CreateTable 操作创建表，并指定参数，请求语法如下所示：</p>
<pre><code>{
   &quot;AttributeDefinitions&quot;: [
      {
         &quot;AttributeName&quot;: &quot;string&quot;,
         &quot;AttributeType&quot;: &quot;string&quot;
      }
   ],
   &quot;GlobalSecondaryIndexes&quot;: [
      {
         &quot;IndexName&quot;: &quot;string&quot;,
         &quot;KeySchema&quot;: [
            {
               &quot;AttributeName&quot;: &quot;string&quot;,
               &quot;KeyType&quot;: &quot;string&quot;
            }
         ],
         &quot;Projection&quot;: {
            &quot;NonKeyAttributes&quot;: [ &quot;string&quot; ],
            &quot;ProjectionType&quot;: &quot;string&quot;
         },
         &quot;ProvisionedThroughput&quot;: {
            &quot;ReadCapacityUnits&quot;: number,
            &quot;WriteCapacityUnits&quot;: number
         }
      }
   ],
   &quot;KeySchema&quot;: [
      {
         &quot;AttributeName&quot;: &quot;string&quot;,
         &quot;KeyType&quot;: &quot;string&quot;
      }
   ],
   &quot;LocalSecondaryIndexes&quot;: [
      {
         &quot;IndexName&quot;: &quot;string&quot;,
         &quot;KeySchema&quot;: [
            {
               &quot;AttributeName&quot;: &quot;string&quot;,
               &quot;KeyType&quot;: &quot;string&quot;
            }
         ],
         &quot;Projection&quot;: {
            &quot;NonKeyAttributes&quot;: [ &quot;string&quot; ],
            &quot;ProjectionType&quot;: &quot;string&quot;
         }
      }
   ],
   &quot;ProvisionedThroughput&quot;: {
      &quot;ReadCapacityUnits&quot;: number,
      &quot;WriteCapacityUnits&quot;: number
   },
   &quot;StreamSpecification&quot;: {
      &quot;StreamEnabled&quot;: boolean,
      &quot;StreamViewType&quot;: &quot;string&quot;
   },
   &quot;TableName&quot;: &quot;string&quot;
}


</code></pre>
<p>必须向 CreateTable 提供以下参数：</p>
<ul>
<li>TableName – 表名称。</li>
<li>KeySchema – 用于主键的属性。有关更多信息，请参阅 表、项目和属性 和 主键。</li>
<li>AttributeDefinitions – 键架构属性的数据类型。</li>
<li>ProvisionedThroughput – 每秒需对此表执行的读取和写入次数。DynamoDB 将保留足量的存储和系统资源，以便始终满足吞吐量要求。也可在创建之后使用 UpdateTable 操作后更改这些设置。存储分配完全由 DynamoDB 管理，我们无需指定表的存储要求。</li>
</ul>
<p>AttributeType 的定义中：</p>
<ul>
<li>S - 字符串类型</li>
<li>N - 数字类型</li>
<li>B - 二进制类型</li>
</ul>
<h4 id="python-example">Python Example</h4>
<p>boto3</p>
<pre><code>import boto3
db3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')


table = db3.create_table(
    TableName='Music',
    KeySchema=[
        {
            'AttributeName': &quot;Artist&quot;,
            'KeyType': &quot;HASH&quot;
        },
        {
            'AttributeName': &quot;SongTitle&quot;,
            'KeyType': &quot;RANGE&quot;
        }
    ],
    AttributeDefinitions=[
        {
            'AttributeName': &quot;Artist&quot;,
            'AttributeType': &quot;S&quot;
        },
        {
            'AttributeName': &quot;SongTitle&quot;,
            'AttributeType': &quot;S&quot;
        }
    ],
    ProvisionedThroughput={       
        'ReadCapacityUnits': 1,
        'WriteCapacityUnits': 1
    }
)


# Wait until the table exists.
table.meta.client.get_waiter('table_exists').wait(TableName='Music')

# Print out some data about the table.
print(table.item_count)

</code></pre>
<p>此表的主键包括 Artist（分区键）和 SongTitle（排序键）。</p>
<h3 id="获取有关表的信息">获取有关表的信息</h3>
<p>表建好后，我们可以使用 DescribeTable 命令查看表的信息。<br>
唯一的参数是表名称，如下所示：</p>
<pre><code>{
    TableName : &quot;Music&quot;
}
</code></pre>
<p>来自 DescribeTable 回复如下所示：</p>
<pre><code>{
  &quot;Table&quot;: {
    &quot;AttributeDefinitions&quot;: [
      {
        &quot;AttributeName&quot;: &quot;Artist&quot;,
        &quot;AttributeType&quot;: &quot;S&quot;
      },
      {
        &quot;AttributeName&quot;: &quot;SongTitle&quot;,
        &quot;AttributeType&quot;: &quot;S&quot;
      }
    ],
    &quot;TableName&quot;: &quot;Music&quot;,
    &quot;KeySchema&quot;: [
      {
        &quot;AttributeName&quot;: &quot;Artist&quot;,
        &quot;KeyType&quot;: &quot;HASH&quot;  //Partition key
      },
      {
        &quot;AttributeName&quot;: &quot;SongTitle&quot;,
        &quot;KeyType&quot;: &quot;RANGE&quot;  //Sort key
      }
    ],

    ...remaining output omitted...
</code></pre>
<p>DescribeTable 还将返回有关表中的索引、预配置的吞吐量设置、大约项目数和其他元数据的信息。</p>
<h4 id="python-example-2">Python Example</h4>
<p>boto3</p>
<pre><code>import boto3
db3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')

db3.meta.client.describe_table(TableName='Music')
</code></pre>
<pre><code># 返回结果如下

{'ResponseMetadata': {'HTTPHeaders': {'content-length': '569',
   'content-type': 'application/x-amz-json-1.0',
   'server': 'Jetty(8.1.12.v20130726)',
   'x-amz-crc32': '2801025854',
   'x-amzn-requestid': '2dafeeab-8d79-4b32-ad1f-03983624ab41'},
  'HTTPStatusCode': 200,
  'RequestId': '2dafeeab-8d79-4b32-ad1f-03983624ab41',
  'RetryAttempts': 0},
 u'Table': {u'AttributeDefinitions': [{u'AttributeName': u'Artist',
    u'AttributeType': u'S'},
   {u'AttributeName': u'SongTitle', u'AttributeType': u'S'}],
  u'CreationDateTime': datetime.datetime(2016, 12, 28, 11, 25, 12, 657000, tzinfo=tzlocal()),
  u'ItemCount': 0,
  u'KeySchema': [{u'AttributeName': u'Artist', u'KeyType': u'HASH'},
   {u'AttributeName': u'SongTitle', u'KeyType': u'RANGE'}],
  u'ProvisionedThroughput': {u'LastDecreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),
   u'LastIncreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),
   u'NumberOfDecreasesToday': 0,
   u'ReadCapacityUnits': 1,
   u'WriteCapacityUnits': 1},
  u'TableArn': u'arn:aws:dynamodb:ddblocal:000000000000:table/Music',
  u'TableName': u'Music',
  u'TableSizeBytes': 0,
  u'TableStatus': u'ACTIVE'}}
</code></pre>
<h3 id="删除表">删除表</h3>
<p>当不再需要一个表并希望将它永久性丢弃时，可使用 DeleteTable：</p>
<p>表一经删除便无法恢复。（一些关系数据库允许撤消 DROP TABLE 操作）</p>
<pre><code>{
    TableName: &quot;Music&quot;
}
</code></pre>
<h4 id="python-example-3">Python Example</h4>
<p>boto3</p>
<pre><code>from __future__ import print_function # Python 2/3 compatibility
import boto3

dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url=&quot;http://localhost:8000&quot;)

table = dynamodb.Table('Music')

table.delete()

## output

{'ResponseMetadata': {
   'HTTPHeaders': {
       'content-length': '1012',
       'content-type': 'application/x-amz-json-1.0',
       'server': 'Jetty(8.1.12.v20130726)',
       'x-amz-crc32': '2473676771',
       'x-amzn-requestid': '84938373-870f-420f-b19e-4de2c6301743'},
   'HTTPStatusCode': 200,
   'RequestId': '84938373-870f-420f-b19e-4de2c6301743',
   'RetryAttempts': 0},
   u'TableDescription': {
   ...
   }
}
</code></pre>
<h3 id="修改表">修改表</h3>
<p>当一个表创建好之后如果想要调整，可以使用UpdateTable命令</p>
<p>修改表时我们一次只可以做一个操作:</p>
<pre><code>* 修改预设的吞吐量。
* 开启或者停止使用Streams。
* 删除一个全局耳机索引。
* 创建一个全局的二级索引。当索引开始后台执行时，可以使用UpdateTable进行下一个操作。
</code></pre>
<blockquote>
<p>UpdateTable 是一个异步操作; 当它开始执行时，表的状态将由 ACTIVE 变为 UPDATING。</p>
</blockquote>
<p>请求语法为：</p>
<pre><code>{
   &quot;AttributeDefinitions&quot;: [
      {
         &quot;AttributeName&quot;: &quot;string&quot;,
         &quot;AttributeType&quot;: &quot;string&quot;
      }
   ],
   &quot;GlobalSecondaryIndexUpdates&quot;: [
      {
         &quot;Create&quot;: {
            &quot;IndexName&quot;: &quot;string&quot;,
            &quot;KeySchema&quot;: [
               {
                  &quot;AttributeName&quot;: &quot;string&quot;,
                  &quot;KeyType&quot;: &quot;string&quot;
               }
            ],
            &quot;Projection&quot;: {
               &quot;NonKeyAttributes&quot;: [ &quot;string&quot; ],
               &quot;ProjectionType&quot;: &quot;string&quot;
            },
            &quot;ProvisionedThroughput&quot;: {
               &quot;ReadCapacityUnits&quot;: number,
               &quot;WriteCapacityUnits&quot;: number
            }
         },
         &quot;Delete&quot;: {
            &quot;IndexName&quot;: &quot;string&quot;
         },
         &quot;Update&quot;: {
            &quot;IndexName&quot;: &quot;string&quot;,
            &quot;ProvisionedThroughput&quot;: {
               &quot;ReadCapacityUnits&quot;: number,
               &quot;WriteCapacityUnits&quot;: number
            }
         }
      }
   ],
   &quot;ProvisionedThroughput&quot;: {
      &quot;ReadCapacityUnits&quot;: number,
      &quot;WriteCapacityUnits&quot;: number
   },
   &quot;StreamSpecification&quot;: {
      &quot;StreamEnabled&quot;: boolean,
      &quot;StreamViewType&quot;: &quot;string&quot;
   },
   &quot;TableName&quot;: &quot;string&quot;
}

</code></pre>
<h4 id="python-example-4">Python Example</h4>
<p>boto3</p>
<pre><code>import boto3
db3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')


table = db3.meta.client.update_table(
    TableName='Music',
    AttributeDefinitions=[
        {
            'AttributeName': &quot;Artist&quot;,
            'AttributeType': &quot;S&quot;
        },
        {
            'AttributeName': &quot;SongTitle&quot;,
            'AttributeType': &quot;S&quot;
        }
    ],
    ProvisionedThroughput={       
        'ReadCapacityUnits': 10,
        'WriteCapacityUnits': 10
    }
)

db3.meta.client.describe_table(TableName='Music')

</code></pre>
<p>现在查看Music 表会发现预设的吞吐量都已经修改为了10</p>
<p><a href="http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/APIReference/API_UpdateTable.html">DynamoDB UpdateTable 操作</a></p>
<blockquote>
<p>下一篇我们将要结束DynamoDB 最常用的部分，<strong>项目的基本操作（CRUD）</strong>。</p>
</blockquote>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751935&amp;idx=3&amp;sn=7dac29e441ebaabfbf70600fee042bd3&amp;chksm=80b0b9d5b7c730c390dd96fc1c4853219fd8d39a634506081631b41e147faaee38f0e8d35730#rd">原文链接</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门2： 工作原理、API和数据类型介绍]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-how-it-works/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-how-it-works/">
        </link>
        <updated>2017-01-09T06:37:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="amazon-dynamodb-入门2-工作原理-api和数据类型介绍">Amazon DynamoDB 入门2： 工作原理、API和数据类型介绍</h2>
<p>:::tip<br>
本节主要介绍DynamoDB 基本概念、核心组件、数据结构、Api<br>
:::</p>
<h2 id="dynamodb-基本概念">DynamoDB 基本概念</h2>
<p>DynamoDB 是 AWS 独有的完全托管的 NoSQL Database。它的思想来源于 Amazon 2007 年发表的一篇论文：Dynamo: Amazon’s Highly Available Key-value Store。在这篇论文里，Amazon 介绍了如何使用 Commodity Hardware 来打造高可用、高弹性的数据存储。想要理解 DynamoDB，首先要理解 Consistent Hashing。Consistent Hashing 的原理如下图所示：<br>
<img src="http://note.youdao.com/yws/public/resource/b99dcbe9b4a2069a3337badbeafe4b29/xmlnote/WEBRESOURCEb477b81f1e511ee919b14f3393326749/470" alt="" loading="lazy"></p>
<p>HUGOMORE42</p>
<p>它的概念是：</p>
<ol>
<li>我有一个足够大的Keyspace（2的160次方，比较一下：IPv6是2的128次方），我们记作X。</li>
<li>然后将X放在一个环形的空间里划分成大小相等的Y个 Partition，依次循环排列（如图），每个 Partition 由一个Vnode（Riak的概念）管理，</li>
<li>当你有M个Database Server（Node），Y个Vnode再平均映射到M个Node上。</li>
<li>当数据要插入时，将其主键（Hash Key）映射到K中的一个地址（Addr），对应到某个Vnode，再进一步对应到某个Node，如果这个数据需要N个Replica，则将数据写入Addr（Vnode a），Addr + 1（Vnode b）， …，Add + N（Vnode n）。</li>
<li>这里，M就是你的Shards，N是Replica。</li>
</ol>
<p>以后添加新的Node时，映射发生变化，只需要把相应的变化了的Vnode迁移到新的Node上即可。在这种结构下，Sharding/Replica对程序员基本上是透明的。</p>
<h2 id="dynamodb-核心组件">DynamoDB 核心组件</h2>
<p>基本 DynamoDB 组件包括：表、项目、属性</p>
<ul>
<li>表 - 类似于其他数据库系统，DynamoDB将数据存储在表中。表是数据的集合。（类似于关系型数据库中的表）</li>
<li>项目 - 每个表包含多个项目。项目是一组属性，具有不同于所有其他项目的唯一标识。（类似于其他数据库系统中的行、记录或元组。）</li>
<li>属性 - 每个项目包含一个或多个属性。属性是基础的数据元素，无需进一步分解。（类似于其他数据库系统中的字段或列。）</li>
</ul>
<p>下图是一个名为 People 的表，其中显示了一些示例项目和属性：</p>
<figure data-type="image" tabindex="1"><img src="http://note.youdao.com/yws/public/resource/b99dcbe9b4a2069a3337badbeafe4b29/xmlnote/WEBRESOURCEe0de7341429c0ba6408f2a3b1a60d214/100" alt="image" loading="lazy"></figure>
<p>请注意有关 People 表的以下内容：</p>
<ul>
<li>表中的每个项目都有一个唯一的标识符或主键，用于将项目与表中的所有其他内容区分开来。在 People 表中，主键包含一个属性 (PersonID)。</li>
<li>与主键外不同，People表是无架构的，这表示属性及其数据类型都不需要预先定义。每个项目都能拥有其自己的独特属性。</li>
<li>大多数属性是标量类型的，这表示它们只能具有一个值。字符串和数字是标量的常见示例。</li>
<li>某些项目具有嵌套属性 (Address)。DynamoDB 支持最高 32级深度的嵌套属性。</li>
</ul>
<p>这里，我们将看到第一个概念：主键。</p>
<h3 id="主键">主键</h3>
<p>创建表时，除表名称外，您还必须指定表的主键。主键唯一标识表中的每个项目，因此，任意两个项目的主键都不相同。<br>
DynamoDB 支持两种不同类型的主键：</p>
<ul>
<li>分区键 - 简单的主键，由一个称为分区键的属性组成。</li>
</ul>
<blockquote>
<p>如果表具有简单主键（只有分区键），DynamoDB 将根据其分区键值存储和检索各个项目。同时，DynamoDB 使用分区键的值作为内部哈希函数的输入值，从而将项目写入表中。哈希函数的输出值决定了项目将要存储在哪个分区。<br>
要从表中读取某个项目，必须为该项目指定分区键值。DynamoDB 使用此值作为其哈希函数的输入值，从而生成可从中找到该项目的分区。<strong>（此时，分区键必须是唯一的，不可重复。）</strong></p>
</blockquote>
<p>下图显示了名为 Pets 的表，该表跨多个分区。表的主键为 AnimalType（仅显示此键属性）。在这种情况下，DynamoDB 会根据字符串 Dog 的哈希值，使用其哈希函数决定新项目的存储位置。请注意，项目并非按排序顺序存储的。每个项目的位置由其分区键的哈希值决定。</p>
<figure data-type="image" tabindex="2"><img src="http://note.youdao.com/yws/public/resource/49e3721094381363857f5112db30fa65/xmlnote/WEBRESOURCE26a15082f1205bda684be3d5b68f5058/329" alt="简单分区示例" loading="lazy"></figure>
<ul>
<li>分区键和排序键 - 称为复合主键，此类型的键由两个属性组成。第一个属性是分区键，第二个属性是排序键。</li>
</ul>
<blockquote>
<p>DynamoDB 使用分区键值作为对内部哈希函数的输入。来自哈希函数的输出决定了项目将存储到的分区（DynamoDB 内部的物理存储）。具有相同分区键的所有项目按排序键值的排序顺序存储在一起。两个项目可具有相同的分区键值，<strong>但这两个项目必须具有不同的排序键值。</strong></p>
</blockquote>
<p>为将某个项目写入表中，DynamoDB 会计算分区键的哈希值以确定该项目的存储分区。在该分区中，可能有几个具有相同分区键值的项目，因此 DynamoDB 会按排序键的升序将该项目存储在其他项目中。</p>
<p>要读取表中的某个项目，您必须为该项目指定分区键值和排序键值。DynamoDB 会计算分区键的哈希值，从而生成可从中找到该项目的分区。</p>
<p>如果我们查询的项目具有相同的分区键值，则可以通过单一操作 (Query) 读取表中的多个项目。DynamoDB 将返回具有该分区键值的所有项目。或者，也可以对排序键应用某个条件，以便它仅返回特定值范围内的项目。</p>
<p>假设 Pets 表具有由 AnimalType（分区键）和 Name（排序键）构成的复合主键。</p>
<p>下图显示了 DynamoDB 写入项目的过程，分区键值为 Dog、排序键值为 Fido。</p>
<figure data-type="image" tabindex="3"><img src="http://note.youdao.com/yws/public/resource/49e3721094381363857f5112db30fa65/xmlnote/WEBRESOURCE264adc571f86df9053404818d240230f/337" alt="" loading="lazy"></figure>
<blockquote>
<ul>
<li>为读取 Pets 表中的同一项目，DynamoDB 会计算 Dog 的哈希值，从而生成这些项目的存储分区。然后，DynamoDB 会扫描这些排序键属性值，直至找到 Fido。</li>
<li>要读取 AnimalType 为 Dog 的所有项目，您可以执行 Query 操作，无需指定排序键条件。默认情况下，这些项目会按存储顺序（即按排序键的升序）返回。或者，您也可以请求以降序返回。</li>
<li>要仅查询某些 Dog 项目，您可以对排序键应用条件（例如，仅限 Name 在 A 至 K 范围内的 Dog 项目）。</li>
</ul>
</blockquote>
<h4 id="note">Note</h4>
<ul>
<li>每个主键属性必须为标量（表示它只能具有一个值）。主键属性唯一允许的数据类型是字符串、数字和二进制。对于其他非键属性没有任何此类限制。</li>
<li>DynamoDB 会自动分配足够的存储，每个分区键值的非重复排序键值无数量上限。所以即使需要在 Dog 表中存储数十亿 Pets项目，DynamoDB 也能这一需求。</li>
</ul>
<h3 id="二级索引">二级索引</h3>
<p>DynamoDB支持在一个表上创建一个或多个二级索引。利用 secondary index，除了可对主键进行查询外，还可使用替代键查询表中的数据。</p>
<p>DynamoDB 支持两种索引：</p>
<ul>
<li>Global secondary index - 一种带有可能与表中不同的分区键和排序键的索引。</li>
<li>Local secondary index - 一种分区键与表中的相同但排序键与表中的不同的索引。</li>
</ul>
<p><strong>最多可以为每个表定义 5 个全局二级索引和 5 个本地二级索引。</strong></p>
<p>下图显示了示例 Music 表，该表包含一个名为 GenreAlbumTitle 的新索引</p>
<figure data-type="image" tabindex="4"><img src="http://note.youdao.com/yws/public/resource/b99dcbe9b4a2069a3337badbeafe4b29/xmlnote/WEBRESOURCE829a617865ac76c1bb9a564e5789079d/125" alt="image" loading="lazy"></figure>
<p>对于Music表，我们不仅可以按 Artist（分区键）或按 Artist 和 SongTitle（分区键和排序键）查询数据项。还可以按 Genre 和 AlbumTitle 查询数据。</p>
<h4 id="note-2">Note</h4>
<p>请注意有关 GenreAlbumTitle 索引的以下内容：</p>
<ul>
<li>每个索引属于一个表（称为索引的基表）。在上述示例中，Music 是 GenreAlbumTitle 索引的基表。</li>
<li>DynamoDB 将自动维护索引。当添加、更新或删除基表中的某个项目时，DynamoDB 会添加、更新或删除属于该表的任何索引中的对应项目。</li>
<li>当创建索引时，可指定哪些属性将从基表复制或投影到索引。DynamoDB 至少会将键属性从基表投影到索引中。对于 GenreAlbumTitle 也是如此，只不过此时只有 Music 表中的键属性会投影到索引中。</li>
</ul>
<h2 id="dynamodb-数据类型">DynamoDB 数据类型</h2>
<p>DynamoDB 对表中的属性支持很多不同的数据类型。可按以下方式为属性分类：</p>
<ul>
<li>标量类型 - 标量类型可准确地表示一个值。标量类型包括<strong>数字、字符串、二进制、布尔值和 null。</strong></li>
<li>文档类型 - 文档类型可表示具有嵌套属性的复杂结构。文档类型包括列表和映射。</li>
<li>集类型 - 集类型可表示多个标量值。集类型包括字符串集、数字集和二进制集。</li>
</ul>
<p><strong>当创建表或secondary index时，必须指定每个主键属性（分区键和排序键）的名称和数据类型。此外，每个主键属性必须定义为字符串、数字或二进制类型。</strong></p>
<h3 id="标量类型">标量类型</h3>
<p>标量类型包括数字、字符串、二进制、布尔值和 null。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串</td>
<td>字符串是使用 UTF-8 二进制编码的 Unicode。字符串的长度必须大于零且受限于最大 DynamoDB 项目大小 400 KB。</td>
<td>&quot;Bicycle&quot;</td>
</tr>
<tr>
<td>数字</td>
<td>数字可为正数、负数或零。数字最多可精确到 38 位 - 超过此位数将导致意外</td>
<td>300</td>
</tr>
<tr>
<td>二进制</td>
<td>二进制类型属性可以存储任意二进制数据，如压缩文本、加密数据或图像。DynamoDB 会在比较二进制值时将二进制数据的每个字节视为无符号。二进制属性的长度必须大于零且受限于最大 DynamoDB 项目大小 400 KB。</td>
<td>这是一个采用 Base64 编码文本的二进制属性： dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk</td>
</tr>
<tr>
<td>布尔值</td>
<td>布尔类型属性可以存储 true 或 false。</td>
<td>true</td>
</tr>
<tr>
<td>空</td>
<td>空代表属性具有未知或未定义状态。</td>
<td>NULL</td>
</tr>
</tbody>
</table>
<h3 id="字符串">字符串</h3>
<p>如果将主键属性定义为字符串类型属性，以下附加限制将适用：</p>
<ul>
<li>对于简单的主键，第一个属性值（分区键）的最大长度为 2048 字节。</li>
<li>对于复合主键，第二个属性值（排序键）的最大长度为 1024 字节</li>
</ul>
<blockquote>
<p>DynamoDB 使用基础的 UTF-8 字符串编码字节整理和比较字符串。例如，“a”(0x61) 大于“A”(0x41)，“¿”(0xC2BF) 大于“z”(0x7A)。</p>
</blockquote>
<p>可使用字符串数据类型表示日期或时间戳。执行此操作的一种方法是使用 ISO 8601 字符串，如以下示例所示：</p>
<ul>
<li>2016-02-15</li>
<li>2015-12-21T17:42:34Z</li>
<li>20150311T122706Z</li>
</ul>
<p><strong>也可以使用数字数据类型表示日期或时间戳</strong></p>
<h3 id="数字">数字</h3>
<p>数字范围</p>
<ul>
<li>正数范围：1E-130 到 9.9999999999999999999999999999999999999E+125</li>
<li>负数范围：-9.9999999999999999999999999999999999999E+125 到 -1E-130</li>
</ul>
<blockquote>
<p>在 DynamoDB 中，数字以可变长度形式表示。系统会删减开头和结尾的 0。</p>
</blockquote>
<p>所有数字将作为字符串通过网络发送到 DynamoDB，以最大程度地提高不同语言和库之间的兼容性。但是，DynamoDB 会将它们视为数字类型属性以方便数学运算。</p>
<p><strong>Note</strong></p>
<p>如果数字精度十分重要，则应使用从数字类型转换的字符串将数字传递给 DynamoDB。</p>
<h3 id="二进制">二进制</h3>
<p>如果将主键属性定义为二进制类型属性，以下附加限制将适用：</p>
<ul>
<li>对于简单的主键，第一个属性值（分区键）的最大长度为 2048 字节。</li>
<li>对于复合主键，第二个属性值（排序键）的最大长度为 1024 字节。</li>
</ul>
<blockquote>
<p>在将二进制值发送到 DynamoDB 之前，我们必须采用 Base64 编码格式对其进行编码。收到这些值后，DynamoDB 会将数据解码为无符号字节数组，将其用作二进制属性的长度。</p>
</blockquote>
<h3 id="文档类型">文档类型</h3>
<p>文档类型包括列表和映射。这些数据类型可以互相嵌套，用来表示深度最多为 32 层的复杂数据结构。<br>
只要包含值的项目大小在 DynamoDB <strong>项目大小限制 (400 KB) 内</strong>，列表或映射中值的数量就没有限制。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>列表</td>
<td>列表类型属性可存储值的有序集合。列表用方括号括起：[ ... ]。列表类似于 JSON 数组。列表元素中可以存储的数据类型没有限制，列表元素中的元素也不一定为相同类型。</td>
<td>FavoriteThings: [&quot;Cookies&quot;, &quot;Coffee&quot;, 3.14159]</td>
</tr>
<tr>
<td>映射</td>
<td>映射类型属性可以存储名称/值对的无序集合。映射用大括号括起：{ ... }。映射类似于 JSON 对象。映射元素中可以存储的数据类型没有限制，映射中的元素也不一定为相同类型。</td>
<td>示例如下</td>
</tr>
</tbody>
</table>
<pre><code>{
    Day: &quot;Monday&quot;,
    UnreadEmails: 42,
    ItemsOnMyDesk: [
        &quot;Coffee Cup&quot;,
        &quot;Telephone&quot;,
        {
            Pens: { Quantity : 3},
            Pencils: { Quantity : 2},
            Erasers: { Quantity : 1}
        }
    ]
}
</code></pre>
<h4 id="note-3">Note</h4>
<blockquote>
<p>DynamoDB 让您可以使用映射/列表中的单个元素</p>
</blockquote>
<h3 id="集">集</h3>
<p>DynamoDB 支持表示数字、字符串或二进制值集的类型。集中的所有元素必须为相同类型（</p>
<p>集中的每个值必须是唯一的。集中的值的顺序不会保留。不支持空集。</p>
<p><strong>Example （字符串集、数字集和二进制集）</strong></p>
<pre><code># 必须是相同的数据类型
# 字符串集
[&quot;Black&quot;, &quot;Green&quot; ,&quot;Red&quot;]
# 数字集
[42.2, -19, 7.5, 3.14]
# 二进制集
[&quot;U3Vubnk=&quot;, &quot;UmFpbnk=&quot;, &quot;U25vd3k=&quot;]
</code></pre>
<h2 id="dynamodb-api">DynamoDB API</h2>
<p>DynamoDB 的api操作主要用于控制层面、数据层面和DynamoDB Streams。</p>
<h3 id="控制层面">控制层面</h3>
<p>控制层面 操作可让我们可以创建和管理DynamoDB表。它们还可让我们可以使用依赖于表的索引、流和其他对象。</p>
<ul>
<li>CreateTable - 创建新表。或者，也可以创建一个或多个二级索引并为表启用 DynamoDB Streams。</li>
<li>DescribeTable - 返回有关表的信息，例如，表的主键架构、吞吐量设置、索引信息等。</li>
<li>ListTables - 返回列表中所有表的名称。</li>
<li>UpdateTable - 修改表或其索引的设置、创建或删除表上的新索引或修改表的 DynamoDB Streams 设置。</li>
<li>DeleteTable - 从 DynamoDB 中删除表及其所有依赖对象。</li>
</ul>
<h3 id="数据层面">数据层面</h3>
<p><strong>数据层面</strong>操作可让我们对表中的数据执行创建、读取、更新和删除（也称为 CRUD）操作。某些数据层面操作还可让我们可以从secondary index中读取数据。</p>
<h4 id="创建数据">创建数据</h4>
<ul>
<li>PutItem - 将单个项目写入到表中。您必须指定主键属性，但不必指定其他属性。</li>
<li>BatchWriteItem - 将最多 25 个项目写入到表中。</li>
</ul>
<h4 id="读取数据">读取数据</h4>
<ul>
<li>
<p>GetItem - 从表中检索单个项目。我们必须为所需的项目指定主键。我们可以检索整个项目，也可以仅检索其属性的子集。</p>
</li>
<li>
<p>BatchGetItem - 从一个或多个表中检索最多 100 个项目。</p>
</li>
<li>
<p>Query - 检索具有特定分区键的所有项目。我们必须指定分区键值。</p>
<blockquote>
<p>可以检索整个项目，也可以仅检索其属性的子集。或者，也可以对排序键值应用条件，以便只检索具有相同分区键的数据子集。我们可以对表使用此操作，前提是该表同时具有分区键和排序键。还可以对索引使用此操作，前提是该索引同时具有分区键和排序键。</p>
</blockquote>
</li>
<li>
<p>Scan - 检索指定表或索引中的所有项目。我们可以检索整个项目，也可以仅检索其属性的子集。或者，我们也可以应用筛选条件以仅返回感兴趣的值并放弃剩余的值。</p>
</li>
</ul>
<h4 id="更新数据">更新数据</h4>
<ul>
<li>
<p>UpdateItem - 修改项目中的一个或多个属性。必须为要修改的项目指定主键。</p>
<blockquote>
<p>可以添加新属性以及修改或删除现有属性。还可以执行有条件更新。也可以实施一个原子计数器，该计数器可在不干预其他写入请求的情况下递增或递减数字属性。</p>
</blockquote>
</li>
</ul>
<h4 id="删除数据">删除数据</h4>
<ul>
<li>DeleteItem - 从表中删除单个项目。您必须为要删除的项目指定主键。</li>
<li>BatchWriteItem - 从一个或多个表中删除最多 25 个项目</li>
</ul>
<h4 id="note-4">Note</h4>
<blockquote>
<p>Batch 操作比调用多次单个请求（DeleteItem, GetItem, PutItem)更有效，因为秩序一个网络请求即可操作多个项目。</p>
</blockquote>
<h3 id="dynamodb-streams">DynamoDB Streams</h3>
<p>DynamoDB Streams 操作可对表启用或禁用流，并能允许对包含在流中的数据修改记录的访问。</p>
<ul>
<li>ListStreams - 返回所有流的列表，或仅返回特定表的流。</li>
<li>DescribeStream - 返回有关流的信息，例如，流的 Amazon 资源名称 (ARN) 和您的应用程序可开始读取前几条流记录的位置。</li>
<li>GetShardIterator - 返回一个分区迭代器，这是我们的应用程序用来从流中检索记录的数据结构。</li>
<li>GetRecords - 使用给定分区迭代器检索一条或多条流记录。</li>
</ul>
<h2 id="命名规则">命名规则</h2>
<p>DynamoDB 中的表、属性和其他对象必须具有名称。名称应该简明扼要 - 例如，Products、Books 和 Authors 之类的名称是都是不言而喻的。</p>
<p>下面是 DynamoDB 的命名规则：</p>
<ul>
<li>所有名称都必须使用 UTF-8 进行编码，并且区分大小写。</li>
<li>表名称和索引名称的长度必须介于 3 到 255 个字符之间，而且只能包含以下字符：
<ul>
<li>a-z</li>
<li>A-Z</li>
<li>0-9</li>
<li>_（下划线）</li>
<li>-（短划线）</li>
<li>.（圆点）</li>
</ul>
</li>
<li>属性名称的长度必须介于 1 到 255 个字符之间。</li>
</ul>
<h3 id="保留关键字和特殊字符">保留关键字和特殊字符</h3>
<p>与很多其他数据库管理系统相似，DynamoDB 也具有一系列保留关键字和特殊字符。</p>
<ul>
<li>有关 DynamoDB 中的保留关键字的完整列表，请参阅 <a href="http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/ReservedWords.html">DynamoDB 中的保留关键字</a>。</li>
<li>#（哈希）和 :（冒号）在 DynamoDB 中具有特殊含义</li>
</ul>
<p>DynamoDB允许使用这些关键字和特殊符号用于命名，但我们不建议这么做</p>
<p>有关更多信息，请参阅 <a href="http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">为属性名称和值使用占位符</a>。</p>
<h2 id="读取一致性">读取一致性</h2>
<p>Amazon DynamoDB 在全世界多个 AWS 区域可用。每个区域均与其他 AWS 区域完全独立和隔离。</p>
<p>例如，如果我们在 us-east-1 区域有一个名为 People 的表，并在 us-west-2 区域有另一个名为 People 的表，则这两个表将被视为完全独立的表。</p>
<p>每个 AWS 区域包含多个不同的称为“可用区”的位置。每个可用区都被设计成不受其他可用区故障的影响，并提供低价、低延迟的网络连接，以连接到同一区域其他可用区。此设计可保证我们可以在某个区域的多个可用区中快速复制数据。</p>
<p>当我们将某个数据写入 DynamoDB 表并收到 HTTP 200 响应 (OK) 时，该数据的所有副本都会更新。但是，要将数据传播到当前 AWS 区域内的所有存储位置需要耗费一定的时间。该数据最终将在上述所有存储位置中保持一致，通常只需一秒或更短时间。</p>
<p>为了支持各种应用程序要求，DynamoDB 同时支持<strong>最终一致性</strong> <strong>读取和强一致性</strong> 读取。</p>
<h4 id="最终一致性读取">最终一致性读取</h4>
<p>当我们从 DynamoDB 表中读取数据时，返回的可能不是刚刚完成的写入操作的结果。响应可能包含某些旧的数据。但是，如果我们在短时间后重复读取请求，响应将返回最新的数据。</p>
<h4 id="强一致性读取">强一致性读取</h4>
<p>当我们请求强一致性读取时，DynamoDB 会返回具有最新数据的响应，从而反映来自所有已成功的之前写入操作的更新。但是，<strong>如果网络延迟或中断，可能会无法执行强一致性读取</strong>。</p>
<h5 id="note-5">Note</h5>
<p>DynamoDB 默认使用最终一致性读取。读取操作（例如 GetItem、Query 和 Scan）提供了一个 ConsistentRead 参数：此参数设置为 true，DynamoDB 将在操作过程中使用强一致性读取。</p>
<p>示例：</p>
<pre><code>{
    TableName: &quot;Music&quot;,
    Key: {
        &quot;Artist&quot;: &quot;No One You Know&quot;,
        &quot;SongTitle&quot;: &quot;Call Me Today&quot;
    },
    ConsistentRead: true
}
</code></pre>
<h4 id="python-示例">python 示例</h4>
<pre><code>table = db3.Table('Music')
response = table.get_item(
    Key={
        &quot;Artist&quot;: &quot;The Acme Band&quot;,
        &quot;SongTitle&quot;: &quot;Still In Love&quot;
    },
    ConsistentRead=True
)
</code></pre>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751935&amp;idx=2&amp;sn=23943243c2f5a5a1efdff4fb5308e8ab&amp;chksm=80b0b9d5b7c730c3e7d1115665d63cb47c79ad514a070de205ade4312048598f3c05b0067caa#rd">原文链接</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="5"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="6"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门1：配置（本地）及python示例]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-install-and-setting/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-install-and-setting/">
        </link>
        <updated>2017-01-07T06:57:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本节主要介绍amazondynamodb-安装配置及python开发示例">本节主要介绍AmazonDynamoDB 安装配置及Python开发示例&quot;</h3>
<h2 id="什么是-amazon-dynamodb">什么是 Amazon DynamoDB</h2>
<p>Amazon DynamoDB 是一种完全托管的 NoSQL 数据库服务，提供快速而可预测的性能，能够实现无缝扩展。使用 DynamoDB，您可以免除操作和扩展分布式数据库的管理工作负担，因而无需担心硬件预置、设置和配置、复制、软件修补或集群扩展等问题。</p>
<p>使用 DynamoDB，您可以创建数据库表来存储和检索任意量级的数据，并提供任意级别的请求流量。您可以扩展或缩减您的表的吞吐容量，而不会导致停机或性能下降，还可以使用 AWS 管理控制台来监控资源使用情况和各种性能指标。</p>
<p>HUGOMORE42</p>
<h2 id="amazon-dynamodb-特点">Amazon DynamoDB 特点</h2>
<p>DynamoDB 会自动将数据和流量分散到足够数量的服务器上，以满足吞吐量和存储需求，同时保持始终如一的高性能。所有数据均存储在固态硬盘 (SSD) 中，并会自动复制到 AWS 区域中的多个可用区中，从而提供内置的高可用性和数据持久性。</p>
<p>DynamoDB 是 NoSQL 数据库并且无架构，这意味着，与主键属性不同，无需在创建表时定义任何属性或数据类型。与此相对，关系数据库要求在创建表时定义每个列的名称和数据类型。</p>
<h2 id="amazon-dynamodb-使用">Amazon DynamoDB 使用</h2>
<h3 id="aws-配置">AWS 配置</h3>
<ol>
<li>注册 Amazon Web Services 并创建访问密钥</li>
<li>创建 AWS 凭证文件</li>
<li>开启DynamoDB 服务</li>
</ol>
<h3 id="在计算机上运行-dynamodb">在计算机上运行 DynamoDB</h3>
<p>除了 Amazon DynamoDB Web 服务之外，AWS 还提供可本地运行的可下载版本的 DynamoDB。<br>
使用本地版本，在开发应用程序时无需 Internet 连接。</p>
<h4 id="方法1-直接在计算机上安装">方法1 直接在计算机上安装</h4>
<blockquote>
<p>需要安装java环境</p>
</blockquote>
<ol>
<li>下载 DynamoDB</li>
<li>解压，并将解压后的目录复制到某个位置</li>
<li>打开命令提示符窗口，打开 DynamoDBLocal.jar 的目录，并输入以下命令：</li>
</ol>
<pre><code>java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb
</code></pre>
<p>现在就可以使用了</p>
<p><strong>命令行选项</strong></p>
<p>DynamoDB 接受以下命令参数：</p>
<ul>
<li>-cors value - 启用适用于 JavaScript 的 CORS 支持（跨源资源共享）。您必须提供特定域的逗号分隔“允许”列表。-cors 的默认设置是星号 (*)，这将允许公开访问。</li>
<li>-dbPath value - DynamoDB 将用于写入其数据库文件的目录。如果不指定此选项，则文件将写入当前目录。请注意，不能同时指定 -dbPath 和 -inMemory。</li>
<li>-delayTransientStatuses - 使 DynamoDB 为某些操作引入延迟。DynamoDB 几乎可以即时执行某些任务，例如，对表和索引执行创建/更新/删除操作；但是，实际 DynamoDB 服务需要更多时间才能完成这些任务。设置此参数有助于 DynamoDB 更逼真地模拟 Amazon DynamoDB Web 服务的行为。（目前，此参数仅为处于 CREATING 或 DELETING 状态的global secondary index引入延迟。）</li>
<li>-help – 打印使用摘要和选项。</li>
<li>-inMemory – DynamoDB 将在内存中运行，而不使用数据库文件。停止 DynamoDB 时，不会保存任何数据。请注意，不能同时指定 -dbPath 和 -inMemory。</li>
<li>-optimizeDbBeforeStartup – 在计算机上启动 DynamoDB 之前优化底层数据库表。使用此参数时，必须还要指定 -dbPath。</li>
<li>-port value - DynamoDB 将用于与应用程序通信的端口号。如果不指定此选项，则默认端口是 8000</li>
<li>-sharedDb - DynamoDB 将使用单个数据库文件，而不是针对每个证书和区域使用不同的文件。如果指定 -sharedDb，那么所有 DynamoDB 客户端都将与同一组表交互，无论其区域和证书配置如何。</li>
</ul>
<p><a href="http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/DynamoDBLocal.html?shortFooter=true">详细配置可参考官方文档</a></p>
<h4 id="方法2-使用docker安装">方法2 使用docker安装</h4>
<blockquote>
<p>需要安装docker</p>
</blockquote>
<p>方法一需要我们手动配置，操作也麻烦，如果喜欢docker，可以直接使用docker快速搭建本地环境</p>
<pre><code>1. 下载镜像

docker pull ryanratcliff/dynamodb

2. 启动

docker run -d -p 8000:8000 ryanratcliff/dynamodb

</code></pre>
<p><a href="https://github.com/RyanRatcliff/docker_dynamodb">详细配置可参考</a></p>
<h3 id="python-使用-dynamodb">Python 使用 DynamoDB</h3>
<p>我们可以使用适用于 Python (Boto 3) 的 AWS 开发工具包进行开发。</p>
<ol>
<li>安装boto3</li>
</ol>
<pre><code>pip install boto3
</code></pre>
<ol start="2">
<li>使用 AWS CLI 配置秘钥</li>
</ol>
<pre><code># 安装awscli
sudo pip install awscli
# 测试awscli 安装
aws help
# 输入命令
aws configure
# 配置 Access Key ID 和 Secret Access Key

AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name [None]: us-west-2
Default output format [None]: ENTER
# 要更新任何设置，只需再次运行 aws configure 并根据需要输入新值。
</code></pre>
<p>CLI 将使用 aws configure 指定的证书存储在您主目录中名为 .aws 的文件夹中名为 credentials 的本地文件中<br>
可以使用 以下命令列出 .aws 文件夹内容：<br>
Linux, OS X, or Unix</p>
<pre><code>$ ls  ~/.aws
</code></pre>
<p><a href="http://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html?shortFooter=true">具体配置参考官方文档</a></p>
<ol start="3">
<li>使用以下代码测试 DynamoDB 是否可用</li>
</ol>
<pre><code>import boto3
db3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000', aws_secret_access_key='ticTacToeSampleApp', aws_access_key_id='ticTacToeSampleApp', region_name='us-west-2')

db3.meta.client.list_tables()

# output

{
	'ResponseMetadata': {
	    'HTTPHeaders': {
	    	'content-length': '32',
            'content-type': 'application/x-amz-json-1.0',
            'server': 'Jetty(8.1.12.v20130726)',
            'x-amz-crc32': '2024476575',
            'x-amzn-requestid': '5f0a974a-8900-470d-8b28-a4207247c65e'
	    },
        'HTTPStatusCode': 200,
        'RequestId': '5f0a974a-8900-470d-8b28-a4207247c65e',
        'RetryAttempts': 0
	},
    'TableNames': []
}

</code></pre>
<p>如果输出以上内容，则说明DynamoDB 正常。</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MjAzNw==&amp;mid=2655751935&amp;idx=1&amp;sn=21e6b4ebe22a18b65c6f5e7b457782f9&amp;chksm=80b0b9d5b7c730c308ef87f324b814d9bdfd573bfdfc68c4c3b9e9f014f68b2bb19d87cdc06b#rd">原文链接</a></p>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon DynamoDB 入门8：删除项目]]></title>
        <id>http://blog.gusibi.site/post/Amazon-DynamoDB-Delete-Item/</id>
        <link href="http://blog.gusibi.site/post/Amazon-DynamoDB-Delete-Item/">
        </link>
        <updated>2017-01-03T06:37:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="从表中删除数据">从表中删除数据</h1>
<blockquote>
<p>上一篇介绍了DynamoDB 的更新，这一篇将会介绍项目删除操作和dynamoab-py</p>
</blockquote>
<p>在 SQL 中，DELETE 语句从表中删除一个或多个行。<em>DynamoDB 使用 DeleteItem 操作一次删除一个项目。</em></p>
<h3 id="sql">SQL</h3>
<p>在 SQL 中，可使用 DELETE 语句删除一个或多个行。WHERE 子句确定要修改的行。示例如下：</p>
<p>DELETE FROM Music<br>
WHERE Artist = 'The Acme Band' AND SongTitle = 'Look Out, World';<br>
我们可以修改 WHERE 子句以删除多个行。例如，删除某个特殊艺术家的所有歌曲，如下所示：</p>
<p>DELETE FROM Music WHERE Artist = 'The Acme Band'</p>
<h4 id="note">Note</h4>
<p>如果省略 WHERE 子句，则数据库会尝试从表中删除所有行。</p>
<h3 id="dynamodb">DynamoDB</h3>
<p>在 DynamoDB 中，可使用 DeleteItem 操作修改单个项目。</p>
<p>(http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/APIReference/API_DeleteItem.html?shortFooter=true)[API 语法如下]：</p>
<pre><code class="language-json">{
   &quot;ConditionExpression&quot;: &quot;string&quot;,
   &quot;ExpressionAttributeNames&quot;: {
      &quot;string&quot; : &quot;string&quot;
   },
   &quot;ExpressionAttributeValues&quot;: {
      &quot;string&quot; : {
         &quot;B&quot;: blob,
         &quot;BOOL&quot;: boolean,
         &quot;BS&quot;: [ blob ],
         &quot;L&quot;: [
            &quot;AttributeValue&quot;
         ],
         &quot;M&quot;: {
            &quot;string&quot; : &quot;AttributeValue&quot;
         },
         &quot;N&quot;: &quot;string&quot;,
         &quot;NS&quot;: [ &quot;string&quot; ],
         &quot;NULL&quot;: boolean,
         &quot;S&quot;: &quot;string&quot;,
         &quot;SS&quot;: [ &quot;string&quot; ]
      }
   },
   &quot;Key&quot;: {
      &quot;string&quot; : {
         &quot;B&quot;: blob,
         &quot;BOOL&quot;: boolean,
         &quot;BS&quot;: [ blob ],
         &quot;L&quot;: [
            &quot;AttributeValue&quot;
         ],
         &quot;M&quot;: {
            &quot;string&quot; : &quot;AttributeValue&quot;
         },
         &quot;N&quot;: &quot;string&quot;,
         &quot;NS&quot;: [ &quot;string&quot; ],
         &quot;NULL&quot;: boolean,
         &quot;S&quot;: &quot;string&quot;,
         &quot;SS&quot;: [ &quot;string&quot; ]
      }
   },
   &quot;ReturnConsumedCapacity&quot;: &quot;string&quot;,
   &quot;ReturnItemCollectionMetrics&quot;: &quot;string&quot;,
   &quot;ReturnValues&quot;: &quot;string&quot;,
   &quot;TableName&quot;: &quot;string&quot;
}
</code></pre>
<p>参数说明：</p>
<ul>
<li>Key: 主键，用于定位项目</li>
<li>TableName：表名 （最小 3. 最大 255）</li>
<li>ConditionExpression：条件表达式（仅在特定 ConditionExpression 的计算结果为 true 时成功完成）</li>
<li>ExpressionAttributeNames：条件表达式的名称的别名，比如 date 为保留字，可用别名定义为 #d</li>
<li>ExpressionAttributeValues：条件表达式的值</li>
<li>ReturnConsumedCapacity：显示使用的写入容量单位数
<ul>
<li>TOTAL 会返回由表及其所有global secondary index占用的写入容量；</li>
<li>INDEXES 仅返回由global secondary index占用的写入容量；</li>
<li>NONE 表示您不需要返回任何占用容量统计数据。</li>
</ul>
</li>
<li>ReturnValues: 更新后返回的数据.
<ul>
<li>NONE - 如果没有特别说明，返回None (这个是默认值)</li>
<li>ALL_OLD - 按在进行更新之前的情况，返回整个项目。</li>
</ul>
</li>
<li>ReturnItemCollectionMetrics： Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.</li>
</ul>
<p>(http://boto3.readthedocs.io/en/stable/reference/services/dynamodb.html?highlight=dynamodb#DynamoDB.Table.delete_item)[boto3语法如下]</p>
<pre><code class="language-python">response = table.delete_item(
    Key={
        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    },
    ConditionalOperator='AND'|'OR',
    ReturnValues='NONE'|'ALL_OLD'|'UPDATED_OLD'|'ALL_NEW'|'UPDATED_NEW',
    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',
    ReturnItemCollectionMetrics='SIZE'|'NONE',
    ConditionExpression=Attr('myattribute').eq('myvalue'),
    ExpressionAttributeNames={
        'string': 'string'
    },
    ExpressionAttributeValues={
        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}
    }
)
</code></pre>
<p>在 DynamoDB 中，可使用 DeleteItem 操作从表中删除数据（一次删除一个项目）。必须指定项目的主键值。示例如下：</p>
<pre><code class="language-python">{
    TableName: &quot;Music&quot;,
    Key: {
        Artist: &quot;The Acme Band&quot;,
        SongTitle: &quot;Look Out, World&quot;
    }
}
</code></pre>
<h4 id="note-2">Note</h4>
<p>除了 DeleteItem 之外，Amazon DynamoDB 还支持同时删除多个项目的 BatchWriteItem 操作。</p>
<p>DeleteItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成。例如，以下 DeleteItem 操作仅在项目具有 RecordLabel 属性时删除项目：</p>
<pre><code class="language-python">{
    TableName: &quot;Music&quot;,
    Key: {
        Artist: &quot;The Acme Band&quot;,
        SongTitle: &quot;Look Out, World&quot;
    },
   ConditionExpression: &quot;attribute_exists(RecordLabel)&quot;
}
</code></pre>
<p>删除操作就这么简单，下边是福利时间。</p>
<p>是不是每次用boto3 操作DynamoDB 都有种痛不欲生的感觉，下边我们介绍一个新工具。</p>
<h3 id="dynamodb-py"><a href="https://github.com/gusibi/dynamodb-p">dynamodb-py</a></h3>
<p>dynamodb-py  是模仿sqlalchemy 编写的DynamoDB ORM 它的使用方法特别简单，下边来看几个示例：</p>
<h5 id="表的操作">表的操作</h5>
<pre><code class="language-python">from dynamodb.model import Model
from dynamodb.fields import CharField, IntegerField, FloatField, DictField
from dynamodb.table import Table

class Movies(Model):

    __table_name__ = 'Movies'

    ReadCapacityUnits = 10
    WriteCapacityUnits = 10

    year = IntegerField(name='year', hash_key=True)
    title = CharField(name='title', range_key=True)
    rating = FloatField(name='rating', indexed=True)
    rank = IntegerField(name='rank', indexed=True)
    release_date = CharField(name='release_date')
    info = DictField(name='info', default={})

# create_table
Table(Movies()).create()

# update_table
Table(Movies()).update()

# delete_table
Table(Movies()).delete()

</code></pre>
<h5 id="查询项目">查询项目</h5>
<pre><code class="language-python"># query without index
items = Movies.query().where(Movies.year.eq(year)).all()
items = Movies.query().where(Movies.year.eq(1985)).limit(10).all()
items = (Movies.query()
        .where(Movies.year.eq(1992),
               Movies.title.between('A', 'L'))
        .all())

# query with index
items = (Movies.query()
        .where(Movies.year.eq(1992),
               Movies.title.between('A', 'L'))
        .order_by(Movies.rating, asc=False)
        .all())
</code></pre>
<h5 id="更新项目">更新项目</h5>
<pre><code class="language-python">item = Movies.get(year=year, title=title)

item.update(rank=2467, rating=7.1)
</code></pre>
<h5 id="删除项目">删除项目</h5>
<pre><code class="language-python">item = Movies.get(year=year, title=title)

item.delete()
</code></pre>
<p>就是这么方便。</p>
<p>不过<a href="https://github.com/gusibi/dynamodb-p">dynamodb-py</a> 还在开发中，欢迎试用，也欢迎贡献自己的力量。</p>
<blockquote>
<p>终于，下一节介绍索引的查询</p>
</blockquote>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Data Structures]]></title>
        <id>http://blog.gusibi.site/post/python-data-structures/</id>
        <link href="http://blog.gusibi.site/post/python-data-structures/">
        </link>
        <updated>2016-10-16T06:03:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="python-数据结构">python 数据结构</h2>
<ul>
<li>Python 的 list 是怎么回事，为什么有近乎无限大小的空间？为什么专门有一个固定长度且不能修改的数据结构 tuple 而不全用 list？</li>
<li>list 的 insert 和 append 的费时是一样的吗？</li>
<li>Python 的 dict 是怎么回事，为什么可以用字符串数字等等东西来索引？是怎么搜索的？在 dict 中找一个元素，和在 list 里面找一个元素有什么区别？</li>
<li>Python 内置的 list, dict, set, ...数据结构，你应该在什么样的场景下使用？</li>
</ul>
<p>HUGOMORE42</p>
<p>Python中常见的数据结构可以统称为容器（container）。序列（如列表和元组）、映射（如字典）以及集合（set）是三类主要的容器。</p>
<h3 id="列表">列表</h3>
<p>和字符串一样，列表也是序列式的数据类型，可以通过下标或者切片操作来访问某一个或者某一块连续的元素。<br>
不同之处：</p>
<ol>
<li>列表可以包含不同类型的对象</li>
<li>列表长度是可变的</li>
</ol>
<p>python中list并不是我们传统意义上的列表。传统列表--通常也叫做链表（linked list）--通常是由一系列节点来实现的，其每一个节点（尾节点除外）中都持有一个指向下一个节点的引用。</p>
<p>链表的简单实现：</p>
<pre><code>
class Node:
	def __init__(self, value, next=None):
		self.value = value
		self.next = next


&gt;&gt;&gt; L = Node(&quot;a&quot;, Node(&quot;b&quot;, Node(&quot;c&quot;, Node(&quot;d&quot;))))
&gt;&gt;&gt; L.next.next.value

'c'

# 这是一个单向链表。双向链表的各节点中还需持有一个指向前一节点的引用。

# TODO 双向列表的实现

</code></pre>
<p>但Python中的list则与此有些不同。它不是由若干个独立的节点相互引用而成的，而是一整个单一连续的内存区块--我们通常称之为数组（array）。</p>
<h3 id="树与图的实现">树与图的实现</h3>
<ul>
<li>邻接列表及其类似结构</li>
<li>邻接矩阵</li>
<li>树的实现</li>
</ul>
<h3 id=""></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网站微信登录－python 实现]]></title>
        <id>http://blog.gusibi.site/post/python-weixin-login/</id>
        <link href="http://blog.gusibi.site/post/python-weixin-login/">
        </link>
        <updated>2016-09-05T01:59:45.000Z</updated>
        <content type="html"><![CDATA[<p>最近我们的网站要加微信登录功能，找了python sdk 感觉都不满意，然后就参考instagram python sdk 自己造了轮子。</p>
<p>轮子 github 地址  <a href="https://github.com/gusibi/python-weixin">python-weixin</a></p>
<h3 id="根据需求选择相应的登录方式">根据需求选择相应的登录方式</h3>
<p>微信现在提供两种登录接入方式</p>
<ul>
<li>移动应用微信登录</li>
<li>网站应用微信登录</li>
</ul>
<p>HUGOMORE42</p>
<p><em>这里我们使用的是网站应用微信登录</em></p>
<p>按照 官方流程</p>
<ol>
<li>注册并通过开放平台开发者资质认证</li>
</ol>
<p>注册微信开放平台帐号后，在帐号中心中填写开发者资质认证申请，并等待认证通过。</p>
<ol start="2">
<li>创建网站应用</li>
</ol>
<p>通过填写网站应用名称、简介和图标，以及各平台下载地址等资料，创建网站应用</p>
<ol start="3">
<li>接入微信登录</li>
</ol>
<p>在资源中心查阅网站应用开发文档,开发接入微信登陆功能，让用户可使用微信登录你的网站应用</p>
<p>如果已经完成上面的操作，请继续往下看</p>
<p>微信网站应用微信登录是基于OAuth2.0协议标准构建的微信OAuth2.0授权登录系统。</p>
<p>微信OAuth2.0授权登录目前支持authorization_code模式，适用于拥有server端的应用授权。该模式整体流程为：</p>
<ol>
<li>第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</li>
<li>通过code参数加上AppID和AppSecret等，通过API换取access_token；</li>
<li>通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</li>
</ol>
<hr>
<h4 id="获取access_token-时序图">获取access_token 时序图</h4>
<figure data-type="image" tabindex="1"><img src="https://res.wx.qq.com/op_res/D0wkkHSbtC6VUSHX4WsjP5ssg5mdnEmXO8NGVGF34dxS9N1WCcq6wvquR4K_Hcut" alt="获取access_token 时序图" loading="lazy"></figure>
<p>具体流程请参考官方文档，我们这里只说一下python的实现方法。官方文档地址 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN&amp;token=db685a316b7e3933cae42c5ca91d4e024125d1b8&amp;appid=wx6d8c79fb64de6c08">点这里</a></p>
<p>参考python-instagram 我写了一个 [python-weixin] (https://github.com/gusibi/python-weixin)一个微信python SDK</p>
<p>不过现在还只有微信接入、获取用户信息、 刷新refresh_token 等简单功能</p>
<hr>
<h3 id="安装">安装</h3>
<h4 id="方法一-手动安装">方法一 手动安装</h4>
<ol>
<li>首先 需要把代码clone到本地</li>
<li>python setup.py install</li>
</ol>
<h4 id="方法二-pip-install">方法二 pip install</h4>
<pre><code>pip install git+https://github.com/gusibi/python-weixin.git@master
</code></pre>
<hr>
<h3 id="使用方式">使用方式</h3>
<pre><code class="language-python">
from weixin.client import WeixinAPI

APP_ID = 'your app id'
APP_SECRET = 'your app secret'
REDIRECT_URI = 'http://your_domain.com/redirect_uri'  # 这里一定要注意 地址一定要加上http/https

scope = (&quot;snsapi_login&quot;, )
api = WeixinAPI(appid=APP_ID,
                app_secret=APP_SECRET,
                redirect_uri=REDIRECT_URI)

authorize_url = api.get_authorize_url(scope=scope)
</code></pre>
<p>现在将 authorize_url地址(如 http://yoursite.com/login/weixin)在浏览器打开， 将跳转到微信登录页面，使用手机扫码登录后将跳转到</p>
<p>http://your_domain.com/redirect_uri?code=CODE&amp;state=STATE 页面</p>
<p>现在我们就可以使用code 来获取登录的 access_token</p>
<pre><code class="language-python">access_token = api.exchange_code_for_access_token(code=code)
</code></pre>
<p>access_token 信息为</p>
<pre><code class="language-json">{
&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,
&quot;expires_in&quot;:7200,
&quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;,
&quot;openid&quot;:&quot;OPENID&quot;,
&quot;scope&quot;:&quot;SCOPE&quot;
}
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>access_token</td>
<td style="text-align:left">接口调用凭证（有效期目前为2个小时）</td>
</tr>
<tr>
<td>expires_in</td>
<td style="text-align:left">access_token接口调用凭证超时时间，单位（秒）</td>
</tr>
<tr>
<td>refresh_token</td>
<td style="text-align:left">用户刷新access_token（有效期目前为30天）</td>
</tr>
<tr>
<td>openid</td>
<td style="text-align:left">授权用户唯一标识</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:left">用户授权的作用域，使用逗号（,）分隔</td>
</tr>
</tbody>
</table>
<p>获取access_token后，就可以进行接口调用，有以下前提：</p>
<ol>
<li>access_token有效且未超时；</li>
<li>微信用户已授权给第三方应用帐号相应接口作用域（scope）。</li>
</ol>
<p>对于接口作用域（scope），能调用的接口有以下：</p>
<table>
<thead>
<tr>
<th>授权作用域（scope）</th>
<th style="text-align:left">接口</th>
<th style="text-align:left">接口说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>snsapi_base</td>
<td style="text-align:left">/sns/oauth2/access_token</td>
<td style="text-align:left">通过code换取access_token、refresh_token和已授权scope</td>
</tr>
<tr>
<td>snsapi_base</td>
<td style="text-align:left">/sns/oauth2/refresh_token</td>
<td style="text-align:left">刷新或续期access_token使用</td>
</tr>
<tr>
<td>snsapi_base</td>
<td style="text-align:left">/sns/auth</td>
<td style="text-align:left">检查access_token有效性</td>
</tr>
<tr>
<td>snsapi_userinfo</td>
<td style="text-align:left">/sns/userinfo</td>
<td style="text-align:left">获取用户个人信息</td>
</tr>
</tbody>
</table>
<pre><code class="language-python">api = WeixinAPI(appid=APP_ID,
                app_secret=APP_SECRET,
                redirect_uri=REDIRECT_URI)

# 刷新或续期access_token使用
refresh_token = api.exchange_refresh_token_for_access_token(refresh_token=auth_info['refresh_token'])

api = WeixinAPI(access_token=auth_info['access_token'])

# 获取用户个人信息
user = api.user(openid=auth_info['openid'])

# 检查access_token有效性
v = api.validate_token(openid=auth_info['openid'])
</code></pre>
<p>现在就微信登录就完成了</p>
<hr>
<p>下面是用 flask 实现的完整的例子</p>
<pre><code class="language-python">from flask import Flask
from flask import Markup
from flask import redirect
from flask import request
from flask import jsonify

from weixin.client import WeixinAPI
from weixin.oauth2 import OAuth2AuthExchangeError

app = Flask(__name__)

APP_ID = 'appid'
APP_SECRET = 'app secret'
REDIRECT_URI = 'http://localhost.com/authorization'


@app.route(&quot;/authorization&quot;)
def authorization():
    code = request.args.get('code')
    api = WeixinAPI(appid=APP_ID,
                    app_secret=APP_SECRET,
                    redirect_uri=REDIRECT_URI)
    auth_info = api.exchange_code_for_access_token(code=code)
    api = WeixinAPI(access_token=auth_info['access_token'])
    resp = api.user(openid=auth_info['openid'])
    return jsonify(resp)


@app.route(&quot;/login&quot;)
def login():
    api = WeixinAPI(appid=APP_ID,
                    app_secret=APP_SECRET,
                    redirect_uri=REDIRECT_URI)
    redirect_uri = api.get_authorize_login_url(scope=(&quot;snsapi_login&quot;,))
    return redirect(redirect_uri)


@app.route(&quot;/&quot;)
def hello():
    return Markup('&lt;a href=&quot;%s&quot;&gt;weixin login!&lt;/a&gt;') % '/login'

if __name__ == &quot;__main__&quot;:
    app.run(debug=True)

</code></pre>
<h4 id="参考链接">参考链接：</h4>
<ul>
<li><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN&amp;token=db685a316b7e3933cae42c5ca91d4e024125d1b8&amp;appid=wx6d8c79fb64de6c08">微信网站应用接入文档</a></li>
<li><a href="https://open.weixin.qq.com/cgi-bin/frame?t=home/web_tmpl&amp;lang=zh_CN">网站应用创建地址</a></li>
<li>[python-weixin]  (https://github.com/gusibi/python-weixin)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[跟着代码学go 002 -- 控制流]]></title>
        <id>http://blog.gusibi.site/post/golang-learning-by-code-002/</id>
        <link href="http://blog.gusibi.site/post/golang-learning-by-code-002/">
        </link>
        <updated>2016-04-25T23:49:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="控制流">控制流</h2>
<p>上一篇我们了解了golang 的变量、函数和基本类型，这一篇将介绍一下控制流</p>
<p>现在我们看一个复杂点的例子:</p>
<p>HUGOMORE42</p>
<h3 id="fibonacci递归版">fibonacci(递归版)</h3>
<pre><code class="language-go">    01 package main
    02
    03 import &quot;fmt&quot;
    04
    05 func main() {
    06     result := 0
    07     for i := 0; i &lt;= 10; i++ {
    08	     result = fibonacci(i)
    09	     fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
    10	  }
    11 }
    12
    13 func fibonacci(n int) (res int) {
    14     if n &lt;= 1 {
    15         res = 1
    16 	   } else {
    17 	       res = fibonacci(n-1) + fibonacci(n-2)
    18 	   }
    19 	return
    20 }

    // outputs

    fibonacci(0) is: 1
    fibonacci(1) is: 1
    fibonacci(2) is: 2
    fibonacci(3) is: 3
    fibonacci(4) is: 5
    fibonacci(5) is: 8
    fibonacci(6) is: 13
    fibonacci(7) is: 21
    fibonacci(8) is: 34
    fibonacci(9) is: 55
    fibonacci(10) is: 89
</code></pre>
<ul>
<li>for i := 0; i &lt;= 10; i++ {} 第7行是一个循环结构 这里for 循环是一个控制流</li>
</ul>
<h3 id="控制流-2">控制流</h3>
<h4 id="for">For</h4>
<p>Go 只有一种循环接口-- for 循环</p>
<p>For 支持三种循环方式,包括类 while 语法</p>
<h4 id="1-基本for循环-支持初始化语句">1 基本for循环 支持初始化语句</h4>
<pre><code class="language-go">    s := &quot;abc&quot;
    for i, n := 0, len(s); i &lt; n; i++ {
    	// i, n 为定义的变量 只在for 循环内作用
        println(s[i])
    }
</code></pre>
<p><em>基本的 for 循环包含三个由分号分开的组成部分：</em></p>
<ul>
<li>初始化语句：在第一次循环执行前被执行</li>
<li>循环条件表达式：每轮迭代开始前被求值</li>
<li>后置语句：每轮迭代后被执行</li>
</ul>
<h4 id="2-替代-while-n-0">2 替代 while (n &gt; 0) {}</h4>
<p>C 的 while 在 Go 中叫做 for</p>
<pre><code class="language-go">    n := len(s)
	// 循环初始化语句和后置语句都是可选的。
    for n &gt; 0 { // 等同于 for (; n &gt; 0;) {}
        println(s[n])
        n--
    }
</code></pre>
<h4 id="3-死循环">3 死循环</h4>
<pre><code class="language-go">    for { // while true
        println(s)
    }
</code></pre>
<h4 id="if">IF</h4>
<blockquote>
<p>就像 for 循环一样，Go 的 if 语句也不要求用 ( ) 将条件括起来，同时， { } 还是必须有的</p>
</blockquote>
<ul>
<li>可省略条件表达式括号</li>
<li>支持初始化语句,可定义代码块局部变量</li>
<li>代码块左大括号必须在条件表达式尾部</li>
</ul>
<pre><code class="language-go">    x := 0

    // if x &gt; 10  // Error: missing condition in if statement(左大括号必须在条件表达式尾部)
    // {
    // }

    if n := &quot;abc&quot;; x &gt; 0 {  // 初始化语句(在这里是定义变量)
    	println(n[2])
    } else if x &lt; 0 {
    	println(n[1])
    } else {
    	println(n[0])
    }
</code></pre>
<blockquote>
<p>if 语句定义的变量作用域仅在if范围之内(包含else语句)<br>
不支持三元操作符 &quot;a &gt; b ? a : b&quot;</p>
</blockquote>
<p>以上是上段代码出现的两个控制流，剩下的控制流还有</p>
<ul>
<li>Switch</li>
<li>Range</li>
<li>Goto, Break, Continue, defer</li>
</ul>
<h4 id="switch">Switch</h4>
<p>switch 语法如下：</p>
<pre><code class="language-go">    switch optionalStatement; optionalExpression{
		case expressionList1: block1
		...
		case expressionListN: blockN
		default: blockD
	}
</code></pre>
<p>先看一个例子:</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;runtime&quot;
)

func main() {
	fmt.Print(&quot;Go runs on &quot;)
	switch os := runtime.GOOS; os {
		case &quot;darwin&quot;:
			fmt.Println(&quot;OS X.&quot;)
		case &quot;linux&quot;:
			fmt.Println(&quot;Linux.&quot;)
		default:
			// freebsd, openbsd,
			// plan9, windows...
			fmt.Printf(&quot;%s.&quot;, os)
		}
}
</code></pre>
<ul>
<li>如果有可选语句声明, 分号是必要的, 无论后边的可选表达式语句是否出现(如果可选语句没有出现默认为true)</li>
<li>每一个case 语句必须要有一个表达式列表，多个用分号隔开</li>
<li>switch 语句自上而下执行，当匹配成功后执行case分支的代码块，执行结束后退出switch</li>
</ul>
<pre><code class="language-go">    switch i {
        case 0: // 空分支，只有当 i == 0 时才会进入分支
        case 1:
            f() // 当 i == 0 时函数不会被调用
    }
</code></pre>
<ul>
<li>如果想要在执行完每个分支的代码后还继续执行后续的分支代码，可以使用fallthrough 关键字达到目的</li>
</ul>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func switch1(n int) {
    	switch { // 这里用的是没有条件的switch 语句会直接执行
    	case n == 0:
    		fmt.Println(0)
    		fallthrough
    	case n == 1: // 如果匹配到0 这里会继续执行
    		fmt.Println(1)
    	case n == 2: // fallthrough 不会对这里有作用
    		fmt.Println(2)
    	default:
    		fmt.Println(&quot;default&quot;)
    	}
    }

    func main() {
    	switch1(0)
    }
    # output
    0
	1
</code></pre>
<ul>
<li>用 default 可以指定当其他所有分支都不匹配的时候的行为</li>
</ul>
<pre><code class="language-go">    switch i {
    	case 0:
    	case 1:
    		f()
    	default:
    		g()  // 当i不等于0 或 1 时调用
    }
</code></pre>
<h4 id="range">Range</h4>
<blockquote>
<p>Range 类似迭代器的操作，返回(索引，值)或(健，值)</p>
</blockquote>
<p>它可以迭代任何一个集合（包括数组和 map）</p>
<p>基本语法如下:</p>
<pre><code class="language-go">for ix, val := range coll {
...
}

</code></pre>
<p>val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（译者注：如果 val 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值<br>
一个字符串是 Unicode 编码的字符（或称之为 rune）集合，因此您也可以用它迭代字符串</p>
<p>下面是每种数据类型使用range时 ix和val 的值</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">ix</th>
<th style="text-align:left">val</th>
<th style="text-align:left">值类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left">index</td>
<td style="text-align:left">s[index]</td>
<td style="text-align:left">unicode, rune</td>
</tr>
<tr>
<td style="text-align:left">array/slice</td>
<td style="text-align:left">index</td>
<td style="text-align:left">s[index]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:left">key</td>
<td style="text-align:left">m[index]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">channel</td>
<td style="text-align:left">element</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h4 id="break-continue">Break continue</h4>
<p>break 和 continue 都可在多级嵌套循环中跳出 (和python中的用法基本一致)</p>
<blockquote>
<p>break 可用于 for、switch、select,  continue 仅能 于 for 循环</p>
</blockquote>
<h4 id="defer">defer</h4>
<p>defer 语句会延迟函数的执行直到上层函数返回</p>
<p>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	defer fmt.Println(&quot;world&quot;)

	fmt.Println(&quot;hello&quot;)
}

// output
hello
world
</code></pre>
<p><em>defer 栈</em></p>
<p>延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。<br>
defer 常用来定义简单的方法</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	fmt.Println(&quot;counting&quot;)

	for i := 0; i &lt; 10; i++ {
			defer fmt.Println(i)
		}

		fmt.Println(&quot;done&quot;)
}
// 可以想一下会输出什么
// 代码执行 https://tour.go-zh.org/flowcontrol/13
</code></pre>
<p><em>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，例如：</em></p>
<ul>
<li>
<p>关闭文件流：</p>
<p>// open a file defer file.Close()</p>
</li>
<li>
<p>解锁一个加锁的资源</p>
<p>mu.Lock() defer mu.Unlock()</p>
</li>
<li>
<p>打印最终报告</p>
<p>printHeader() defer printFooter()</p>
</li>
<li>
<p>关闭数据库链接</p>
<p>// open a database connection defer disconnectFromDB()</p>
</li>
</ul>
<p>合理使用 defer 语句能够使得代码更加简洁。</p>
<p>下面的代码展示了在调试时使用 defer 语句的手法</p>
<pre><code class="language-go">package main

import (
	&quot;io&quot;
    &quot;log&quot;
)

func func1(s string) (n int, err error) {
    defer func() {
	        log.Printf(&quot;func1(%q) = %d, %v&quot;, s, n, err)
	    }()
    return 7, io.EOF
}

func main() {
    func1(&quot;Go&quot;)
}

// 输出
Output: 2016/04/25 10:46:11 func1(&quot;Go&quot;) = 7, EOF
</code></pre>
<p><a href="https://blog.go-zh.org/defer-panic-and-recover">更多defer 的用法</a></p>
<h4 id="goto">goto</h4>
<p>goto 语句可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（:）结尾的单词</p>
<pre><code class="language-go">package main

func main() {
    i:=0
    HERE:
	    print(i)
		i++
        if i==5 {
	        return
	    }
        goto HERE
}
# output 01234
</code></pre>
<blockquote>
<p>使用标签和 goto 语句是不被鼓励的：它们会很快导致非常糟糕的程序设计，而且总有更加可读的替代方案来实现相同的需求。</p>
</blockquote>
<p>for、switch 或 select 语句都可以配合标签（label）形式的标识符使用</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {

LABEL1:
    for i := 0; i &lt;= 5; i++ {
		for j := 0; j &lt;= 5; j++ {
			if j == 4 {
				continue LABEL1
			}
			fmt.Printf(&quot;i is: %d, and j is: %d\n&quot;, i, j)
		}
	}
}

</code></pre>
<blockquote>
<p>continue 语句指向 LABEL1，当执行到该语句的时候，就会跳转到 LABEL1 标签的位置</p>
</blockquote>
<h3 id="参考链接">参考链接</h3>
<p><a href="https://tour.go-zh.org/flowcontrol/1">Go 指南</a><br>
<a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/05.0.md">The way to go -- 控制结构</a><br>
<a href="https://golang.org/doc/effective_go.html">Effective Go</a></p>
<p>到这里简单的控制流用法讲解就结束了</p>
<p>下节将会是golang 数据结构部分, 会用到的代码为</p>
<h3 id="fibonacci内存版">fibonacci(内存版)</h3>
<pre><code class="language-go">    package main

    import (
        &quot;fmt&quot;
        &quot;time&quot;
    )

    const LIM = 41

    var fibs [LIM]uint64

    func main() {
        var result uint64 = 0
        start := time.Now()
        for i := 0; i &lt; LIM; i++ {
    		result = fibonacci(i)
    		fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
        }
        end := time.Now()
        delta := end.Sub(start)
        fmt.Printf(&quot;longCalculation took this amount of time: %s\n&quot;, delta)
    }
    func fibonacci(n int) (res uint64) {
        // memoization: check if fibonacci(n) is already known in array:
        if fibs[n] != 0 {
    		res = fibs[n]
    		return
        }
        if n &lt;= 1 {
    		res = 1
        } else {
    		res = fibonacci(n-1) + fibonacci(n-2)
        }
        fibs[n] = res
        return
    }
</code></pre>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[跟着代码学go 001 -- 变量&函数]]></title>
        <id>http://blog.gusibi.site/post/golang-learning-by-code-001/</id>
        <link href="http://blog.gusibi.site/post/golang-learning-by-code-001/">
        </link>
        <updated>2016-04-24T22:53:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="变量函数">变量&amp;函数</h2>
<p>最近在学习golang，写下学习笔记提升记忆。<br>
为了看起来不是那么枯燥，本学习笔记采用分析代码的形式。</p>
<p>首先搬出我们最经典的第一段代码:</p>
<h3 id="hello-world">hello world</h3>
<pre><code class="language-go">    package main // 0

    import &quot;fmt&quot; // 1实现格式化的 I/O

    /* Print something */ // 2
    func main() { // 3
    	fmt.Println(&quot;Hello, world; or καλημε ́ρα κóσμε; orこんにちは 世界&quot;) // 4
    }
</code></pre>
<p>首先我们要认识到</p>
<blockquote>
<p>每个Go 程序都是由包组成，程序的运行入口是包main</p>
</blockquote>
<ol start="0">
<li>首行这个是必须的。所有的 Go 文件以 package <something> 开头,对于独立运行的执行文件必须是 package main;</li>
<li>这是说需要将fmt加入到main。不是main 的包被称为库 末尾以 // 开头的内容是单行注释 Package fmt包含有格式化I/O函数，类似于C语言的printf和scanf</li>
<li>这也是注释，表示多行注释。</li>
<li>package main 必须首先出现,紧跟着是 import。在 Go 中,package 总是首先出现, 然后是 import,然后是其他所有内容。当 Go 程序在执行的时候,首先调用的函数 是 main.main(),这是从 C 中继承而来。这里定义了这个函数</li>
<li>调用了来自于 fmt 包的函数打印字符串到屏幕。字符串由 &quot; 包裹,并且可以包含非 ASCII 的字符。这里使用了希腊文和日文、中文&quot;</li>
</ol>
<h3 id="编译和运行代码">编译和运行代码</h3>
<p>构建 Go 程序的最佳途径是使用 go 工具。 构建 helloworld 只需要:</p>
<pre><code>    1. go build helloworld.go
    # 结果是叫做 helloworld 的可执行文件。
    2. ./helloworld
    # Hello, world; or καλημε ́ρα κóσμε; or こんにちは世界
</code></pre>
<h3 id="变量">变量</h3>
<p>Go 是静态类型语言 ,不能在运行期改变变量类型。</p>
<p>自动初始化为零值。如果提供初始化值,可省略变量类型,由编译器自动推断。</p>
<pre><code class="language-go">    var x int
    // 使用关键字 var 定义变量, 跟函数的参数列表一样，类型在后面。
    var c, python, java bool
    // 多个相同类型的变量可以写在一行。
    var f float32 = 1.6
    var i, j int = 1, 2
    // 变量定义可以包含初始值，每个变量对应一个。
    var s = &quot;abc&quot;
    // 如果初始化是使用表达式，则可以省略类型；变量从初始值中获得类型。
```go

变量在定义时没有明确的初始化时会赋值为*零值* 。

零值是：

* 数值类型为 0 ，
* 布尔类型为 false ，
* 字符串为 &quot;&quot; （空字符串）。

在函数内部,可用更简略的 &quot;:=&quot;  式定义变量。

```go
    func main() {
        n, s := 12, &quot;Hello, World!&quot;
        println(s, n)
    }
</code></pre>
<blockquote>
<p>函数外的每个语句都必须以关键字开始（ var 、 func 、等等）， := 结构不能使用在函数外。</p>
</blockquote>
<p>可一次定义多个变量。</p>
<pre><code class="language-go">    var x, y, z int
    var s, n = &quot;abc&quot;, 123
    var (
    	a int
    	b float32
    )

    func main() {
        n, s := 0x1234, &quot;Hello, World!&quot;
        println(x, s, n)
    }
```go

一个特殊的变量名是 \_(下划线)。任何赋给它的值都被丢弃。在这个例子中,将 35 赋值给 b,同时丢弃 34。

```go
    _, b := 34, 35
```go

Go 的编译器会对声明却未使用的变量报错

```go
    var s string // 全局变量没问题。

    func main() {
        i := 0 // Error: i declared and not used。(可使  &quot;_ = i&quot; 规避)
    }
```go

定义完之后的变量可以被重新赋值 比如第8行，将计算结果赋值给result

#### 常量

&gt; 常量值必须是编译期可确定的数字、字符串、布尔值。

常量的定义与变量类似，只不过使用 const 关键字

```go
    const x, y int = 1, 2
    const s = &quot;Hello, World!&quot;
    // 多常量初始化 // 类型推断
    // 常量组
    const (
    	a, b = 10, 100
    	c bool = false
    )

    func main() _{
    	const x = 'xxx'      // 未使用局部常量不会引发编译错误
    }
```go

在常量中，如果不提供类型和初始化值，那么被看作和上一常量相同

```go
    const (
		s = &quot;abc&quot;
		x           // x = &quot;abc&quot;
	)
```go

#### 基本类型

Go 有明确的数字类型命名, 支持 Unicode, 支持常用数据结构

|类型          | 长度   | 默认值| 说明|
|:-------      |:-----  | :---- | :----   |
|bool          | 1      | false |
|byte          | 1      | 0     | unit8
|rune          | 4      | 0     | int32 的别名 代表一个Unicode 码
|int, unit     | 4 或 8 | 0     | 32 或 64
|int8, unit8   | 1      | 0     | -128 ~ 127, 0~255
|int16, unit16 | 2      | 0     | -32768 ~ 32767, 0 ~ 65535
|int32, unit32 | 4      | 0     | -21亿~ 21亿, 0 ~ 42亿
|int64, unit64 | 8      | 0     |
|float32       | 4      | 0.0   |
|float64       | 8      | 0.0   |
|complex64     | 8      |       |
|complex128    | 16     |       |
|unitptr       | 4或8   |       | 足以存储指针的unit32 或unit64 整数
|array         |        |       | 值类型
|struct        |        |       | 值类型
|string        |        | &quot;&quot;    | UTF-8 字符串
|slice         |        | nil   | 引用类型
|map           |        | nil   | 引用类型
|channel       |        | nil   | 引用类型
|interface     |        | nil   | 接口
|function      |        | nil   | 函数

&gt; int，uint 和 uintptr 类型在32位的系统上一般是32位，而在64位系统上是64位。当你需要使用一个整数类型时，你应该首选 int，仅当有特别的理由才使用定长整数类型或者无符号整数类型。
&gt; 引用类型包括 slice、map 和 channel。它们有复杂的内部结构,除了申请内存外,还需要初始化相关属性


#### 类型转换

不支持隐式的类型转换

表达式 T(v) 将值 v 转换为类型 T 。

```go

var b byte = 100
// var n int = b // Error: cannot use b (type byte) as type int in assignment
var n int = int(b) // 显式转换

```go

不能将其他类型当 bool 值使用

```go
a := 100
if a {                  // Error: non-bool a (type int) used as if condition
    println(&quot;true&quot;)
}
</code></pre>
<h3 id="函数">函数</h3>
<p>首先看下面这段代码</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func add(x int, y int) int {
    	return x + y
    }

    func main() {
    	fmt.Println(add(42, 13))
    }
</code></pre>
<h4 id="函数定义">函数定义</h4>
<blockquote>
<p>使用关键字 func 定义函数,左大括号不能另起一行</p>
</blockquote>
<p>golang中符合规范的函数一般写成如下的形式：</p>
<pre><code class="language-go">    func functionName(parameter_list) (return_value_list) {
       …
    }

    // parameter_list 是参数列表
    // return_value_list 是返回值列表 下边有详细的讲解
</code></pre>
<h4 id="函数的特性">函数的特性</h4>
<ul>
<li>无需声明原型。 (1)</li>
<li>支持不定长变参。</li>
<li>支持多返回值。</li>
<li>支持命名返回参数。</li>
<li>支持匿名函数和闭包。</li>
<li>不支持 嵌套 (nested)、重载 (overload) 和 默认参数 (default parameter)</li>
</ul>
<pre><code class="language-go">    func test(x int, y int, s string) (r int, s string) { // 类型相同的相邻参数可合并
        n := x + y                                    // 多返回值必须用括号。
        return n, fmt.Sprintf(s, n)
    }

    /*
    关键字 func 用于定义一个函数
    test 是你函数的名字
    int类型的变量x, y 和string类型的变量s作为输入参数 参数用pass-by-value方式传递,意味着它们会被复制
    当两个或多个连续的函数命名参数是同一类型，则除了最后一个类型之外，其他都可以省略。

    在这个例子中：

        x int, y int

    被缩写为

        x, y int

    变量 r 和 s 是这个函数的 命名返回值。在 Go 的函数中可以返回多个值
    如果不想对返回的参数命名,只需要提供类型:(int, string)。 如果只有一个返回值,可以省略圆括号。如果函数是一个子过程,并且没有任何返回值,也可以省略这些内容
    函数体。注意 return 是一个语句,所以包裹参数的括号是可选的
    */
</code></pre>
<p>不定长参数其实就是slice，只能有一个，且必须是最后一个</p>
<pre><code class="language-go">    func test(s string, n ...int) string {
        var x int
    		for _, i := range n {
    			 x += i
    		}
    	return fmt.Sprintf(s, x)
    }
    // 使用slice 做变参时，必须展开
    func main() {
        s := []int{1, 2, 3}
        println(test(&quot;sum: %d&quot;, s...))
    }
</code></pre>
<blockquote>
<p>函数是第一类对象,可作为参数传递</p>
</blockquote>
<p>就像其他在 Go 中的其他东西一样,函数也是值而已。它们可以像下面这样赋值给变量:</p>
<pre><code class="language-go">    func main() {
        a := func() {                  // 定义一个匿名函数,并且赋值给 a
    		println(&quot;Hello&quot;)
    	}                              // 这里没有 ()
        a()                            // 调用函数
    }
</code></pre>
<p>如果使用 fmt.Printf(&quot;%T\n&quot;, a) 打印 a 的类型,输出结果是 func()</p>
<h4 id="返回值">返回值</h4>
<p>函数可以返回任意数量返回值</p>
<p>Go 函数的返回值或者结果参数可以指定一个名字,并且像原始的变量那样使用,就像 输入参数那样。如果对其命名,在函数开始时,它们会用其类型的零值初始化</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func swap(x, y string) (string, string) {
    	return y, x
    }

    func main() {
    	a, b := swap(&quot;hello&quot;, &quot;world&quot;)
    	fmt.Println(a, b)
    }

    /*
       函数可以返回任意数量返回值
       swap 函数返回了两个字符串
    */

</code></pre>
<p>Go 的返回值可以被命名，并且就像在函数体开头声明的变量那样使用。</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func split(sum int) (x, y int) { // 初始化返回值为 x,y
    	x = sum * 4 / 9              // x,y 已经初始化，可以直接赋值使用
    	y = sum - x
    	return                       // 隐式返回x,y(裸返回)
    }

    func main() {
    	fmt.Println(split(17))
    }

    /*
       在长的函数中这样的裸返回会影响代码的可读性。
    */
</code></pre>
<blockquote>
<p>有返回值的函数,必须有明确的return 语句,否则会引发编译错误</p>
</blockquote>
<h3 id="名词解释">名词解释</h3>
<p>函数原型</p>
<blockquote>
<p>函数声明由函数返回类型、函数名和形参列表组成。形参列表必须包括形参类型,但是不必对形参命名。这三个元素被称为函数原型,函数原型描述了函数的接口<br>
函数原型类似函数定义时的函数头，又称函数声明。为了能使函数在定义之前就能被调用，C++规定可以先说明函数原型，然后就可以调用函数。函数定义可放在程序后面。 由于函数原型是一条语句，因此函数原型必须以分号结束。函数原型由函数返回类型、函数名和参数表组成，它与函数定义的返回类型、函数名和参数表必须一致。函数原型必须包含参数的标识符（对函数声明而言是可选的）注意：函数原型与函数定义必须一致，否则会引起连接错误</p>
</blockquote>
<h3 id="参考链接">参考链接</h3>
<p><a href="https://tour.go-zh.org/basics/4">Go 指南</a><br>
<a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.4.md">The way to go -- 变量</a><br>
<a href="https://golang.org/doc/effective_go.html">Effective Go</a></p>
<p>变量和函数部分暂时这些，有更新还会补充。下一篇将会是控制流<br>
将会用到的代码为:</p>
<pre><code class="language-go">    package main

    import &quot;fmt&quot;

    func main() {
        result := 0
        for i := 0; i &lt;= 10; i++ {
          result = fibonacci(i)
          fmt.Printf(&quot;fibonacci(%d) is: %d\n&quot;, i, result)
       }
    }

    func fibonacci(n int) (res int) {
        if n &lt;= 1 {
            res = 1
    	   } else {
    	       res = fibonacci(n-1) + fibonacci(n-2)
    	   }
    	return
    }
</code></pre>
<hr>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[golang 介绍]]></title>
        <id>http://blog.gusibi.site/post/golang-description/</id>
        <link href="http://blog.gusibi.site/post/golang-description/">
        </link>
        <updated>2016-04-14T06:44:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-golang-是什么">1. Golang 是什么</h2>
<p>Go 官方说明：</p>
<blockquote>
<p>Go 编程语言是一个使得程序员更加有效率的开源项目。Go 是有表达力、简 洁、清晰和有效率的。它的并行机制使其很容易编写多核和网络应用,而新的类型系统允许构建有 性的模块化程序。Go 编译到机器码非常快 速,同时具有便利的垃圾回收和强大的运行时反射。它是快速的、静态类 型编译语言,但是感觉上是动态类型的,解释型语言</p>
</blockquote>
<p>HUGOMORE42</p>
<h2 id="2-为什么要开发这个语言">2. 为什么要开发这个语言</h2>
<h3 id="go-语言的发展目标">Go 语言的发展目标</h3>
<ul>
<li>Go 语言的主要目标是将静态语言的安全性和高效性与动态语言的易开发性进行有机结合</li>
<li>Go 语言是一门类型安全和内存安全的编程语言。虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算。</li>
<li>Go 语言的另一个目标是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机</li>
<li>Go 语言中另一个非常重要的特性就是它的构建速度（编译和链接到机器代码的速度），一般情况下构建一个程序的时间只需要数百毫秒到几秒。</li>
<li>Go 语言实现高效快速的垃圾回收（使用了一个简单的标记-清除算法）。</li>
</ul>
<h2 id="3-有什么特性用途">3. 有什么特性&amp;&amp;用途</h2>
<h3 id="语言的特性">语言的特性</h3>
<ul>
<li>清晰并且简洁</li>
</ul>
<blockquote>
<p>Go 努力保持小并且优美,你可以在短短几行代码里做许多事情;</p>
</blockquote>
<ul>
<li>并行</li>
</ul>
<blockquote>
<p>Go 语言从本质上（程序和结构方面）来实现并发编程。<br>
Go 让函数很容易成为非常轻量的线程。这些线程在 Go 中被叫做 goroutines</p>
</blockquote>
<ul>
<li>Channel</li>
</ul>
<blockquote>
<p>这些 goroutines 之间的通讯由 channel[18, 25] 完成</p>
</blockquote>
<ul>
<li>快速</li>
</ul>
<blockquote>
<p>编译很快,执行也很快。目标是跟 C 一样快。编译时间用秒计算;<br>
Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。当然，在部署到数量巨大的集群时，较大的文件体积也是比较头疼的问题。但总得来说，Go 的部署工作还是要比 Java 和 Python 轻松得多。因为 Go 不需要依赖任何其它文件，它只需要一个单独的静态文件，这样你也不会像使用其它语言一样在各种不同版本的依赖文件之间混淆。</p>
</blockquote>
<ul>
<li>安全</li>
</ul>
<blockquote>
<p>当转换一个类型到另一个类型的时候需要显式的转换并遵循严格的规则。Go 有 垃圾收集（使用了一个简单的标记-清除算法）,在 Go 中无须 free(),语言会处理这一切;<br>
值得注意的是，因为垃圾回收和自动内存分配的原因，Go 语言不适合用来开发对实时性要求很高的软件。</p>
</blockquote>
<ul>
<li>标准格式化</li>
</ul>
<blockquote>
<p>Go 程序可以被格式化为程序员希望的(几乎)任何形式,但是官方格式是存在的。标准也非常简单:gofmt 的输出就是官方认可的格式;</p>
</blockquote>
<ul>
<li>类型后置</li>
</ul>
<blockquote>
<p>类型在变量名的后面,像这样 var a int,来代替 C 中的 int a;</p>
</blockquote>
<ul>
<li>UTF-8</li>
</ul>
<blockquote>
<p>任何地方都是 UTF-8 的,包括字符串以及程序代码。你可以在代码中使用 Φ = Φ + 1;</p>
</blockquote>
<ul>
<li>开源</li>
</ul>
<blockquote>
<p>Go 的许可证是完全开源的,参阅 Go 发布的源码中的 LICENSE 文件;</p>
</blockquote>
<ul>
<li>尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 10.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。</li>
</ul>
<h3 id="有什么用途">有什么用途</h3>
<p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发特别适用。</p>
<p><a href="http://go-lang.cat-v.org/organizations-using-go">使用 Go 的组织</a></p>
<h2 id="4-有什么缺点">4. 有什么缺点</h2>
<ul>
<li>为了简化设计，不支持函数重载和操作符重载</li>
<li>为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换</li>
<li>Go 语言通过另一种途径实现面向对象设计来放弃类和类型的继承</li>
</ul>
<blockquote>
<p>举例说明用什么途径实现继承</p>
</blockquote>
<ul>
<li>尽管在接口的使用方面可以实现类似变体类型的功能，但本身不支持变体类型</li>
<li>不支持动态加载代码</li>
<li>不支持动态链接库</li>
<li>不支持泛型</li>
<li>通过 recover 和 panic 来替代异常机制</li>
</ul>
<blockquote>
<p>举个异常处理的例子</p>
</blockquote>
<ul>
<li>不支持断言</li>
<li>不支持静态变量</li>
</ul>
<h2 id="5-安装">5. 安装</h2>
<p>Go 的源代码有以下三个分支：</p>
<ul>
<li>Go release：最新稳定版，实际开发最佳选择</li>
<li>Go weekly：包含最近更新的版本，一般每周更新一次</li>
<li>Go tip：永远保持最新的版本，相当于内测版</li>
</ul>
<p>现在release 是1.6 可以按照自己的需求安装</p>
<h3 id="ubuntu-debian">ubuntu &amp; debian</h3>
<pre><code class="language-bash">sudo apt-get update &amp;&amp; apt-get install -y --no-install-recommends \
    g++ gcc libc6-dev make

GOLANG_VERSION=1.6
GOLANG_DOWNLOAD_URL=https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
GOLANG_DOWNLOAD_SHA256=5470eac05d273c74ff8bac7bef5bad0b5abbd1c4052efbdbc8db45332e836b0b

sudo curl -fsSL &quot;$GOLANG_DOWNLOAD_URL&quot; -o golang.tar.gz \
    &amp;&amp; echo &quot;$GOLANG_DOWNLOAD_SHA256  golang.tar.gz&quot; | sha256sum -c - \
    &amp;&amp; tar -C /usr/local -xzf golang.tar.gz \
    &amp;&amp; rm golang.tar.gz

## 也可以直接 sudo apt-get install go 版本可能不是1.6
</code></pre>
<h3 id="mac">Mac</h3>
<pre><code class="language-sh">brew install go
</code></pre>
<h3 id="windows">Windows</h3>
<p>点击下载页面直接下载安装吧 [下载链接] (http://golang.org/dl/)</p>
<h2 id="6-环境配置编辑器">6. 环境配置&amp;编辑器</h2>
<p>GOROOT GO语言安装的路径<br>
GOPATH 表示代码包所在的地址，可以设置多个<br>
PATH 可执行程序的路径，在命令行执行命令时，系统默认会在PATH中指定路径里寻找</p>
<pre><code class="language-sh"># 将以下环境变量加到 .bashrc 或者 .zshrc 文件
# Mac 配置
export GOROOT='/usr/local/Cellar/go/1.6/libexec'
export GOPATH=$HOME/Golang
export PATH=$PATH:$HOME/go/bin:$GOPATH/bin

# ubuntu 配置
export GOROOT='/usr/local/go'
export GOPATH=/go
export PATH=$PATH:$HOME/go/bin:$GOPATH/bin

</code></pre>
<h3 id="编辑器">编辑器</h3>
<ul>
<li>vim</li>
<li>atom</li>
<li>pyCharm</li>
</ul>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hugo 使用]]></title>
        <id>http://blog.gusibi.site/post/first/</id>
        <link href="http://blog.gusibi.site/post/first/">
        </link>
        <updated>2016-04-10T18:47:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="hello-hugo">Hello Hugo</h3>
<p>Hugo 常用命令 基本配置</p>
<h3 id="hugo-常用命令">hugo 常用命令</h3>
<pre><code class="language-shell">hugo help
hugo version
hugo new site sitename  # 新建一个站点
hugo new post/good-to-great.md  # 添加到content/post 目录
hugo server # 启动server
hugo server --buildDrafts # 预览草稿
hugo undraft content/post/good-to-great.md # 发布一篇文章
hugo server --theme=hugo_zen # 以zen 主题启动server
hugo --theme=hugo_zen 以zen # 主题生成草稿
</code></pre>
<p><em>语法高亮</em></p>
<p><a href="https://gohugo.io/extras/highlighting/">Syntax Highlighting</a></p>
<pre><code class="language-python"># print hello world
print &quot;hello world&quot;
</code></pre>
<h3 id="front-matter-example-in-toml">Front Matter Example (in TOML)</h3>
<p>[front-matter] (https://gohugo.io/content/front-matter/)</p>
<pre><code class="language-json">+++
title = &quot;Hugo: A fast and flexible static site generator&quot;
description = &quot;Hugo: A fast and flexible static site generator&quot;
tags = [ &quot;Development&quot;, &quot;Go&quot;, &quot;fast&quot;, &quot;Blogging&quot; ]
categories = [ &quot;Development&quot; ]
date = &quot;2012-04-06&quot;
series = [ &quot;Go Web Dev&quot; ]
slug = &quot;hugo-可以替代url&quot;
project_url = &quot;https://github.com/spf13/hugo&quot;
+++
</code></pre>
<h3 id="markdown-语法说明">Markdown 语法说明</h3>
<p>[Markdown 语法说明 (简体中文版)] (http://wowubuntu.com/markdown/)</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li>[Hugo Quickstart Guide] (https://gohugo.io/overview/quickstart/)</li>
<li>[Hugo静态网站生成器中文教程] (http://nanshu.wang/post/2015-01-31/)</li>
<li>[使用hugo搭建个人博客站点] (http://blog.coderzh.com/2015/08/29/hugo/)</li>
<li>[Hugo中文文档] (http://www.gohugo.org/)</li>
</ul>
<p><strong>最后，感谢女朋友支持和包容，比❤️</strong></p>
<p>也可以在公号输入以下关键字获取历史文章：<code>公号&amp;小程序</code> | <code>设计模式</code> | <code>并发&amp;协程</code></p>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/zHqNew3j1brVxSoTkjOerslhnB_ZpchcOXf60lFUxiZ5YtnCHs5HrJNOP14go6Ea" alt="扫码关注" loading="lazy"></figure>
<hr>
<h3 id="内推时间">内推时间</h3>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于我-顾斯比]]></title>
        <id>http://blog.gusibi.site/post/about/</id>
        <link href="http://blog.gusibi.site/post/about/">
        </link>
        <updated>2016-04-05T04:29:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>程序员 后端</p>
</blockquote>
<h3 id="公号">公号</h3>
<blockquote>
<p>公号：四月（hiiapril）<br>
<img src="http://media.gusibi.mobi/WDz3v4cU4LQq1oyKX-fYK1LxIThzZ1hK931ZaPRC8CdcB0t2oTYJciMDuAws70FY" alt="hiiiapril" loading="lazy"></p>
</blockquote>
<h3 id="社交帐号">社交帐号</h3>
<ul>
<li><a href="https://juejin.im/user/592291eb570c350069bad8f1">掘金</a></li>
<li><a href="https://segmentfault.com/u/goodspeed">segmentfault</a></li>
<li><a href="https://www.github.com/gusibi">github</a></li>
<li><a href="https://twitter.com/amazing_gs">twitter</a></li>
</ul>
<h3 id="作品">作品</h3>
<h4 id="小程序">小程序</h4>
<blockquote>
<p>蒙太奇拼图</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://media.gusibi.mobi/P60XX2Lf1n8Mj6lSoj2YKlLvNUrd8BN_1e4AQdJ7MhxuTJHDZbIYE7s2OjFHw4HF" alt="" loading="lazy"></figure>
<blockquote>
<p>定投账本</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://media.gusibi.mobi/0iu2yg9c_HC9cVA67EG5mLdqqNVDwvlNgLBFX__j8hM2QHT1Su-PdjeuvRnf3_Cu" alt="" loading="lazy"></figure>
<h4 id="github-项目">Github 项目</h4>
<ul>
<li><a href="https://github.com/gusibi/python-weixin">python-weixin-sdk</a></li>
<li><a href="https://github.com/gusibi/momo">微信聊天机器人</a></li>
<li><a href="https://github.com/gusibi/dynamodb-py">Amazon DynamoDB ORM By Python</a></li>
</ul>
<h4 id="内推时间">内推时间</h4>
<figure data-type="image" tabindex="3"><img src="http://media.gusibi.mobi/5FzreeM6IYt55JSQMAV63INPIvuPik75FlJAbP1e7Zdlg1WPe6BrHI-q0jkXskGf" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>